{
  "language": "ts",
  "name": "HumanEval_161_solve",
  "results": [
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('12345'));\nconsole.log(solve('123456789'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('12345678901'));\nconsole.log(solve('123456789012'));\nconsole.log(solve('1234567890123'));\nconsole.log(solve('12345678901234'));\nconsole.log(solve('123456789012345'));\nconsole.log(solve('1234567890123456'));\nconsole.log(solve('12345678901234567'));\nconsole.log(solve('123456789012345678'));\nconsole.log(solve('1234567890123456789'));\nconsole.log(solve('12345678901234567890'));\nconsole.log(solve('123456789012345678901'));\nconsole.log(solve('1234567890123456789012'));\nconsole.log(solve('12345678901234567890123'));\nconsole.log(solve('123456789012345678901234'));\nconsole.log(solve('1234567890123456789012345'));\nconsole.log(solve('12345678901234567890123456'));\nconsole.log(solve('1234567890123456789012345\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp406n3xyl.ts(43,45): error TS1002: Unterminated string literal.\n../../../../tmp/tmp406n3xyl.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmp406n3xyl.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newString = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            newString += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            newString += s[i].toUpperCase();\n        } else {\n            newString += s[i];\n        }\n    }\n    return newString;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cOdEwArs'));\nconsole.log(solve('codeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-='));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,./<>?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,./<>?`~'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,./<>?`~\\''));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,./<>?`~\\'\\\"'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,./<>?`~\\'\\\"\\\\'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,./<>?`~\\'\\\"\\\\ '));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,./<>?`\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6h3ly3v0.ts(35,59): error TS1002: Unterminated string literal.\n../../../../tmp/tmp6h3ly3v0.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp6h3ly3v0.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('12345'));\nconsole.log(solve('abcdef'));\nconsole.log(solve('ABCDEF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeFg'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH1'));\nconsole.log(solve('aBcDeFgH1i'));\nconsole.log(solve('aBcDeFgH1iJ'));\nconsole.log(solve('aBcDeFgH1iJk'));\nconsole.log(solve('aBcDeFgH1iJkL'));\nconsole.log(solve('aBcDeFgH1iJkLm'));\nconsole.log(solve('aBcDeFgH1iJkLmN'));\nconsole.log(solve('aBcDeFgH1iJkLmNo'));\nconsole.log(solve('aBcDeFgH1iJkLmNoP'));\nconsole.log(solve('aBcDeFgH1iJkLmNoPq'));\nconsole.log(solve('aBcDeFgH1iJkLmNoPqR'));\nconsole.log(solve('aBcDeFgH1iJkLmNoPqRs'));\nconsole.log(solve('aBcDeFgH1iJkL\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppvp20xpd.ts(40,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmppvp20xpd.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmppvp20xpd.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptytt0z__.ts(53,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmptytt0z__.ts(54,1): error TS1005: ',' expected.\n../../../../tmp/tmptytt0z__.ts(54,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('a1b2c3d4'));\nconsole.log(solve('a1B2c3D4'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A7B8C9D0E1F2G3H4I5J6K7L8M9N0O1P2Q3R4S5T6U7V8W9X0Y1Z2'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A7B8C9D0E1F2G3H4I5J6K7L8M\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpks8_iw87.ts(31,97): error TS1002: Unterminated string literal.\n../../../../tmp/tmpks8_iw87.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpks8_iw87.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    const letters = s.split('').filter(char => char.match(/[a-z]/i));\n    if (letters.length === 0) {\n        return s.split('').reverse().join('');\n    }\n    const newString = s.split('').map(char => {\n        if (char.match(/[a-z]/i)) {\n            if (char === char.toUpperCase()) {\n                return char.toLowerCase();\n            } else {\n                return char.toUpperCase();\n            }\n        } else {\n            return char;\n        }\n    });\n    return newString.join('');\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcd'));\nconsole.log(solve('123'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123abcABC'));\nconsole.log(solve('123abcd'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabcd'));\nconsole.log(solve('abc123'));\nconsole.log(solve('abc123ABC'));\nconsole.log(solve('abc123ABCabc'));\nconsole.log(solve('abc123ABCabcd'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('ABC123abc'));\nconsole.log(solve('ABC123abcABC'));\nconsole.log(solve('ABC123abcABCabc'));\nconsole.log(solve('ABC123abcABCabcd'));\nconsole.log(solve('ABC123ABC'));\nconsole.log(solve('ABC123ABCabc'));\nconsole.log(solve('ABC123ABCabcABC'));\nconsole.log(solve('ABC123ABCabcABCabc'));\nconsole.log(solve('ABC123ABCabcABCabcd'));\nconsole.log(solve('ABC123ABCABC'));\nconsole.log(solve('ABC123ABCABCabc')\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsvsqmddv.ts(52,1): error TS1005: ',' expected.\n../../../../tmp/tmpsvsqmddv.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#'));\nconsole.log(solve('ABC123!@#'));\nconsole.log(solve('ABC123!@#abc'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-='));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw_t_uq86.ts(35,93): error TS1002: Unterminated string literal.\n../../../../tmp/tmpw_t_uq86.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpw_t_uq86.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('12345'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890a'));\nconsole.log(solve('1234567890A'));\nconsole.log(solve('1234567890aA'));\nconsole.log(solve('1234567890aA1'));\nconsole.log(solve('1234567890aA1B'));\nconsole.log(solve('1234567890aA1B2'));\nconsole.log(solve('1234567890aA1B2C'));\nconsole.log(solve('1234567890aA1B2C3'));\nconsole.log(solve('1234567890aA1B2C3D'));\nconsole.log(solve('1234567890aA1B2C3D4'));\nconsole.log(solve('1234567890aA1B2C3D4E'));\nconsole.log(solve('1234567890aA1B2C3D4E5'));\nconsole.log(solve('1234567890aA1B2C3D4E5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzp34c_l1.ts(42,41): error TS1002: Unterminated string literal.\n../../../../tmp/tmpzp34c_l1.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpzp34c_l1.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp7y1li_up.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7y1li_up.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello'));\nconsole.log(solve('123'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.toUpperCase()'));\nconsole.log(solve('String.prototype.toLowerCase()'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpu26gukvr.js:32:12)\n    at Object.<anonymous> (/tmp/tmpu26gukvr.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO\n123\n1A2B3C4D5E\nsTRING.PROTOTYPE.TOuPPERcASE()\nsTRING.PROTOTYPE.TOlOWERcASE()\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('codeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-='));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890-=[]{}|;:\",./<>?`~!@#$%^&*()_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890-=[]{}|;:\",./<>?`~!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890'));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpvexrjybh.js:40:12)\n    at Object.<anonymous> (/tmp/tmpvexrjybh.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cODEWARS\nCodewars\nCODEwARS\ncODEwARS\ncODEwARS123\ncODEwARS123!\ncODEwARS123!@#$%^&*()_+\ncODEwARS123!@#$%^&*()_+-=\ncODEwARS123!@#$%^&*()_+-=[]{}|;:\",./<>?\ncODEwARS123!@#$%^&*()_+-=[]{}|;:\",./<>?`~\ncODEwARS123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890\ncODEwARS123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890-=[]{}|;:\",./<>?`~!@#$%^&*()_+\ncODEwARS123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890-=[]{}|;:\",./<>?`~!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('ABC123abc'));\nconsole.log(solve('ABC123abcDEF'));\nconsole.log(solve('ABC123abcDEF456'));\nconsole.log(solve('ABC123abcDEF456GHI789'));\nconsole.log(solve('ABC123abcDEF456GHI789JKL012'));\nconsole.log(solve('ABC123abcDEF456GHI789JKL012MNO345'));\nconsole.log(solve('ABC123abcDEF456GHI789JKL012MNO345PQR678'));\nconsole.log(solve('ABC123abcDEF456GHI789JKL012MNO345PQR678STU901'));\nconsole.log(solve('ABC123abcDEF456GHI789JKL012MNO345PQR678STU901VWX234'));\nconsole.log(solve('ABC123abcDEF456GHI789JKL012MNO345PQR678STU901VWX234YZ567'));\nconsole.log(solve('ABC123abcDEF456GHI789JKL012MNO345PQR678STU901VWX234YZ56789'));\nconsole.log(solve('ABC123abcDEF456GHI789JKL012MNO345PQR678STU901VWX234YZ56789012'));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1lucyo50.ts(39,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('codewars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('c'));\nconsole.log(solve('1'));\nconsole.log(solve('1a'));\nconsole.log(solve('1A'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfg4ed8y2.ts(41,38): error TS1002: Unterminated string literal.\n../../../../tmp/tmpfg4ed8y2.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpfg4ed8y2.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabcABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabcABCabcABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabcABCabcABCabcABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabcABCabcABCabcABCabcABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()ABCabcABCabcABCabc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpafgvwvlo.ts(37,57): error TS1002: Unterminated string literal.\n../../../../tmp/tmpafgvwvlo.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpafgvwvlo.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpy3_y_rjh.js:29:12)\n    at Object.<anonymous> (/tmp/tmpy3_y_rjh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('12345'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpeuuaokag.js:30:12)\n    at Object.<anonymous> (/tmp/tmpeuuaokag.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n12345\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp5vmidcq1.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5vmidcq1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nAbC\nAbC123\nAbC123!@#$%^&*()_+\n!@#$%^&*()_+\nAbC123!@#$%^&*()_+\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cOdEwArs'));\nconsole.log(solve('abracadabra'));\nconsole.log(solve('52a3b'));\nconsole.log(solve('z'));\nconsole.log(solve('Z'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.toAlternatingCase'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello Codewarrior'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('HELLO CODEWARRIOR!'));\nconsole.log(solve('hello codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior!'));\nconsole.log(solve('Hello Codewarrior\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4wzojm5e.ts(46,37): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4wzojm5e.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp4wzojm5e.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp7y1li_up.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7y1li_up.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp7y1li_up.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7y1li_up.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpldo8gsx6.js:31:12)\n    at Object.<anonymous> (/tmp/tmpldo8gsx6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpo586it0c.js:31:12)\n    at Object.<anonymous> (/tmp/tmpo586it0c.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('AbC'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBC'));\nconsole.log(solve('123456789'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9vnlifom.js:45:12)\n    at Object.<anonymous> (/tmp/tmp9vnlifom.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\naBc\nAbC\nAbc\n123456789\n1A2B3C4D5E6F7G8H9I\n1a2b3c4d5e6f7g8h9i\n1A2B3C4D5E6F7G8H9I\n1a2b3c4d5e6f7g8h9i\n1A2B3C4D5E6F7G8H9I\n1a2b3c4d5e6f7g8h9i\n1A2B3C4D5E6F7G8H9I\n1a2b3c4d5e6f7g8h9i\n1A2B3C4D5E6F7G8H9I\n1a2b3c4d5e6f7g8h9i\n1A2B3C4D5E6F7G8H9I\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('AbC'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABC'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCxyz'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpaxrq82wn.js:35:12)\n    at Object.<anonymous> (/tmp/tmpaxrq82wn.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nAbC\naBc\nAbC123\nAbC123!@#$%^&*()_+\nAbC123!@#$%^&*()_+abc\nAbC123!@#$%^&*()_+abcXYZ\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('ABC123abc'));\nconsole.log(solve('ABC123abc456'));\nconsole.log(solve('ABC123abc456DEF'));\nconsole.log(solve('ABC123abc456DEF789'));\nconsole.log(solve('ABC123abc456DEF789ghi'));\nconsole.log(solve('ABC123abc456DEF789ghi000'));\nconsole.log(solve('ABC123abc456DEF789ghi000JKL'));\nconsole.log(solve('ABC123abc456DEF789ghi000JKLmno'));\nconsole.log(solve('ABC123abc456DEF789ghi000JKLmnoPQR'));\nconsole.log(solve('ABC123abc456DEF789ghi000JKLmnoPQRstu'));\nconsole.log(solve('ABC123abc456DEF789ghi000JKLmnoPQRstuVWX'));\nconsole.log(solve('ABC123abc456DEF789ghi000JKLmnoPQRstuVWXYZ'));\nconsole.log(solve('ABC123abc456DEF789ghi000JKLmnoPQRstuVWXYZ1'));\nconsole.log(solve('ABC123abc456DEF789ghi000JKLmnoPQRstuVWXYZ1@')\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgc6sqx2b.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpgc6sqx2b.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp80xjhyyf.js:31:12)\n    at Object.<anonymous> (/tmp/tmp80xjhyyf.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334521
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('!@#$%^&*()'));\nconsole.log(solve('abcDEF'));\nconsole.log(solve('ABCdef'));\nconsole.log(solve('AbCdEf'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('abc!@#'));\nconsole.log(solve('ABC!@#'));\nconsole.log(solve('abc!@#ABC'));\nconsole.log(solve('ABC!@#abc'));\nconsole.log(solve('abc!@#ABC123'));\nconsole.log(solve('ABC!@#abc123'));\nconsole.log(solve('abc!@#ABC123!@#'));\nconsole.log(solve('ABC!@#abc123!@#'));\nconsole.log(solve('abc!@#ABC123!@#abc'));\nconsole.log(solve('ABC!@#abc123!@#ABC'));\nconsole.log(solve('abc!@#ABC123!@#abcABC'));\nconsole.log(solve('ABC!@#abc123!@#ABCabc'));\nconsole.log(solve('abc!@#ABC123!@#abcABC!@#'));\nconsole.log(solve('ABC!@#abc123!@#ABCabc!@#'));\nconsole.log(solve('abc!@#ABC123!@#abcABC!@#abc'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp1ad19w6r.js:52:12)\n    at Object.<anonymous> (/tmp/tmp1ad19w6r.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nABC123\nabc123\n!@#$%^&*()\nABCdef\nabcDEF\naBcDeF\n123ABC\n123abc\nABC!@#\nabc!@#\nABC!@#abc\nabc!@#ABC\nABC!@#abc123\nabc!@#ABC123\nABC!@#abc123!@#\nabc!@#ABC123!@#\nABC!@#abc123!@#ABC\nabc!@#ABC123!@#abc\nABC!@#abc123!@#ABCabc\nabc!@#ABC123!@#abcABC\nABC!@#abc123!@#ABCabc!@#\nabc!@#ABC123!@#abcABC!@#\nABC!@#abc123!@#ABCabc!@#ABC\n",
      "timestamp": 1660334521
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpldo8gsx6.js:31:12)\n    at Object.<anonymous> (/tmp/tmpldo8gsx6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('Abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(s\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf6e9p59r.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpf6e9p59r.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334521
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('codewars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-='));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('Code\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsjf8_sjw.ts(37,24): error TS1002: Unterminated string literal.\n../../../../tmp/tmpsjf8_sjw.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpsjf8_sjw.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334521
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBC'));\nconsole.log(solve('AbC'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBcDE'));\nconsole.log(solve('AbCdE'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeFgHiJkL'));\nconsole.log(solve('aBcDeFgHiJkL1234567890'));\nconsole.log(solve('aBcDeFgHiJkL1234567890!@#$%^&*()_+'));\nconsole.log(solve('aBcDeFgHiJkL1234567890!@#$%^&*()_+-='));\nconsole.log(solve('aBcDeFgHiJkL1234567890!@#$%^&*()_+-=[]{}|;:,.<>/?`~'));\nconsole.log(solve('aBcDeFgHiJkL1234567890!@#$%^&*()_+-=[]{}|;:,.<>/?`~\\''));\nconsole.log(solve('aBcDeFgHiJkL1234567890!@#$%^&*()_+-=[]{}|;:,.<>/?`~\\'\\\"'));\nconsole.log(solve('a\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_kwjq8x0.ts(38,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_kwjq8x0.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmp_kwjq8x0.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334521
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('1A2B3C'));\nconsole.log(solve('1a2b3c'));\nconsole.log(solve('AbCdEf'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH1'));\nconsole.log(solve('aBcDeFgH1jKlMnOp'));\nconsole.log(solve('aBcDeFgH1jKlMnOpQrStUvWxYz'));\nconsole.log(solve('aBcDeFgH1jKlMnOpQrStUvWxYz0'));\nconsole.log(solve('aBcDeFgH1jKlMnOpQrStUvWxYz0!@#$%^&*()_+'));\nconsole.log(solve('aBcDeFgH1jKlMnOpQrStUvWxYz0!@#$%^&*()_+-='));\nconsole.log(solve('aBcDeFgH1jKlMnOpQrStUvWxYz0!@#$%^&*()_+-=[]{}'));\nconsole.log(solve('aBcDeFgH1jKlMnOpQrStUvWxYz0!@#$%\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf8053_o0.ts(36,52): error TS1002: Unterminated string literal.\n../../../../tmp/tmpf8053_o0.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpf8053_o0.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334521
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('123456789'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-='));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+-=[]{}|;:<>,.?/'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfivjkc2v.ts(31,86): error TS1002: Unterminated string literal.\n../../../../tmp/tmpfivjkc2v.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpfivjkc2v.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334521
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('123456789'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpovccaopu.js:30:12)\n    at Object.<anonymous> (/tmp/tmpovccaopu.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n123456789\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  const letters = s.split('').filter(char => char.match(/[a-z]/i));\n  const nonLetters = s.split('').filter(char => !char.match(/[a-z]/i));\n  const reversed = letters.map(char => {\n    if (char === char.toUpperCase()) {\n      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n    }\n  });\n  return reversed.length > 0 ? reversed.concat(nonLetters).join('') : s.split('').reverse().join('');\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('12345'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Ac#@'\n\nshould loosely deep-equal\n\n'#A@c'\n    at test (/tmp/tmpwetvjbhy.js:31:12)\n    at Object.<anonymous> (/tmp/tmpwetvjbhy.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Ac#@',\n  expected: '#A@c',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABCD\nabcd\nAbCdEf\nABCDE12345\n54321\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpvgpdxo9k.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvgpdxo9k.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n12345\n12345\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('12345'));\nconsole.log(solve('abcdef'));\nconsole.log(solve('ABCDEF'));\nconsole.log(solve('abcdefABCDEF'));\nconsole.log(solve('abcdefABCDEFG'));\nconsole.log(solve('abcdefABCDEFG12345'));\nconsole.log(solve('abcdefABCDEFG1234567890'));\nconsole.log(solve('abcdefABCDEFG1234567890!@#$%^&*()'));\nconsole.log(solve('abcdefABCDEFG1234567890!@#$%^&*()_+'));\nconsole.log(solve('abcdefABCDEFG1234567890!@#$%^&*()_+-='));\nconsole.log(solve('abcdefABCDEFG1234567890!@#$%^&*()_+-=[]{}|;:<>,./?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpdrwx7l6m.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdrwx7l6m.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "A1B2C3\n12345\nABCDEF\nabcdef\nABCDEFabcdef\nABCDEFabcdefg\nABCDEFabcdefg12345\nABCDEFabcdefg1234567890\nABCDEFabcdefg1234567890!@#$%^&*()\nABCDEFabcdefg1234567890!@#$%^&*()_+\nABCDEFabcdefg1234567890!@#$%^&*()_+-=\nABCDEFabcdefg1234567890!@#$%^&*()_+-=[]{}|;:<>,./?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpy3_y_rjh.js:29:12)\n    at Object.<anonymous> (/tmp/tmpy3_y_rjh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        let code: number = s.charCodeAt(i);\n        if (code >= 65 && code <= 90) {\n            result += String.fromCharCode(code + 32);\n        } else if (code >= 97 && code <= 122) {\n            result += String.fromCharCode(code - 32);\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('!@#$%^&*()_+'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpkk9qi7my.js:34:12)\n    at Object.<anonymous> (/tmp/tmpkk9qi7my.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nAbC\nAbC123\nAbC123!@#$%^&*()_+\n!@#$%^&*()_+\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('12345'));\nconsole.log(solve('123456789'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('12345678901'));\nconsole.log(solve('123456789012'));\nconsole.log(solve('1234567890123'));\nconsole.log(solve('12345678901234'));\nconsole.log(solve('123456789012345'));\nconsole.log(solve('1234567890123456'));\nconsole.log(solve('12345678901234567'));\nconsole.log(solve('123456789012345678'));\nconsole.log(solve('1234567890123456789'));\nconsole.log(solve('12345678901234567890'));\nconsole.log(solve('123456789012345678901'));\nconsole.log(solve('1234567890123456789012'));\nconsole.log(solve('12345678901234567890123'));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp11vl5qnq.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334521
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5v7hawen.ts(25,356): error TS1002: Unterminated string literal.\n../../../../tmp/tmp5v7hawen.ts(26,1): error TS1005: ',' expected.\n../../../../tmp/tmp5v7hawen.ts(26,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('sTring'));\nconsole.log(solve('String'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.12345'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpdxz2p7wf.js:31:12)\n    at Object.<anonymous> (/tmp/tmpdxz2p7wf.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "StRING\nsTRING\n12345\n1A2B3C4D5E\nsTRING.12345\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+'));\nconsole.log(solve\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuhtn645s.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpuhtn645s.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123!@\u20ac'));\nconsole.log(solve('AAbbCCDD'));\nconsole.log(solve('!'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpeal1rkro.js:32:12)\n    at Object.<anonymous> (/tmp/tmpeal1rkro.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nABCabc\nABCabc123\nABCabc123!@\u20ac\naaBBccdd\n!\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char.match(/[a-z]/i)) {\n            result += char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz1234567890'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9nuott0s.js:39:12)\n    at Object.<anonymous> (/tmp/tmp9nuott0s.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nAbC\nAbC123\nAbC123!@#$%^&*()_+\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz1234567890\nABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpy3_y_rjh.js:29:12)\n    at Object.<anonymous> (/tmp/tmpy3_y_rjh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('ABCabc'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123abc'));\nconsole.log(solve('ABC123abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123ABC'));\nconsole.log(solve('abcABC123ABCabc'));\nconsole.log(solve('abcABC123ABCabcABC'));\nconsole.log(solve('abcABC123ABCabcABC123'));\nconsole.log(solve('abcABC123ABCabcABC123abc'));\nconsole.log(solve('abcABC123ABCabcABC123abcABC'));\nconsole.log(solve('abcABC123ABCabcABC123abcABCABC'));\nconsole.log(solve('abcABC123ABCabcABC123abcABCABC123'));\nconsole.log(solve('abcABC123ABCabcABC123abcABCABC123abc'));\nconsole.log(solve('abcABC123ABCabcABC123abcABCABC123abcABC'));\nconsole.log(solve('abcABC123ABCabcABC123abcABCABC123abcABC123'));\nconsole.log(solve('abcABC123ABCabcABC123abcABCABC123abcABC123abc'));\nconsole.log(solve('abcABC123ABCabcABC123abcABCABC123abcABC123abcABC'));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp0r5w5h31.js:51:12)\n    at Object.<anonymous> (/tmp/tmp0r5w5h31.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nABCabc\n123\n123abc\n123ABC\nabc123\nabcABC\nABC123\nabc123ABC\nabc123ABCabc\nABCabc123\nABCabc123abc\nABCabc123abcABC\nABCabc123abcABCabc\nABCabc123abcABCabc123\nABCabc123abcABCabc123ABC\nABCabc123abcABCabc123ABCabc\nABCabc123abcABCabc123ABCabcabc\nABCabc123abcABCabc123ABCabcabc123\nABCabc123abcABCabc123ABCabcabc123ABC\nABCabc123abcABCabc123ABCabcabc123ABCabc\nABCabc123abcABCabc123ABCabcabc123ABCabc123\nABCabc123abcABCabc123ABCabcabc123ABCabc123ABC\nABCabc123abcABCabc123ABCabcabc123ABCabc123ABCabc\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('AbC'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp6itsp__.ts(40,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpp6itsp__.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpp6itsp__.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp_eu72m0a.js:57:12)\n    at Object.<anonymous> (/tmp/tmp_eu72m0a.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nABCabc\n123\n123abc\n123ABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp7y1li_up.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7y1li_up.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('heLLo'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpkva_ug2d.js:32:12)\n    at Object.<anonymous> (/tmp/tmpkva_ug2d.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\nHEllO\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpviouhlgv.js:55:12)\n    at Object.<anonymous> (/tmp/tmpviouhlgv.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cODEWARS\nCodewaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\nCODEwaRS\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123!@\u20ac'));\nconsole.log(solve('AAaa'));\nconsole.log(solve('!'));\nconsole.log(solve('!@\u20ac'));\nconsole.log(solve('!@\u20aca'));\nconsole.log(solve('!@\u20acaA'));\nconsole.log(solve('!@\u20acaA1'));\nconsole.log(solve('!@\u20acaA1b'));\nconsole.log(solve('!@\u20acaA1bB'));\nconsole.log(solve('!@\u20acaA1bB2'));\nconsole.log(solve('!@\u20acaA1bB2c'));\nconsole.log(solve('!@\u20acaA1bB2cC'));\nconsole.log(solve('!@\u20acaA1bB2cC3'));\nconsole.log(solve('!@\u20acaA1bB2cC3d'));\nconsole.log(solve('!@\u20acaA1bB2cC3dD'));\nconsole.log(solve('!@\u20acaA1bB2cC3dD4'));\nconsole.log(solve('!@\u20acaA1bB2cC3dD4e'));\nconsole.log(solve('!@\u20acaA1bB2cC3dD4eE'));\nconsole.log(solve('!@\u20acaA1bB2cC3d\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa0gzxxnb.ts(42,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmpa0gzxxnb.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpa0gzxxnb.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334524
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg'));\nconsole.log(solve('123'));\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('AbCd'));\nconsole.log(solve('aBcDeFgH123'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('123abc'));\nconsole.log(solve('abc123'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('ABCabc'));\nconsole.log(solve('ABCabc123'));\nconsole.log(solve('ABCabc'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz'));\nconsole.log(solve('123AbCdEfGhIjKlMnOpQrStUvWxYz'));\nconsole.log(solve('AbCdEfGh\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp76xxgg_q.ts(44,28): error TS1002: Unterminated string literal.\n../../../../tmp/tmp76xxgg_q.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp76xxgg_q.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABC'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCabc'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCabc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCabc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCabc123!@#$%^&*()_+ABC'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCabc123!@#$%^&*()_+ABCabc'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCabc123!@#$%^&*()_+ABCabc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCabc123!@#$%^&*()_+ABCabc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCabc123!@#$\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3b01bcjh.ts(35,51): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3b01bcjh.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp3b01bcjh.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc!@#'));\nconsole.log(solve('123ABCabc!@#ABC'));\nconsole.log(solve('123ABCabc!@#ABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxdqc5em2.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpxdqc5em2.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123!@\u20ac'));\nconsole.log(solve('AAaa'));\nconsole.log(solve('!'));\nconsole.log(solve('!@\u20ac'));\nconsole.log(solve('123'));\nconsole.log(solve('ABC'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('ABC123!@\u20ac'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('0123456789'));\nconsole.log(solve('!@#$%^&*()_-+='));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_-+='));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmps7oectcw.js:42:12)\n    at Object.<anonymous> (/tmp/tmps7oectcw.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nABCabc\nABCabc123\nABCabc123!@\u20ac\naaAA\n!\n!@\u20ac\n123\nabc\nabc123\nabc123!@\u20ac\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nabcdefghijklmnopqrstuvwxyz\n0123456789\n!@#$%^&*()_-+=\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('hello'));\nconsole.log(solve('HELLO'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpuv1rtu86.js:31:12)\n    at Object.<anonymous> (/tmp/tmpuv1rtu86.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HELLO\nhello\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBC'));\nconsole.log(solve('AbC'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('AbC123'));\nconsole.log(solve('123aBc'));\nconsole.log(solve('123AbC'));\nconsole.log(solve('!@#$%^&*()_+'));\nconsole.log(solve('!@#$%^&*()_+ABC'));\nconsole.log(solve('!@#$%^&*()_+abc'));\nconsole.log(solve('!@#$%^&*()_+ABCabc'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123!@#$%^&*()_+'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123!@#$%^&*()_+ABCabc'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123!@#$%^&*()_+ABCabc123'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123!@#$%^&*()_+ABCabc123!@#$%^&*()_+'));\nconsole.log(solve('!@#$%^\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6udheroa.ts(40,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmp6udheroa.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmp6udheroa.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I10J11K12L13M14N15O16P17Q18R19S20T21U22V23W24X25Y26Z'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v23w24x25y26z'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I10J11K12L13M14N15O16P17Q18R19S20T21U22V23W24X25Y26Z1a2b3c4d5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v23w24x25y26z'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I10J11K12L13M14N15O16P17Q18R19S20T21U22V23W24X25Y26Z1a2b3c4d5e6f7g8h\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptsiplpef.ts(29,105): error TS1002: Unterminated string literal.\n../../../../tmp/tmptsiplpef.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmptsiplpef.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('HELLO'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmplbnrxsox.js:32:12)\n    at Object.<anonymous> (/tmp/tmplbnrxsox.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\nhello\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334526
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0A'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0A1'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0A1b'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0A1b2'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0A1b2c'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0A1b2c3'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0A1b2c3d'));\nconsole.log(solve('a1b2c3d4e5f6g7h8i9j0A1b2c3d4'));\nconsole.log(solve('a1b2c3d4e5f6g\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_mcesc_z.ts(35,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_mcesc_z.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp_mcesc_z.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('hello world'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpj7sk9oir.js:32:12)\n    at Object.<anonymous> (/tmp/tmpj7sk9oir.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\nHELLO WORLD\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334526
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cOdEwArs'));\nconsole.log(solve('abracadabra'));\nconsole.log(solve('ABRACADABRA'));\nconsole.log(solve('52a3'));\nconsole.log(solve('12345'));\nconsole.log(solve('#codewars'));\nconsole.log(solve('#Codewars'));\nconsole.log(solve('#CODEWARS'));\nconsole.log(solve('#coDEwArs'));\nconsole.log(solve('#cOdEwArs'));\nconsole.log(solve('#abracadabra'));\nconsole.log(solve('#ABRACADABRA'));\nconsole.log(solve('#52a3'));\nconsole.log(solve('#12345'));\nconsole.log(solve('#'));\nconsole.log(solve('#1'));\nconsole.log(solve('#a'));\nconsole.log(solve('#A'));\nconsole.log(solve('#@'));\nconsole.log(solve('#@1'));\nconsole.log(solve('#@a'));\nconsole.log(solve('#@A'));\nconsole.log(solve('#@$'));\nconsole.log(solve('#@$1'));\nconsole.log(solve('#@$a'));\nconsole.log(solve('#@$A'));\nconsole.log(solve('#@$%'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9du6x9i1.js:55:12)\n    at Object.<anonymous> (/tmp/tmp9du6x9i1.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cODEWARS\nCoDeWaRS\nABRACADABRA\nabracadabra\n52A3\n12345\n#CODEWARS\n#cODEWARS\n#codewars\n#COdeWaRS\n#CoDeWaRS\n#ABRACADABRA\n#abracadabra\n#52A3\n#12345\n#\n#1\n#A\n#a\n#@\n#@1\n#@A\n#@a\n#@$\n#@$1\n#@$A\n#@$a\n#@$%\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmptmb9frao.js:49:12)\n    at Object.<anonymous> (/tmp/tmptmb9frao.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABCD\nabcd\n1234\n1A2B3C4D\n1a2b3c4d\n1a2B3C4d\n1A2b3C4d\n1A2B3C4D\n1a2b3c4d\n1a2B3C4d\n1A2b3C4d\n1A2B3C4D\n1a2b3c4d\n1a2B3C4d\n1A2b3C4d\n1A2B3C4D\n1a2b3c4d\n1a2B3C4d\n1A2b3C4d\n1A2B3C4D\n1a2b3c4d\n1a2B3C4d\n1A2b3C4d\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('hello world'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.charCodeAt()'));\nconsole.log(solve('String.prototype.charAt()'));\nconsole.log(solve('String.prototype.replace()'));\nconsole.log(solve('String.prototype.indexOf()'));\nconsole.log(solve('String.prototype.substr()'));\nconsole.log(solve('String.prototype.slice()'));\nconsole.log(solve('String.prototype.split()'));\nconsole.log(solve('String.prototype.toLowerCase()'));\nconsole.log(solve('String.prototype.toUpperCase()'));\nconsole.log(solve('String.prototype.concat()'));\nconsole.log(solve('String.prototype.trim()'));\nconsole.log(solve('String.prototype.length'));\nconsole.log(solve('String.fromCharCode()'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('The quick brown fox jumps over the lazy dog.'));\nconsole.log(solve('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'));\nconsole.log(solve('Pack my box with five dozen liquor jugs.'));\nconsole.log(s\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn5wwgab9.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmpn5wwgab9.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('co\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx5p1xk76.ts(47,22): error TS1002: Unterminated string literal.\n../../../../tmp/tmpx5p1xk76.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpx5p1xk76.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(s\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3021dexx.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp3021dexx.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('I loVe JS'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpjdcj90kg.js:30:12)\n    at Object.<anonymous> (/tmp/tmpjdcj90kg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\ni LOvE js\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334526
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    const letters: string[] = s.split('');\n    const reversed: string[] = [];\n\n    letters.forEach((letter: string) => {\n        if (letter === letter.toUpperCase()) {\n            reversed.push(letter.toLowerCase());\n        } else if (letter === letter.toLowerCase()) {\n            reversed.push(letter.toUpperCase());\n        } else {\n            reversed.push(letter);\n        }\n    });\n\n    return reversed.join('');\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('1234'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpttl3lhh0.js:30:12)\n    at Object.<anonymous> (/tmp/tmpttl3lhh0.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cODEWARS\nCodewars\n1234\n",
      "timestamp": 1660334526
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1w_k92_5.ts(47,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmp1w_k92_5.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp1w_k92_5.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334526
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('AbCdEf'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF123'));\nconsole.log(solve('123aBcDeF'));\nconsole.log(solve('123'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('The quick brown fox jumps over the lazy dog.'));\nconsole.log(solve('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'));\nconsole.log(solve('The_quick_brown_fox_jumps_over_the_lazy_dog.'));\nconsole.log(solve('the quick brown fox jumps over the lazy dog.'));\nconsole.log(solve('the_quick_brown_fox_jumps_over_the_lazy_dog.'));\nconsole.log(solve('the-quick-brown-fox-jumps-over-the-lazy-dog.'));\nconsole.log(solve('the_quick_brown_fox_jumps_over_the_lazy_dog.'));\nconsole.log(solve('the-quick-brown-fox-jumps-over-the-lazy-dog.'));\nconsole.log(solve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnjv7na63.ts(41,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnjv7na63.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpnjv7na63.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334526
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('123456789'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz1234567890'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('ABCDEFGHIJKLMNOP\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2i7boelt.ts(34,36): error TS1002: Unterminated string literal.\n../../../../tmp/tmp2i7boelt.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmp2i7boelt.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334526
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abCdEf'));\nconsole.log(solve('abCdEf123'));\nconsole.log(solve('123'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('The Quick Brown Fox'));\nconsole.log(solve('THE QUICK BROWN FOX'));\nconsole.log(solve('the quick brown fox'));\nconsole.log(solve('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG'));\nconsole.log(solve('the quick brown fox jumps over the lazy dog'));\nconsole.log(solve('The Quick Brown Fox Jumps Over The Lazy Dog'));\nconsole.log(solve('The quick brown fox jumps over the lazy dog'));\nconsole.log(solve('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'));\nconsole.log(solve('the quick brown fox jumps over the lazy dog.'));\nconsole.log(solve('The Quick Brown Fox Jumps Over The Lazy Dog.'));\nconsole.log(solve('The quick brown fox jumps over the lazy dog.'));\nconsole.log(solve('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG!'));\nconsole.log(solve('the quick brown fox jumps over the lazy dog!'));\nconsole.log(solve('The Quick Brown Fox Jumps Over The Lazy Dog!'));\nconsole.log(s\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpptdd9qjg.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpptdd9qjg.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334526
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('codewars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(solve('cw'));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwtja50ue.ts(54,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334528
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('!@#$%^&*()_+'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpk4bdjq4a.js:33:12)\n    at Object.<anonymous> (/tmp/tmpk4bdjq4a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nAbC\nAbC123\nAbC123!@#$%^&*()_+\n!@#$%^&*()_+\n",
      "timestamp": 1660334528
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log(solve('123456789'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmprvc6vqjf.js:55:12)\n    at Object.<anonymous> (/tmp/tmprvc6vqjf.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n",
      "timestamp": 1660334528
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('12345'));\nconsole.log(solve('abcdef'));\nconsole.log(solve('ABCDEF'));\nconsole.log(solve('abcdefABCDEF'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpufqm17jh.js:31:12)\n    at Object.<anonymous> (/tmp/tmpufqm17jh.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "A1B2C3\n12345\nABCDEF\nabcdef\nABCDEFabcdef\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('12345'));\nconsole.log(solve('abcdef'));\nconsole.log(solve('ABCDEF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2B3c4D5e6F'));\nconsole.log(solve('1A2b3C4d5E6f'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2B3c4D5e6F'));\nconsole.log(solve('1A2b3C4d5E6f'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2B3c4D5e6F'));\nconsole.log(solve('1A2b3C4d5E6f'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2B3c4D5e6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr0xf9tp9.ts(40,31): error TS1002: Unterminated string literal.\n../../../../tmp/tmpr0xf9tp9.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpr0xf9tp9.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334528
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('hello world'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpdl0izxbz.js:31:12)\n    at Object.<anonymous> (/tmp/tmpdl0izxbz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nHELLO WORLD\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abCdEfGhIjKlMnOpQrStUvWxYz'));\nconsole.log(solve('abCdEfGhIjKlMnOpQrStUvWxYz1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('1234567890abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz1234567890'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpac_fuuei.ts(33,59): error TS1002: Unterminated string literal.\n../../../../tmp/tmpac_fuuei.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmpac_fuuei.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334528
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123!@\u20ac'));\nconsole.log(solve('AAaa'));\nconsole.log(solve('!'));\nconsole.log(solve('!@\u20ac'));\nconsole.log(solve('!@\u20aca'));\nconsole.log(solve('!@\u20acaA'));\nconsole.log(solve('!@\u20acaA1'));\nconsole.log(solve('!@\u20acaA1#'));\nconsole.log(solve('!@\u20acaA1#AA'));\nconsole.log(solve('!@\u20acaA1#AAbb'));\nconsole.log(solve('!@\u20acaA1#AAbbcc'));\nconsole.log(solve('!@\u20acaA1#AAbbccDD'));\nconsole.log(solve('!@\u20acaA1#AAbbccDDee'));\nconsole.log(solve('!@\u20acaA1#AAbbccDDeeff'));\nconsole.log(solve('!@\u20acaA1#AAbbccDDeeffGG'));\nconsole.log(solve('!@\u20acaA1#AAbbccDDeeffGGhh'));\nconsole.log(solve('!@\u20acaA1#AAbbccDDeeffGGhhii'));\nconsole.log(solve('!@\u20acaA1#AAbbccDDeeffGGhhiiJJ'));\nconsole.log(solve('!@\u20acaA1#AAbbccDDeeff\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2jofybhe.ts(42,39): error TS1002: Unterminated string literal.\n../../../../tmp/tmp2jofybhe.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp2jofybhe.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334528
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('codeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars1'));\nconsole.log(solve('CodeWars1!'));\nconsole.log(solve('CodeWars1!@#$%^&*()_+'));\nconsole.log(solve('CodeWars1!@#$%^&*()_+-='));\nconsole.log(solve('CodeWars1!@#$%^&*()_+-=[]{}|;:<>,.?/'));\nconsole.log(solve('CodeWars1!@#$%^&*()_+-=[]{}|;:<>,.?/~`'));\nconsole.log(solve('CodeWars1!@#$%^&*()_+-=[]{}|;:<>,.?/~`1234567890'));\nconsole.log(solve('CodeWars1!@#$%^&*()_+-=[]{}|;:<>,.?/~`1234567890qwertyuiopasdfghjklzxcvbnm'));\nconsole.log(solve('CodeWars1!@#$%^&*()_+-=[]{}|;:<>,.?/~`1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'));\nconsole.log(solve('CodeWars1!@#$%^&*()_+-=[]{}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp607hz9mu.ts(34,47): error TS1002: Unterminated string literal.\n../../../../tmp/tmp607hz9mu.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmp607hz9mu.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello')); // hELLO\nconsole.log(solve('heLLo')); // HEllO\nconsole.log(solve('12345')); // 12345\nconsole.log(solve('1a2b3c4d5e')); // 1A2B3C4D5E\nconsole.log(solve('String.prototype.charCodeAt()')); // sTRING.PROTOTYPE.CHARCODEAT()\nconsole.log(solve('String.prototype.charAt()')); // sTRING.PROTOTYPE.CHARAT()\nconsole.log(solve('String.prototype.codePointAt()')); // sTRING.PROTOTYPE.CODEPOINTAT()\nconsole.log(solve('String.prototype.concat()')); // sTRING.PROTOTYPE.CONCAT()\nconsole.log(solve('String.prototype.endsWith()')); // sTRING.PROTOTYPE.ENDSWITH()\nconsole.log(solve('String.prototype.includes()')); // sTRING.PROTOTYPE.INCLUDES()\nconsole.log(solve('String.prototype.indexOf()')); // sTRING.PROTOTYPE.INDEXOF()\nconsole.log(solve('String.prototype.lastIndexOf()')); // sTRING.PROTOTYPE.LASTINDEXOF()\nconsole.log(solve('String.prototype.localeCompare()')); // sTRING.PROTOTYPE.LOCALECOMPARE()\nconsole.log(solve('String.prototype.match()')); // s\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpce8__6lo.js:40:12)\n    at Object.<anonymous> (/tmp/tmpce8__6lo.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHEllO\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.CHARcODEaT()\nsTRING.PROTOTYPE.CHARaT()\nsTRING.PROTOTYPE.CODEpOINTaT()\nsTRING.PROTOTYPE.CONCAT()\nsTRING.PROTOTYPE.ENDSwITH()\nsTRING.PROTOTYPE.INCLUDES()\nsTRING.PROTOTYPE.INDEXoF()\nsTRING.PROTOTYPE.LASTiNDEXoF()\nsTRING.PROTOTYPE.LOCALEcOMPARE()\nsTRING.PROTOTYPE.MATCH()\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('12345'));\nconsole.log(solve('123456789'));\nconsole.log(solve('12345678910'));\nconsole.log(solve('1234567891011'));\nconsole.log(solve('123456789101112'));\nconsole.log(solve('12345678910111213'));\nconsole.log(solve('1234567891011121314'));\nconsole.log(solve('123456789101112131415'));\nconsole.log(solve('12345678910111213141516'));\nconsole.log(solve('1234567891011121314151617'));\nconsole.log(solve('123456789101112131415161718'));\nconsole.log(solve('12345678910111213141516171819'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('123456789101112131415161718192021'));\nconsole.log(solve('12345678910111213141516171819202122'));\nconsole.log(solve('1234567891011121314151617181920212223'));\nconsole.log(solve('123456789101112131415161718192021222324'));\nconsole.log(solve('123456789101112131415\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_zmid5xd.ts(41,41): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_zmid5xd.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmp_zmid5xd.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()_+'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123!@#$%^&*()_+'));\nconsole.log(solve('abcABC123!@#$%^&*()_+ABCabc'));\nconsole.log(solve('!@#$%^&*()_+'));\nconsole.log(solve('!@#$%^&*()_+ABCabc'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123abcABC'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123abcABC123'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123abcABC123!@#$%^&*()_+'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123abcABC123!@#$%^&*()_+ABCabc'));\nconsole.log(solve('!@#$%^&*()_+ABCabc123abcABC123!@#$%^&*()_+ABCabc123'));\nconsole.log(solve('!@#$%\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuqvah6p5.ts(39,25): error TS1002: Unterminated string literal.\n../../../../tmp/tmpuqvah6p5.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpuqvah6p5.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abc123'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('123'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzbbotps4.ts(51,29): error TS1002: Unterminated string literal.\n../../../../tmp/tmpzbbotps4.ts(52,1): error TS1005: ',' expected.\n../../../../tmp/tmpzbbotps4.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2b3c4d5e6f7g'));\nconsole.log(solve('1A2B3C4D5E6F7G'));\nconsole.log(solve('1a2b3c4d5e6f7g8h'));\nconsole.log(solve('1A2B3C4D5E6F7G8H'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1a2b3c4d5e6f7g8h\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt7brblxh.ts(38,36): error TS1002: Unterminated string literal.\n../../../../tmp/tmpt7brblxh.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpt7brblxh.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2b3c4d5e6f7g'));\nconsole.log(solve('1A2B3C4D5E6F7G'));\nconsole.log(solve('1a2b3c4d5e6f7g8h'));\nconsole.log(solve('1A2B3C4D5E6F7G8H'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1a2b3c4d5e6f7g\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpar98f17d.ts(38,34): error TS1002: Unterminated string literal.\n../../../../tmp/tmpar98f17d.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpar98f17d.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpy3_y_rjh.js:29:12)\n    at Object.<anonymous> (/tmp/tmpy3_y_rjh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpmh_fi0pt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpmh_fi0pt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char.match(/[a-z]/i)) {\n            result += char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('123'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1A2B3C4D5E\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyttpdu6x.ts(36,30): error TS1002: Unterminated string literal.\n../../../../tmp/tmpyttpdu6x.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpyttpdu6x.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let reversed = '';\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char.match(/[a-z]/i)) {\n            reversed += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n        } else {\n            reversed += char;\n        }\n    }\n    return reversed;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123!@\u20ac'));\nconsole.log(solve('ABCabc'));\nconsole.log(solve('ABCabc123'));\nconsole.log(solve('ABCabc123!@\u20ac'));\nconsole.log(solve('ABC123abc'));\nconsole.log(solve('ABC123abc!@\u20ac'));\nconsole.log(solve('ABC123!@\u20acabc'));\nconsole.log(solve('!@\u20ac'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp_rnyqcz8.js:39:12)\n    at Object.<anonymous> (/tmp/tmp_rnyqcz8.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nABC123\nabc123\nABCabc\nABCabc123\nABCabc123!@\u20ac\nabcABC\nabcABC123\nabcABC123!@\u20ac\nabc123ABC\nabc123ABC!@\u20ac\nabc123!@\u20acABC\n!@\u20ac\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abc123'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('ABC'));\nconsole.log(solve('AbC'));\nconsole.log(solve('aBc'));\nconsole.log(solve('ABc'));\nconsole.log(solve('aBC'));\nconsole.log(solve('ABc'));\nconsole.log(solve('aBC'));\nconsole.log(solve('abc'));\nconsole.log(solve('abc123'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('ABC'));\nconsole.log(solve('AbC'));\nconsole.log(solve('aBc'));\nconsole.log(solve('ABc'));\nconsole.log(solve('aBC'));\nconsole.log(solve('ABc'));\nconsole.log(solve('aBC'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpksf2rwwe.js:52:12)\n    at Object.<anonymous> (/tmp/tmpksf2rwwe.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nABC123\nABCabc\n123\n123abc\nabc123\nabc\naBc\nAbC\nabC\nAbc\nabC\nAbc\nABC\nABC123\nABCabc\n123\n123abc\nabc123\nabc\naBc\nAbC\nabC\nAbc\nabC\nAbc\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('hello world'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpctxew0j3.js:32:12)\n    at Object.<anonymous> (/tmp/tmpctxew0j3.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nHELLO WORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.toUpperCase()'));\nconsole.log(solve('String.prototype.toLowerCase()'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpieg8fmpg.js:33:12)\n    at Object.<anonymous> (/tmp/tmpieg8fmpg.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.TOuPPERcASE()\nsTRING.PROTOTYPE.TOlOWERcASE()\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cOdEwArs'));\nconsole.log(solve('codeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-='));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890-=_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890-=_+qwertyuiop[]{}|asdfghjkl;:zxcvbnm,./<>?`~'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpaum00bfo.ts(34,57): error TS1002: Unterminated string literal.\n../../../../tmp/tmpaum00bfo.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpaum00bfo.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('ABCabc'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123ABC'));\nconsole.log(solve('abcABC123ABCabc'));\nconsole.log(solve('abcABC123ABCabcABC'));\nconsole.log(solve('abcABC123ABCabcABC123'));\nconsole.log(solve('abcABC123ABCabcABC123ABC'));\nconsole.log(solve('abcABC123ABCabcABC123ABCabc'));\nconsole.log(solve('abcABC123ABCabcABC123ABCabcABC'));\nconsole.log(solve('abcABC123ABCabcABC123ABCabcABC123'));\nconsole.log(solve('abcABC123ABCabcABC123ABCabcABC123ABC'));\nconsole.log(solve('abcABC123ABCabcABC123ABCabcABC123ABCabc'));\nconsole.log(solve('abcABC123ABCabcABC123ABCabcABC123ABCabcABC'));\nconsole.log(solve('abcABC123ABCabcABC123ABCabcABC123ABCabcABC123'));\nconsole.log(solve('abcABC123ABCabcABC123ABCabcABC123ABCabcABC123ABC'));\nconsole.log(solve('abcABC123ABCabcABC123ABCabcABC123ABCabcABC123ABCabc'));\nconsole.log(solve('abcABC123ABCabcABC\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnrxabdt8.ts(43,38): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnrxabdt8.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmpnrxabdt8.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#'));\nconsole.log(solve('aBc123!@#ABC'));\nconsole.log(solve('aBc123!@#ABCD'));\nconsole.log(solve('aBc123!@#ABCDE'));\nconsole.log(solve('aBc123!@#ABCDEF'));\nconsole.log(solve('aBc123!@#ABCDEFG'));\nconsole.log(solve('aBc123!@#ABCDEFGH'));\nconsole.log(solve('aBc123!@#ABCDEFGHI'));\nconsole.log(solve('aBc123!@#ABCDEFGHIJ'));\nconsole.log(solve('aBc123!@#ABCDEFGHIJK'));\nconsole.log(solve('aBc123!@#ABCDEFGHIJKL'));\nconsole.log(solve('aBc123!@#ABCDEFGHIJKLM'));\nconsole.log(solve('aBc123!@#ABCDEFGHIJKLMN'));\nconsole.log(solve('aBc123!@#ABCDEFGHIJKLMNO'));\nconsole.log(solve('aBc123!@#ABCDEFGHIJKLMNOP'));\nconsole.log(solve('aBc123!@#ABCDEFGHIJKLMNOPQ'));\nconsole.log(solve('a\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2l7qe9dr.ts(42,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmp2l7qe9dr.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp2l7qe9dr.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334531
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('hello'));\nconsole.log(solve('HELLO'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp7bogp9nn.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7bogp9nn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "HELLO\nhello\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cOdEwArs'));\nconsole.log(solve('abracadabra'));\nconsole.log(solve('52a3A'));\nconsole.log(solve('12345'));\nconsole.log(solve('QWERTYqwerty'));\nconsole.log(solve('QwErTy911poqqqq'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmptsvd6gwu.js:33:12)\n    at Object.<anonymous> (/tmp/tmptsvd6gwu.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cODEWARS\nCoDeWaRS\nABRACADABRA\n52A3a\n12345\nqwertyQWERTY\nqWeRtY911POQQQQ\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpseu13zak.js:31:12)\n    at Object.<anonymous> (/tmp/tmpseu13zak.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    let isLetter: boolean = false;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/i)) {\n            isLetter = true;\n            if (s[i] === s[i].toUpperCase()) {\n                result += s[i].toLowerCase();\n            } else {\n                result += s[i].toUpperCase();\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter) {\n        return s.split('').reverse().join('');\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabcABC'));\nconsole.log(solve('123ABCabcABCabc'));\nconsole.log(solve('123ABCabcABCabcABC'));\nconsole.log(solve('123ABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabcABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabcABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabcABCabcABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabcABCabcABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabcABCabcABCabcABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabcABC\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg6dne_gl.ts(47,32): error TS1002: Unterminated string literal.\n../../../../tmp/tmpg6dne_gl.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpg6dne_gl.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpmh_fi0pt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpmh_fi0pt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1A2b3c4D5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v23w24x25y26z27'));\nconsole.log(solve('1A2b3c4D5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v23w24x25y26z27A'));\nconsole.log(solve('1A2b3c4D5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v23w24x25y26z27A28B29C30D31E32F33G34H35I36J37K38L39M40N41O42P43Q44R45S46T47U48V49W50X51Y52Z53'));\nconsole.log(solve('1A2b3c4D5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v23w24x25y\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm15okt8j.ts(30,86): error TS1002: Unterminated string literal.\n../../../../tmp/tmpm15okt8j.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpm15okt8j.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!'));\nconsole.log(solve('aBc123!@'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+-='));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|;:<>?/.,'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|;:<>?/.,~`'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|;:<>?/.,~`123'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|;:<>?/.,~`123ABC'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|;:<>?/.,~`123ABC!@#$%^&*()_+-=[]{}|;:<>?/.,~`'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|;:<>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjbllpmoo.ts(35,49): error TS1002: Unterminated string literal.\n../../../../tmp/tmpjbllpmoo.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpjbllpmoo.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('hello world'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.toAlternatingCase'));\nconsole.log(solve('Hello World'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpscoi_0wo.js:34:12)\n    at Object.<anonymous> (/tmp/tmpscoi_0wo.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cODEWARS\nCodewars\nhello world\nHELLO WORLD\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.TOaLTERNATINGcASE\nhELLO wORLD\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpzuhbkc62.js:57:12)\n    at Object.<anonymous> (/tmp/tmpzuhbkc62.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nABCabc\n123\n123abc\n123ABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n123abcABC\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpldo8gsx6.js:31:12)\n    at Object.<anonymous> (/tmp/tmpldo8gsx6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('1,3,7,11,13,17,19'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('JavaScript'));\nconsole.log(solve('A1b2C3'));\nconsole.log(solve('Z'));\nconsole.log(solve('z'));\nconsole.log(solve('12345'));\nconsole.log(solve('0'));\nconsole.log(solve('abcde'));\nconsole.log(solve('ABCDE'));\nconsole.log(solve('ABCDEabcde'));\nconsole.log(solve('abcdeABCDE'));\nconsole.log(solve('abcdeABCDEabcde'));\nconsole.log(solve('abcdeABCDEabcdeABCDE'));\nconsole.log(solve('abcdeABCDEabcdeABCDEabcde'));\nconsole.log(solve('abcdeABCDEabcdeABCDEabcdeABCDE'));\nconsole.log(solve('abcdeABCDEabcdeABCDEabcdeABCDEabcde'));\nconsole.log(solve('abcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDE'));\nconsole.log(solve('abcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcde'));\nconsole.log(solve('abcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDE'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpps88q4dc.js:50:12)\n    at Object.<anonymous> (/tmp/tmpps88q4dc.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUPRALAPSARIAN\n1337\n1,3,7,11,13,17,19\ncODEwARS\njAVAsCRIPT\na1B2c3\nz\nZ\n12345\n0\nABCDE\nabcde\nabcdeABCDE\nABCDEabcde\nABCDEabcdeABCDE\nABCDEabcdeABCDEabcde\nABCDEabcdeABCDEabcdeABCDE\nABCDEabcdeABCDEabcdeABCDEabcde\nABCDEabcdeABCDEabcdeABCDEabcdeABCDE\nABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcde\nABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDE\nABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcdeABCDEabcde\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let newStr = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            newStr += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            newStr += s[i].toUpperCase();\n        } else {\n            newStr += s[i];\n        }\n    }\n    return newStr;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpdosl_j8i.js:31:12)\n    at Object.<anonymous> (/tmp/tmpdosl_j8i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (isLetter(char)) {\n            result += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpat4jrvwb.ts(11,13): error TS2304: Cannot find name 'isLetter'.\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp7y1li_up.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7y1li_up.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('abc123'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('ABCabc'));\nconsole.log(solve('ABCabc123'));\nconsole.log(solve('ABCabcABC'));\nconsole.log(solve('ABCabcABC123'));\nconsole.log(solve('abcABCabc'));\nconsole.log(solve('abcABCabc123'));\nconsole.log(solve('abcABCabcABC'));\nconsole.log(solve('abcABCabcABC123'));\nconsole.log(solve('abcABCabcABC123ABC'));\nconsole.log(solve('abcABCabcABC123ABCabc'));\nconsole.log(solve('abcABCabcABC123ABCabcABC'));\nconsole.log(solve('abcABCabcABC123ABCabcABC123'));\nconsole.log(solve('abcABCabcABC123ABCabcABC123ABC'));\nconsole.log(solve('abcABCabcABC123ABCabcABC123ABCabc'));\nconsole.log(solve('abcABCabcABC123ABCabcABC123ABCabcABC'));\nconsole.log(solve('abcABCabcABC123ABCabcABC123ABCabcABC123'));\nconsole.log(solve('abcABCabcABC123ABCabcABC123ABCabcABC123ABC'));\nconsole.log(solve('abcABCabcABC123ABCabcABC123ABCabcABC123ABCabc'));\nconsole.log(solve('abcABCabcABC123\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppo3yogyg.ts(45,35): error TS1002: Unterminated string literal.\n../../../../tmp/tmppo3yogyg.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmppo3yogyg.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#'));\nconsole.log(solve('aBc123!@#ABC'));\nconsole.log(solve('aBc123!@#ABCabc'));\nconsole.log(solve('aBc123!@#ABCabcABC'));\nconsole.log(solve('aBc123!@#ABCabcABC123'));\nconsole.log(solve('aBc123!@#ABCabcABC123!@#'));\nconsole.log(solve('aBc123!@#ABCabcABC123!@#ABC'));\nconsole.log(solve('aBc123!@#ABCabcABC123!@#ABCabc'));\nconsole.log(solve('aBc123!@#ABCabcABC123!@#ABCabcABC'));\nconsole.log(solve('aBc123!@#ABCabcABC123!@#ABCabcABC123'));\nconsole.log(solve('aBc123!@#ABCabcABC123!@#ABCabcABC123!@#'));\nconsole.log(solve('aBc123!@#ABCabcABC123!@#ABCabcABC123!@#ABC'));\nconsole.log(solve('aBc123!@#ABCabcABC123!@#ABCabcABC123!@#ABCabc'));\nconsole.log(solve('aBc123!@#ABCabcABC123!@#ABCabcABC123!@#ABCabcABC'));\nconsole.log(solve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi1_zi6e5.ts(40,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmpi1_zi6e5.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpi1_zi6e5.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char.match(/[a-z]/i)) {\n            result += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('a1B2c3'));\nconsole.log(solve('a1b2C3'));\nconsole.log(solve('a1B2C3'));\nconsole.log(solve('a1b2C3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6'));\nconsole.log(solve('a1b2C3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A7B8C9D0E1F2G3H4I5J6K7L8M9N0O1P2Q3R4S5T6U7V8W9X0Y1Z2'));\nconsole.log(solve('a1b2C3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A7B8C9D0E1F2G3H4I5J6K7L8M9N0O1P2Q3R4S5T6U7V8W9X0Y1Z2a3b4c5d6e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnsolts7e.ts(30,133): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnsolts7e.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpnsolts7e.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cOdEwArs'));\nconsole.log(solve('codeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWaRS'));\nconsole.log(solve('cOdEwArS'));\nconsole.log(solve('CODEWARS'));\nconsole.log(solve('coDeWaRS'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1a2b3c4d5E'));\nconsole.log(solve('1A2B3C4D5e'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2b3c4d5E6f'));\nconsole.log(solve('1A2B3C4D5e6F'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1a2b3c4d5E6f7g8h9i0j'));\nconsole.log(solve('1A2B3C\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpluj18ace.ts(41,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmpluj18ace.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpluj18ace.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334532
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (isNaN(Number(char))) {\n            if (char === char.toUpperCase()) {\n                result += char.toLowerCase();\n            } else {\n                result += char.toUpperCase();\n            }\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('123'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#%^&*()'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#%^&*()_+'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#%^&*()_+-='));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('AbCdEfGhIjKlM\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpan7lyqlk.ts(36,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmpan7lyqlk.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpan7lyqlk.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2b3c4d5e6f7g'));\nconsole.log(solve('1A2B3C4D5E6F7G'));\nconsole.log(solve('1a2b3c4d5e6f7g8h'));\nconsole.log(solve('1A2B3C4D5E6F7G8H'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1a2b3c4d5e6f7g\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpar98f17d.ts(38,34): error TS1002: Unterminated string literal.\n../../../../tmp/tmpar98f17d.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpar98f17d.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char.match(/[a-z]/i)) {\n            result += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('0123456789'));\nconsole.log(solve('!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp02th8tvg.js:35:12)\n    at Object.<anonymous> (/tmp/tmp02th8tvg.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nAbC\nAbC123\nAbC123!@#$%^&*()_+\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nabcdefghijklmnopqrstuvwxyz\n0123456789\n!@#$%^&*()_+\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abCdEfGhIjK'));\nconsole.log(solve('aBcDeFgHiJk'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj7c81ra8.ts(48,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmpj7c81ra8.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpj7c81ra8.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('a'));\nconsole.log(solve('A'));\nconsole.log(solve('z'));\nconsole.log(solve('Z'));\nconsole.log(solve('1'));\nconsole.log(solve(' '));\nconsole.log(solve('!'));\nconsole.log(solve('?'));\nconsole.log(solve('.'));\nconsole.log(solve('-'));\nconsole.log(solve('_'));\nconsole.log(solve('/'));\nconsole.log(solve('\\\\'));\nconsole.log(solve('@'));\nconsole.log(solve('#'));\nconsole.log(solve('$'));\nconsole.log(solve('%'));\nconsole.log(solve('^'));\nconsole.log(solve('&'));\nconsole.log(solve('*'));\nconsole.log(solve('('));\nconsole.log(solve(')'));\nconsole.log(solve('-'));\nconsole.log(solve('+'));\nconsole.log(solve('='));\nconsole.log(solve('{'));\nconsole.log(solve('}'));\nconsole.log(solve('['));\nconsole.log(solve(']'));\nconsole.log(solve('|'));\nconsole.log(solve(';'));\nconsole.log(solve\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvh7ev9p9.ts(57,1): error TS1005: ',' expected.\n../../../../tmp/tmpvh7ev9p9.ts(57,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('Ss'));\nconsole.log(solve('a'));\nconsole.log(solve('aB'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBcDe'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeFg'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgHi'));\nconsole.log(solve('aBcDeFgHiJ'));\nconsole.log(solve('aBcDeFgHiJk'));\nconsole.log(solve('aBcDeFgHiJkL'));\nconsole.log(solve('aBcDeFgHiJkLm'));\nconsole.log(solve('aBcDeFgHiJkLmN'));\nconsole.log(solve('aBcDeFgHiJkLmNo'));\nconsole.log(solve('aBcDeFgHiJkLmNoP'));\nconsole.log(solve('aBcDeFgHiJkLmNoPq'));\nconsole.log(solve('aBcDeFgHiJkLmNoPqR'));\nconsole.log(s\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8x01hmtv.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp8x01hmtv.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprml61iac.ts(43,28): error TS1002: Unterminated string literal.\n../../../../tmp/tmprml61iac.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmprml61iac.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('abC'));\nconsole.log(solve('123'));\nconsole.log(solve('1a2b3c'));\nconsole.log(solve('1A2B3C'));\nconsole.log(solve('1a2B3c'));\nconsole.log(solve('1A2b3C'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1a2B3c4D5e6F7g8H9i0J'));\nconsole.log(solve('1A2b3C4d5E6f7G8h9I0j'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j1a2b3c4d5e6f7g8h9i0j1a2b3c4d5e6f7g8h9i0j1a2b3c4d5e6f7g8h9i0j1a2b3c4d5e6f7g8h9i0j1a2b3c4d5e6f7g8h9i0j1a2b3c4d5e6f7g8h9i0j1a2b3c4d5e6f7g8h9i0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpszsdt_x5.ts(33,179): error TS1002: Unterminated string literal.\n../../../../tmp/tmpszsdt_x5.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmpszsdt_x5.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp7y1li_up.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7y1li_up.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('codewars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1A2B3C4D5E!'));\nconsole.log(solve('1A2B3C4D5E!@#$%^&*()_+'));\nconsole.log(solve('1A2B3C4D5E!@#$%^&*()_+-='));\nconsole.log(solve('1A2B3C4D5E!@#$%^&*()_+-=[]{}|;:,.<>?'));\nconsole.log(solve('1A2B3C4D5E!@#$%^&*()_+-=[]{}|;:,.<>?/'));\nconsole.log(solve('1A2B3C4D5E!@#$%^&*()_+-=[]{}|;:,.<>?/\\''));\nconsole.log(solve('1A2B3C4D5E!@#$%^&*()_+-=[]{}|;:,.<>?/\\'`~'));\nconsole.log(solve('1A2B3C4D5E!@#$%^&*()_+-=[]{}|;:,.<>?/\\'`\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp56bglp1o.ts(35,60): error TS1002: Unterminated string literal.\n../../../../tmp/tmp56bglp1o.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmp56bglp1o.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334535
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('AbC'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!'));\nconsole.log(solve('aBc123!@#$%^&*()'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+-='));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|\\\\'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|\\\\/'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|\\\\/<>'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|\\\\/<>?'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|\\\\/<>?~`'));\nconsole.log(solve('aB\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4fpq5kh9.ts(38,22): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4fpq5kh9.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmp4fpq5kh9.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334535
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('Hello World!'));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc46v0uze.ts(51,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334535
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    const letters = s.split('').filter(char => char.match(/[a-z]/i));\n    if (letters.length === 0) {\n        return s.split('').reverse().join('');\n    }\n    return s.split('').map(char => {\n        if (char.match(/[a-z]/i)) {\n            return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n        }\n        return char;\n    }).join('');\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abc123'));\nconsole.log(solve('123'));\nconsole.log(solve('123abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('ABC123abc'));\nconsole.log(solve('ABC123abcDEF'));\nconsole.log(solve('ABC123abcDEF456'));\nconsole.log(solve('ABC123abcDEF456DEF'));\nconsole.log(solve('ABC123abcDEF456DEF789'));\nconsole.log(solve('ABC123abcDEF456DEF789abc'));\nconsole.log(solve('ABC123abcDEF456DEF789abcABC'));\nconsole.log(solve('ABC123abcDEF456DEF789abcABC123'));\nconsole.log(solve('ABC123abcDEF456DEF789abcABC123DEF'));\nconsole.log(solve('ABC123abcDEF456DEF789abcABC123DEF456'));\nconsole.log(solve('ABC123abcDEF456DEF789abcABC123DEF456DEF'));\nconsole.log(solve('ABC123abcDEF456DEF789abcABC123DEF456DEF789'));\nconsole.log(solve('ABC123abcDEF456DEF789abcABC123DEF456DEF789abc'));\nconsole.log(solve('ABC123abcDEF456DEF789abcABC123DEF456DEF789abcABC'));\nconsole.log(solve('ABC123abcDEF456DEF789abcABC123DEF456DEF789abc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp95xgzhyg.ts(41,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmp95xgzhyg.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmp95xgzhyg.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('AbCdE'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpa9pwkd49.js:43:12)\n    at Object.<anonymous> (/tmp/tmpa9pwkd49.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\naBcDe\nAbCdEf\nA1B2C3\nA1b2C3d4E5f6G7h8I9j0K\nA1b2C3d4E5f6G7h8I9j0K\nA1b2C3d4E5f6G7h8I9j0K\nA1b2C3d4E5f6G7h8I9j0K\nA1b2C3d4E5f6G7h8I9j0K\nA1b2C3d4E5f6G7h8I9j0K\nA1b2C3d4E5f6G7h8I9j0K\nA1b2C3d4E5f6G7h8I9j0K\nA1b2C3d4E5f6G7h8I9j0K\nA1b2C3d4E5f6G7h8I9j0K\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('123'));\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpo9to2k1v.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpo9to2k1v.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334535
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp_byaddmh.js:33:12)\n    at Object.<anonymous> (/tmp/tmp_byaddmh.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\nhELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('1A2B3C'));\nconsole.log(solve('1a2b3c'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('AbC123'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('!@#$%^&*()_+'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz'));\nconsole.log(solve('aBcDeFgHiJkLmNoPqRsTuVwXyZ'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp7xu2zyhy.js:44:12)\n    at Object.<anonymous> (/tmp/tmp7xu2zyhy.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\n1a2b3c\n1A2B3C\nABC123\nabc123\naBc123\nAbC123\n!@#$%^&*()_+\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nabcdefghijklmnopqrstuvwxyz\naBcDeFgHiJkLmNoPqRsTuVwXyZ\nAbCdEfGhIjKlMnOpQrStUvWxYz\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()_+\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('codewars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-='));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:,.<>/?'));\nconsole.log(solve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpua6hlo8s.ts(37,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmpua6hlo8s.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpua6hlo8s.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmprcy1lgut.js:58:12)\n    at Object.<anonymous> (/tmp/tmprcy1lgut.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\nhELLO wORLD\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('codeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-='));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890-=_+!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~1234567890-=_+!@#$%^&*()[]{}|;:\",./<>?'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:\",./<>?`~123\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0wrikoro.ts(34,64): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0wrikoro.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmp0wrikoro.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('12345'));\nconsole.log(solve('123456789'));\nconsole.log(solve('!@#$%^&*()'));\nconsole.log(solve('!@#$%^&*()_+'));\nconsole.log(solve('!@#$%^&*()_+1234567890-='));\nconsole.log(solve('!@#$%^&*()_+1234567890-=qwertyuiop[]\\\\asdfghjkl;\\'zxcvbnm,./'));\nconsole.log(solve('!@#$%^&*()_+1234567890-=QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?'));\nconsole.log(solve('!@#$%^&*()_+1234567890-=QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?qwertyuiop[]\\\\asdfghjkl;\\'zxcvbnm,./'));\nconsole.log(solve('!@#$%^&*()_+1234567890-=QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?qwertyuiop[]\\\\asdfghjkl;\\'zxcvbnm,./QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?qwertyuiop[]\\\\asdf\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph41ym8e0.ts(32,166): error TS1002: Unterminated string literal.\n../../../../tmp/tmph41ym8e0.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmph41ym8e0.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('1A2B3C4D5E6F'));\nconsole.log(solve('1a2b3c4d5e6f7g'));\nconsole.log(solve('1A2B3C4D5E6F7G'));\nconsole.log(solve('1a2b3c4d5e6f7g8h'));\nconsole.log(solve('1A2B3C4D5E6F7G8H'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I'));\nconsole.log(solve('1a2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2B3C4D5E6F7G8H9I0J'));\nconsole.log(solve('1a2b3c4d5e6f7g8h\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbia61wtt.ts(38,36): error TS1002: Unterminated string literal.\n../../../../tmp/tmpbia61wtt.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpbia61wtt.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char.match(/[a-z]/i)) {\n      result += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    } else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123!@\u20ac'));\nconsole.log(solve('AAaa'));\nconsole.log(solve('!'));\nconsole.log(solve('1'));\nconsole.log(solve('123'));\nconsole.log(solve('123!'));\nconsole.log(solve('!123'));\nconsole.log(solve('!123!'));\nconsole.log(solve('!123!abc!'));\nconsole.log(solve('!123!abc!ABC!'));\nconsole.log(solve('!123!abc!ABC!\u20ac'));\nconsole.log(solve('!123!abc!ABC!\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\u20ac\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpddsbqou9.ts(34,241): error TS1002: Unterminated string literal.\n../../../../tmp/tmpddsbqou9.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmpddsbqou9.ts(35,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('codewars'));\nconsole.log(solve('codeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('CodeWars123!@#'));\nconsole.log(solve('CodeWars123!@#!'));\nconsole.log(solve('CodeWars123!@#!@'));\nconsole.log(solve('CodeWars123!@#!@$'));\nconsole.log(solve('CodeWars123!@#!@$%'));\nconsole.log(solve('CodeWars123!@#!@$%^'));\nconsole.log(solve('CodeWars123!@#!@$%^&'));\nconsole.log(solve('CodeWars123!@#!@$%^&*'));\nconsole.log(solve('CodeWars123!@#!@$%^&*('));\nconsole.log(solve('CodeWars123!@#!@$%^&*()'));\nconsole.log(solve('CodeWars123!@#!@$%^&*())'));\nconsole.log(solve('CodeWars123!@#!@$%^&*())('));\nconsole.log(solve('CodeWars123!@#!@$%^&*())(_'));\nconsole.log(solve('CodeWars123!@#!@$%^&*())(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxmcgie5_.ts(42,45): error TS1002: Unterminated string literal.\n../../../../tmp/tmpxmcgie5_.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpxmcgie5_.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else if (char === char.toLowerCase()) {\n            result += char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(solve('1a2B3C4d'));\nconsole.log(solve('1a2b3c4D'));\nconsole.log(solve('1A2B3C4d'));\nconsole.log(solve('1a2b3c4D'));\nconsole.log(solve('1A2b3c4d'));\nconsole.log(solve('1a2B3C4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(solve('1a2B3C4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(solve('1a2B3C4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(solve('1a2B3C4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log(solve('1a2B3C4d'));\nconsole.log(solve('1A2b3C4d'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpomba_erl.js:51:12)\n    at Object.<anonymous> (/tmp/tmpomba_erl.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cODEWARS\nCodewars\n1234\n1A2B3C4D\n1a2b3c4d\n1a2B3C4d\n1A2b3C4D\n1a2B3c4D\n1A2b3c4D\n1A2B3C4d\n1a2b3c4D\n1A2B3C4d\n1a2B3C4D\n1A2b3c4D\n1a2B3c4D\n1A2b3c4D\n1a2B3c4D\n1A2b3c4D\n1a2B3c4D\n1A2b3c4D\n1a2B3c4D\n1A2b3c4D\n1a2B3c4D\n",
      "timestamp": 1660334537
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World')); // hELLO wORLD\nconsole.log(solve('I loVe JS')); // i LOvE js\nconsole.log(solve('1a2b3c4d5e')); // 1A2B3C4D5E\nconsole.log(solve('String.prototype.charCodeAt()')); // sTRING.PROTOTYPE.CHARCODEAT()\nconsole.log(solve('12345')); // 12345\nconsole.log(solve('!@#$%^&*()_+')); // !@#$%^&*()_+\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp2cvum2ex.js:32:12)\n    at Object.<anonymous> (/tmp/tmp2cvum2ex.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\ni LOvE js\n1A2B3C4D5E\nsTRING.PROTOTYPE.CHARcODEaT()\n12345\n!@#$%^&*()_+\n",
      "timestamp": 1660334537
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmphqekyxmx.js:29:12)\n    at Object.<anonymous> (/tmp/tmphqekyxmx.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334537
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('AbC'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!'));\nconsole.log(solve('aBc123!@#$%^&*()'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+-'));\nconsole.log(solve('aBc123!@#$%^&*()_+-='));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|\\\\'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|\\\\;'));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|\\\\;\\''));\nconsole.log(solve('aBc123!@#$%^&*()_+-=[]{}|\\\\;\\'\\,'));\nconsole.log(solve('aBc123!@#$%^&*()_+-\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj8czu5oo.ts(38,39): error TS1002: Unterminated string literal.\n../../../../tmp/tmpj8czu5oo.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpj8czu5oo.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('12345'));\nconsole.log(solve('123456789'));\nconsole.log(solve('12345678910'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314151617181920'));\nconsole.log(solve('1234567891011121314\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp346hri1i.ts(40,39): error TS1002: Unterminated string literal.\n../../../../tmp/tmp346hri1i.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmp346hri1i.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp_5_bx__1.js:30:12)\n    at Object.<anonymous> (/tmp/tmp_5_bx__1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('AbCdEfG'));\nconsole.log(solve('12345'));\nconsole.log(solve('aBcDeFg'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123!@#$%^&*()_+'));\nconsole.log(solve('abcdeFg123!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFG123!@#$%^&*()_+'));\nconsole.log(solve('ABCDEFG123'));\nconsole.log(solve('abcdeFg123'));\nconsole.log(solve('abcdeFg123!@#$%^&*()_+'));\nconsole.log(solve('abcdeFg123!@#$%^&*()_+'));\nconsole.log(solve('abcdeFg123!@#$%^&*()_+'));\nconsole.log(solve('abcdeFg123!@#$%^&*()_+'));\nconsole.log(solve('abcdeFg123!@#$%^&*()_+'));\nconsole.log(solve('abcdeFg123!@#$%^&*()_+'));\nconsole.log(solve('abcdeFg123!@#$%^&*()_+'));\nconsole.log(solve('abcdeFg123!@#$%^&*()_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu3k93r1a.ts(40,41): error TS1002: Unterminated string literal.\n../../../../tmp/tmpu3k93r1a.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpu3k93r1a.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334536
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('#@$%^&*'));\nconsole.log(solve('abcdABCD'));\nconsole.log(solve('abcdABCD1234'));\nconsole.log(solve('abcdABCD1234#@$%^&*'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp05bw8sh6.js:33:12)\n    at Object.<anonymous> (/tmp/tmp05bw8sh6.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABCD\nabcd\n1234\n#@$%^&*\nABCDabcd\nABCDabcd1234\nABCDabcd1234#@$%^&*\n",
      "timestamp": 1660334537
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123!@#$%^&*()_+'));\nconsole.log(solve('abcde'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp1d1rcsxs.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1d1rcsxs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUPRALAPSARIAN\n1337\nAbCdEfG123\nAbCdEfG123!@#$%^&*()_+\nABCDE\n",
      "timestamp": 1660334538
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc123!@#$%^&*()_+'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABC'));\nconsole.log(solve('aBc123!@#$%^&*()_+ABCabc'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpf4vhmmu2.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf4vhmmu2.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nAbC\nA1B2C3\nAbC123\nAbC123!@#$%^&*()_+\nAbC123!@#$%^&*()_+abc\nAbC123!@#$%^&*()_+abcABC\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpo586it0c.js:31:12)\n    at Object.<anonymous> (/tmp/tmpo586it0c.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('codewars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp15x2q8iv.js:47:12)\n    at Object.<anonymous> (/tmp/tmp15x2q8iv.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cODEWARS\nCodewars\nCODEWARS\ncODEwARS\ncODEwARS123\ncODEwARS123!\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\ncODEwARS123!@#$%^&*()\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpldo8gsx6.js:31:12)\n    at Object.<anonymous> (/tmp/tmpldo8gsx6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(solve('coDEwArs'));\nconsole.log(s\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3021dexx.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp3021dexx.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334525
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello'));\nconsole.log(solve('hello'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpcgclbauw.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcgclbauw.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO\nHELLO\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpo586it0c.js:31:12)\n    at Object.<anonymous> (/tmp/tmpo586it0c.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1A2b3c4d'));\nconsole.log(solve('1A2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2b3c4d5e6f7g8h9i0j1A2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2b3c4d5e6f7g8h9i0j1A2b3c4d5e6f7g8h9i0j1A2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2b3c4d5e6f7g8h9i0j1A2b3c4d5e6f7g8h9i0j1A2b3c4d5e6f7g8h9i0j1A2b3c4d5e6f7g8h9i0j'));\nconsole.log(solve('1A2b3c4d5e6f7g8h9i0j1A2b3c4d5e6f7g8h9i0j\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbnpkph2r.ts(32,60): error TS1002: Unterminated string literal.\n../../../../tmp/tmpbnpkph2r.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpbnpkph2r.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('12345'));\nconsole.log(solve('abcdef'));\nconsole.log(solve('ABCDEF'));\nconsole.log(solve('AbCdEf'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF')\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptr475wo1.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmptr475wo1.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.log(solve('coDEwars'));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcnb0ra0z.ts(49,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abCdEfG'));\nconsole.log(solve('12345'));\nconsole.log(solve('abcdefg'));\nconsole.log(solve('ABCDEFG'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log(solve('12345'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpyy5ycgdq.js:59:12)\n    at Object.<anonymous> (/tmp/tmpyy5ycgdq.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABcDeFg\n12345\nABCDEFG\nabcdefg\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('AbCd'));\nconsole.log(solve('1234'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpsnqvfv55.js:29:12)\n    at Object.<anonymous> (/tmp/tmpsnqvfv55.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABCD\naBcD\n1234\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc!@#'));\nconsole.log(solve('123ABCabc!@#ABC'));\nconsole.log(solve('123ABCabc!@#ABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABCabcABCabc'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABCabcABCabcABC'));\nconsole.log(solve('123ABCabc!@#ABCabcABCabcABCabcABCabcABC\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmen1dypf.ts(41,59): error TS1002: Unterminated string literal.\n../../../../tmp/tmpmen1dypf.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpmen1dypf.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()'));\nconsole.log(solve('ABCabc!@#$%^&*()'));\nconsole.log(solve('abc!@#$%^&*()'));\nconsole.log(solve('!@#$%^&*()'));\nconsole.log(solve('123'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABCabc'));\nconsole.log(solve('123ABCabc!@#$%^&*()'));\nconsole.log(solve('ABCabc!@#$%^&*()'));\nconsole.log(solve('abc!@#$%^&*()'));\nconsole.log(solve('!@#$%^&*()'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpxogo6ypd.js:44:12)\n    at Object.<anonymous> (/tmp/tmpxogo6ypd.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nABCabc\n123\n123abc\n123ABC\n123abcABC\n123abcABC!@#$%^&*()\nabcABC!@#$%^&*()\nABC!@#$%^&*()\n!@#$%^&*()\n123\n123abc\n123ABC\n123abcABC\n123abcABC!@#$%^&*()\nabcABC!@#$%^&*()\nABC!@#$%^&*()\n!@#$%^&*()\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('12345'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpeuuaokag.js:30:12)\n    at Object.<anonymous> (/tmp/tmpeuuaokag.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n12345\n",
      "timestamp": 1660334518
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log(solve('aBcDeFgH'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp1002k96w.js:51:12)\n    at Object.<anonymous> (/tmp/tmp1002k96w.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUPRALAPSARIAN\n1337\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\nAbCdEfGh\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('codeWars'));\nconsole.log(solve('cOdEwArS'));\nconsole.log(solve('cOdEwArS1'));\nconsole.log(solve('cOdEwArS1!'));\nconsole.log(solve('cOdEwArS1!2'));\nconsole.log(solve('cOdEwArS1!2@'));\nconsole.log(solve('cOdEwArS1!2@3'));\nconsole.log(solve('cOdEwArS1!2@3#'));\nconsole.log(solve('cOdEwArS1!2@3#4'));\nconsole.log(solve('cOdEwArS1!2@3#4$'));\nconsole.log(solve('cOdEwArS1!2@3#4$5'));\nconsole.log(solve('cOdEwArS1!2@3#4$5%'));\nconsole.log(solve('cOdEwArS1!2@3#4$5%6'));\nconsole.log(solve('cOdEwArS1!2@3#4$5%6^'));\nconsole.log(solve('cOdEwArS1!2@3#4$5%6^7'));\nconsole.log(solve('cOdEwArS1!2@3#4$5%6^7&'));\nconsole.log(solve('c\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprevtucq6.ts(38,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmprevtucq6.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmprevtucq6.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('1A2B3C4D5E'));\nconsole.log(solve('1A2b3C4d5E'));\nconsole.log(solve('1a2B3c4D5e'));\nconsole.log(solve('1A2b3C4d5E'));\nconsole.log(solve('1a2B3c4D5e'));\nconsole.log(solve('1A2b3C4d5E'));\nconsole.log(solve('1a2B3c4D5e'));\nconsole.log(solve('1A2b3C4d5E'));\nconsole.log(solve('1a2B3c4D5e'));\nconsole.log(solve('1A2b3C4d5E'));\nconsole.log(solve('1a2B3c4D5e'));\nconsole.log(solve('1A2b3C4d5E'));\nconsole.log(solve('1a2B3c4D5e'));\nconsole.log(solve('1A2b3C4d5E'));\nconsole.log(solve('1a2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmydqw12p.ts(42,23): error TS1002: Unterminated string literal.\n../../../../tmp/tmpmydqw12p.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpmydqw12p.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\nconsole.log(solve('12345'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpdgi1de9z.js:30:12)\n    at Object.<anonymous> (/tmp/tmpdgi1de9z.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n12345\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg'));\nconsole.log(solve('aBcDeFgH123'));\nconsole.log(solve('123'));\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#$%^&*()_+'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#$%^&*()_+-'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#$%^&*()_+-='));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz123!@#$%^&*()_+-=[]{}'));\nconsole.log(solve('AbCdEfGhI\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprqrjbxh_.ts(37,29): error TS1002: Unterminated string literal.\n../../../../tmp/tmprqrjbxh_.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmprqrjbxh_.ts(38,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('ABC123!'));\nconsole.log(solve('!@#$%^&*()'));\nconsole.log(solve('!@#$%^&*()ABC'));\nconsole.log(solve('!@#$%^&*()ABC123'));\nconsole.log(solve('!@#$%^&*()ABC123!'));\nconsole.log(solve('!@#$%^&*()ABC123!@#$%^&*()'));\nconsole.log(solve('!@#$%^&*()ABC123!@#$%^&*()ABC'));\nconsole.log(solve('!@#$%^&*()ABC123!@#$%^&*()ABC123'));\nconsole.log(solve('!@#$%^&*()ABC123!@#$%^&*()ABC123!'));\nconsole.log(solve('!@#$%^&*()ABC123!@#$%^&*()ABC123!@#$%^&*()'));\nconsole.log(solve('!@#$%^&*()ABC123!@#$%^&*()ABC123!@#$%^&*()ABC'));\nconsole.log(solve('!@#$%^&*()ABC123!@#$%^&*()ABC123!@#$%^&*()ABC123'));\nconsole.log(solve('!@#$%^\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5_45v1kg.ts(38,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmp5_45v1kg.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmp5_45v1kg.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('ABCabc'));\nconsole.log(solve('abC123'));\nconsole.log(solve('aBc123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('aBc'));\nconsole.log(solve('!@#$%^&*()_+'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'));\nconsole.log(solve('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(solve('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQR\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpaef1wce5.ts(38,90): error TS1002: Unterminated string literal.\n../../../../tmp/tmpaef1wce5.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpaef1wce5.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWARS'));\nconsole.log(solve('codewars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars123'));\nconsole.log(solve('CodeWars123!'));\nconsole.log(solve('CodeWars123!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-='));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:<>?/.,'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:<>?/.,~`'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:<>?/.,~`1234567890'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:<>?/.,~`1234567890-=_+'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:<>?/.,~`1234567890-=_+!@#$%^&*()'));\nconsole.log(solve('CodeWars123!@#$%^&*()_+-=[]{}|;:<\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm4_rti5t.ts(35,53): error TS1002: Unterminated string literal.\n../../../../tmp/tmpm4_rti5t.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpm4_rti5t.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    let isLetter: boolean = false;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/i)) {\n            isLetter = true;\n            if (s[i] === s[i].toUpperCase()) {\n                result += s[i].toLowerCase();\n            } else {\n                result += s[i].toUpperCase();\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter) {\n        return s.split('').reverse().join('');\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('ABCabc123'));\nconsole.log(solve('z'));\nconsole.log(solve('Z'));\nconsole.log(solve('zZ'));\nconsole.log(solve('Zz'));\nconsole.log(solve('zZz'));\nconsole.log(solve('ZzZ'));\nconsole.log(solve('zZzZ'));\nconsole.log(solve('ZzZz'));\nconsole.log(solve('zZzZz'));\nconsole.log(solve('ZzZzZ'));\nconsole.log(solve('zZzZzZ'));\nconsole.log(solve('ZzZzZz'));\nconsole.log(solve('zZzZzZz'));\nconsole.log(solve('ZzZzZzZ'));\nconsole.log(solve('zZzZzZzZ'));\nconsole.log(solve('ZzZzZzZz'));\nconsole.log(solve('zZzZzZzZz'));\nconsole.log(solve('Z\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1c41wy4r.ts(52,21): error TS1002: Unterminated string literal.\n../../../../tmp/tmp1c41wy4r.ts(53,1): error TS1005: ',' expected.\n../../../../tmp/tmp1c41wy4r.ts(53,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('abc123'));\nconsole.log(solve('ABC123'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('ABCabc'));\nconsole.log(solve('abC123'));\nconsole.log(solve('123abc'));\nconsole.log(solve('123ABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('ABCabc123'));\nconsole.log(solve('abcABC123xyz'));\nconsole.log(solve('ABCabc123xyz'));\nconsole.log(solve('abcABC123XYZ'));\nconsole.log(solve('ABCabc123XYZ'));\nconsole.log(solve('abcABC123XYZ098'));\nconsole.log(solve('ABCabc123XYZ098'));\nconsole.log(solve('abcABC123XYZ098---'));\nconsole.log(solve('ABCabc123XYZ098---'));\nconsole.log(solve('abcABC123XYZ098---+++'));\nconsole.log(solve('ABCabc123XYZ098---+++'));\nconsole.log(solve('abcABC123XYZ098---+++***'));\nconsole.log(solve('ABCabc123XYZ098---+++***'));\nconsole.log(solve('abcABC123XYZ098---+++***&&&'));\nconsole.log(solve('ABCabc123XYZ098---+++***&&&'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmphqgkiybg.js:52:12)\n    at Object.<anonymous> (/tmp/tmphqgkiybg.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\nABC123\nabc123\nABCabc\nabcABC\nABc123\n123ABC\n123abc\nABCabc123\nabcABC123\nABCabc123XYZ\nabcABC123XYZ\nABCabc123xyz\nabcABC123xyz\nABCabc123xyz098\nabcABC123xyz098\nABCabc123xyz098---\nabcABC123xyz098---\nABCabc123xyz098---+++\nabcABC123xyz098---+++\nABCabc123xyz098---+++***\nabcABC123xyz098---+++***\nABCabc123xyz098---+++***&&&\nabcABC123xyz098---+++***&&&\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abCdEf'));\nconsole.log(solve('abCdEf123'));\nconsole.log(solve('123'));\nconsole.log(solve('1234567890'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpklfxyyd1.js:30:12)\n    at Object.<anonymous> (/tmp/tmpklfxyyd1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABcDeF\nABcDeF123\n123\n1234567890\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Supralapsarian'));\nconsole.log(solve('1337'));\nconsole.log(solve('aBcDeFg123'));\nconsole.log(solve('aBcDeFg123!@#$%^&*()'));\nconsole.log(solve('abcde'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpyl4en79i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpyl4en79i.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUPRALAPSARIAN\n1337\nAbCdEfG123\nAbCdEfG123!@#$%^&*()\nABCDE\n",
      "timestamp": 1660334540
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('12345'));\nconsole.log(solve('abcdef'));\nconsole.log(solve('ABCDEF'));\nconsole.log(solve('1a2b3c4d5e6f'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2c3D4e5F6g7H8i9J0k'));\nconsole.log(solve('a1B2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu_1owxqa.ts(36,24): error TS1002: Unterminated string literal.\n../../../../tmp/tmpu_1owxqa.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpu_1owxqa.ts(37,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334541
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('codeWArs'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log(solve('CodeWars'));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmphb3v4ggd.js:59:12)\n    at Object.<anonymous> (/tmp/tmphb3v4ggd.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "cODEWARS\nCodewaRS\nCODEwaRS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\ncODEwARS\n",
      "timestamp": 1660334541
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char.match(/[a-z]/i)) {\n            result += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.charCodeAt()'));\nconsole.log(solve('String.prototype.charAt()'));\nconsole.log(solve('String.prototype.charCodeAt()'));\nconsole.log(solve('AbCdEfGhIjKlMnOpQrStUvWxYz'));\nconsole.log(solve('The quick brown fox jumps over the lazy dog.'));\nconsole.log(solve('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpr6aeem7_.js:34:12)\n    at Object.<anonymous> (/tmp/tmpr6aeem7_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.CHARcODEaT()\nsTRING.PROTOTYPE.CHARaT()\nsTRING.PROTOTYPE.CHARcODEaT()\naBcDeFgHiJkLmNoPqRsTuVwXyZ\ntHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\nthe quick brown fox jumps over the lazy dog.\n",
      "timestamp": 1660334542
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abcd'));\nconsole.log(solve('ABCD'));\nconsole.log(solve('1234'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D'));\nconsole.log(solve('1a2b3c4d'));\nconsole.log(solve('1A2B3C4D'));\nconsole.log(solve('1A2b3c4D'));\nconsole.log(solve('1a2B3c4D\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprml61iac.ts(43,28): error TS1002: Unterminated string literal.\n../../../../tmp/tmprml61iac.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmprml61iac.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334533
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else if (char === char.toLowerCase()) {\n            result += char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('abcABC'));\nconsole.log(solve('abcABC123'));\nconsole.log(solve('abcABC123!@\u20ac'));\nconsole.log(solve('AAaa'));\nconsole.log(solve('!'));\nconsole.log(solve('!@\u20ac'));\nconsole.log(solve('!@\u20aca'));\nconsole.log(solve('!@\u20acA'));\nconsole.log(solve('!@\u20ac1'));\nconsole.log(solve('!@\u20acA1'));\nconsole.log(solve('!@\u20acA1a'));\nconsole.log(solve('!@\u20acA1aA'));\nconsole.log(solve('!@\u20acA1aAa'));\nconsole.log(solve('!@\u20acA1aAaA'));\nconsole.log(solve('!@\u20acA1aAaAa'));\nconsole.log(solve('!@\u20acA1aAaAaA'));\nconsole.log(solve('!@\u20acA1aAaAaAa'));\nconsole.log(solve('!@\u20acA1aAaAaAaA'));\nconsole.log(solve('!@\u20acA1aAaAaAaAa'));\nconsole.log(solve('!@\u20acA1aAaAaAaAaA'));\nconsole.log(solve('!@\u20acA1aAaAaAaAaAa'));\nconsole.log(solve('!@\u20acA1aAaAaAaAaAaA'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp8qqj9857.js:50:12)\n    at Object.<anonymous> (/tmp/tmp8qqj9857.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nABCabc\nABCabc123\nABCabc123!@\u20ac\naaAA\n!\n!@\u20ac\n!@\u20acA\n!@\u20aca\n!@\u20ac1\n!@\u20aca1\n!@\u20aca1A\n!@\u20aca1Aa\n!@\u20aca1AaA\n!@\u20aca1AaAa\n!@\u20aca1AaAaA\n!@\u20aca1AaAaAa\n!@\u20aca1AaAaAaA\n!@\u20aca1AaAaAaAa\n!@\u20aca1AaAaAaAaA\n!@\u20aca1AaAaAaAaAa\n!@\u20aca1AaAaAaAaAaA\n!@\u20aca1AaAaAaAaAaAa\n",
      "timestamp": 1660334541
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('hello world'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpdl0izxbz.js:31:12)\n    at Object.<anonymous> (/tmp/tmpdl0izxbz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nHELLO WORLD\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334529
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('HELLO WORLD'));\nconsole.log(solve('12345'));\nconsole.log(solve('1a2b3c4d5e'));\nconsole.log(solve('String.prototype.split'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpwlh4ktfq.js:31:12)\n    at Object.<anonymous> (/tmp/tmpwlh4ktfq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhello world\n12345\n1A2B3C4D5E\nsTRING.PROTOTYPE.SPLIT\n",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        const char = s[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else if (char === char.toLowerCase()) {\n            result += char.toUpperCase();\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('AbCdEf'));\nconsole.log(solve('aBcDeF'));\nconsole.log(solve('aBcDeF123'));\nconsole.log(solve('aBcDeF123!@#$%^&*()_+'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpq4mgbr99.js:34:12)\n    at Object.<anonymous> (/tmp/tmpq4mgbr99.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ABC\nabc\n123\naBcDeF\nAbCdEf\nAbCdEf123\nAbCdEf123!@#$%^&*()_+\n",
      "timestamp": 1660334542
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Codewars'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('cODEWArs'));\nconsole.log(solve('\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1w_k92_5.ts(47,20): error TS1002: Unterminated string literal.\n../../../../tmp/tmp1w_k92_5.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp1w_k92_5.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334526
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello World!'));\nconsole.log(solve('1234567890'));\nconsole.log(solve('!@#$%^&*()'));\nconsole.log(solve('qwertyuiopasdfghjklzxcvbnm'));\nconsole.log(solve('QWERTYUIOPASDFGHJKLZXCVBNM'));\nconsole.log(solve('qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'));\nconsole.log(solve('QWERTYUIOPASDFGHJKLZXCVBNMQWERTYUIOPASDFGHJKLZXCVBNM'));\nconsole.log(solve('qwertyuiopasdfghjklzxcvbnm1234567890'));\nconsole.log(solve('1234567890qwertyuiopasdfghjklzxcvbnm'));\nconsole.log(solve('!@#$%^&*()qwertyuiopasdfghjklzxcvbnm'));\nconsole.log(solve('qwertyuiopasdfghjklzxcvbnm!@#$%^&*()'));\nconsole.log(solve('!@#$%^&*()QWERTYUIOPASDFGHJKLZXCVBNM'));\nconsole.log(solve('QWERTYUIOPASDFGHJKLZXCVBNM!@#$%^&*()'));\nconsole.log(solve('!@#$%^&*()1234567890\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyt5ub32o.ts(35,40): error TS1002: Unterminated string literal.\n../../../../tmp/tmpyt5ub32o.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpyt5ub32o.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334541
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('Hello World'));\nconsole.log(solve('Hello-LOL'));\nconsole.log(solve('Sup DUDE!!?'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp9gmz53tt.js:29:12)\n    at Object.<anonymous> (/tmp/tmp9gmz53tt.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "hELLO wORLD\nhELLO-lol\nsUP dude!!?\n",
      "timestamp": 1660334522
    },
    {
      "exit_code": 1,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('a1B2c3'));\nconsole.log(solve('12345'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp_tmu4y8j.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_tmu4y8j.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "A1B2C3\nA1b2C3\n12345\n",
      "timestamp": 1660334542
    },
    {
      "exit_code": 2,
      "program": "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\nfunction solve(s: string): string {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve('abc'));\nconsole.log(solve('ABC'));\nconsole.log(solve('123'));\nconsole.log(solve('aBc'));\nconsole.log(solve('a1b2c3'));\nconsole.log(solve('a1B2c3'));\nconsole.log(solve('a1b2C3'));\nconsole.log(solve('a1B2C3'));\nconsole.log(solve('a1b2C3d4E5f6G7h8I9j10K11l12M13n14O15p16Q17r18S19t20U21v22W23x24Y25z26'));\nconsole.log(solve('a1b2C3d4E5f6G7h8I9j10K11l12M13n14O15p16Q17r18S19t20U21v22W23x24Y25z26A'));\nconsole.log(solve('a1b2C3d4E5f6G7h8I9j10K11l12M13n14O15p16Q17r18S19t20U21v22W23x24Y25z26A27B28C29D30E31F32G33H34I35J36K37L38M39N40O41P42Q43R44S45T46U47V48W49X50Y51Z52'));\nconsole.log(solve('a1b2C3d4E5f6G7h8I9j10K11l12M13n14O15p16Q17r18S\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplh5ms9xi.ts(32,66): error TS1002: Unterminated string literal.\n../../../../tmp/tmplh5ms9xi.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmplh5ms9xi.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334542
    }
  ]
}