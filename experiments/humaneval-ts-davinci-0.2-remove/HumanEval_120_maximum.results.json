{
  "language": "ts",
  "name": "HumanEval_120_maximum",
  "results": [
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpkpf4tshp.js:20:12)\n    at Object.<anonymous> (/tmp/tmpkpf4tshp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    const maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0jf1igd8.ts(12,25): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -1)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -6)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpjg_b13nb.js:43:12)\n    at Object.<anonymous> (/tmp/tmpjg_b13nb.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, undefined ]\n[ 5 ]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpm1n8icxn.js:34:12)\n    at Object.<anonymous> (/tmp/tmpm1n8icxn.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let n: number = arr.length;\n    while (i < k) {\n        result[i] = arr[i];\n        i++;\n    }\n    result.sort((a, b) => a - b);\n    while (i < n) {\n        if (arr[i] > result[0]) {\n            result[0] = arr[i];\n            j = 0;\n            while (j < k - 1 && result[j] > result[j + 1]) {\n                let temp: number = result[j];\n                result[j] = result[j + 1];\n                result[j + 1] = temp;\n                j++;\n            }\n        }\n        i++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => a - b);\n    for (i = k; i < arr.length; i++) {\n        for (j = 0; j < k; j++) {\n            if (arr[i] > result[j]) {\n                result.splice(j, 0, arr[i]);\n                result.pop();\n                break;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4\n]\n    at test (/tmp/tmpovww38j6.js:33:12)\n    at Object.<anonymous> (/tmp/tmpovww38j6.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, -4 ],\n  expected: [ 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpkpf4tshp.js:20:12)\n    at Object.<anonymous> (/tmp/tmpkpf4tshp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpaz24drxf.js:31:12)\n    at Object.<anonymous> (/tmp/tmpaz24drxf.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 4, 5 ]\n[ 2, 3 ]\n[ 1, 2 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpem7skfww.js:30:12)\n    at Object.<anonymous> (/tmp/tmpem7skfww.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([-1, -2, -3, -4, -5], 2));\nconsole.log(maximum([-1, -2, -3, -4, -5], 3));\nconsole.log(maximum([-1, -2, -3, -4, -5], 4));\nconsole.log(maximum([-1, -2, -3, -4, -5], 5));\nconsole.log(maximum([-1, -2, -3, -4, -5], 1));\nconsole.log(maximum([-1, -2, -3, -4, -5], 0));\nconsole.log(maximum([-1, -2, -3, -4, -5], 6));\nconsole.log(maximum([-1, -2, -3, -4, -5], -1));\nconsole.log(maximum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10],\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnathqvsx.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let index: number = 0;\n    for (let i = 0; i < k; i++) {\n        max = arr[i];\n        index = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                index = j;\n            }\n        }\n        result.push(max);\n        arr[index] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpi2bpvqdv.js:35:12)\n    at Object.<anonymous> (/tmp/tmpi2bpvqdv.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    while (i < k) {\n        result[i] = arr[i];\n        i++;\n    }\n    result.sort((a, b) => a - b);\n    while (i < arr.length) {\n        if (arr[i] > result[0]) {\n            result[0] = arr[i];\n            j = 0;\n            while (j < k - 1 && result[j] > result[j + 1]) {\n                let temp: number = result[j];\n                result[j] = result[j + 1];\n                result[j + 1] = temp;\n                j++;\n            }\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(maximum([3, 2, 1, 5, 6, 4], 2));\nconsole.log(maximum([3, 2, 3, 1, 2, 4, 5, 5, 6], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 6 ]\n[ 4, 5, 5, 6 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfffjglxb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpfffjglxb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfffjglxb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpfffjglxb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let length = arr.length;\n    for (let i = 0; i < length; i++) {\n        let num = arr[i];\n        if (result.length < k) {\n            result.push(num);\n        } else {\n            let min = Math.min(...result);\n            if (num > min) {\n                let index = result.indexOf(min);\n                result[index] = num;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpivo22_be.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpivo22_be.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([], 1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], -1));\nconsole.log(maximum([1], 1));\nconsole.log(maximum([1], 0));\nconsole.log(maximum([1], -1));\nconsole.log(maximum([1, 2], 1));\nconsole.log(maximum([1, 2], 0));\nconsole.log(maximum([1, 2], -1));\nconsole.log(maximum([1, 2], 2));\nconsole.log(maximum([1, 2], 3));\nconsole.log(maximum([1, 2], -3));\nconsole.log(maximum([1, 2, 3], 1));\nconsole.log(maximum([1, 2, 3], 0));\nconsole.log(maximum([1, 2, 3], -1));\nconsole.log(maximum([1, 2, 3], 2));\nconsole.log(maximum([1, 2, 3], 3));\nconsole.log(maximum([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyha5_0ni.ts(51,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpem7skfww.js:30:12)\n    at Object.<anonymous> (/tmp/tmpem7skfww.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfffjglxb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpfffjglxb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfqkp1ibu.js:27:12)\n    at Object.<anonymous> (/tmp/tmpfqkp1ibu.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    const len = arr.length;\n    if (k === 0) {\n        return result;\n    }\n    for (let i = 0; i < len; i++) {\n        const num = arr[i];\n        if (result.length < k) {\n            result.push(num);\n            continue;\n        }\n        if (num > result[0]) {\n            result.shift();\n            result.push(num);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphc4vgdjc.ts(51,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpai3779_q.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp3ucq49d4.js:34:12)\n    at Object.<anonymous> (/tmp/tmp3ucq49d4.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpzzwv9s05.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzzwv9s05.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  const len = arr.length;\n  if (k >= len) {\n    return arr.sort((a, b) => b - a);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < len; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp5xs7wrv6.js:34:12)\n    at Object.<anonymous> (/tmp/tmp5xs7wrv6.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpm9t9qx81.js:25:12)\n    at Object.<anonymous> (/tmp/tmpm9t9qx81.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmppuir1643.js:26:12)\n    at Object.<anonymous> (/tmp/tmppuir1643.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyfeizpqp.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyfeizpqp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let max: number[] = [];\n  for (let i = 0; i < k; i++) {\n    max.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    let min = Math.min(...max);\n    if (arr[i] > min) {\n      max.splice(max.indexOf(min), 1, arr[i]);\n    }\n  }\n  return max;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi09n69nh.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpi09n69nh.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let length = arr.length;\n    if (k === 0) {\n        return result;\n    }\n    if (k === length) {\n        return arr;\n    }\n    let left = 0;\n    let right = length - 1;\n    let index = partition(arr, left, right);\n    while (index !== k - 1) {\n        if (index > k - 1) {\n            right = index - 1;\n            index = partition(arr, left, right);\n        } else {\n            left = index + 1;\n            index = partition(arr, left, right);\n        }\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpflfkd56j.ts(21,17): error TS2304: Cannot find name 'partition'.\n../../../../tmp/tmpflfkd56j.ts(25,21): error TS2304: Cannot find name 'partition'.\n../../../../tmp/tmpflfkd56j.ts(28,21): error TS2304: Cannot find name 'partition'.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], 1));\nconsole.log(maximum([], -1));\nconsole.log(maximum([1], 1));\nconsole.log(maximum([1], 0));\nconsole.log(maximum([1], -1));\nconsole.log(maximum([1], 2));\nconsole.log(maximum([1, 2], 1));\nconsole.log(maximum([1, 2], 0));\nconsole.log(maximum([1, 2], -1));\nconsole.log(maximum([1, 2], 2));\nconsole.log(maximum([1, 2], 3));\nconsole.log(maximum([1, 2, 3], 1));\nconsole.log(maximum([1, 2, 3], 0));\nconsole.log(maximum([1, 2, 3], -1));\nconsole.log(maximum([1, 2, 3], 2));\nconsole.log(maximum([1, 2, 3], 3));\nconsole.log(maximum([1, 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpclmj1_gy.ts(51,1): error TS1005: ',' expected.\n../../../../tmp/tmpclmj1_gy.ts(51,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_mc2sefm.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp_mc2sefm.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([3, 2, 1], 2)); // [3, 2]\nconsole.log(maximum([1, 2], 2)); // [2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp5r_ilz1s.js:32:12)\n    at Object.<anonymous> (/tmp/tmp5r_ilz1s.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_mc2sefm.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp_mc2sefm.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    [arr[i], arr[maxIndex]] = [arr[maxIndex], arr[i]];\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmprta_qr55.js:32:12)\n    at Object.<anonymous> (/tmp/tmprta_qr55.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfffjglxb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpfffjglxb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7_n40qpz.ts(12,23): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    if (arr.length === 0) {\n        return result;\n    }\n    if (arr.length <= k) {\n        return arr.sort((a, b) => b - a);\n    }\n    for (let i = 0; i < k; i++) {\n        let max = arr[i];\n        let index = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                index = j;\n            }\n        }\n        result.push(max);\n        arr[index] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp8i2li569.js:39:12)\n    at Object.<anonymous> (/tmp/tmp8i2li569.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpc9dflx1o.js:23:12)\n    at Object.<anonymous> (/tmp/tmpc9dflx1o.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5 ]\n[ 5, 4, 3, 2, 1 ]\n[]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    if (arr.length === 0) {\n        return result;\n    }\n    if (arr.length === 1) {\n        return arr;\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => a - b);\n    for (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[0]) {\n            result.shift();\n            result.push(arr[i]);\n            result.sort((a, b) => a - b);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([], 1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], -1));\nconsole.log(maximum([1], 1));\nconsole.log(maximum([1], 0));\nconsole.log(maximum([1], -1));\nconsole.log(maximum([1, 2], 1));\nconsole.log(maximum([1, 2], 0));\nconsole.log(maximum([1, 2], -1));\nconsole.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwoh68duu.ts(54,1): error TS1005: ',' expected.\n../../../../tmp/tmpwoh68duu.ts(54,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    if (k === 0) {\n        return [];\n    }\n    if (k === arr.length) {\n        return arr;\n    }\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmphtcsut4r.js:34:12)\n    at Object.<anonymous> (/tmp/tmphtcsut4r.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n[ 3, 2 ]\n[ 1, 2 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  let index: number = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n    arr[index] = -Infinity;\n    max = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp619vnn8z.js:33:12)\n    at Object.<anonymous> (/tmp/tmp619vnn8z.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 0, 0 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let index: number = 0;\n    while (index < k) {\n        let max: number = arr[0];\n        let maxIndex: number = 0;\n        for (let i: number = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n                maxIndex = i;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n        index++;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp61q16ifd.js:34:12)\n    at Object.<anonymous> (/tmp/tmp61q16ifd.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyfeizpqp.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyfeizpqp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let length = arr.length;\n    if (length === 0) {\n        return result;\n    }\n    if (k === 0) {\n        return result;\n    }\n    if (k >= length) {\n        return arr.sort((a, b) => b - a);\n    }\n    let maxHeap = new MaxHeap();\n    for (let i = 0; i < k; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for (let i = k; i < length; i++) {\n        if (arr[i] > maxHeap.peek()) {\n            maxHeap.pop();\n            maxHeap.insert(arr[i]);\n        }\n    }\n    while (!maxHeap.isEmpty()) {\n        result.push(maxHeap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd0q2oquy.ts(22,23): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  if (k === 0) return [];\n  if (k === arr.length) return arr;\n  let result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (\n      result.length > 0 &&\n      result[result.length - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n    }\n    result.push(arr[i]);\n  }\n  return result.slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprdow2t3o.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmprdow2t3o.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpzzwv9s05.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzzwv9s05.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 4, 5 ]\n[ 2, 3 ]\n[ 1, 2 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  if (arr.length === 0) {\n    return result;\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpc6_y3dn3.js:30:12)\n    at Object.<anonymous> (/tmp/tmpc6_y3dn3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n        } else {\n            result.sort((a, b) => b - a);\n            if (arr[i] > result[k - 1]) {\n                result[k - 1] = arr[i];\n            }\n        }\n    }\n    return result.sort((a, b) => b - a);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeejk1tt9.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpeejk1tt9.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8mnjuu4_.ts(45,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  let i = 0;\n  while (i < k) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmprdq1u5yw.js:35:12)\n    at Object.<anonymous> (/tmp/tmprdq1u5yw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpmkj8m520.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmkj8m520.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let i = 0;\n  while (i < k) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([3, 2, 1], 2)); // [3, 2]\nconsole.log(maximum([1, 2], 2)); // [2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp7jzlppbd.js:34:12)\n    at Object.<anonymous> (/tmp/tmp7jzlppbd.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let res: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (res.length < k) {\n      res.push(arr[i]);\n    } else {\n      res.sort((a, b) => a - b);\n      if (arr[i] > res[0]) {\n        res[0] = arr[i];\n      }\n    }\n  }\n  return res.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [2,3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1,2,3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1,2,3,4,5]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 4, 5 ]\n[ 3, 4, 5 ]\n[ 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5 ]\n[]\n[ 1, 2, 3, 4, 5 ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            result.push(arr[i]);\n            i++;\n        } else {\n            result.push(arr[j]);\n            j--;\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpv6e_gcxk.js:32:12)\n    at Object.<anonymous> (/tmp/tmpv6e_gcxk.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2 ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    const maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0jf1igd8.ts(12,25): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let len = arr.length;\n    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n        for (let j = 0; j < len; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpi50t6b51.js:33:12)\n    at Object.<anonymous> (/tmp/tmpi50t6b51.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp8fiqoxot.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8fiqoxot.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    if (k === 0) {\n        return [];\n    }\n    if (k === arr.length) {\n        return arr;\n    }\n    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => a - b);\n    for (let i = k; i < arr.length; i++) {\n        let j = k - 1;\n        while (j >= 0 && arr[i] > result[j]) {\n            j--;\n        }\n        if (j < k - 1) {\n            result.splice(j + 1, 0, arr[i]);\n            result.pop();\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdga8i6sh.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -1)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -6)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpjg_b13nb.js:43:12)\n    at Object.<anonymous> (/tmp/tmpjg_b13nb.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, undefined ]\n[ 5 ]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    while (i < k) {\n        let max = arr[i];\n        let maxIndex = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = arr[i];\n        arr[i] = max;\n        i++;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpsy8oysa6.js:38:12)\n    at Object.<anonymous> (/tmp/tmpsy8oysa6.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5 ]\n[]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyfeizpqp.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyfeizpqp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max = arr[i];\n        let maxIndex = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4oxetof0.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp4oxetof0.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmppuir1643.js:26:12)\n    at Object.<anonymous> (/tmp/tmppuir1643.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    max = arr[i];\n    maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpf6byzxml.js:35:12)\n    at Object.<anonymous> (/tmp/tmpf6byzxml.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2, 3, 4, 5], -13));\nconsole.log(maximum([1, 2, 3, 4, 5], -14));\nconsole.log(maximum([1, 2, 3, 4, 5], -15));\nconsole.log(maximum([1, 2, 3, 4, 5], -16));\nconsole.log(maximum([1, 2, 3, 4, 5], -17));\nconsole.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpat6przpr.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpat6przpr.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7_n40qpz.ts(12,23): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyfeizpqp.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyfeizpqp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf1jhwytb.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_mc2sefm.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp_mc2sefm.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpai3779_q.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfffjglxb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpfffjglxb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2, 3, 4, 5], -13));\nconsole.log(maximum([1, 2, 3, 4, 5], -14));\nconsole.log(maximum([1, 2, 3, 4, 5], -15));\nconsole.log(maximum([1, 2, 3, 4, 5], -16));\nconsole.log(maximum([1, 2, 3, 4, 5], -17));\nconsole.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpat6przpr.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpat6przpr.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    let i = 0;\n    while (i < k) {\n        result.push(arr[i]);\n        i++;\n    }\n    result.sort((a, b) => b - a);\n    while (i < arr.length) {\n        if (arr[i] > result[k - 1]) {\n            result[k - 1] = arr[i];\n            result.sort((a, b) => b - a);\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpm7p7hvy_.js:51:12)\n    at Object.<anonymous> (/tmp/tmpm7p7hvy_.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, undefined ]\n[ 5, 4, 3, 2, 1, undefined, undefined ]\n[ 5, 4, 3, 2, 1, undefined, undefined, undefined ]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n  undefined, undefined,\n  undefined\n]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined\n]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined\n]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n[\n  5,         4,\n  3,         2,\n  1,         undefined,\n  undefined, undefined,\n  undefined, un",
      "timestamp": 1660334807
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyfeizpqp.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyfeizpqp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpem7skfww.js:30:12)\n    at Object.<anonymous> (/tmp/tmpem7skfww.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    if (arr.length === 0) {\n        return result;\n    }\n    let max: number = arr[0];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    let count: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === max) {\n            count++;\n        }\n    }\n    if (count >= k) {\n        for (let i = 0; i < k; i++) {\n            result.push(max);\n        }\n        return result;\n    }\n    let index: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === max) {\n            result[index] = max;\n            index++;\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== max) {\n            result[index] = arr[i];\n            index++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpxbexuaq0.js:51:12)\n    at Object.<anonymous> (/tmp/tmpxbexuaq0.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  const len = arr.length;\n  if (k === 0) {\n    return result;\n  }\n  if (k === len) {\n    return arr;\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < len; i++) {\n    let j = k - 1;\n    while (j >= 0 && arr[i] > result[j]) {\n      j--;\n    }\n    if (j !== k - 1) {\n      result.splice(j + 1, 0, arr[i]);\n      result.pop();\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc8s6e7r9.ts(52,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpxvncdqrn.js:34:12)\n    at Object.<anonymous> (/tmp/tmpxvncdqrn.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a, b) => a - b).slice(arr.length - k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([3, 2, 1], 2)); // [2, 3]\nconsole.log(maximum([1, 2], 2)); // [1, 2]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 4, 5 ]\n[ 2, 3 ]\n[ 1, 2 ]\n",
      "timestamp": 1660334807
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpmkj8m520.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmkj8m520.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n        } else {\n            result.sort((a, b) => a - b);\n            if (arr[i] > result[0]) {\n                result[0] = arr[i];\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp98umh06r.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp_f4bxy21.js:33:12)\n    at Object.<anonymous> (/tmp/tmp_f4bxy21.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\ndescribe(\"maximum\", () => {\n  test(\"#1\", () => {\n    expect(maximum([1, 2, 3, 4, 5], 2)).toEqual([5, 4]);\n  });\n  test(\"#2\", () => {\n    expect(maximum([3, 2, 1], 2)).toEqual([3, 2]);\n  });\n  test(\"#3\", () => {\n    expect(maximum([1, 2], 2)).toEqual([2, 1]);\n  });\n});\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6a6e7ah1.ts(27,1): error TS2582: Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.\n../../../../tmp/tmp6a6e7ah1.ts(28,8): error TS2554: Expected 0 arguments, but got 2.\n../../../../tmp/tmp6a6e7ah1.ts(29,5): error TS2304: Cannot find name 'expect'.\n../../../../tmp/tmp6a6e7ah1.ts(31,8): error TS2554: Expected 0 arguments, but got 2.\n../../../../tmp/tmp6a6e7ah1.ts(32,5): error TS2304: Cannot find name 'expect'.\n../../../../tmp/tmp6a6e7ah1.ts(34,8): error TS2554: Expected 0 arguments, but got 2.\n../../../../tmp/tmp6a6e7ah1.ts(35,5): error TS2304: Cannot find name 'expect'.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    let len: number = arr.length;\n    for (let i: number = 0; i < len; i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n        } else {\n            temp = result.slice();\n            for (let j: number = 0; j < k; j++) {\n                if (arr[i] > temp[j]) {\n                    temp.splice(j, 0, arr[i]);\n                    break;\n                }\n            }\n            result = temp.slice(0, k);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpv7jo0545.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv7jo0545.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334807
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqcxoculg.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfffjglxb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpfffjglxb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    const maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0jf1igd8.ts(12,25): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        max = -Infinity;\n        maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp511loeuv.js:36:12)\n    at Object.<anonymous> (/tmp/tmp511loeuv.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8mnjuu4_.ts(45,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let i = 0;\n  while (i < k) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmppz_283h8.js:35:12)\n    at Object.<anonymous> (/tmp/tmppz_283h8.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334807
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmppfvt0i8m.js:29:12)\n    at Object.<anonymous> (/tmp/tmppfvt0i8m.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max = Number.MIN_SAFE_INTEGER;\n        let maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmphwvck6d5.js:32:12)\n    at Object.<anonymous> (/tmp/tmphwvck6d5.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // []\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpsqams51x.js:33:12)\n    at Object.<anonymous> (/tmp/tmpsqams51x.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5 ]\n[ 5, 4, 3, 2, 1 ]\n[]\n[ 5, 4, 3, 2, 1, undefined ]\n",
      "timestamp": 1660334809
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    if (arr.length === 0) {\n        return result;\n    }\n    if (arr.length <= k) {\n        return arr.sort((a, b) => b - a);\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    for (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[k - 1]) {\n            let j = k - 1;\n            while (j >= 0 && arr[i] > result[j]) {\n                j--;\n            }\n            result.splice(j + 1, 0, arr[i]);\n            result.pop();\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfb_fnful.js:40:12)\n    at Object.<anonymous> (/tmp/tmpfb_fnful.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let maxIndex: number = 0;\n    for (let i = 0; i < k; i++) {\n        max = -Infinity;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpkpcuiikb.js:33:12)\n    at Object.<anonymous> (/tmp/tmpkpcuiikb.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp3ucq49d4.js:34:12)\n    at Object.<anonymous> (/tmp/tmp3ucq49d4.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([1, 2, 3, 4, 5], 23));\nconsole.log(maximum([1, 2, 3, 4, 5], 24));\nconsole.log(maximum([1, 2, 3, 4, 5], 25));\nconsole.log(maximum([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5u7d_jrm.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp5u7d_jrm.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334809
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5kihtlw1.ts(11,25): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334809
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n      result[0] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdfbd6n4_.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpdfbd6n4_.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334809
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1,2,3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1,2,3,4,5]\nconsole.log(maximum([1, 2, 3, 4, 5], -1)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -6)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -9)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -10)); // []\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 4, 5 ]\n[ 3, 4, 5 ]\n[ 5 ]\n[ 1, 2, 3, 4, 5 ]\n[]\n[ 1, 2, 3, 4, 5, undefined ]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp8fiqoxot.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8fiqoxot.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpai3779_q.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyfeizpqp.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyfeizpqp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpzzwv9s05.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzzwv9s05.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy6zefbdn.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpzzwv9s05.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzzwv9s05.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  const sortedArr = arr.sort((a, b) => b - a);\n  for (let i = 0; i < k; i++) {\n    result.push(sortedArr[i]);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpx15lnubw.js:25:12)\n    at Object.<anonymous> (/tmp/tmpx15lnubw.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  const heap = new Heap(arr, (a, b) => a > b);\n  for (let i = 0; i < k; i++) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0kedz6wr.ts(12,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpzzwv9s05.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzzwv9s05.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let len = arr.length;\n    if (len <= k) {\n        return arr.sort((a, b) => b - a);\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    for (let i = k; i < len; i++) {\n        if (arr[i] > result[k - 1]) {\n            let j = k - 1;\n            while (j >= 0 && arr[i] > result[j]) {\n                j--;\n            }\n            result.splice(j + 1, 0, arr[i]);\n            result.pop();\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcxh57ty3.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7_n40qpz.ts(12,23): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let max: number = arr[0];\n  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    max = arr[i];\n    maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpcx9c_iye.js:35:12)\n    at Object.<anonymous> (/tmp/tmpcx9c_iye.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_mc2sefm.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp_mc2sefm.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    if (arr.length === 0) {\n        return result;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        const num = arr[i];\n        if (result.length < k) {\n            result.push(num);\n            result.sort((a, b) => b - a);\n        } else {\n            if (num > result[k - 1]) {\n                result.pop();\n                result.push(num);\n                result.sort((a, b) => b - a);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([], 1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], -1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfms92oeq.js:45:12)\n    at Object.<anonymous> (/tmp/tmpfms92oeq.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5 ]\n[]\n[]\n[]\n[]\n[]\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  if (k === 0) {\n    return result;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    while (\n      result.length > 0 &&\n      result[result.length - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjodraon7.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmpjodraon7.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpmkj8m520.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmkj8m520.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyfeizpqp.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyfeizpqp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  if (arr.length === 0) {\n    return result;\n  }\n  let max: number = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(max);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1urja_w8.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp1urja_w8.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpn2ptyy9e.js:22:12)\n    at Object.<anonymous> (/tmp/tmpn2ptyy9e.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpm9t9qx81.js:25:12)\n    at Object.<anonymous> (/tmp/tmpm9t9qx81.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfffjglxb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpfffjglxb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    // return arr.sort((a, b) => b - a).slice(0, k);\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmptdz_boei.js:22:12)\n    at Object.<anonymous> (/tmp/tmptdz_boei.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpem7skfww.js:30:12)\n    at Object.<anonymous> (/tmp/tmpem7skfww.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let maxIndex: number = 0;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = 0;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp4xurovqc.js:33:12)\n    at Object.<anonymous> (/tmp/tmp4xurovqc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 0, 0 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp7z79cs11.js:34:12)\n    at Object.<anonymous> (/tmp/tmp7z79cs11.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, undefined ]\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  const maxHeap = new MaxHeap();\n  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(maxHeap.extractMax());\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7_n40qpz.ts(12,23): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let index = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        index = j;\n      }\n    }\n    result.push(max);\n    arr.splice(index, 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpa9gjahfk.js:29:12)\n    at Object.<anonymous> (/tmp/tmpa9gjahfk.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334811
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 4, 5 ]\n[ 3, 4, 5 ]\n[ 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5, undefined ]\n[ 1, 2, 3, 4, 5, undefined, undefined ]\n[ 1, 2, 3, 4, 5, undefined, undefined, undefined ]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, un",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    if (k === 0) {\n        return [];\n    }\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpid7yguru.js:31:12)\n    at Object.<anonymous> (/tmp/tmpid7yguru.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n[ 3, 2 ]\n[ 1, 2 ]\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  if (k === 0) return [];\n  if (k === arr.length) return arr;\n  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (\n      result.length > 0 &&\n      result[result.length - 1] < arr[i] &&\n      result.length + arr.length - i > k\n    ) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp4c9oemqj.js:50:12)\n    at Object.<anonymous> (/tmp/tmp4c9oemqj.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n[ 5 ]\n[ 1, 2, 3, 4, 5 ]\n[]\n[ 1, 2, 3, 4, 5 ]\n[ 3, 4, 5 ]\n[ 2, 3, 4, 5 ]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    // return arr.sort((a, b) => b - a).slice(0, k);\n    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([1, 2, 3, 4, 5], 23));\nconsole.log(maximum([1, 2, 3, 4, 5], 24));\nconsole.log(maximum([1, 2, 3, 4, 5], 25));\nconsole.log(maximum([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6k8lyf8m.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp6k8lyf8m.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 2)); // [5, 4]\nconsole.log(maximum([5, 4, 3, 2, 1], 3)); // [5, 4, 3]\nconsole.log(maximum([5, 4, 3, 2, 1], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([5, 4, 3, 2, 1], 0)); // []\nconsole.log(maximum([], 0)); // []\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpl5fsajcn.js:36:12)\n    at Object.<anonymous> (/tmp/tmpl5fsajcn.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5 ]\n[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5 ]\n[ 5, 4, 3, 2, 1 ]\n[]\n[]\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpmkj8m520.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmkj8m520.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8mnjuu4_.ts(45,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 2)); // [5, 4]\nconsole.log(maximum([5, 4, 3, 2, 1], 3)); // [5, 4, 3]\nconsole.log(maximum([5, 4, 3, 2, 1], 1)); // [5]\nconsole.log(maximum([5, 4, 3, 2, 1], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([5, 4, 3, 2, 1], 0)); // []\nconsole.log(maximum([], 0)); // []\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpl5fsajcn.js:36:12)\n    at Object.<anonymous> (/tmp/tmpl5fsajcn.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5 ]\n[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5 ]\n[ 5, 4, 3, 2, 1 ]\n[]\n[]\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8mnjuu4_.ts(45,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_mc2sefm.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp_mc2sefm.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334802
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let len = arr.length;\n    if (len === 0) {\n        return result;\n    }\n    if (len <= k) {\n        return arr;\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    for (let i = k; i < len; i++) {\n        let min = Math.min(...result);\n        if (arr[i] > min) {\n            let index = result.indexOf(min);\n            result[index] = arr[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp8zvi2j12.js:34:12)\n    at Object.<anonymous> (/tmp/tmp8zvi2j12.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpem7skfww.js:30:12)\n    at Object.<anonymous> (/tmp/tmpem7skfww.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpwnkskz_2.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwnkskz_2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length && arr[i] > result[result.length - 1] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxu99e5xo.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqcxoculg.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 0,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => a - b);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[0]) {\n      result.shift();\n      result.push(arr[i]);\n      result.sort((a, b) => a - b);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 4, 5 ]\n[ 3, 4, 5 ]\n[ 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5, undefined ]\n[ 1, 2, 3, 4, 5, undefined, undefined ]\n[ 1, 2, 3, 4, 5, undefined, undefined, undefined ]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined,\n  undefined, undefined\n]\n[\n  1,         2,\n  3,         4,\n  5,         undefined,\n  undefined, undefined,\n  undefined, un",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    if (arr.length === 0) {\n        return result;\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    for (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[k - 1]) {\n            result[k - 1] = arr[i];\n            result.sort((a, b) => b - a);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([], 0));\nconsole.log(maximum([], 1));\nconsole.log(maximum([], -1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpvbq8fq46.js:40:12)\n    at Object.<anonymous> (/tmp/tmpvbq8fq46.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5 ]\n[]\n[ 5, 4, 3, 2, 1, undefined ]\n[]\n[]\n[]\n[]\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9mrxmq9o.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1, 2, 3, 4, 5], 22));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqcxoculg.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334806
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let max: number = -Infinity;\n  let maxIndex: number = -1;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n    max = -Infinity;\n    maxIndex = -1;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 1)); // [5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpenkr2gi_.js:36:12)\n    at Object.<anonymous> (/tmp/tmpenkr2gi_.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    if (k === 0) {\n        return [];\n    }\n    if (k === arr.length) {\n        return arr;\n    }\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        while (result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n            result.pop();\n        }\n        if (result.length < k) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc_all08f.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpc_all08f.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    const max = Math.max(...arr);\n    result.push(max);\n    arr.splice(arr.indexOf(max), 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpn2ptyy9e.js:22:12)\n    at Object.<anonymous> (/tmp/tmpn2ptyy9e.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpmkj8m520.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmkj8m520.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyfeizpqp.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyfeizpqp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334803
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzabosxei.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpzabosxei.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let len = arr.length;\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < len; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfd4w842_.js:35:12)\n    at Object.<anonymous> (/tmp/tmpfd4w842_.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let max: number = arr[0];\n  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n    max = arr[0];\n    maxIndex = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpz0okfsln.js:34:12)\n    at Object.<anonymous> (/tmp/tmpz0okfsln.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [5, 4]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [5, 4, 3]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [5, 4, 3, 2]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [5, 4, 3, 2, 1]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [5, 4, 3, 2, 1]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpm1n8icxn.js:34:12)\n    at Object.<anonymous> (/tmp/tmpm1n8icxn.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpmkj8m520.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmkj8m520.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334803
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpkt74ls8x.js:36:12)\n    at Object.<anonymous> (/tmp/tmpkt74ls8x.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, -Infinity ]\n",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmppfvt0i8m.js:29:12)\n    at Object.<anonymous> (/tmp/tmppfvt0i8m.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmppfvt0i8m.js:29:12)\n    at Object.<anonymous> (/tmp/tmppfvt0i8m.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334809
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (result.length < k) {\n      result.push(num);\n      continue;\n    }\n    for (let j = 0; j < result.length; j++) {\n      if (num > result[j]) {\n        result.splice(j, 0, num);\n        result.pop();\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpok34s8ti.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpok34s8ti.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334813
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    const maxHeap = new MaxHeap();\n    for (let i = 0; i < arr.length; i++) {\n        maxHeap.insert(arr[i]);\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(maxHeap.extractMax());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0jf1igd8.ts(12,25): error TS2552: Cannot find name 'MaxHeap'. Did you mean 'maxHeap'?\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  let maxIndex: number = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = -Infinity;\n    max = 0;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpdq278kjn.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdq278kjn.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 0, 0 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[0];\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp7z79cs11.js:34:12)\n    at Object.<anonymous> (/tmp/tmp7z79cs11.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 5, 4, 3 ]\n[ 5, 4, 3, 2 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1, undefined ]\n",
      "timestamp": 1660334810
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpapt0h0qj.js:19:12)\n    at Object.<anonymous> (/tmp/tmpapt0h0qj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let maxIndex: number = 0;\n    for (let i = 0; i < k; i++) {\n        max = -Infinity;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpcv7849q6.js:30:12)\n    at Object.<anonymous> (/tmp/tmpcv7849q6.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334814
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    for (let i = k; i < arr.length; i++) {\n        if (arr[i] > result[k - 1]) {\n            result[k - 1] = arr[i];\n            result.sort((a, b) => b - a);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc1w7ioii.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpc1w7ioii.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] < result[k - 1]) {\n      continue;\n    }\n    for (let j = 0; j < k; j++) {\n      if (arr[i] > result[j]) {\n        result.splice(j, 0, arr[i]);\n        result.pop();\n        break;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpl72qk3df.js:33:12)\n    at Object.<anonymous> (/tmp/tmpl72qk3df.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let maxIndex: number = -1;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n        maxIndex = -1;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpfffjglxb.js:34:12)\n    at Object.<anonymous> (/tmp/tmpfffjglxb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpai3779_q.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334799
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  let i = 0;\n  while (i < k) {\n    result.push(arr[i]);\n    i++;\n  }\n  result.sort((a, b) => b - a);\n  while (i < arr.length) {\n    if (arr[i] > result[k - 1]) {\n      result.pop();\n      result.push(arr[i]);\n      result.sort((a, b) => b - a);\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpexuje98k.js:34:12)\n    at Object.<anonymous> (/tmp/tmpexuje98k.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    let max: number = -Infinity;\n    let index: number = 0;\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                index = j;\n            }\n        }\n        result.push(max);\n        arr[index] = -Infinity;\n        max = -Infinity;\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmp3hqb93f9.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3hqb93f9.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334814
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr.splice(maxIndex, 1);\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 7));\nconsole.log(maximum([1, 2, 3, 4, 5], 8));\nconsole.log(maximum([1, 2, 3, 4, 5], 9));\nconsole.log(maximum([1, 2, 3, 4, 5], 10));\nconsole.log(maximum([1, 2, 3, 4, 5], 11));\nconsole.log(maximum([1, 2, 3, 4, 5], 12));\nconsole.log(maximum([1, 2, 3, 4, 5], 13));\nconsole.log(maximum([1, 2, 3, 4, 5], 14));\nconsole.log(maximum([1, 2, 3, 4, 5], 15));\nconsole.log(maximum([1, 2, 3, 4, 5], 16));\nconsole.log(maximum([1, 2, 3, 4, 5], 17));\nconsole.log(maximum([1, 2, 3, 4, 5], 18));\nconsole.log(maximum([1, 2, 3, 4, 5], 19));\nconsole.log(maximum([1, 2, 3, 4, 5], 20));\nconsole.log(maximum([1, 2, 3, 4, 5], 21));\nconsole.log(maximum([\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnpzxa1ph.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334814
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  result.sort((a, b) => b - a);\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i] > result[k - 1]) {\n      result[k - 1] = arr[i];\n      for (let j = k - 1; j > 0; j--) {\n        if (result[j] > result[j - 1]) {\n          const temp = result[j];\n          result[j] = result[j - 1];\n          result[j - 1] = temp;\n        }\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpyt48howl.js:33:12)\n    at Object.<anonymous> (/tmp/tmpyt48howl.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334815
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let heap = new Heap<number>(arr, (a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpltf8vg15.ts(11,20): error TS2552: Cannot find name 'Heap'. Did you mean 'heap'?\n",
      "timestamp": 1660334815
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < k; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpniizklui.js:29:12)\n    at Object.<anonymous> (/tmp/tmpniizklui.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334815
    },
    {
      "exit_code": 2,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (result.length < k) {\n            result.push(arr[i]);\n        } else {\n            result.sort((a, b) => a - b);\n            if (arr[i] > result[0]) {\n                result[0] = arr[i];\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([1, 2, 3, 4, 5], 1));\nconsole.log(maximum([1, 2, 3, 4, 5], 3));\nconsole.log(maximum([1, 2, 3, 4, 5], 4));\nconsole.log(maximum([1, 2, 3, 4, 5], 5));\nconsole.log(maximum([1, 2, 3, 4, 5], 6));\nconsole.log(maximum([1, 2, 3, 4, 5], 0));\nconsole.log(maximum([1, 2, 3, 4, 5], -1));\nconsole.log(maximum([1, 2, 3, 4, 5], -2));\nconsole.log(maximum([1, 2, 3, 4, 5], -3));\nconsole.log(maximum([1, 2, 3, 4, 5], -4));\nconsole.log(maximum([1, 2, 3, 4, 5], -5));\nconsole.log(maximum([1, 2, 3, 4, 5], -6));\nconsole.log(maximum([1, 2, 3, 4, 5], -7));\nconsole.log(maximum([1, 2, 3, 4, 5], -8));\nconsole.log(maximum([1, 2, 3, 4, 5], -9));\nconsole.log(maximum([1, 2, 3, 4, 5], -10));\nconsole.log(maximum([1, 2, 3, 4, 5], -11));\nconsole.log(maximum([1, 2, 3, 4, 5], -12));\nconsole.log(maximum([1, 2, 3, 4, 5], -\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp96xcx7wo.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334815
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max = arr[i];\n    let maxIndex = i;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    result.push(max);\n    arr[maxIndex] = arr[i];\n    arr[i] = max;\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  -3,\n  -4\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpabyw7mlj.js:33:12)\n    at Object.<anonymous> (/tmp/tmpabyw7mlj.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 5, 4 ]\n[ 3, 2 ]\n[ 2, 1 ]\n",
      "timestamp": 1660334815
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    const result: number[] = [];\n    const len = arr.length;\n    if (k === 0) {\n        return result;\n    }\n    if (k === len) {\n        return arr;\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => a - b);\n    for (let i = k; i < len; i++) {\n        if (arr[i] > result[0]) {\n            result.shift();\n            result.push(arr[i]);\n            result.sort((a, b) => a - b);\n        }\n    }\n    return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2));\nconsole.log(maximum([3, 2, 1], 2));\nconsole.log(maximum([1, 2], 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpvr7t3pbq.js:38:12)\n    at Object.<anonymous> (/tmp/tmpvr7t3pbq.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n[ 2, 3 ]\n[ 1, 2 ]\n",
      "timestamp": 1660334815
    },
    {
      "exit_code": 1,
      "program": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  // return arr.sort((a, b) => b - a).slice(0, k);\n  const result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    while (result.length && result[result.length - 1] < arr[i] && result.length + arr.length - i > k) {\n      result.pop();\n    }\n    if (result.length < k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(maximum([1, 2, 3, 4, 5], 2)); // [4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 3)); // [3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 4)); // [2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 5)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 6)); // [1, 2, 3, 4, 5]\nconsole.log(maximum([1, 2, 3, 4, 5], 0)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -1)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -2)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -3)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -4)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -5)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -6)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -7)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -8)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -9)); // []\nconsole.log(maximum([1, 2, 3, 4, 5], -10)); //\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  -4,\n  -3,\n  5\n]\n    at test (/tmp/tmpiblzqfeg.js:42:12)\n    at Object.<anonymous> (/tmp/tmpiblzqfeg.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 4, 5 ]\n[ 3, 4, 5 ]\n[ 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n[]\n",
      "timestamp": 1660334815
    }
  ]
}