{
  "language": "ts",
  "name": "HumanEval_158_find_max",
  "results": [
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdef\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp17piv_b1.ts(31,75): error TS1002: Unterminated string literal.\n../../../../tmp/tmp17piv_b1.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp17piv_b1.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde', 'abcd', 'abcd', 'abcd']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7dmc5igt.js:23:12)\n    at Object.<anonymous> (/tmp/tmp7dmc5igt.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnop', 'o']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmprb3v9pdy.js:22:12)\n    at Object.<anonymous> (/tmp/tmprb3v9pdy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max: number = 0;\n  let maxWord: string = \"\";\n  for (let i: number = 0; i < words.length; i++) {\n    let word: string = words[i];\n    let unique: string[] = [];\n    for (let j: number = 0; j < word.length; j++) {\n      if (unique.indexOf(word[j]) === -1) {\n        unique.push(word[j]);\n      }\n    }\n    if (unique.length > max) {\n      max = unique.length;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp83h9z2x2.js:30:12)\n    at Object.<anonymous> (/tmp/tmp83h9z2x2.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\nabcd\nabcd\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"cdef\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"cdef\", \"efgh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpewpfl021.js:23:12)\n    at Object.<anonymous> (/tmp/tmpewpfl021.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\nabcd\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max: number = 0;\n  let maxWord: string = \"\";\n  for (let word of words) {\n    let unique: string[] = [];\n    for (let char of word) {\n      if (unique.indexOf(char) === -1) {\n        unique.push(char);\n      }\n    }\n    if (unique.length > max) {\n      max = unique.length;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpupe90wha.js:27:12)\n    at Object.<anonymous> (/tmp/tmpupe90wha.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let set = new Set(word);\n    if (set.size > max) {\n      max = set.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp3jm0s3l_.js:22:12)\n    at Object.<anonymous> (/tmp/tmp3jm0s3l_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max: string = \"\";\n  let max_count: number = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word: string = words[i];\n    let count: number = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j])) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max = word;\n      max_count = count;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmprtg9gnhj.js:28:12)\n    at Object.<anonymous> (/tmp/tmprtg9gnhj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333685
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let unique_chars = 0;\n        for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique_chars++;\n            }\n        }\n        if (unique_chars > max) {\n            max = unique_chars;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaaaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2m7_xr7f.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max: number = 0;\n    let max_word: string = \"\";\n    for (let word of words) {\n        let unique_chars: string[] = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char) === -1) {\n                unique_chars.push(char);\n            }\n        }\n        if (unique_chars.length > max) {\n            max = unique_chars.length;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1esc9rf0.js:26:12)\n    at Object.<anonymous> (/tmp/tmp1esc9rf0.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2x6xr5js.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2x6xr5js.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    let chars = new Set();\n    for (let char of word) {\n      if (!chars.has(char)) {\n        chars.add(char);\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpfmp5tpna.js:31:12)\n    at Object.<anonymous> (/tmp/tmpfmp5tpna.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\nabcd\nabcd\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpcijcxtfq.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcijcxtfq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmppx6lq2aq.js:34:12)\n    at Object.<anonymous> (/tmp/tmppx6lq2aq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\nabcd\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnop']));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpg4qmdeb3.js:23:12)\n    at Object.<anonymous> (/tmp/tmpg4qmdeb3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"aaa\", \"bbbb\", \"ccccc\", \"dddddd\"]));\nconsole.log(find_max([\"apple\", \"banana\", \"orange\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\", \"aaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\", \"aaaaaaaaaaa\", \"aaaaaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5robb3q8.ts(30,31): error TS1002: Unterminated string literal.\n../../../../tmp/tmp5robb3q8.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp5robb3q8.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words) {\n        let unique = new Set(word.split(''));\n        if (unique.size > max) {\n            max = unique.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'cdef']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'cdef', 'abcde']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'cdef', 'abcde', 'abcdef']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpsq90pri_.js:24:12)\n    at Object.<anonymous> (/tmp/tmpsq90pri_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\nabcde\nabcdef\n",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word.split(\"\"));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6jfwggwx.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6jfwggwx.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word);\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"apple\", \"banana\", \"carrot\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpnful6ynf.js:24:12)\n    at Object.<anonymous> (/tmp/tmpnful6ynf.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklm\nabcdef\ncarrot\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4pugs9q1.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4pugs9q1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\na\nabcd\nabcde\nabcdef\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = \"\";\n    for (let word of words) {\n        let unique = new Set(word);\n        if (unique.size > max) {\n            max = unique.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6mnwh2wh.js:22:12)\n    at Object.<anonymous> (/tmp/tmp6mnwh2wh.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n                unique++;\n            }\n        }\n        if (unique > max) {\n            max = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdef\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp46cgg7ni.ts(31,64): error TS1002: Unterminated string literal.\n../../../../tmp/tmp46cgg7ni.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp46cgg7ni.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpa_v5f95q.js:23:12)\n    at Object.<anonymous> (/tmp/tmpa_v5f95q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps9sq_jt3.js:22:12)\n    at Object.<anonymous> (/tmp/tmps9sq_jt3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"apple\", \"banana\", \"pear\", \"strawberry\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp3ihs8upm.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3ihs8upm.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklm\nabcde\nstrawberry\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n  let max_unique = 0;\n  for (let word of words) {\n    let unique = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n        unique++;\n      }\n    }\n    if (unique > max_unique) {\n      max_unique = unique;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnerkq4qb.ts(31,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnerkq4qb.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpnerkq4qb.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jklm']));\nconsole.log(find_max(['python', 'perl', 'java', 'c', 'haskell', 'ruby']));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6f_nmdof.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6f_nmdof.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklm\npython\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpiwrnf8na.js:23:12)\n    at Object.<anonymous> (/tmp/tmpiwrnf8na.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\na\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = '';\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpr0dajkzz.js:27:12)\n    at Object.<anonymous> (/tmp/tmpr0dajkzz.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabc\nabc\nabc\nabc\nabc\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let result = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let unique = 0;\n        for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique++;\n            }\n        }\n        if (unique > max) {\n            max = unique;\n            result = word;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjtpkeyi3.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpr_5bz85l.js:28:12)\n    at Object.<anonymous> (/tmp/tmpr_5bz85l.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabc\nabc\nabc\nabc\nabc\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpcijcxtfq.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcijcxtfq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word.split(\"\"));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpiz4nhlr7.js:21:12)\n    at Object.<anonymous> (/tmp/tmpiz4nhlr7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpihv8p1m1.js:27:12)\n    at Object.<anonymous> (/tmp/tmpihv8p1m1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabc\nabc\nabc\nabc\nabc\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpihv8p1m1.js:27:12)\n    at Object.<anonymous> (/tmp/tmpihv8p1m1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabc\nabc\nabc\nabc\nabc\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abcd\", \"abc\", \"abd\", \"a\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpe5qkqimi.js:22:12)\n    at Object.<anonymous> (/tmp/tmpe5qkqimi.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijkl\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyco4gb2w.ts(26,151): error TS1002: Unterminated string literal.\n../../../../tmp/tmpyco4gb2w.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpyco4gb2w.ts(27,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9ugticlr.js:24:12)\n    at Object.<anonymous> (/tmp/tmp9ugticlr.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\nabcdefg\nabcdefgh\n",
      "timestamp": 1660333690
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = words[0];\n    for (let i = 1; i < words.length; i++) {\n        if (words[i].length > max.length) {\n            max = words[i];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6030eaxb.js:18:12)\n    at Object.<anonymous> (/tmp/tmp6030eaxb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    let letters = word.split(\"\");\n    for (let letter of letters) {\n      if (letters.indexOf(letter) === letters.lastIndexOf(letter)) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpul3z25xm.ts(35,115): error TS1002: Unterminated string literal.\n../../../../tmp/tmpul3z25xm.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpul3z25xm.ts(36,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abc\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abc\", \"cde\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmphbojphkj.js:25:12)\n    at Object.<anonymous> (/tmp/tmphbojphkj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabc\nabc\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdefgh\", \"abcdefghijklmnopqrstuvwxyz\"]));\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdefgh\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2kfzj2an.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2kfzj2an.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdefgh\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let uniqueChars = new Set(word.split(\"\"));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5jfn0601.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5jfn0601.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpowgmjeah.js:23:12)\n    at Object.<anonymous> (/tmp/tmpowgmjeah.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333690
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = \"\";\n    for (let word of words) {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size > max) {\n            max = unique.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp144urod9.ts(27,111): error TS1002: Unterminated string literal.\n../../../../tmp/tmp144urod9.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmp144urod9.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size > max) {\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdef\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvidee9ph.ts(26,162): error TS1002: Unterminated string literal.\n../../../../tmp/tmpvidee9ph.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpvidee9ph.ts(27,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpz7dus1j2.js:21:12)\n    at Object.<anonymous> (/tmp/tmpz7dus1j2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let count = new Set(word).size;\n    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpg7fxx0vr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpg7fxx0vr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333690
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = \"\";\n    for (let word of words) {\n        let unique = new Set(word);\n        if (unique.size > max) {\n            max = unique.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abd\", \"a\", \"xyz\"]));\nconsole.log(find_max([\"zyx\", \"xyz\", \"yx\", \"xzxy\", \"zxzyx\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp78rzrq47.js:24:12)\n    at Object.<anonymous> (/tmp/tmp78rzrq47.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklmn\nabcd\nzyx\n",
      "timestamp": 1660333692
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n    let max_count = 0;\n    for (let word of words) {\n        let unique_chars = new Set(word);\n        if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\nconsole.log(find_max([\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"abc\"]));\nconsole.log(find_max([\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"abc\", \"a\"]));\nconsole.log(find_max([\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"abc\", \"a\", \"ab\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpctxxv0nw.js:25:12)\n    at Object.<anonymous> (/tmp/tmpctxxv0nw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "aaa\nabc\nabc\nabc\n",
      "timestamp": 1660333692
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n  let max_unique = unique_chars(words[0]);\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    const unique = unique_chars(word);\n    if (unique > max_unique) {\n      max_unique = unique;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvngqwipk.ts(7,20): error TS2304: Cannot find name 'unique_chars'.\n../../../../tmp/tmpvngqwipk.ts(10,20): error TS2304: Cannot find name 'unique_chars'.\n",
      "timestamp": 1660333692
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abcd\", \"abc\", \"abd\", \"a\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpe5qkqimi.js:22:12)\n    at Object.<anonymous> (/tmp/tmpe5qkqimi.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"abcd\", \"abcde\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8wgxmx7q.js:22:12)\n    at Object.<anonymous> (/tmp/tmp8wgxmx7q.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcde\n",
      "timestamp": 1660333692
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = '';\n    for (let word of words) {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnop']));\nconsole.log(find_max(['abc', 'abc', 'abc']));\nconsole.log(find_max(['abc', 'abcd', 'ab', 'abcde']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpv2nw6655.js:24:12)\n    at Object.<anonymous> (/tmp/tmpv2nw6655.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\nabc\nabcde\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j])) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0oo3a7ih.ts(38,51): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0oo3a7ih.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmp0oo3a7ih.ts(39,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333692
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"a\", \"ab\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp68lofb9v.js:22:12)\n    at Object.<anonymous> (/tmp/tmp68lofb9v.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max(['abc', 'abcd', 'abcde', 'abcdef']));\nconsole.log(find_max(['a', 'aa', 'aaa', 'aaaa']));\nconsole.log(find_max(['a', 'ab', 'abc', 'abcd']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpsa_vgrt6.js:24:12)\n    at Object.<anonymous> (/tmp/tmpsa_vgrt6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\na\nabcd\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique = new Set(word);\n        if (unique.size > max) {\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"abcd\", \"ab\", \"abcde\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_rnlg908.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_rnlg908.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcde\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max: number = 0;\n    let max_word: string = \"\";\n    for (let word of words) {\n        let unique_chars: string[] = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char) === -1) {\n                unique_chars.push(char);\n            }\n        }\n        if (unique_chars.length > max) {\n            max = unique_chars.length;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpmv56t1ob.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmpmv56t1ob.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  words.forEach(word => {\n    const unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpzaix9ws8.js:24:12)\n    at Object.<anonymous> (/tmp/tmpzaix9ws8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklmn\nabcde\na\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words) {\n        let unique = new Set(word);\n        if (unique.size > max) {\n            max = unique.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'abcdefghijklmno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'abcdefghijklmno', 'abcdefghijklmno']));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkuj9jk0q.js:24:12)\n    at Object.<anonymous> (/tmp/tmpkuj9jk0q.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabcdefghijklmno\nabcdefghijklmno\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size > max_count) {\n      max_count = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9c9fckbc.js:21:12)\n    at Object.<anonymous> (/tmp/tmp9c9fckbc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n    let max_unique = 0;\n    for (let word of words) {\n        let unique = 0;\n        let chars = new Set<string>();\n        for (let char of word) {\n            if (!chars.has(char)) {\n                chars.add(char);\n                unique++;\n            }\n        }\n        if (unique > max_unique) {\n            max_unique = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1wqjjeyj.js:28:12)\n    at Object.<anonymous> (/tmp/tmp1wqjjeyj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdefg\", \"abcdefghijklmnopqrstuvwxyz\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpt3xjxaey.js:23:12)\n    at Object.<anonymous> (/tmp/tmpt3xjxaey.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdefg\nabcdefghijklmnopqrstuvwxyz\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpowgmjeah.js:23:12)\n    at Object.<anonymous> (/tmp/tmpowgmjeah.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333690
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmph3w8zyzs.js:24:12)\n    at Object.<anonymous> (/tmp/tmph3w8zyzs.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklmn\nabcde\na\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2x6xr5js.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2x6xr5js.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghij\", \"klmno\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghij\", \"klmno\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmptd3wcynb.js:23:12)\n    at Object.<anonymous> (/tmp/tmptd3wcynb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "klmno\nabcdef\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\", \"abcdefghijklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcdefgh\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp87_t0fxk.ts(33,68): error TS1002: Unterminated string literal.\n../../../../tmp/tmp87_t0fxk.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmp87_t0fxk.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words) {\n        let uniqueChars = new Set(word.split(''));\n        if (uniqueChars.size > max) {\n            max = uniqueChars.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde', 'cdf', 'efg']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpmgltdzxb.js:22:12)\n    at Object.<anonymous> (/tmp/tmpmgltdzxb.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpb734w4qq.js:24:12)\n    at Object.<anonymous> (/tmp/tmpb734w4qq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklmn\nabcde\nabcdef\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  words.forEach(word => {\n    const uniqueChars = new Set(word.split(''));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n}\n\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'ac', 'd', 'cd', 'bcd', 'abcd']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1hz22isy.js:25:12)\n    at Object.<anonymous> (/tmp/tmp1hz22isy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\nabcd\nabcd\nabcd\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cba\", \"bac\", \"cab\", \"bca\"]));\nconsole.log(find_max([\"abc\", \"cba\", \"bac\", \"cab\", \"bca\", \"abcd\"]));\nconsole.log(find_max([\"abc\", \"cba\", \"bac\", \"cab\", \"bca\", \"abcd\", \"abcd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdn6nqles.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdn6nqles.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabcd\nabcd\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size > max) {\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbq1m70gi.js:23:12)\n    at Object.<anonymous> (/tmp/tmpbq1m70gi.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\na\n",
      "timestamp": 1660333693
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpn9cq17ln.js:23:12)\n    at Object.<anonymous> (/tmp/tmpn9cq17ln.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\nabcdefg\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2x6xr5js.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2x6xr5js.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max: string = \"\";\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number = 0;\n    for (let i: number = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max = word;\n      max_count = count;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxrlilwhv.ts(31,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmpxrlilwhv.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpxrlilwhv.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333695
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let char of word) {\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe83qemjb.ts(33,59): error TS1002: Unterminated string literal.\n../../../../tmp/tmpe83qemjb.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmpe83qemjb.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"deff\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmnopqr\"]));\nconsole.log(find_max([\"abcdef\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abcdef\", \"adef\", \"aghidef\", \"jklmn\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8kq5teuq.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8kq5teuq.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklmn\njklmn\njklmnopqr\nabcdef\naghidef\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqukplnmh.ts(27,104): error TS1002: Unterminated string literal.\n../../../../tmp/tmpqukplnmh.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpqukplnmh.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333695
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\", \"abcdefghi\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp48qrzgmm.js:22:12)\n    at Object.<anonymous> (/tmp/tmp48qrzgmm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdefghi\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    const unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4gy4vzgs.js:22:12)\n    at Object.<anonymous> (/tmp/tmp4gy4vzgs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n            if (word.indexOf(char) === j) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cba\", \"bac\", \"bca\", \"cab\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyryl119r.js:29:12)\n    at Object.<anonymous> (/tmp/tmpyryl119r.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  words.forEach(word => {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnopq']));\nconsole.log(find_max(['abc', 'abc', 'abc']));\nconsole.log(find_max(['abc', 'abcd', 'ab']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp542s7wwy.js:24:12)\n    at Object.<anonymous> (/tmp/tmp542s7wwy.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "mnopq\nabc\nabcd\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnopq']));\nconsole.log(find_max(['abc', 'abc', 'abc']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpg7sdzqwr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpg7sdzqwr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "mnopq\nabc\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abcd', 'abc', 'abd', 'a']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpx3ivq4c5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpx3ivq4c5.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let result = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      result = word;\n    }\n  }\n  return result;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4cgo7maf.js:23:12)\n    at Object.<anonymous> (/tmp/tmp4cgo7maf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let result = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let unique = 0;\n        for (let j = 0; j < word.length; j++) {\n            if (word.indexOf(word[j]) === word.lastIndexOf(word[j])) {\n                unique++;\n            }\n        }\n        if (unique > max) {\n            max = unique;\n            result = word;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp3am63p9.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n    let max_count = 0;\n    for (let word of words) {\n        let unique_chars = new Set(word);\n        if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"python\", \"java\", \"csharp\", \"javascript\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpv2a8gkxj.js:23:12)\n    at Object.<anonymous> (/tmp/tmpv2a8gkxj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklm\njavascript\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'de', 'fgh', 'de', 'ijkl', 'mnop']));\nconsole.log(find_max(['abc', 'abc', 'abc']));\nconsole.log(find_max(['abc', 'abcd', 'ab']));\nconsole.log(find_max(['abc', 'abcd', 'ab', 'abcde']));\nconsole.log(find_max(['abcd', 'abc', 'ab', 'abcde']));\nconsole.log(find_max(['abcd', 'ab', 'abc', 'abcde']));\nconsole.log(find_max(['abcd', 'ab', 'abc', 'abcde', 'abcdef']));\nconsole.log(find_max(['abcd', 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg']));\nconsole.log(find_max(['abcd', 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh']));\nconsole.log(find_max(['abcd', 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi']));\nconsole.log(find_max(['abcd', 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij']));\nconsole.log(find_max(['abcd', 'ab', 'abc', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk']));\nconsole.log(find_max(['abcd', 'ab',\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzzp9qfg5.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'cde', 'efg']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9tnxa8n5.js:26:12)\n    at Object.<anonymous> (/tmp/tmp9tnxa8n5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabcd\nabcde\nabcdef\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_unique = unique_chars(words[0]);\n    for (let i = 1; i < words.length; i++) {\n        let unique = unique_chars(words[i]);\n        if (unique > max_unique) {\n            max_unique = unique;\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpyjf8a7em.ts(7,22): error TS2304: Cannot find name 'unique_chars'.\n../../../../tmp/tmpyjf8a7em.ts(9,22): error TS2304: Cannot find name 'unique_chars'.\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpjg0sh4qt.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjg0sh4qt.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    let chars = new Set();\n    for (let char of word) {\n      if (!chars.has(char)) {\n        chars.add(char);\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpniid57ah.js:28:12)\n    at Object.<anonymous> (/tmp/tmpniid57ah.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique = new Set(word);\n        if (unique.size > max) {\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"apple\", \"banana\", \"pear\", \"strawberry\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp96340o3f.js:24:12)\n    at Object.<anonymous> (/tmp/tmp96340o3f.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklm\nabcde\nstrawberry\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpmtowx_qs.js:22:12)\n    at Object.<anonymous> (/tmp/tmpmtowx_qs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"bcd\", \"def\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"bcd\", \"def\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpljxqdmd0.js:23:12)\n    at Object.<anonymous> (/tmp/tmpljxqdmd0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabcdef\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique_chars = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique_chars++;\n      }\n    }\n    if (unique_chars > max) {\n      max = unique_chars;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"cdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpznmnoitt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpznmnoitt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    const unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4gy4vzgs.js:22:12)\n    at Object.<anonymous> (/tmp/tmp4gy4vzgs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333696
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word.split(''));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['hello', 'world', 'before', 'all']));\nconsole.log(find_max(['hello', 'world', 'after', 'all']));\nconsole.log(find_max(['hello', 'world', 'after', 'all', 'zebra']));\nconsole.log(find_max(['hello', 'world', 'after', 'all', 'before']));\nconsole.log(find_max(['ant', 'anna', 'sandra', 'ben']));\nconsole.log(find_max(['ant', 'anna', 'sandra', 'ben', 'ben']));\nconsole.log(find_max(['ant', 'anna', 'sandra', 'ben', 'aardvark']));\nconsole.log(find_max(['ant', 'anna', 'sandra', 'ben', 'benjamin']));\nconsole.log(find_max(['ant', 'anna', 'sandra', 'ben', 'benjamin', 'bob']));\nconsole.log(find_max(['ant', 'anna', 'sandra', 'ben', 'benjamin', 'bob', 'ana']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqcqoiiv2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpqcqoiiv2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "world\nworld\nworld\nworld\nsandra\nsandra\nsandra\nbenjamin\nbenjamin\nbenjamin\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max: string = \"\";\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max = word;\n      max_count = count;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp43yrfk2x.js:27:12)\n    at Object.<anonymous> (/tmp/tmp43yrfk2x.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpcmne542w.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcmne542w.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_rjuy49v.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"bcd\", \"cde\", \"cdf\", \"efg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0umsanyf.js:22:12)\n    at Object.<anonymous> (/tmp/tmp0umsanyf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4zkx7zyc.ts(31,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4zkx7zyc.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp4zkx7zyc.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = '';\n    for (let word of words) {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxnhmrv0q.js:27:12)\n    at Object.<anonymous> (/tmp/tmpxnhmrv0q.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabc\nabc\nabc\nabc\nabc\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        let chars = new Set<string>();\n        for (let char of word) {\n            if (!chars.has(char)) {\n                chars.add(char);\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0uo68qgm.js:28:12)\n    at Object.<anonymous> (/tmp/tmp0uo68qgm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size > max) {\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkwl1unq5.js:23:12)\n    at Object.<anonymous> (/tmp/tmpkwl1unq5.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\na\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j])) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxo580ehb.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxo580ehb.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\nabcdefg\nabcdefgh\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx']));\nconsole.log(find_max(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7kdn0z26.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7kdn0z26.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabc\nabc\nabc\nabc\nabc\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word.split(\"\"));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aaa\", \"aa\", \"bbb\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdz0tgpg3.js:23:12)\n    at Object.<anonymous> (/tmp/tmpdz0tgpg3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\na\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"bcd\", \"cde\", \"def\", \"efg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"cde\", \"def\", \"efg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"cde\", \"def\", \"efg\", \"efgh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps9ga5vyt.js:24:12)\n    at Object.<anonymous> (/tmp/tmps9ga5vyt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabcd\nabcd\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"aa\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"abcde\", \"abcd\", \"abc\", \"ab\"]));\nconsole.log(find_max([\"abcd\", \"abc\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcd\"]));\nconsole.log(find_max([\"abcd\", \"abcd\", \"abcd\", \"abc\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcd\", \"abcd\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpp3tmwnl1.js:37:12)\n    at Object.<anonymous> (/tmp/tmpp3tmwnl1.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\na\nabcd\nabcde\nabcde\nabcde\nabcd\nabcd\nabcd\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpe7mf_uj0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpe7mf_uj0.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = '';\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let unique = 0;\n        for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n            if (word.indexOf(char) === word.lastIndexOf(char)) {\n                unique++;\n            }\n        }\n        if (unique > max) {\n            max = unique;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpoumw10xc.js:28:12)\n    at Object.<anonymous> (/tmp/tmpoumw10xc.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333701
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghia\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghiz\", \"jklmn\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2wzmycvs.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2wzmycvs.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklmn\njklmn\njklmn\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  words.forEach(word => {\n    let unique = 0;\n    word.split(\"\").forEach(letter => {\n      if (word.indexOf(letter) === word.lastIndexOf(letter)) {\n        unique++;\n      }\n    });\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpuqtyj0s5.js:27:12)\n    at Object.<anonymous> (/tmp/tmpuqtyj0s5.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max: string = \"\";\n    let max_count: number = 0;\n    for (let word of words) {\n        let unique_chars: string[] = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char) === -1) {\n                unique_chars.push(char);\n            }\n        }\n        if (unique_chars.length > max_count) {\n            max = word;\n            max_count = unique_chars.length;\n        }\n    }\n    return max;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"abc\", \"def\", \"ghi\"]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptqf79ndw.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmptqf79ndw.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique = new Set(word);\n        if (unique.size > max) {\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abd\", \"a\"]));\nconsole.log(find_max([\"apple\", \"banana\", \"pear\", \"grapefruit\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxosg32eu.js:24:12)\n    at Object.<anonymous> (/tmp/tmpxosg32eu.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklmn\nabcd\ngrapefruit\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n    let max_unique = 0;\n    for (let word of words) {\n        let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n                unique++;\n            }\n        }\n        if (unique > max_unique) {\n            max_unique = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps8a6tyhc.js:26:12)\n    at Object.<anonymous> (/tmp/tmps8a6tyhc.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333701
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbeem0lc9.js:21:12)\n    at Object.<anonymous> (/tmp/tmpbeem0lc9.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333701
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpheewacyg.js:21:12)\n    at Object.<anonymous> (/tmp/tmpheewacyg.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333701
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'xyz', 'aba', '1221']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpokuj2__j.js:27:12)\n    at Object.<anonymous> (/tmp/tmpokuj2__j.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique = new Set(word.split(\"\"));\n        if (unique.size > max) {\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpaiu09tsy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpaiu09tsy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abcd', 'abc', 'abd', 'a']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp67tjwo9d.js:23:12)\n    at Object.<anonymous> (/tmp/tmp67tjwo9d.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max: number = 0;\n    let max_word: string = \"\";\n    for (let word of words) {\n        let unique_chars: string[] = [];\n        for (let char of word) {\n            if (unique_chars.indexOf(char) == -1) {\n                unique_chars.push(char);\n            }\n        }\n        if (unique_chars.length > max) {\n            max = unique_chars.length;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2bv03z3r.js:26:12)\n    at Object.<anonymous> (/tmp/tmp2bv03z3r.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333703
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4zkx7zyc.ts(31,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4zkx7zyc.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp4zkx7zyc.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpzkc03_33.js:22:12)\n    at Object.<anonymous> (/tmp/tmpzkc03_33.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde', 'cdf', 'efg']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpj7mxbq6w.js:22:12)\n    at Object.<anonymous> (/tmp/tmpj7mxbq6w.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333703
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max: string = \"\";\n    let max_count: number = 0;\n    for (let word of words) {\n        let count: number = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max = word;\n            max_count = count;\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgzcru0pl.js:26:12)\n    at Object.<anonymous> (/tmp/tmpgzcru0pl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"bcd\", \"cde\", \"cdf\", \"efg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqlwurtid.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqlwurtid.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"]));\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmprdi_ofn9.js:26:12)\n    at Object.<anonymous> (/tmp/tmprdi_ofn9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabc\nabc\nabc\nabc\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_length = new Set(words[0]).size;\n    for (let i = 1; i < words.length; i++) {\n        const word = words[i];\n        const length = new Set(word).size;\n        if (length > max_length) {\n            max_length = length;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpws5hl6ph.js:24:12)\n    at Object.<anonymous> (/tmp/tmpws5hl6ph.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\na\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words) {\n        let unique = new Set(word);\n        if (unique.size > max) {\n            max = unique.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']) === 'abcd');\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']) === 'abc');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpcwg7jdaq.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcwg7jdaq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\ntrue\nfalse\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word);\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpp077z9o2.js:23:12)\n    at Object.<anonymous> (/tmp/tmpp077z9o2.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"ab\", \"cdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp30xtv6ha.js:22:12)\n    at Object.<anonymous> (/tmp/tmp30xtv6ha.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words) {\n        let unique = new Set(word.split(''));\n        if (unique.size > max) {\n            max = unique.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde', 'cdf', 'efg']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpd9c_sc_x.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd9c_sc_x.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word.split(\"\"));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aaa\", \"aa\", \"bbb\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdz0tgpg3.js:23:12)\n    at Object.<anonymous> (/tmp/tmpdz0tgpg3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\na\n",
      "timestamp": 1660333700
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    const unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpa_jzhaai.js:21:12)\n    at Object.<anonymous> (/tmp/tmpa_jzhaai.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_unique_chars = find_unique_chars(max_word);\n    for (let i = 1; i < words.length; i++) {\n        let word = words[i];\n        let unique_chars = find_unique_chars(word);\n        if (unique_chars > max_unique_chars) {\n            max_unique_chars = unique_chars;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu00d93ie.ts(7,28): error TS2304: Cannot find name 'find_unique_chars'.\n../../../../tmp/tmpu00d93ie.ts(10,28): error TS2304: Cannot find name 'find_unique_chars'.\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n  let max_count = count_unique(words[0]);\n  for (let i = 1; i < words.length; i++) {\n    let count = count_unique(words[i]);\n    if (count > max_count) {\n      max_count = count;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplrutfi0j.ts(7,19): error TS2304: Cannot find name 'count_unique'.\n../../../../tmp/tmplrutfi0j.ts(9,17): error TS2304: Cannot find name 'count_unique'.\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max: string = \"\";\n    let max_count: number = 0;\n    for (let word of words) {\n        let count: number = 0;\n        for (let i: number = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max = word;\n            max_count = count;\n        }\n    }\n    return max;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmped3i8glq.ts(31,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmped3i8glq.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmped3i8glq.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = '';\n    for (let word of words) {\n        let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n                unique++;\n            }\n        }\n        if (unique > max) {\n            max = unique;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max(['abc', 'abcc', 'abcdd', 'abcde']));\nconsole.log(find_max(['abc', 'abcc', 'abcdd', 'abcde', 'abcd']));\nconsole.log(find_max(['abc', 'abcc', 'abcdd', 'abcde', 'abcd', 'abc']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp17te5emr.js:29:12)\n    at Object.<anonymous> (/tmp/tmp17te5emr.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcde\nabcde\nabcde\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let uniqueChars = new Set(word);\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwnsheigl.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwnsheigl.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = '';\n    for (let word of words) {\n        let unique_chars = new Set(word);\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde', 'def']));\nconsole.log(find_max(['abc', 'abcd', 'abcde', 'abcdef']));\nconsole.log(find_max(['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg']));\nconsole.log(find_max(['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh']));\nconsole.log(find_max(['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi']));\nconsole.log(find_max(['abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij']));\nconsole.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij']));\nconsole.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk']));\nconsole.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl']));\nconsole.log(find_max(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg',\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8z4lkf2z.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333704
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n                unique++;\n            }\n        }\n        if (unique > max) {\n            max = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdef\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp46cgg7ni.ts(31,64): error TS1002: Unterminated string literal.\n../../../../tmp/tmp46cgg7ni.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp46cgg7ni.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333685
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\", \"abcdefghi\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbgr_n46a.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbgr_n46a.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdefgh\nabcdefghi\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpjg0sh4qt.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjg0sh4qt.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333697
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let result = '';\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      result = word;\n    }\n  }\n  return result;\n}\n\nconsole.log(find_max(['abc', 'bcd', 'cde', 'cdf', 'efg']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1ytrdvxe.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1ytrdvxe.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abcd\", \"abc\", \"abd\", \"a\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpj3bmbjtt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpj3bmbjtt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpsh_hqzs5.js:24:12)\n    at Object.<anonymous> (/tmp/tmpsh_hqzs5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\nabcdefg\nabcdefgh\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  words.forEach(word => {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  });\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklmn\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr7qcuh3z.ts(27,111): error TS1002: Unterminated string literal.\n../../../../tmp/tmpr7qcuh3z.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpr7qcuh3z.ts(28,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        let unique_chars = new Set();\n        for (let char of word) {\n            if (!unique_chars.has(char)) {\n                unique_chars.add(char);\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprrs0tzr9.ts(33,44): error TS1002: Unterminated string literal.\n../../../../tmp/tmprrs0tzr9.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmprrs0tzr9.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (unique_chars(words[i]) > unique_chars(max)) {\n      max = words[i];\n    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc1twgizp.ts(8,9): error TS2304: Cannot find name 'unique_chars'.\n../../../../tmp/tmpc1twgizp.ts(8,34): error TS2304: Cannot find name 'unique_chars'.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let maxWord = \"\";\n    for (let word of words) {\n        let unique = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n                unique++;\n            }\n        }\n        if (unique > max) {\n            max = unique;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0pcmj43p.ts(31,69): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0pcmj43p.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp0pcmj43p.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = \"\";\n  let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for (let char of word) {\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp231fwbs5.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmph_nvys3o.js:22:12)\n    at Object.<anonymous> (/tmp/tmph_nvys3o.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps9sq_jt3.js:22:12)\n    at Object.<anonymous> (/tmp/tmps9sq_jt3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333689
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"cdef\"]));\nconsole.log(find_max([\"abc\", \"abc\", \"abc\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"cdef\", \"abcde\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps2v9zfl6.js:24:12)\n    at Object.<anonymous> (/tmp/tmps2v9zfl6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\nabc\nabcde\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1726pdog.js:22:12)\n    at Object.<anonymous> (/tmp/tmp1726pdog.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2x6xr5js.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2x6xr5js.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpttgzerj9.ts(31,69): error TS1002: Unterminated string literal.\n../../../../tmp/tmpttgzerj9.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpttgzerj9.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333707
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.indexOf(word[j]) === word.lastIndexOf(word[j])) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxo41jr_q.js:27:12)\n    at Object.<anonymous> (/tmp/tmpxo41jr_q.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"a\", \"ab\", \"cba\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp80601pa2.js:22:12)\n    at Object.<anonymous> (/tmp/tmp80601pa2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"aab\", \"def\", \"ghi\"]));\nconsole.log(find_max([\"abc\", \"aab\", \"def\", \"ghi\", \"abcdefghijklmnopqrstuvwxyz\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpofvruex7.js:23:12)\n    at Object.<anonymous> (/tmp/tmpofvruex7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabcdefghijklmnopqrstuvwxyz\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4zkx7zyc.ts(31,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4zkx7zyc.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp4zkx7zyc.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max: string = \"\";\n  let max_count: number = 0;\n  for (let word of words) {\n    let count: number = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max = word;\n      max_count = count;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp10hz1zww.ts(31,69): error TS1002: Unterminated string literal.\n../../../../tmp/tmp10hz1zww.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp10hz1zww.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpa2nl8o15.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa2nl8o15.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdefgh\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = \"\";\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzdmssr3g.ts(31,69): error TS1002: Unterminated string literal.\n../../../../tmp/tmpzdmssr3g.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpzdmssr3g.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n  let max_unique = 0;\n  for (let word of words) {\n    let unique = new Set(word.split(\"\")).size;\n    if (unique > max_unique) {\n      max_unique = unique;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"bcd\", \"cde\", \"cdf\", \"bbb\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdf3do917.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdf3do917.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabcdef\nabcdefg\nabcdefgh\na\na\na\na\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        let chars = new Set();\n        for (let char of word) {\n            if (!chars.has(char)) {\n                chars.add(char);\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpc3qc8tfg.js:28:12)\n    at Object.<anonymous> (/tmp/tmpc3qc8tfg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word);\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"bcd\", \"cde\", \"abcd\", \"abcde\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwak0v7_h.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwak0v7_h.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcde\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['hello', 'world', 'before', 'all']));\nconsole.log(find_max(['hello', 'world', 'after', 'all']));\nconsole.log(find_max(['hello', 'world', 'before', 'all']));\nconsole.log(find_max(['hello', 'world', 'after', 'all']));\nconsole.log(find_max(['ant', 'anna', 'bonobo', 'baby']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpicmo45gq.js:26:12)\n    at Object.<anonymous> (/tmp/tmpicmo45gq.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "world\nworld\nworld\nworld\nant\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aaa\", \"aa\", \"bbb\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpcmxqphgk.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcmxqphgk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\na\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words) {\n        let unique_chars = new Set(word.split(\"\"));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5pjt9u90.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5pjt9u90.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"a\", \"abcd\", \"ab\", \"abcde\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdf6ec78o.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdf6ec78o.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcde\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max_word = words[0];\n  let max_count = 0;\n  for (let word of words) {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word.indexOf(word[i]) === i) {\n        count++;\n      }\n    }\n    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_1im7x6r.js:27:12)\n    at Object.<anonymous> (/tmp/tmp_1im7x6r.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max: number = 0;\n    let maxWord: string = \"\";\n    for (let i: number = 0; i < words.length; i++) {\n        let word: string = words[i];\n        let uniqueChars: string[] = [];\n        for (let j: number = 0; j < word.length; j++) {\n            if (uniqueChars.indexOf(word[j]) === -1) {\n                uniqueChars.push(word[j]);\n            }\n        }\n        if (uniqueChars.length > max) {\n            max = uniqueChars.length;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdef\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprg5xkuwa.ts(33,98): error TS1002: Unterminated string literal.\n../../../../tmp/tmprg5xkuwa.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmprg5xkuwa.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max: number = 0;\n    let max_word: string = \"\";\n    for (let word of words) {\n        let unique_chars: number = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === word.lastIndexOf(word[i])) {\n                unique_chars++;\n            }\n        }\n        if (unique_chars > max) {\n            max = unique_chars;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"ab\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpk30vfseo.js:37:12)\n    at Object.<anonymous> (/tmp/tmpk30vfseo.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcde\na\nabcd\nabcde\nabcdef\nabcdefg\nabcdefgh\nabcdefghi\nabcdefghij\nabcdefghijk\n",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let uniqueChars = word.split(\"\").filter((v, i, a) => a.indexOf(v) === i);\n    if (uniqueChars.length > max) {\n      max = uniqueChars.length;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"cde\", \"ghi\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"cde\", \"ghi\", \"abc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp62k0w2ph.js:24:12)\n    at Object.<anonymous> (/tmp/tmp62k0w2ph.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabc\n",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2x6xr5js.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2x6xr5js.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = '';\n    for (let word of words) {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size > max) {\n            max = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpn78nkubj.js:21:12)\n    at Object.<anonymous> (/tmp/tmpn78nkubj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let count = 0;\n        let unique_chars = {};\n        for (let j = 0; j < word.length; j++) {\n            let char = word[j];\n            if (!unique_chars[char]) {\n                count++;\n                unique_chars[char] = true;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"aaa\", \"aa\", \"bbb\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpo57nryr8.js:33:12)\n    at Object.<anonymous> (/tmp/tmpo57nryr8.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\nabcd\na\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4zkx7zyc.ts(31,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4zkx7zyc.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp4zkx7zyc.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"abcd\", \"abd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmphj6zxplr.js:22:12)\n    at Object.<anonymous> (/tmp/tmphj6zxplr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\n",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"def\", \"ghi\", \"jklm\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpln1i4om9.js:23:12)\n    at Object.<anonymous> (/tmp/tmpln1i4om9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklm\nabcd\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcdef\", \"abcd\", \"abcde\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"a\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyyn6v552.js:25:12)\n    at Object.<anonymous> (/tmp/tmpyyn6v552.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdefg\nabcdefg\nabcdefg\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['abc', 'cde', 'efg']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk']));\nconsole.log(find_max(['abc', 'cde', 'efg', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij', 'abcdefghijk', 'abcdefghijkl']));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpcikl5f9w.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcikl5f9w.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabcd\nabcde\nabcdef\nabcdefg\nabcdefgh\nabcdefghi\nabcdefghij\nabcdefghijk\nabcdefghijkl\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let count = 0;\n        for (let ch of word) {\n            if (word.indexOf(ch) === word.lastIndexOf(ch)) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4nohsm1j.js:31:12)\n    at Object.<anonymous> (/tmp/tmp4nohsm1j.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\nabcdefg\nabcdefgh\nabcdefghi\nabcdefghij\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word.split(\"\"));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"xyz\", \"aba\", \"1221\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2x6xr5js.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2x6xr5js.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max: number = 0;\n  let max_word: string = \"\";\n  for (let word of words) {\n    let unique_chars: string[] = [];\n    for (let char of word) {\n      if (unique_chars.indexOf(char) === -1) {\n        unique_chars.push(char);\n      }\n    }\n    if (unique_chars.length > max) {\n      max = unique_chars.length;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max([\"abc\", \"abcd\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp22etkh5t.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = '';\n  for (let word of words) {\n    let unique = new Set(word.split(''));\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']));\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']) === 'abcd');\nconsole.log(find_max(['a', 'ab', 'abc', 'd', 'cd', 'bcd', 'abcd']) === 'abc');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmph6hz11u6.js:24:12)\n    at Object.<anonymous> (/tmp/tmph6hz11u6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcd\ntrue\nfalse\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max_word = words[0];\n    let max_count = 0;\n    for (let word of words) {\n        let unique_chars = new Set(word.split(''));\n        if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'de', 'fghi', 'jklmno']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpsk26npzs.js:22:12)\n    at Object.<anonymous> (/tmp/tmpsk26npzs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "jklmno\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let unique = 0;\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n      if (word.indexOf(char) === word.lastIndexOf(char)) {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]));\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]));\nconsole.log(find_max(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpskupo2e_.ts(34,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"cdf\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"cdf\", \"abcdefg\"]));\nconsole.log(find_max([\"abc\", \"cde\", \"efg\", \"cdf\", \"abcdefg\", \"abcdefgh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpq2_78elj.js:24:12)\n    at Object.<anonymous> (/tmp/tmpq2_78elj.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abc\nabcdefg\nabcdefgh\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let word of words) {\n    let unique = new Set(word);\n    if (unique.size > max) {\n      max = unique.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"de\", \"fgh\", \"de\", \"ijkl\", \"mn\", \"o\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwj9slgg6.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwj9slgg6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ijkl\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let unique_chars = new Set(word.split(\"\"));\n    if (unique_chars.size > max) {\n      max = unique_chars.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4pugs9q1.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4pugs9q1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\na\nabcd\nabcde\nabcdef\n",
      "timestamp": 1660333686
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max = 0;\n    let max_word = '';\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const unique = new Set(word.split(''));\n        if (unique.size > max) {\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n\nconsole.log(find_max(['abc', 'defgh', 'a', 'abcd']));\nconsole.log(find_max(['abc', 'defgh', 'a', 'abcd', 'abcd']));\nconsole.log(find_max(['abc', 'defgh', 'a', 'abcd', 'abcd', 'abcde']));\nconsole.log(find_max(['abc', 'defgh', 'a', 'abcd', 'abcd', 'abcde', 'abcdef']));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpsw9m1kg1.js:26:12)\n    at Object.<anonymous> (/tmp/tmpsw9m1kg1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "defgh\ndefgh\ndefgh\nabcdef\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const uniqueChars = new Set(word.split(\"\"));\n    if (uniqueChars.size > max) {\n      max = uniqueChars.size;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"defg\", \"ghijkl\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpjvu3rh56.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjvu3rh56.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ghijkl\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\nfunction find_max(words: string[]): string {\n    let max: number = 0;\n    let maxWord: string = \"\";\n    for (let word of words) {\n        let unique: string[] = [];\n        for (let char of word) {\n            if (unique.indexOf(char) === -1) {\n                unique.push(char);\n            }\n        }\n        if (unique.length > max) {\n            max = unique.length;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(find_max([\"abc\", \"abcd\", \"abcde\", \"abcdef\"]));\nconsole.log(find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\nconsole.log(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]));\nconsole.log(find_max([\"aabbcc\", \"aaabbbccc\", \"aaaabbbcccc\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqvaputro.js:30:12)\n    at Object.<anonymous> (/tmp/tmpqvaputro.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "abcdef\na\nabcd\naabbcc\n",
      "timestamp": 1660333711
    }
  ]
}