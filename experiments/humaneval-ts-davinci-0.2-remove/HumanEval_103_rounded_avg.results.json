{
  "language": "ts",
  "name": "HumanEval_103_rounded_avg",
  "results": [
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let sum = 0;\n    let count = 0;\n    let avg = 0;\n    if (n > m) {\n        return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    avg = Math.round(sum / count);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(5, 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(3, 6));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3, 2));\nconsole.log(rounded_avg(3, 1));\nconsole.log(rounded_avg(3, 0));\nconsole.log(rounded_avg(3, -1));\nconsole.log(rounded_avg(3, -2));\nconsole.log(rounded_avg(3, -3));\nconsole.log(rounded_avg(3, -4));\nconsole.log(rounded_avg(3, -5));\nconsole.log(rounded_avg(3, -6));\nconsole.log(rounded_avg(3, -7));\nconsole.log(rounded_avg(3, -8));\nconsole.log(rounded_avg(3, -9));\nconsole.log(rounded_avg(3, -10));\nconsole.log(rounded_avg(3, -11));\nconsole.log(rounded_avg(3, -12));\nconsole.log(rounded_avg(3, -13));\nconsole.log(rounded_avg(3, -14));\nconsole.log(rounded_avg(3, -15));\nconsole.log(rounded_avg(3, -16));\nconsole.log(rounded_avg(3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7bjk1_c1.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmp7bjk1_c1.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp31xojd86.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpu3v014vh.js:24:12)\n    at Object.<anonymous> (/tmp/tmpu3v014vh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n10\n1\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp1ldzj9rs.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1ldzj9rs.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpihoolqrb.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmplw5zhaz3.js:25:12)\n    at Object.<anonymous> (/tmp/tmplw5zhaz3.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n110\n1000\n101\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphc89s2le.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmphc89s2le.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpg5jqh1ag.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpg5jqh1ag.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpzuj39z0n.js:23:12)\n    at Object.<anonymous> (/tmp/tmpzuj39z0n.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 10));\nconsole.log(rounded_avg(20, 20));\nconsole.log(rounded_avg(20, 30));\nconsole.log(rounded_avg(30, 20));\nconsole.log(rounded_avg(30, 30));\nconsole.log(rounded_avg(30, 40));\nconsole.log(rounded_avg(40, 30));\nconsole.log(rounded_avg(40, 40));\nconsole.log(rounded_avg(40, 50));\nconsole.log(rounded_avg(50, 40));\nconsole.log(rounded_avg(50, 50));\nconsole.log(rounded_avg(50, 60));\nconsole.log(rounded_avg(60, 50));\nconsole.log(rounded_avg(60, 60));\nconsole.log(rounded_avg(60, 70));\nconsole.log(rounded_avg(70, 60));\nconsole.log(rounded_avg(70, 70));\nconsole.log(rounded_avg(70, 80));\nconsole.log(rounded_avg(80, 70));\nconsole.log(rounded_avg(80, 80));\nconsole.log(rounded_avg(80, 90));\nconsole.log(rounded_avg(90\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpamxywd_k.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpamxywd_k.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(11, 12));\nconsole.log(rounded_avg(13, 14));\nconsole.log(rounded_avg(15, 16));\nconsole.log(rounded_avg(17, 18));\nconsole.log(rounded_avg(19, 20));\nconsole.log(rounded_avg(21, 22));\nconsole.log(rounded_avg(23, 24));\nconsole.log(rounded_avg(25, 26));\nconsole.log(rounded_avg(27, 28));\nconsole.log(rounded_avg(29, 30));\nconsole.log(rounded_avg(31, 32));\nconsole.log(rounded_avg(33, 34));\nconsole.log(rounded_avg(35, 36));\nconsole.log(rounded_avg(37, 38));\nconsole.log(rounded_avg(39, 40));\nconsole.log(rounded_avg(41, 42));\nconsole.log(rounded_avg(43, 44));\nconsole.log(rounded_avg(45, 46));\nconsole.log(rounded_avg(47, 48));\nconsole.log(rounded_avg(49, 50));\nconsole.log(rounded_avg(51, 52));\nconsole.log(rounded_avg(53, 54));\nconsole.log(rounded_avg(55, 56));\nconsole.log(rounded_avg(57, 58));\nconsole.log(rounded_avg(59, 60));\nconsole.log(rounded_avg(61, 62));\nconsole.log(rounded_avg(63, 64));\nconsole.log(rounded_avg(65, 66));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6qytu_vb.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpuikwrtrr.js:24:12)\n    at Object.<anonymous> (/tmp/tmpuikwrtrr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n10\n1\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 15));\nconsole.log(rounded_avg(15, 10));\nconsole.log(rounded_avg(15, 15));\nconsole.log(rounded_avg(15, 20));\nconsole.log(rounded_avg(20, 15));\nconsole.log(rounded_avg(20, 20));\nconsole.log(rounded_avg(20, 25));\nconsole.log(rounded_avg(25, 20));\nconsole.log(rounded_avg(25, 25));\nconsole.log(rounded_avg(25, 30));\nconsole.log(rounded_avg(30, 25));\nconsole.log(rounded_avg(30, 30));\nconsole.log(rounded_avg(30, 35));\nconsole.log(rounded_avg(35, 30));\nconsole.log(rounded_avg(35, 35));\nconsole.log(rounded_avg(35, 40));\nconsole.log(rounded_avg(40, 35));\nconsole.log(rounded_avg(40, 40));\nconsole.log(rounded_avg(40, 45));\nconsole.log(rounded_avg(45, 40));\nconsole.log(rounded_avg(45, 45));\nconsole.log(rounded_avg(45, 50));\nconsole.log(rounded_avg(50, 45));\nconsole.log(rounded_avg(50\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_49nbay8.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmp_49nbay8.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkc8rrjnk.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpkc8rrjnk.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphc89s2le.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmphc89s2le.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgtqkbuec.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpd049r0p8.js:50:12)\n    at Object.<anonymous> (/tmp/tmpd049r0p8.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n10\n11\n11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n10001\n10010\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(100, 10));\nconsole.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1000000, 10));\nconsole.log(rounded_avg(1000000, 100));\nconsole.log(rounded_avg(1000000, 1000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpzqalo9pu.js:36:12)\n    at Object.<anonymous> (/tmp/tmpzqalo9pu.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n1\n10\n110\n110011\n1111010000100100001\n-1\n1010\n110111\n-1\n-1\n1100100\n-1\n-1\n-1\n11110100001001000000\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000, 1));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(10000, 1));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(100000000, 1));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1000000000, 1));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(10000000000, 1));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(100000000000, 1));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1000000000000, 1));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(10000000000000, 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphzjta950.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmphzjta950.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(3, 1));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(7, 1));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(9, 1));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(11, 1));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(13, 1));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(15, 1));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(17, 1));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(19, 1));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(21, 1));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(23, 1));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(25, 1));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(27, 1));\nconsole.log(rounded_avg(1, 29));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpm25acwhl.js:51:12)\n    at Object.<anonymous> (/tmp/tmpm25acwhl.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n110\n-1\n1\n10\n-1\n11\n-1\n100\n-1\n101\n-1\n110\n-1\n111\n-1\n1000\n-1\n1001\n-1\n1010\n-1\n1011\n-1\n1100\n-1\n1101\n-1\n1110\n-1\n1111\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsehazyox.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2, 6));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpff4suecj.js:19:12)\n    at Object.<anonymous> (/tmp/tmpff4suecj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "100\n1000\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsehazyox.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    return Math.round((n + m) / 2).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.log(rounded_avg(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcn3826fl.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    const average = Math.round((n + m) / 2);\n    return average.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5, 33));\nconsole.log(rounded_avg(5, 34));\nconsole.log(rounded_avg(5, 35));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw3dvnflw.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332726
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprm3f4bum.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmprm3f4bum.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(5, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpota1y80p.js:24:12)\n    at Object.<anonymous> (/tmp/tmpota1y80p.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n101\n100\n-1\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpihoolqrb.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 5)); //3\nconsole.log(rounded_avg(5, 1)); //-1\nconsole.log(rounded_avg(1, 10)); //5\nconsole.log(rounded_avg(1, 1)); //1\nconsole.log(rounded_avg(1, 100)); //26\nconsole.log(rounded_avg(100, 1)); //-1\nconsole.log(rounded_avg(1, 999)); //128\nconsole.log(rounded_avg(999, 1)); //-1\nconsole.log(rounded_avg(1, 99999)); //1536\nconsole.log(rounded_avg(99999, 1)); //-1\nconsole.log(rounded_avg(1, 9999999)); //2048\nconsole.log(rounded_avg(9999999, 1)); //-1\nconsole.log(rounded_avg(1, 999999999)); //2560\nconsole.log(rounded_avg(999999999, 1)); //-1\nconsole.log(rounded_avg(1, 9999999999)); //3072\nconsole.log(rounded_avg(9999999999, 1)); //-1\nconsole.log(rounded_avg(1, 99999999999)); //3584\nconsole.log(rounded_avg(99999999999, 1)); //-1\nconsole.log(rounded_avg(1, 999999999999)); //4096\nconsole.log(rounded_avg(999999999999, 1)); //-1\nconsole.log(rounded_avg(1, 9999999999999)); //4608\nconsole.log(rounded_avg(9999999999999, 1)); //-1\nconsole.log(rounded_avg(1, 99999999999999)); //5120\nconsole.log(rounded_avg(99999999\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnxu3a3q7.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpnxu3a3q7.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000, 1));\nconsole.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(10000, 1));\nconsole.log(rounded_avg(10000, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(100000, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1000000, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(10000000, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(100000000, 1));\nconsole.log(rounded_avg(100000000, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_av\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeblp0nwm.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpeblp0nwm.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(2, 6));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(3, 6));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(6, 6));\nconsole.log(rounded_avg(6, 7));\nconsole.log(rounded_avg(6, 8));\nconsole.log(rounded_avg(6, 9));\nconsole.log(rounded_avg(6, 10));\nconsole.log(rounded_avg(6, 11));\nconsole.log(rounded_avg(6, 12));\nconsole.log(rounded_avg(6, 13));\nconsole.log(rounded_avg(6, 14));\nconsole.log(rounded_avg(6, 15));\nconsole.log(rounded_avg(6, 16));\nconsole.log(rounded_avg(6, 17));\nconsole.log(rounded_avg(6, 18));\nconsole.log(rounded_avg(6, 19));\nconsole.log(rounded_avg(6, 20));\nconsole.log(rounded_avg(6, 21));\nconsole.log(rounded_avg(6, 22));\nconsole.log(rounded_avg(6, 23));\nconsole.log(rounded_avg(6, 24));\nconsole.log(rounded_avg(6, 25));\nconsole.log(rounded_avg(6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkfll7mo2.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpkfll7mo2.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp967wljki.js:49:12)\n    at Object.<anonymous> (/tmp/tmp967wljki.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n10\n11\n11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n10001\n10010\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp1ldzj9rs.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1ldzj9rs.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpcxa_yhih.js:51:12)\n    at Object.<anonymous> (/tmp/tmpcxa_yhih.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n10\n11\n11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let sum = 0;\n    let count = 0;\n    if (n > m) {\n        return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    let avg = Math.round(sum / count);\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(2, 3));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp21hr5lws.js:27:12)\n    at Object.<anonymous> (/tmp/tmp21hr5lws.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n11\n110\n1\n-1\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpex7z9moq.js:24:12)\n    at Object.<anonymous> (/tmp/tmpex7z9moq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n-1\n1111\n110\n101\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgtqkbuec.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6eymktrt.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmp6eymktrt.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjnhklnap.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpjnhklnap.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(4, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9wsacbxg.js:22:12)\n    at Object.<anonymous> (/tmp/tmp9wsacbxg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n-1\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpd0vtb5ie.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpd0vtb5ie.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpl3jrvzmb.js:26:12)\n    at Object.<anonymous> (/tmp/tmpl3jrvzmb.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n101\n1000\n-1\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5, 33));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9gfedd3l.js:51:12)\n    at Object.<anonymous> (/tmp/tmp9gfedd3l.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n-1\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n10001\n10010\n10010\n10011\n10011\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpcxa_yhih.js:51:12)\n    at Object.<anonymous> (/tmp/tmpcxa_yhih.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n10\n11\n11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp1yjaxf3.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplht3kzds.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmplht3kzds.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpinlwthqu.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpinlwthqu.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpihoolqrb.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8jk_a696.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp8jk_a696.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpo6b_i9a8.js:51:12)\n    at Object.<anonymous> (/tmp/tmpo6b_i9a8.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n10\n11\n11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n",
      "timestamp": 1660332728
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp01zdu6cp.js:23:12)\n    at Object.<anonymous> (/tmp/tmp01zdu6cp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332728
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpinlwthqu.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpinlwthqu.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 2));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(4, 8));\nconsole.log(rounded_avg(4, 10));\nconsole.log(rounded_avg(4, 12));\nconsole.log(rounded_avg(4, 14));\nconsole.log(rounded_avg(4, 16));\nconsole.log(rounded_avg(4, 18));\nconsole.log(rounded_avg(4, 20));\nconsole.log(rounded_avg(4, 22));\nconsole.log(rounded_avg(4, 24));\nconsole.log(rounded_avg(4, 26));\nconsole.log(rounded_avg(4, 28));\nconsole.log(rounded_avg(4, 30));\nconsole.log(rounded_avg(4, 32));\nconsole.log(rounded_avg(4, 34));\nconsole.log(rounded_avg(4, 36));\nconsole.log(rounded_avg(4, 38));\nconsole.log(rounded_avg(4, 40));\nconsole.log(rounded_avg(4, 42));\nconsole.log(rounded_avg(4, 44));\nconsole.log(rounded_avg(4, 46));\nconsole.log(rounded_avg(4, 48));\nconsole.log(rounded_avg(4, 50));\nconsole.log(rounded_avg(4, 52));\nconsole.log(rounded_avg(4, 54));\nconsole.log(rounded_avg(4, 56));\nconsole.log(rounded_avg(4, 58));\nconsole.log(rounded_avg(4, 60));\nconsole.log(rounded_avg(4, 62));\nconsole.log(rounded_avg(4, 64));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpthutilq4.js:49:12)\n    at Object.<anonymous> (/tmp/tmpthutilq4.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "101\n100\n-1\n101\n110\n111\n1000\n1001\n1010\n1011\n1100\n1101\n1110\n1111\n10000\n10001\n10010\n10011\n10100\n10101\n10110\n10111\n11000\n11001\n11010\n11011\n11100\n11101\n11110\n11111\n100000\n100001\n100010\n",
      "timestamp": 1660332728
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpx1_fohjh.js:23:12)\n    at Object.<anonymous> (/tmp/tmpx1_fohjh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n-1\n100\n",
      "timestamp": 1660332730
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 10));\nconsole.log(rounded_avg(20, 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp75hkjpuy.js:30:12)\n    at Object.<anonymous> (/tmp/tmp75hkjpuy.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n-1\n1\n110\n1000\n-1\n1010\n1111\n-1\n10100\n",
      "timestamp": 1660332730
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(5, 4));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(6, 6));\nconsole.log(rounded_avg(6, 7));\nconsole.log(rounded_avg(7, 6));\nconsole.log(rounded_avg(7, 7));\nconsole.log(rounded_avg(8, 8));\nconsole.log(rounded_avg(8, 9));\nconsole.log(rounded_avg(9, 8));\nconsole.log(rounded_avg(9, 9));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(11, 10));\nconsole.log(rounded_avg(11, 11));\nconsole.log(rounded_avg(12, 12));\nconsole.log(rounded_avg(12, 13));\nconsole.log(rounded_avg(13, 12));\nconsole.log(rounded_avg(13, 13));\nconsole.log(rounded_avg(14, 14));\nconsole.log(rounded_avg(14, 15));\nconsole.log(rounded_avg(15, 14));\nconsole.log(rounded_avg(15, 15));\nconsole.log(rounded_avg(16, 16));\nconsole.log(rounded_avg(16, 17));\nconsole.log(rounded_avg(17, 16));\nconsole.log(rounded_avg(17, 17));\nconsole.log(rounded_avg(18, 18));\nconsole.log(rounded_avg(18\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphxb72xt4.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmphxb72xt4.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332730
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -10));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5_sz0fbb.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp1yjaxf3.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10, 2));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(5, 2));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(2, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpsist12kh.js:34:12)\n    at Object.<anonymous> (/tmp/tmpsist12kh.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n11\n110\n100\n110\n1000\n101\n1010\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2, 6));\nconsole.log(rounded_avg(2, 3));\nconsole.log(rounded_avg(2, 2));\nconsole.log(rounded_avg(2, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp_5bol17v.js:24:12)\n    at Object.<anonymous> (/tmp/tmp_5bol17v.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "100\n11\n10\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpinlwthqu.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpinlwthqu.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(5, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp_tx6cqgj.js:24:12)\n    at Object.<anonymous> (/tmp/tmp_tx6cqgj.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n1\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let sum = 0;\n    let count = 0;\n    if (n > m) {\n        return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    let avg = Math.round(sum / count);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpwdqglk9l.js:25:12)\n    at Object.<anonymous> (/tmp/tmpwdqglk9l.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332730
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp8anafm1k.js:23:12)\n    at Object.<anonymous> (/tmp/tmp8anafm1k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsehazyox.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg = Math.round((n + m) / 2);\n    return avg > m ? -1 : avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(2, 3));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(6, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(8, 9));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(11, 12));\nconsole.log(rounded_avg(12, 13));\nconsole.log(rounded_avg(13, 14));\nconsole.log(rounded_avg(14, 15));\nconsole.log(rounded_avg(15, 16));\nconsole.log(rounded_avg(16, 17));\nconsole.log(rounded_avg(17, 18));\nconsole.log(rounded_avg(18, 19));\nconsole.log(rounded_avg(19, 20));\nconsole.log(rounded_avg(20, 21));\nconsole.log(rounded_avg(21, 22));\nconsole.log(rounded_avg(22, 23));\nconsole.log(rounded_avg(23, 24));\nconsole.log(rounded_avg(24, 25));\nconsole.log(rounded_avg(25, 26));\nconsole.log(rounded_avg(26, 27));\nconsole.log(rounded_avg(27, 28));\nconsole.log(rounded_avg(28, 29));\nconsole.log(rounded_avg(29, 30));\nconsole.log(rounded_avg(30, 31));\nconsole.log(rounded_avg(31, 32));\nconsole.log(rounded_avg(32, 33));\nconsole.log(rounded_avg(33, 34));\nconsole.log(rounded_avg(34, 35));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp30sljzw_.js:47:12)\n    at Object.<anonymous> (/tmp/tmp30sljzw_.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n11\n100\n101\n110\n111\n1000\n1001\n1010\n1011\n1100\n1101\n1110\n1111\n10000\n10001\n10010\n10011\n10100\n10101\n10110\n10111\n11000\n11001\n11010\n11011\n11100\n11101\n11110\n11111\n100000\n100001\n100010\n100011\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpihoolqrb.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp234yj_o6.js:23:12)\n    at Object.<anonymous> (/tmp/tmp234yj_o6.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n10\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(5, 4));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpiehc3a6l.js:47:12)\n    at Object.<anonymous> (/tmp/tmpiehc3a6l.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n100\n-1\n110\n110011\n111110101\n1001110001001\n1100001101010001\n1111010000100100001\n10011000100101101000001\n10111110101111000010000001\n11101110011010110010100000001\n100101010000001011111001000000001\n101110100100001110110111010000000001\n111010001101010010100101000100000000001\n1001000110000100111001110010101000000000001\n1011010111100110001000001111010010000000000001\n1110001101011111101010010011000110100000000000001\n10001110000110111100100110111111000001000000000000000\n10110001101000101011110000101110110001010000000000000000\n11011110000010110110101100111010011101100100000000000000000\n100010101100011100100011000001001000100111101000000000000000000\n101011010111100011101011110001011010110001100010000000000000000000\n110110001101011100100110101101110001011101111010100000000000000000000\n1000011110000110011110000011001001101110101011001001000000000000000000000\n1010100101101000000101100011111100001010010101111011000000000000000000000000\n1101001111000010000110111100111011001100111011011010000000000000000000000000000\n100001",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsehazyox.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1lr3b8p0.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmp1lr3b8p0.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000, 1));\nconsole.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(10000, 1));\nconsole.log(rounded_avg(10000, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(100000, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1000000, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(10000000, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(100000000, 1));\nconsole.log(rounded_avg(100000000, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_av\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphbr_oiy3.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmphbr_oiy3.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsehazyox.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjnhklnap.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpjnhklnap.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpo6b_i9a8.js:51:12)\n    at Object.<anonymous> (/tmp/tmpo6b_i9a8.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n10\n11\n11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n",
      "timestamp": 1660332728
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp01zdu6cp.js:23:12)\n    at Object.<anonymous> (/tmp/tmp01zdu6cp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332728
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000, 1));\nconsole.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(10000, 1));\nconsole.log(rounded_avg(10000, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(100000, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1000000, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(10000000, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(100000000, 1));\nconsole.log(rounded_avg(100000000, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1000000000, 1));\nconsole.log(rounded\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4k3skcyb.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp4k3skcyb.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpcxa_yhih.js:51:12)\n    at Object.<anonymous> (/tmp/tmpcxa_yhih.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n10\n11\n11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphc89s2le.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmphc89s2le.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpinlwthqu.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpinlwthqu.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsehazyox.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp01zdu6cp.js:23:12)\n    at Object.<anonymous> (/tmp/tmp01zdu6cp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332728
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2, 6));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp65xx98tf.js:23:12)\n    at Object.<anonymous> (/tmp/tmp65xx98tf.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "100\n110\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsehazyox.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 3));\nconsole.log(rounded_avg(4, 2));\nconsole.log(rounded_avg(4, 1));\nconsole.log(rounded_avg(4, 0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpjxi5ju3v.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjxi5ju3v.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "101\n101\n100\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5cll8mir.js:24:12)\n    at Object.<anonymous> (/tmp/tmp5cll8mir.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n1\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000000000000000000000000000000000000000000));\nconsole.log(rounded_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9z2fvnyp.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp9z2fvnyp.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(11, 10));\nconsole.log(rounded_avg(11, 11));\nconsole.log(rounded_avg(11, 12));\nconsole.log(rounded_avg(12, 11));\nconsole.log(rounded_avg(12, 12));\nconsole.log(rounded_avg(12, 13));\nconsole.log(rounded_avg(13, 12));\nconsole.log(rounded_avg(13, 13));\nconsole.log(rounded_avg(13, 14));\nconsole.log(rounded_avg(14, 13));\nconsole.log(rounded_avg(14, 14));\nconsole.log(rounded_avg(14, 15));\nconsole.log(rounded_avg(15, 14));\nconsole.log(rounded_avg(15, 15));\nconsole.log(rounded_avg(15, 16));\nconsole.log(rounded_avg(16, 15));\nconsole.log(rounded_avg(16, 16));\nconsole.log(rounded_avg(16, 17));\nconsole.log(rounded_avg(17, 16));\nconsole.log(rounded_avg(17, 17));\nconsole.log(rounded_avg(17, 18));\nconsole.log(rounded_avg(18, 17));\nconsole.log(rounded_avg(18, 18));\nconsole.log(rounded_avg(18, 19));\nconsole.log(rounded_avg(19, 18));\nconsole.log(rounded_avg(19\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfyqpzar2.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpfyqpzar2.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(11, 12));\nconsole.log(rounded_avg(13, 14));\nconsole.log(rounded_avg(15, 16));\nconsole.log(rounded_avg(17, 18));\nconsole.log(rounded_avg(19, 20));\nconsole.log(rounded_avg(21, 22));\nconsole.log(rounded_avg(23, 24));\nconsole.log(rounded_avg(25, 26));\nconsole.log(rounded_avg(27, 28));\nconsole.log(rounded_avg(29, 30));\nconsole.log(rounded_avg(31, 32));\nconsole.log(rounded_avg(33, 34));\nconsole.log(rounded_avg(35, 36));\nconsole.log(rounded_avg(37, 38));\nconsole.log(rounded_avg(39, 40));\nconsole.log(rounded_avg(41, 42));\nconsole.log(rounded_avg(43, 44));\nconsole.log(rounded_avg(45, 46));\nconsole.log(rounded_avg(47, 48));\nconsole.log(rounded_avg(49, 50));\nconsole.log(rounded_avg(51, 52));\nconsole.log(rounded_avg(53, 54));\nconsole.log(rounded_avg(55, 56));\nconsole.log(rounded_avg(57, 58));\nconsole.log(rounded_avg(59, 60));\nconsole.log(rounded_avg(61, 62));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpk5jdtp6w.js:51:12)\n    at Object.<anonymous> (/tmp/tmpk5jdtp6w.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n100\n110\n1000\n1010\n1100\n1110\n10000\n10010\n10100\n10110\n11000\n11010\n11100\n11110\n100000\n100010\n100100\n100110\n101000\n101010\n101100\n101110\n110000\n110010\n110100\n110110\n111000\n111010\n111100\n111110\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmptyaswvm4.js:24:12)\n    at Object.<anonymous> (/tmp/tmptyaswvm4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n10\n1\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(8, 3));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1, 99));\nconsole.log(rounded_avg(99, 1));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(1, 101));\nconsole.log(rounded_avg(101, 1));\nconsole.log(rounded_avg(1, 102));\nconsole.log(rounded_avg(102, 1));\nconsole.log(rounded_avg(1, 103));\nconsole.log(rounded_avg(103, 1));\nconsole.log(rounded_avg(1, 104));\nconsole.log(rounded_avg(104, 1));\nconsole.log(rounded_avg(1, 105));\nconsole.log(rounded_avg(105, 1));\nconsole.log(rounded_avg(1, 106));\nconsole.log(rounded_avg(106, 1));\nconsole.log(rounded_avg(1, 107));\nconsole.log(rounded_avg(107, 1));\nconsole.log(rounded_avg(1, 108));\nconsole.log(rounded_avg(108, 1));\nconsole.log(rounded_avg(1, 109));\nconsole.log(rounded_avg(109\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjfgxtfql.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpjfgxtfql.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp1ldzj9rs.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1ldzj9rs.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp8si31xi.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332733
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpzs741z_e.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpzs741z_e.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpihoolqrb.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjm3ojq0i.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(2, 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(3, 1));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(100000000, 1));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(10000000000, 1));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1000000000000, 1));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(100000000000000, 1));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1000000000000000, 1));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1000000000000000000, 1));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(100000000000000000000, 1));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(10000000000000000000000, 1));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1000000000000000000000000,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpll21xt3g.ts(44,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpinlwthqu.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpinlwthqu.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp20za7evw.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmp20za7evw.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprm3f4bum.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmprm3f4bum.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkc8rrjnk.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpkc8rrjnk.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(4, 1));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgx3v3yzf.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkc8rrjnk.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpkc8rrjnk.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk6gl64oz.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2, 6));\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(5, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp05om4euf.js:19:12)\n    at Object.<anonymous> (/tmp/tmp05om4euf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "100\n100\n-1\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjm3ojq0i.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgunf_h7i.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -10));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(1, -1));\nconsole.log(rounded_avg(1, -2));\nconsole.log(rounded_avg(1, -3));\nconsole.log(rounded_avg(1, -4));\nconsole.log(rounded_avg(1, -5));\nconsole.log(rounded_avg(1, -6));\nconsole.log(rounded_avg(1, -7));\nconsole.log(rounded_avg(1, -8));\nconsole.log(rounded_avg(1, -9));\nconsole.log(rounded_avg(1, -10));\nconsole.log(rounded_avg(1, -11));\nconsole.log(rounded_avg(1, -12));\nconsole.log(rounded_avg(1, -13));\nconsole.log(rounded_avg(1, -14));\nconsole.log(rounded_avg(1, -15));\nconsole.log(rounded_avg(1, -16));\nconsole.log(rounded_avg(1, -17));\nconsole.log(rounded_avg(1, -18));\nconsole.log(rounded_avg(1, -19));\nconsole.log(rounded_avg(1, -20));\nconsole.log(rounded_avg(1, -21));\nconsole.log(rounded_avg(1, -22));\nconsole.log(rounded_avg(1, -23));\nconsole.log(rounded_avg(1, -24));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpl5wqi0o7.js:49:12)\n    at Object.<anonymous> (/tmp/tmpl5wqi0o7.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n10\n1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let sum = 0;\n    if (n > m) {\n        return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(11, 10));\nconsole.log(rounded_avg(0, 0));\nconsole.log(rounded_avg(0, 1));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(0, 2));\nconsole.log(rounded_avg(2, 0));\nconsole.log(rounded_avg(0, 3));\nconsole.log(rounded_avg(3, 0));\nconsole.log(rounded_avg(0, 4));\nconsole.log(rounded_avg(4, 0));\nconsole.log(rounded_avg(0, 5));\nconsole.log(rounded_avg(5, 0));\nconsole.log(rounded_avg(0, 6));\nconsole.log(rounded_avg(6, 0));\nconsole.log(rounded_avg(0, 7));\nconsole.log(rounded_avg(7, 0));\nconsole.log(rounded_avg(0, 8));\nconsole.log(rounded_avg(8, 0));\nconsole.log(rounded_avg(0, 9));\nconsole.log(rounded_avg(9, 0));\nconsole.log(rounded_avg(0, 10));\nconsole.log(rounded_avg(10, 0));\nconsole.log(rounded_avg(0, 11));\nconsole.log(rounded_avg(11, 0));\nconsole.log(rounded_avg(0, 12));\nconsole.log(rounded_avg(12\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7323uu9y.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmp7323uu9y.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpcxa_yhih.js:51:12)\n    at Object.<anonymous> (/tmp/tmpcxa_yhih.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n10\n11\n11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjnhklnap.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpjnhklnap.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphc89s2le.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmphc89s2le.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkc8rrjnk.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpkc8rrjnk.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(3, 10));\nconsole.log(rounded_avg(3, 11));\nconsole.log(rounded_avg(3, 12));\nconsole.log(rounded_avg(3, 13));\nconsole.log(rounded_avg(3, 14));\nconsole.log(rounded_avg(3, 15));\nconsole.log(rounded_avg(3, 16));\nconsole.log(rounded_avg(3, 17));\nconsole.log(rounded_avg(3, 18));\nconsole.log(rounded_avg(3, 19));\nconsole.log(rounded_avg(3, 20));\nconsole.log(rounded_avg(3, 21));\nconsole.log(rounded_avg(3, 22));\nconsole.log(rounded_avg(3, 23));\nconsole.log(rounded_avg(3, 24));\nconsole.log(rounded_avg(3, 25));\nconsole.log(rounded_avg(3, 26));\nconsole.log(rounded_avg(3, 27));\nconsole.log(rounded_avg(3, 28));\nconsole.log(rounded_avg(3, 29));\nconsole.log(rounded_avg(3, 30));\nconsole.log(rounded_avg(3, 31));\nconsole.log(rounded_avg(3, 32));\nconsole.log(rounded_avg(3, 33));\nconsole.log(rounded_avg(3, 34));\nconsole.log(rounded_avg(3, 35));\nconsole.log(rounded_avg(3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfnsl9usj.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpfnsl9usj.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphc89s2le.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmphc89s2le.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(2, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(3, 1));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(4, 1));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(6, 1));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(7, 1));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(8, 1));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(9, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(11, 1));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(12, 1));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(13, 1));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(14, 1));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(15, 1));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(16, 1));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(17, 1));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpbm1cd2dx.js:50:12)\n    at Object.<anonymous> (/tmp/tmpbm1cd2dx.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n-1\n1\n10\n-1\n11\n-1\n11\n-1\n100\n-1\n100\n-1\n101\n-1\n101\n-1\n110\n-1\n110\n-1\n111\n-1\n111\n-1\n1000\n-1\n1000\n-1\n1001\n-1\n1001\n-1\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5, 33));\nconsole.log(rounded_avg(5, 34));\nconsole.log(rounded_avg(5, 35));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphaqftw5t.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpu3v014vh.js:24:12)\n    at Object.<anonymous> (/tmp/tmpu3v014vh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n10\n1\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Math.round(sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpjwbnqd12.js:28:12)\n    at Object.<anonymous> (/tmp/tmpjwbnqd12.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n-1\n1\n110\n110011\n111110101\n1001110001001\n1100001101010001\n1111010000100100001\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjm3ojq0i.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(5, 4));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(8, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp4n61m041.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4n61m041.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n100\n101\n-1\n110\n-1\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(4, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp4o2f9eth.js:22:12)\n    at Object.<anonymous> (/tmp/tmp4o2f9eth.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n-1\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 10));\nconsole.log(rounded_avg(20, 20));\nconsole.log(rounded_avg(20, 30));\nconsole.log(rounded_avg(30, 20));\nconsole.log(rounded_avg(30, 30));\nconsole.log(rounded_avg(30, 40));\nconsole.log(rounded_avg(40, 30));\nconsole.log(rounded_avg(40, 40));\nconsole.log(rounded_avg(40, 50));\nconsole.log(rounded_avg(50, 40));\nconsole.log(rounded_avg(50, 50));\nconsole.log(rounded_avg(50, 60));\nconsole.log(rounded_avg(60, 50));\nconsole.log(rounded_avg(60, 60));\nconsole.log(rounded_avg(60, 70));\nconsole.log(rounded_avg(70, 60));\nconsole.log(rounded_avg(70, 70));\nconsole.log(rounded_avg(70, 80));\nconsole.log(rounded_avg(80, 70));\nconsole.log(rounded_avg(80, 80));\nconsole.log(rounded_avg(80, 90));\nconsole.log(rounded_avg(90, 80));\nconsole.log(rounded_avg(90, 90));\nconsole.log(rounded_avg(90\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwfg6wxh3.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpwfg6wxh3.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(0, 0));\nconsole.log(rounded_avg(0, 1));\nconsole.log(rounded_avg(0, 2));\nconsole.log(rounded_avg(0, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 0));\nconsole.log(rounded_avg(10, 2));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(10, 100));\nconsole.log(rounded_avg(100, 10));\nconsole.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(100, 0));\nconsole.log(rounded_avg(100, 2));\nconsole.log(rounded_avg(100, 20));\nconsole.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(100, 1000));\nconsole.log(rounded_avg(1000, 100));\nconsole.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1000, 0));\nconsole.log(rounded_avg(1000, 2));\nconsole.log(rounded_avg(1000, 20));\nconsole.log(rounded_avg(1000, 100));\nconsole.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1000, 10000));\nconsole.log(rounded_avg(10000, 1000));\nconsole.log(rounded_avg(10000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpy_fjkdnv.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpy_fjkdnv.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgunf_h7i.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332734
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpenjrfym2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpenjrfym2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "111\n101\n-1\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(10, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpwzrovai0.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwzrovai0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n1\n-1\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(5, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpdnzoouw9.js:24:12)\n    at Object.<anonymous> (/tmp/tmpdnzoouw9.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n10\n100\n-1\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_32ies96.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332735
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvz4_9k00.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332736
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpsehazyox.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpinlwthqu.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpinlwthqu.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.log(rounded_av\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0ixaapbz.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp0ixaapbz.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332737
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(5, 4));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(8, 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp8n79ks5x.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8n79ks5x.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n100\n101\n-1\n110\n-1\n",
      "timestamp": 1660332737
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(6, 5));\nconsole.log(rounded_avg(6, 6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpaxrady7e.js:27:12)\n    at Object.<anonymous> (/tmp/tmpaxrady7e.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n100\n-1\n101\n110\n-1\n110\n",
      "timestamp": 1660332737
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(2, 6));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(4, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(6, 10));\nconsole.log(rounded_avg(7, 11));\nconsole.log(rounded_avg(8, 12));\nconsole.log(rounded_avg(9, 13));\nconsole.log(rounded_avg(10, 14));\nconsole.log(rounded_avg(11, 15));\nconsole.log(rounded_avg(12, 16));\nconsole.log(rounded_avg(13, 17));\nconsole.log(rounded_avg(14, 18));\nconsole.log(rounded_avg(15, 19));\nconsole.log(rounded_avg(16, 20));\nconsole.log(rounded_avg(17, 21));\nconsole.log(rounded_avg(18, 22));\nconsole.log(rounded_avg(19, 23));\nconsole.log(rounded_avg(20, 24));\nconsole.log(rounded_avg(21, 25));\nconsole.log(rounded_avg(22, 26));\nconsole.log(rounded_avg(23, 27));\nconsole.log(rounded_avg(24, 28));\nconsole.log(rounded_avg(25, 29));\nconsole.log(rounded_avg(26, 30));\nconsole.log(rounded_avg(27, 31));\nconsole.log(rounded_avg(28, 32));\nconsole.log(rounded_avg(29, 33));\nconsole.log(rounded_avg(30, 34));\nconsole.log(rounded_avg(31\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqw4do_vr.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpqw4do_vr.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332737
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(3, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpj9qo8v9o.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332737
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(3, 10));\nconsole.log(rounded_avg(4, 10));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(6, 10));\nconsole.log(rounded_avg(7, 10));\nconsole.log(rounded_avg(8, 10));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 9));\nconsole.log(rounded_avg(10, 8));\nconsole.log(rounded_avg(10, 7));\nconsole.log(rounded_avg(10, 6));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10, 4));\nconsole.log(rounded_avg(10, 3));\nconsole.log(rounded_avg(10, 2));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(11, 10));\nconsole.log(rounded_avg(12\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6nrqkwkh.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmp6nrqkwkh.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332737
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 4));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5, 33));\nconsole.log(rounded_avg(5, 34));\nconsole.log(rounded_avg(5, 35));\nconsole.log(rounded_avg(5, 36));\nconsole.log(rounded_avg(5, 37));\nconsole.log(rounded_avg(5, 38));\nconsole.log(rounded_avg(5, 39));\nconsole.log(rounded_avg(5, 40));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiak3gc08.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpiak3gc08.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": -1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "Timeout",
      "stderr": "",
      "stdout": "10\n11\n110\n110011\n1100001101010001\n1111010000100100001\n10011000100101101000001\n10111110101111000010000001\n11101110011010110010100000000\n100101010000001011111001000000000\n",
      "timestamp": 1660332756
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp0fxe_k84.js:23:12)\n    at Object.<anonymous> (/tmp/tmp0fxe_k84.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n110\n-1\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let sum: number = 0;\n    let count: number = 0;\n    if (n > m) {\n        return -1;\n    }\n    for (let i: number = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    let avg: number = Math.round(sum / count);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprezsnuzl.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmprezsnuzl.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 5)); // 101\nconsole.log(rounded_avg(1, 10)); // 1010\nconsole.log(rounded_avg(1, 100)); // 1100100\nconsole.log(rounded_avg(1, 1000)); // 1111101000\nconsole.log(rounded_avg(1, 1000000)); // 11101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpl218anyb.js:25:12)\n    at Object.<anonymous> (/tmp/tmpl218anyb.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n110\n110011\n111110101\n1111010000100100001\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpqdwlx7rz.js:26:12)\n    at Object.<anonymous> (/tmp/tmpqdwlx7rz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n-1\n101\n110\n110011\n111110101\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp234yj_o6.js:23:12)\n    at Object.<anonymous> (/tmp/tmp234yj_o6.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n10\n-1\n",
      "timestamp": 1660332731
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(5, 2));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4eoxcf0i.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpihoolqrb.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(2, 3));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(6, 7));\nconsole.log(rounded_avg(7, 8));\nconsole.log(rounded_avg(8, 9));\nconsole.log(rounded_avg(9, 10));\nconsole.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(11, 12));\nconsole.log(rounded_avg(12, 13));\nconsole.log(rounded_avg(13, 14));\nconsole.log(rounded_avg(14, 15));\nconsole.log(rounded_avg(15, 16));\nconsole.log(rounded_avg(16, 17));\nconsole.log(rounded_avg(17, 18));\nconsole.log(rounded_avg(18, 19));\nconsole.log(rounded_avg(19, 20));\nconsole.log(rounded_avg(20, 21));\nconsole.log(rounded_avg(21, 22));\nconsole.log(rounded_avg(22, 23));\nconsole.log(rounded_avg(23, 24));\nconsole.log(rounded_avg(24, 25));\nconsole.log(rounded_avg(25, 26));\nconsole.log(rounded_avg(26, 27));\nconsole.log(rounded_avg(27, 28));\nconsole.log(rounded_avg(28, 29));\nconsole.log(rounded_avg(29, 30));\nconsole.log(rounded_avg(30, 31));\nconsole.log(rounded_avg(31,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz6a0656y.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    let count = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    let avg = Math.round(sum / count);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5, 33));\nconsole.log(rounded_avg(5, 34));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwc96jcop.ts(51,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1__fpl_j.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp01zdu6cp.js:23:12)\n    at Object.<anonymous> (/tmp/tmp01zdu6cp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332728
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(5, 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp_tg24knf.js:24:12)\n    at Object.<anonymous> (/tmp/tmp_tg24knf.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "100\n101\n100\n-1\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 10));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpzj27lex6.js:51:12)\n    at Object.<anonymous> (/tmp/tmpzj27lex6.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpp1yjaxf3.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgh9c0qlf.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpgh9c0qlf.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp1ldzj9rs.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1ldzj9rs.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n11\n-1\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10, 10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmptgpnt24y.js:27:12)\n    at Object.<anonymous> (/tmp/tmptgpnt24y.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n-1\n1\n110\n1000\n-1\n1010\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole.log(rounded_avg(1, 33));\nconsole.log(rounded_avg(1, 34));\nconsole.log(rounded_avg(1, 35));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpup7h59ph.js:51:12)\n    at Object.<anonymous> (/tmp/tmpup7h59ph.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n10001\n10010\n10010\n",
      "timestamp": 1660332739
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnhy5yix6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpnhy5yix6.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332724
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(4, 7));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmu9hd9iz.js:24:12)\n    at Object.<anonymous> (/tmp/tmpmu9hd9iz.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n110\n1111\n-1\n",
      "timestamp": 1660332739
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let sum = 0;\n    let count = 0;\n    if (n > m) {\n        return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    let avg = Math.round(sum / count);\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpprb0yys3.ts(50,1): error TS1005: ',' expected.\n../../../../tmp/tmpprb0yys3.ts(50,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332739
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpn2bzpm8j.js:24:12)\n    at Object.<anonymous> (/tmp/tmpn2bzpm8j.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n10\n1\n-1\n",
      "timestamp": 1660332740
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(1, 100000000));\nconsole.log(rounded_avg(1, 1000000000));\nconsole.log(rounded_avg(1, 10000000000));\nconsole.log(rounded_avg(1, 100000000000));\nconsole.log(rounded_avg(1, 1000000000000));\nconsole.log(rounded_avg(1, 10000000000000));\nconsole.log(rounded_avg(1, 100000000000000));\nconsole.log(rounded_avg(1, 1000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000));\nconsole.log(rounded_avg(1, 100000000000000000000000));\nconsole.log(rounded_avg(1, 1000000000000000000000000));\nconsole.log(rounded_avg(1, 10000000000000000000000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpihoolqrb.ts(46,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1__fpl_j.ts(47,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332738
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(6, 6));\nconsole.log(rounded_avg(7, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmptq619kpb.js:25:12)\n    at Object.<anonymous> (/tmp/tmptq619kpb.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n101\n110\n110\n-1\n",
      "timestamp": 1660332740
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = sum / (m - n + 1);\n    return Math.round(avg).toString(2);\n}\n\nconsole.log(rounded_avg(3, 6));\nconsole.log(rounded_avg(4, 6));\nconsole.log(rounded_avg(4, 5));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(4, 3));\nconsole.log(rounded_avg(6, 3));\nconsole.log(rounded_avg(6, 6));\nconsole.log(rounded_avg(6, 4));\nconsole.log(rounded_avg(6, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 4));\nconsole.log(rounded_avg(5, 3));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(3, 4));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(3, 6));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(3, 9));\nconsole.log(rounded_avg(3, 10));\nconsole.log(rounded_avg(3, 11));\nconsole.log(rounded_avg(3, 12));\nconsole.log(rounded_avg(3, 13));\nconsole.log(rounded_avg(3, 14));\nconsole.log(rounded_avg(3, 15));\nconsole.log(rounded_avg(3, 16));\nconsole.log(rounded_avg(3, 17));\nconsole.log(rounded_avg(3, 18));\nconsole.log(rounded_avg(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpicaoe4ul.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332740
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(3, 5));\nconsole.log(rounded_avg(5, 1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpuurdu2rk.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuurdu2rk.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "11\n100\n100\n-1\n",
      "timestamp": 1660332740
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(4, 4));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt8yu6vmh.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpt8yu6vmh.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332740
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (Math.round(sum / (m - n + 1))).toString(2);\n}\n\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1, 28));\nconsole.log(rounded_avg(1, 29));\nconsole.log(rounded_avg(1, 30));\nconsole.log(rounded_avg(1, 31));\nconsole.log(rounded_avg(1, 32));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpcxa_yhih.js:51:12)\n    at Object.<anonymous> (/tmp/tmpcxa_yhih.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "10\n10\n11\n11\n100\n100\n101\n101\n110\n110\n111\n111\n1000\n1000\n1001\n1001\n1010\n1010\n1011\n1011\n1100\n1100\n1101\n1101\n1110\n1110\n1111\n1111\n10000\n10000\n10001\n",
      "timestamp": 1660332727
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(10, 5));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(10, 11));\nconsole.log(rounded_avg(10, 12));\nconsole.log(rounded_avg(10, 13));\nconsole.log(rounded_avg(10, 14));\nconsole.log(rounded_avg(10, 15));\nconsole.log(rounded_avg(10, 16));\nconsole.log(rounded_avg(10, 17));\nconsole.log(rounded_avg(10, 18));\nconsole.log(rounded_avg(10, 19));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(10, 21));\nconsole.log(rounded_avg(10, 22));\nconsole.log(rounded_avg(10, 23));\nconsole.log(rounded_avg(10, 24));\nconsole.log(rounded_avg(10, 25));\nconsole.log(rounded_avg(10, 26));\nconsole.log(rounded_avg(10, 27));\nconsole.log(rounded_avg(10, 28));\nconsole.log(rounded_avg(10, 29));\nconsole.log(rounded_avg(10, 30));\nconsole.log(rounded_avg(10, 31));\nconsole.log(rounded_avg(10, 32));\nconsole.log(rounded_avg(10, 33));\nconsole.log(rounded_avg(10, 34));\nconsole.log(rounded_avg(10, 35));\nconsole.log(rounded_avg(10, 36));\nconsole.log(rounded_avg(10, 37));\nconsole.log(rounded_avg(10\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfx78meg2.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpfx78meg2.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332740
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(0, 0));\nconsole.log(rounded_avg(0, 1));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(0, 2));\nconsole.log(rounded_avg(2, 0));\nconsole.log(rounded_avg(0, 3));\nconsole.log(rounded_avg(3, 0));\nconsole.log(rounded_avg(0, 4));\nconsole.log(rounded_avg(4, 0));\nconsole.log(rounded_avg(0, 5));\nconsole.log(rounded_avg(5, 0));\nconsole.log(rounded_avg(0, 6));\nconsole.log(rounded_avg(6, 0));\nconsole.log(rounded_avg(0, 7));\nconsole.log(rounded_avg(7, 0));\nconsole.log(rounded_avg(0, 8));\nconsole.log(rounded_avg(8, 0));\nconsole.log(rounded_avg(0, 9));\nconsole.log(rounded_avg(9, 0));\nconsole.log(rounded_avg(0, 10));\nconsole.log(rounded_avg(10, 0));\nconsole.log(rounded_avg(0, 11));\nconsole.log(rounded_avg(11, 0));\nconsole.log(rounded_avg(0, 12));\nconsole.log(rounded_avg(12\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqkmy_06m.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpqkmy_06m.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332740
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, -1));\nconsole.log(rounded_avg(1, 0));\nconsole.log(rounded_avg(1, -10));\nconsole.log(rounded_avg(1, -100));\nconsole.log(rounded_avg(1, -1000));\nconsole.log(rounded_avg(1, -10000));\nconsole.log(rounded_avg(1, -100000));\nconsole.log(rounded_avg(1, -1000000));\nconsole.log(rounded_avg(1, -10000000));\nconsole.log(rounded_avg(1, -100000000));\nconsole.log(rounded_avg(1, -1000000000));\nconsole.log(rounded_avg(1, -10000000000));\nconsole.log(rounded_avg(1, -100000000000));\nconsole.log(rounded_avg(1, -1000000000000));\nconsole.log(rounded_avg(1, -10000000000000));\nconsole.log(rounded_avg(1, -100000000000000));\nconsole.log(rounded_avg(1, -1000000000000000));\nconsole.log(rounded_avg(1, -10000000000000000));\nconsole.log(rounded_avg(1, -100000000000000000));\nconsole.log(rounded_avg(1, -1000000000000000000));\nconsole.log(rounded_avg(1, -10000000000000000000));\nconsole.log(rounded_avg(1, -100000000000000000000));\nconsole.log(rounded_avg(1, -1000000000000000000000));\nconsole.log(rounded_avg(1, -10000000000000000\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphamr4299.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmphamr4299.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332740
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(5, 6));\nconsole.log(rounded_avg(5, 7));\nconsole.log(rounded_avg(5, 8));\nconsole.log(rounded_avg(5, 9));\nconsole.log(rounded_avg(5, 10));\nconsole.log(rounded_avg(5, 11));\nconsole.log(rounded_avg(5, 12));\nconsole.log(rounded_avg(5, 13));\nconsole.log(rounded_avg(5, 14));\nconsole.log(rounded_avg(5, 15));\nconsole.log(rounded_avg(5, 16));\nconsole.log(rounded_avg(5, 17));\nconsole.log(rounded_avg(5, 18));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(5, 20));\nconsole.log(rounded_avg(5, 21));\nconsole.log(rounded_avg(5, 22));\nconsole.log(rounded_avg(5, 23));\nconsole.log(rounded_avg(5, 24));\nconsole.log(rounded_avg(5, 25));\nconsole.log(rounded_avg(5, 26));\nconsole.log(rounded_avg(5, 27));\nconsole.log(rounded_avg(5, 28));\nconsole.log(rounded_avg(5, 29));\nconsole.log(rounded_avg(5, 30));\nconsole.log(rounded_avg(5, 31));\nconsole.log(rounded_avg(5, 32));\nconsole.log(rounded_avg(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphc89s2le.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmphc89s2le.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332723
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(1, 1));\nconsole.log(rounded_avg(1, 2));\nconsole.log(rounded_avg(1, 3));\nconsole.log(rounded_avg(1, 4));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(1, 6));\nconsole.log(rounded_avg(1, 7));\nconsole.log(rounded_avg(1, 8));\nconsole.log(rounded_avg(1, 9));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(1, 11));\nconsole.log(rounded_avg(1, 12));\nconsole.log(rounded_avg(1, 13));\nconsole.log(rounded_avg(1, 14));\nconsole.log(rounded_avg(1, 15));\nconsole.log(rounded_avg(1, 16));\nconsole.log(rounded_avg(1, 17));\nconsole.log(rounded_avg(1, 18));\nconsole.log(rounded_avg(1, 19));\nconsole.log(rounded_avg(1, 20));\nconsole.log(rounded_avg(1, 21));\nconsole.log(rounded_avg(1, 22));\nconsole.log(rounded_avg(1, 23));\nconsole.log(rounded_avg(1, 24));\nconsole.log(rounded_avg(1, 25));\nconsole.log(rounded_avg(1, 26));\nconsole.log(rounded_avg(1, 27));\nconsole.log(rounded_avg(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiutvk8pe.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpiutvk8pe.ts(49,9): error TS1005: ',' expected.\n",
      "timestamp": 1660332740
    },
    {
      "exit_code": 1,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n    }\n    return avg.toString(2);\n}\n\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(4, 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(8, 3));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(8, 13));\nconsole.log(rounded_avg(8, 12));\nconsole.log(rounded_avg(13, 8));\nconsole.log(rounded_avg(7, 13));\nconsole.log(rounded_avg(11, 6));\nconsole.log(rounded_avg(12, 20));\nconsole.log(rounded_avg(17, 23));\nconsole.log(rounded_avg(20, 12));\nconsole.log(rounded_avg(23, 17));\nconsole.log(rounded_avg(6, 11));\nconsole.log(rounded_avg(13, 7));\nconsole.log(rounded_avg(5, 19));\nconsole.log(rounded_avg(19, 5));\nconsole.log(rounded_avg(2, 10));\nconsole.log(rounded_avg(10, 2));\nconsole.log(rounded_avg(2, 2));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(2, 5));\nconsole.log(rounded_avg(5, 2));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(2, 8));\nconsole.log(rounded_avg(8, 2));\nconsole.log(rounded_avg(8, 8));\nconsole.log(rounded_avg(2, 9));\nconsole.log(rounded_avg(9, 2));\nconsole.log(rounded_avg(9, 9));\nconsole.log(rounded_avg(2, 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpq9n6la6h.js:49:12)\n    at Object.<anonymous> (/tmp/tmpq9n6la6h.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "110\n-1\n11\n-1\n110\n1010\n1011\n1010\n-1\n1010\n-1\n10000\n10100\n-1\n-1\n1001\n-1\n1100\n-1\n110\n-1\n10\n1010\n100\n-1\n101\n101\n-1\n1000\n110\n-1\n1001\n11\n",
      "timestamp": 1660332741
    },
    {
      "exit_code": 2,
      "program": "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = sum / (m - n + 1);\n    return avg.toFixed(0);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(5, 1));\nconsole.log(rounded_avg(5, 5));\nconsole.log(rounded_avg(3, 7));\nconsole.log(rounded_avg(7, 3));\nconsole.log(rounded_avg(3, 3));\nconsole.log(rounded_avg(3, 8));\nconsole.log(rounded_avg(8, 3));\nconsole.log(rounded_avg(8, 8));\nconsole.log(rounded_avg(1, 10));\nconsole.log(rounded_avg(10, 1));\nconsole.log(rounded_avg(10, 10));\nconsole.log(rounded_avg(1, 100));\nconsole.log(rounded_avg(100, 1));\nconsole.log(rounded_avg(100, 100));\nconsole.log(rounded_avg(1, 1000));\nconsole.log(rounded_avg(1000, 1));\nconsole.log(rounded_avg(1000, 1000));\nconsole.log(rounded_avg(1, 10000));\nconsole.log(rounded_avg(10000, 1));\nconsole.log(rounded_avg(10000, 10000));\nconsole.log(rounded_avg(1, 100000));\nconsole.log(rounded_avg(100000, 1));\nconsole.log(rounded_avg(100000, 100000));\nconsole.log(rounded_avg(1, 1000000));\nconsole.log(rounded_avg(1000000, 1));\nconsole.log(rounded_avg(1000000, 1000000));\nconsole.log(rounded_avg(1, 10000000));\nconsole.log(rounded_avg(10000000, 1));\nconsole.log(rounded_avg(10000000, 10000000));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpx7lccjyo.ts(48,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660332740
    }
  ]
}