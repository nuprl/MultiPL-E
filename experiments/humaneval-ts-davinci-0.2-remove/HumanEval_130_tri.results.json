{
  "language": "ts",
  "name": "HumanEval_130_tri",
  "results": [
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        let next = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(next);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpigjfy28m.js:55:12)\n    at Object.<anonymous> (/tmp/tmpigjfy28m.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n[\n     3,    2,     8,   13,\n    23,   44,    80,  147,\n   271,  498,   916, 1685,\n  3099, 5700, 10484\n]\n[\n     3,    2,     8,    13,\n    23,   44,    80,   147,\n   271,  498,   916,  1685,\n  3099, 5700, 10484, 19283\n]\n[\n      3,    2,     8,    13,\n     23,   44,    80,   147,\n    271,  498,   916,  1685,\n   3099, 5700, 10484, 19283,\n  35467\n]\n[\n      3,     2,     8,    13,\n     23,    44,    80,   147,\n    271,   498,   916,  1685,\n   3099,  57",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    } else if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                arr.push(1 + i / 2);\n            } else {\n                arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n            }\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6eemi14d.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole.log(tri(49));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprehme137.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmprehme137.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpursnnxx1.ts(76,1): error TS1005: ',' expected.\n../../../../tmp/tmpursnnxx1.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n < 3) {\n        return result.slice(0, n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp0fnj7hgz.js:77:12)\n    at Object.<anonymous> (/tmp/tmp0fnj7hgz.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, ",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(1);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpr205whuw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpr205whuw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2, 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1 ]\n[ 1, 1 ]\n[ 1, 1, 2 ]\n[ 1, 1, 2, 4 ]\n[ 1, 1, 2, 4, 7 ]\n[ 1, 1, 2, 4, 7, 13 ]\n[\n  1,  1,  2, 4,\n  7, 13, 24\n]\n[\n  1,  1,  2,  4,\n  7, 13, 24, 44\n]\n[\n   1,  1,  2,  4, 7,\n  13, 24, 44, 81\n]\n[\n   1,  1,  2,  4,   7,\n  13, 24, 44, 81, 149\n]\n[\n    1,  1,  2,  4,   7,\n   13, 24, 44, 81, 149,\n  274\n]\n[\n    1,   1,  2,  4,   7,\n   13,  24, 44, 81, 149,\n  274, 504\n]\n[\n    1,  1,  2,   4,   7,  13,\n   24, 44, 81, 149, 274, 504,\n  927\n]\n[\n    1,   1,   2,    4,   7,\n   13,  24,  44,   81, 149,\n  274, 504, 927, 1705\n]\n[\n    1,   1,   2,    4,    7,\n   13,  24,  44,   81,  149,\n  274, 504, 927, 1705, 3136\n]\n[\n     1,   1,   2,    4,    7,\n    13,  24,  44,   81,  149,\n   274, 504, 927, 1705, 3136,\n  5768\n]\n[\n      1,    1,    2,    4,\n      7,   13,   24,   44,\n     81,  149,  274,  504,\n    927, 1705, 3136, 5768,\n  10609\n]\n[\n      1,     1,    2,    4,\n      7,    13,   24,   44,\n     81,   149,  274,  504,\n    927,  1705, 3136, 5768,\n  10609, 19513\n]\n[\n      1,     1,     2,    4,\n      7,    13,    24,   44,\n     ",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkcgk38bz.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg6gbgqsw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpg6gbgqsw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    } else if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                arr.push(1 + i / 2);\n            } else {\n                arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n            }\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbf9u9ia4.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        let next = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(next);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpoleufkn1.js:78:12)\n    at Object.<anonymous> (/tmp/tmpoleufkn1.js:89:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n[\n     3,    2,     8,   13,\n    23,   44,    80,  147,\n   271,  498,   916, 1685,\n  3099, 5700, 10484\n]\n[\n     3,    2,     8,    13,\n    23,   44,    80,   147,\n   271,  498,   916,  1685,\n  3099, 5700, 10484, 19283\n]\n[\n      3,    2,     8,    13,\n     23,   44,    80,   147,\n    271,  498,   916,  1685,\n   3099, 5700, 10484, 19283,\n  35467\n]\n[\n      3,     2,     8,    13,\n     23,    44,    80,   147,\n    271,   498,   916,  1685,\n   3099,  57",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    if (n === 0) {\n        return [0];\n    }\n    if (n === 1) {\n        return [0, 1];\n    }\n    if (n === 2) {\n        return [0, 1, 1];\n    }\n    let result = [0, 1, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe6eyjd94.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    } else if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                arr.push(1 + i / 2);\n            } else {\n                arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n            }\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbf9u9ia4.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n == 1) {\n        return [3];\n    }\n    if (n == 2) {\n        return [3, 2];\n    }\n    if (n == 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6yr9e4z0.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmplhr11w0p.js:79:12)\n    at Object.<anonymous> (/tmp/tmplhr11w0p.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  576",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpzw2kuj0g.js:74:12)\n    at Object.<anonymous> (/tmp/tmpzw2kuj0g.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,  ",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [0];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiswsadh1.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpjxypnwf7.js:74:12)\n    at Object.<anonymous> (/tmp/tmpjxypnwf7.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n  if (n === 0) return [0];\n  if (n === 1) return [0, 1];\n  if (n === 2) return [0, 1, 1];\n  let triArr = [0, 1, 1];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      triArr.push(1 + i / 2);\n    } else {\n      triArr.push(triArr[i - 1] + triArr[i - 2] + triArr[i + 1]);\n    }\n  }\n  return triArr;\n}\n\nconsole.log(tri(0)); // [0]\nconsole.log(tri(1)); // [0, 1]\nconsole.log(tri(2)); // [0, 1, 1]\nconsole.log(tri(3)); // [0, 1, 1, 3]\nconsole.log(tri(4)); // [0, 1, 1, 3, 5]\nconsole.log(tri(5)); // [0, 1, 1, 3, 5, 9]\nconsole.log(tri(6)); // [0, 1, 1, 3, 5, 9, 17]\nconsole.log(tri(7)); // [0, 1, 1, 3, 5, 9, 17, 31]\nconsole.log(tri(8)); // [0, 1, 1, 3, 5, 9, 17, 31, 57]\nconsole.log(tri(9)); // [0, 1, 1, 3, 5, 9, 17, 31, 57, 105]\nconsole.log(tri(10)); // [0, 1, 1, 3, 5, 9, 17, 31, 57, 105, 193]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp3_xwrhgp.js:47:12)\n    at Object.<anonymous> (/tmp/tmp3_xwrhgp.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, NaN ]\n[ 0, 1, 1, NaN, 3 ]\n[ 0, 1, 1, NaN, 3, NaN ]\n[\n  0,   1, 1, NaN,\n  3, NaN, 4\n]\n[\n  0,   1, 1, NaN,\n  3, NaN, 4, NaN\n]\n[\n    0, 1,   1, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    0, 1,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    0, 1,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg6gbgqsw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpg6gbgqsw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(10));\nconsole.log(tri(15));\nconsole.log(tri(20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpf2jr17rf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpf2jr17rf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9, 16 ]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n       3,     2,     1,     6,\n       9,    16,    31,    56,\n     103,   190,   349,   642,\n    1181,  2172,  3995,  7348,\n   13515, 24858, 45721, 84094,\n  154673\n]\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return result;\n    }\n    if (n === 2) {\n        result.push(2);\n        return result;\n    }\n    result.push(2);\n    result.push(8);\n    for (let i = 3; i < n; i++) {\n        result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvktymanf.ts(77,1): error TS1005: ',' expected.\n../../../../tmp/tmpvktymanf.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpwxom3ba4.js:31:12)\n    at Object.<anonymous> (/tmp/tmpwxom3ba4.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2, NaN, 3 ]\n",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9zos29w_.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp6tkrqkzk.js:79:12)\n    at Object.<anonymous> (/tmp/tmp6tkrqkzk.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,    16,    31,   56,\n    1",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    if (n === 1) {\n        return result;\n    }\n    result.push(2);\n    if (n === 2) {\n        return result;\n    }\n    result.push(8);\n    if (n === 3) {\n        return result;\n    }\n    for (let i = 3; i < n; i++) {\n        let sum = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(sum);\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi7m7rbw3.ts(77,1): error TS1005: ',' expected.\n../../../../tmp/tmpi7m7rbw3.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333701
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [0];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp2f5p6nz_.js:40:12)\n    at Object.<anonymous> (/tmp/tmp2f5p6nz_.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpf01zo8og.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmpf01zo8og.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnc606isa.js:43:12)\n    at Object.<anonymous> (/tmp/tmpnc606isa.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 4; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpz9q_nl8o.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdzzq1ndp.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        let next = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(next);\n    }\n    return result;\n}\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpds9oald_.ts(74,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n  let result = [3];\n  if (n === 1) {\n    return result;\n  }\n  result.push(2);\n  if (n === 2) {\n    return result;\n  }\n  result.push(8);\n  if (n === 3) {\n    return result;\n  }\n  for (let i = 3; i < n; i++) {\n    let last = result[result.length - 1];\n    let secondLast = result[result.length - 2];\n    let thirdLast = result[result.length - 3];\n    result.push(last + secondLast + thirdLast);\n  }\n  return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpr6mr1vqw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpr6mr1vqw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n[\n     3,    2,     8,   13,\n    23,   44,    80,  147,\n   271,  498,   916, 1685,\n  3099, 5700, 10484\n]\n[\n     3,    2,     8,    13,\n    23,   44,    80,   147,\n   271,  498,   916,  1685,\n  3099, 5700, 10484, 19283\n]\n[\n      3,    2,     8,    13,\n     23,   44,    80,   147,\n    271,  498,   916,  1685,\n   3099, 5700, 10484, 19283,\n  35467\n]\n[\n      3,     2,     8,    13,\n     23,    44,    80,   147,\n    271,   498,   916,  1685,\n   3099,  5700, 10484, 19283,\n  35467, ",
      "timestamp": 1660333702
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let triArr = [3, 2, 1];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                triArr.push(1 + i / 2);\n            } else {\n                triArr.push(triArr[i - 1] + triArr[i - 2] + triArr[i + 1]);\n            }\n        }\n    }\n    return triArr;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp94gaxn0y.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmp94gaxn0y.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpu6_nhjwq.js:54:12)\n    at Object.<anonymous> (/tmp/tmpu6_nhjwq.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,    16,    31,   56,\n    1",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpmeg5ls1a.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmeg5ls1a.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        let next = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(next);\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp7qrdizv0.js:78:12)\n    at Object.<anonymous> (/tmp/tmp7qrdizv0.js:89:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n[\n     3,    2,     8,   13,\n    23,   44,    80,  147,\n   271,  498,   916, 1685,\n  3099, 5700, 10484\n]\n[\n     3,    2,     8,    13,\n    23,   44,    80,   147,\n   271,  498,   916,  1685,\n  3099, 5700, 10484, 19283\n]\n[\n      3,    2,     8,    13,\n     23,   44,    80,   147,\n    271,  498,   916,  1685,\n   3099, 5700, 10484, 19283,\n  35467\n]\n[\n      3,     2,     8,    13,\n     23,    44,    80,   147,\n    271,   498,   916,  1685,\n   3099,  5700, 10484, 19283,\n  35467, ",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpjxypnwf7.js:74:12)\n    at Object.<anonymous> (/tmp/tmpjxypnwf7.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmplhr11w0p.js:79:12)\n    at Object.<anonymous> (/tmp/tmplhr11w0p.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  576",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpzw2kuj0g.js:74:12)\n    at Object.<anonymous> (/tmp/tmpzw2kuj0g.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,  ",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n  let arr = [3, 2, 1];\n  for (let i = 3; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  }\n  return arr;\n}\n\nconsole.log(tri(0)); // [3]\nconsole.log(tri(1)); // [3, 2]\nconsole.log(tri(2)); // [3, 2, 1]\nconsole.log(tri(3)); // [3, 2, 1, 8]\nconsole.log(tri(4)); // [3, 2, 1, 8, 3]\nconsole.log(tri(5)); // [3, 2, 1, 8, 3, 21]\nconsole.log(tri(6)); // [3, 2, 1, 8, 3, 21, 34]\nconsole.log(tri(7)); // [3, 2, 1, 8, 3, 21, 34, 55]\nconsole.log(tri(8)); // [3, 2, 1, 8, 3, 21, 34, 55, 89]\nconsole.log(tri(9)); // [3, 2, 1, 8, 3, 21, 34, 55, 89, 144]\nconsole.log(tri(10)); // [3, 2, 1, 8, 3, 21, 34, 55, 89, 144, 233]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpl0a43960.js:36:12)\n    at Object.<anonymous> (/tmp/tmpl0a43960.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg2ao1z6q.js:28:12)\n    at Object.<anonymous> (/tmp/tmpg2ao1z6q.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpi9kscg5l.js:33:12)\n    at Object.<anonymous> (/tmp/tmpi9kscg5l.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmplhr11w0p.js:79:12)\n    at Object.<anonymous> (/tmp/tmplhr11w0p.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  576",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpc6zc_7j7.js:33:12)\n    at Object.<anonymous> (/tmp/tmpc6zc_7j7.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpddv6wleo.js:28:12)\n    at Object.<anonymous> (/tmp/tmpddv6wleo.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole.log(tri(49));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprehme137.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmprehme137.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            arr.push(0);\n        } else if (i === 1) {\n            arr.push(1);\n        } else if (i === 2) {\n            arr.push(1);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpngwr6sf2.ts(74,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let triArr = [3, 2, 1];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                triArr.push(1 + i / 2);\n            } else {\n                triArr.push(triArr[i - 1] + triArr[i - 2] + triArr[i + 1]);\n            }\n        }\n    }\n    return triArr;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp94gaxn0y.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmp94gaxn0y.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpyezi8apx.js:79:12)\n    at Object.<anonymous> (/tmp/tmpyezi8apx.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  5768, 10609, 19513\n]\n[\n     0,    1,   ",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpzw2kuj0g.js:74:12)\n    at Object.<anonymous> (/tmp/tmpzw2kuj0g.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,  ",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    } else if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n        }\n        return tribonacci;\n    }\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9a1x7yd0.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    if (n < 3) {\n        return tribonacci.slice(0, n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp29v1y5nr.js:74:12)\n    at Object.<anonymous> (/tmp/tmp29v1y5nr.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9",
      "timestamp": 1660333702
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let triArr = [3, 2, 1];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                triArr.push(1 + i / 2);\n            } else {\n                triArr.push(triArr[i - 1] + triArr[i - 2] + triArr[i + 1]);\n            }\n        }\n    }\n    return triArr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp83g3kx9a.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmp83g3kx9a.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp6tkrqkzk.js:79:12)\n    at Object.<anonymous> (/tmp/tmp6tkrqkzk.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,    16,    31,   56,\n    1",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    if (n === 0) {\n        return [0];\n    }\n    if (n === 1) {\n        return [0, 1];\n    }\n    if (n === 2) {\n        return [0, 1, 2];\n    }\n    let arr = [0, 1, 2];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpshtxh1yz.js:42:12)\n    at Object.<anonymous> (/tmp/tmpshtxh1yz.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 2, NaN, 3 ]\n[ 0, 1, 2, NaN, 3, NaN ]\n[\n  0,   1, 2, NaN,\n  3, NaN, 4\n]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpczigezwk.js:46:12)\n    at Object.<anonymous> (/tmp/tmpczigezwk.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpaafnuw1e.js:37:12)\n    at Object.<anonymous> (/tmp/tmpaafnuw1e.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   1, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpczigezwk.js:46:12)\n    at Object.<anonymous> (/tmp/tmpczigezwk.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n  if (n === 0) return [];\n  if (n === 1) return [3];\n  if (n === 2) return [3, 2];\n  if (n === 3) return [3, 2, 8];\n  let triArr = [3, 2, 8];\n  for (let i = 3; i < n; i++) {\n    triArr.push(triArr[i - 1] + triArr[i - 2] + triArr[i - 3]);\n  }\n  return triArr;\n}\n\nconsole.log(tri(0)); // []\nconsole.log(tri(1)); // [3]\nconsole.log(tri(2)); // [3, 2]\nconsole.log(tri(3)); // [3, 2, 8]\nconsole.log(tri(4)); // [3, 2, 8, 11]\nconsole.log(tri(5)); // [3, 2, 8, 11, 19]\nconsole.log(tri(6)); // [3, 2, 8, 11, 19, 30]\nconsole.log(tri(7)); // [3, 2, 8, 11, 19, 30, 48]\nconsole.log(tri(8)); // [3, 2, 8, 11, 19, 30, 48, 77]\nconsole.log(tri(9)); // [3, 2, 8, 11, 19, 30, 48, 77, 123]\nconsole.log(tri(10)); // [3, 2, 8, 11, 19, 30, 48, 77, 123, 199]\nconsole.log(tri(11)); // [3, 2, 8, 11, 19, 30, 48, 77, 123, 199, 322]\nconsole.log(tri(12)); // [3, 2, 8, 11, 19, 30, 48, 77, 123, 199, 322, 521]\nconsole.log(tri(13)); // [3, 2, 8, 11, 19, 30, 48, 77, 123, 199, 322, 521, 843]\nconsole.log(tri(14)); // [3, 2, 8, 11, 19, 30, 48, 77, 123, 199, 322, 521, 843, 1364]\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpsxyu5x8h.js:49:12)\n    at Object.<anonymous> (/tmp/tmpsxyu5x8h.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[]\n[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpyezi8apx.js:79:12)\n    at Object.<anonymous> (/tmp/tmpyezi8apx.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  5768, 10609, 19513\n]\n[\n     0,    1,   ",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpi9kscg5l.js:33:12)\n    at Object.<anonymous> (/tmp/tmpi9kscg5l.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg6gbgqsw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpg6gbgqsw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n <= 3) {\n        return arr.slice(0, n);\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpi8f2ap30.js:75:12)\n    at Object.<anonymous> (/tmp/tmpi8f2ap30.js:86:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,    16,    31,   56,\n    103,   190,   349,  642,\n   1181,  2172,  3995, 7348,\n  13515, 24858, 45721\n]\n[\n      3,     2,     1,     6,\n      9,    16,    31,    56,\n    103,   190,   349,   642,\n   1181,  2172,  3995,  7348,\n  13515, 24858, 45721, 84094\n]\n[\n       3,     2,     1,     6,\n       9,    16,    31,    56,\n     103,   190,   349,   642,\n    1181,  2172,  3995,  7348,\n   13515, 24858, 45721, 84094,\n  154673\n]\n[\n       3,      2,     1,  ",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpygi2dkkw.js:32:12)\n    at Object.<anonymous> (/tmp/tmpygi2dkkw.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    } else if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                arr.push(1 + i / 2);\n            } else {\n                arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n            }\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6eemi14d.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpm2_52o2z.ts(75,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpq387es61.js:48:12)\n    at Object.<anonymous> (/tmp/tmpq387es61.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[]\n[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpjceb_eiu.js:33:12)\n    at Object.<anonymous> (/tmp/tmpjceb_eiu.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 0; i < n - 3; i++) {\n        result.push(result[i] + result[i + 1] + result[i + 2]);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp0naug_0d.js:44:12)\n    at Object.<anonymous> (/tmp/tmp0naug_0d.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n < 3) {\n        return result.slice(0, n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp0fnj7hgz.js:77:12)\n    at Object.<anonymous> (/tmp/tmp0fnj7hgz.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, ",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2a193pa0.ts(74,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 0; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  1,\n  NaN,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpi7o7xmgb.js:77:12)\n    at Object.<anonymous> (/tmp/tmpi7o7xmgb.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 1, NaN, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 1 ]\n[ 3, 2, 1, 1, NaN ]\n[ 3, 2, 1, 1, NaN, 2 ]\n[\n    3, 2,   1, 1,\n  NaN, 2, NaN\n]\n[\n    3, 2,   1, 1,\n  NaN, 2, NaN, 3\n]\n[\n  3,   2, 1,   1, NaN,\n  2, NaN, 3, NaN\n]\n[\n  3,   2, 1,   1, NaN,\n  2, NaN, 3, NaN,   4\n]\n[\n    3,   2, 1,   1, NaN,\n    2, NaN, 3, NaN,   4,\n  NaN\n]\n[\n    3,   2, 1,   1, NaN,\n    2, NaN, 3, NaN,   4,\n  NaN,   5\n]\n[\n    3, 2,   1, 1, NaN, 2,\n  NaN, 3, NaN, 4, NaN, 5,\n  NaN\n]\n[\n    3, 2,   1, 1, NaN, 2,\n  NaN, 3, NaN, 4, NaN, 5,\n  NaN, 6\n]\n[\n    3, 2,   1, 1, NaN, 2,\n  NaN, 3, NaN, 4, NaN, 5,\n  NaN, 6, NaN\n]\n[\n    3, 2,   1, 1, NaN, 2,\n  NaN, 3, NaN, 4, NaN, 5,\n  NaN, 6, NaN, 7\n]\n[\n    3,   2,   1,   1, NaN,   2, NaN,\n    3, NaN,   4, NaN,   5, NaN,   6,\n  NaN,   7, NaN\n]\n[\n    3,   2,   1,   1, NaN,   2, NaN,\n    3, NaN,   4, NaN,   5, NaN,   6,\n  NaN,   7, NaN,   8\n]\n[\n    3,   2,   1,   1, NaN,   2, NaN,\n    3, NaN,   4, NaN,   5, NaN,   6,\n  NaN,   7, NaN,   8, NaN\n]\n[\n    3,   2,   1,   1, NaN,   2, NaN,\n    3, NaN,   4, NaN,   5, NaN,   6,\n  NaN,   7, NaN,   8, NaN,   9",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n  let result = [];\n  for (let i = 0; i <= n; i++) {\n    if (i === 0) {\n      result.push(0);\n    } else if (i === 1) {\n      result.push(1);\n    } else if (i === 2) {\n      result.push(1);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n  return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqym52izm.ts(74,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        let last = result[result.length - 1];\n        let secondLast = result[result.length - 2];\n        let thirdLast = result[result.length - 3];\n        result.push(last + secondLast + thirdLast);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpa7tm6lny.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) return [3];\n    if (n === 2) return [3, 2];\n    if (n === 3) return [3, 2, 8];\n    for (let i = 3; i < n; i++) {\n        result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpicdfd3ol.js:76:12)\n    at Object.<anonymous> (/tmp/tmpicdfd3ol.js:87:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n[\n     3,    2,     8,   13,\n    23,   44,    80,  147,\n   271,  498,   916, 1685,\n  3099, 5700, 10484\n]\n[\n     3,    2,     8,    13,\n    23,   44,    80,   147,\n   271,  498,   916,  1685,\n  3099, 5700, 10484, 19283\n]\n[\n      3,    2,     8,    13,\n     23,   44,    80,   147,\n    271,  498,   916,  1685,\n   3099, 5700, 10484, 19283,\n  35467\n]\n[\n      3,     2,     8,    13,\n     23,    44,    80,   147,\n    271,   498,   916,  1685,\n   3099,  57",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp0j7ykwih.js:44:12)\n    at Object.<anonymous> (/tmp/tmp0j7ykwih.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcw13ppku.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpxl0lg3fy.js:40:12)\n    at Object.<anonymous> (/tmp/tmpxl0lg3fy.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, NaN, 3 ]\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [1, 1, 1];\n    if (n === 1) {\n        return [1];\n    }\n    if (n === 2) {\n        return [1, 1];\n    }\n    if (n === 3) {\n        return [1, 1, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgen_ik7z.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp2a193pa0.ts(74,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333705
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 4; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + (i / 2));\n        } else {\n            arr.push(arr[i - 2] + arr[i - 3] + arr[i - 4]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0qzahr6x.ts(77,1): error TS1005: ',' expected.\n../../../../tmp/tmp0qzahr6x.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpyezi8apx.js:79:12)\n    at Object.<anonymous> (/tmp/tmpyezi8apx.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  5768, 10609, 19513\n]\n[\n     0,    1,   ",
      "timestamp": 1660333702
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(10));\nconsole.log(tri(15));\nconsole.log(tri(20));\nconsole.log(tri(25));\nconsole.log(tri(30));\nconsole.log(tri(35));\nconsole.log(tri(40));\nconsole.log(tri(45));\nconsole.log(tri(50));\nconsole.log(tri(55));\nconsole.log(tri(60));\nconsole.log(tri(65));\nconsole.log(tri(70));\nconsole.log(tri(75));\nconsole.log(tri(80));\nconsole.log(tri(85));\nconsole.log(tri(90));\nconsole.log(tri(95));\nconsole.log(tri(100));\nconsole.log(tri(105));\nconsole.log(tri(110));\nconsole.log(tri(115));\nconsole.log(tri(120));\nconsole.log(tri(125));\nconsole.log(tri(130));\nconsole.log(tri(135));\nconsole.log(tri(140));\nconsole.log(tri(145));\nconsole.log(tri(150));\nconsole.log(tri(155));\nconsole.log(tri(160));\nconsole.log(tri(165));\nconsole.log(tri(170));\nconsole.log(tri(175));\nconsole.log(tri(180));\nconsole.log(tri(185));\nconsole.log(tri(190));\nconsole.log(tri(195));\nconsole.log(tri(200));\nconsole.log(tri(205));\nconsole.log(tri(210));\nconsole.log(tri(215));\nconsole.log(tri(220));\nconsole.log(tri(225));\nconsole.log(tri(230));\nconsole.log(tri(235));\nconsole.log(tri(240));\nconsole.log(tri(245));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0p1u9bze.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmp0p1u9bze.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 8];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                result.push(1 + i / 2);\n            } else {\n                result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmphch4mwve.js:81:12)\n    at Object.<anonymous> (/tmp/tmphch4mwve.js:92:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN, ",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpn1h3o3wd.js:26:12)\n    at Object.<anonymous> (/tmp/tmpn1h3o3wd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxm0v8ntl.ts(74,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdzzq1ndp.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp661qfrjh.ts(73,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333708
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(1);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpyqg8zec8.js:79:12)\n    at Object.<anonymous> (/tmp/tmpyqg8zec8.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2, 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 1, 2, 4, 7, 13 ]\n[\n  1,  1,  2, 4,\n  7, 13, 24\n]\n[\n  1,  1,  2,  4,\n  7, 13, 24, 44\n]\n[\n   1,  1,  2,  4, 7,\n  13, 24, 44, 81\n]\n[\n   1,  1,  2,  4,   7,\n  13, 24, 44, 81, 149\n]\n[\n    1,  1,  2,  4,   7,\n   13, 24, 44, 81, 149,\n  274\n]\n[\n    1,   1,  2,  4,   7,\n   13,  24, 44, 81, 149,\n  274, 504\n]\n[\n    1,  1,  2,   4,   7,  13,\n   24, 44, 81, 149, 274, 504,\n  927\n]\n[\n    1,   1,   2,    4,   7,\n   13,  24,  44,   81, 149,\n  274, 504, 927, 1705\n]\n[\n    1,   1,   2,    4,    7,\n   13,  24,  44,   81,  149,\n  274, 504, 927, 1705, 3136\n]\n[\n     1,   1,   2,    4,    7,\n    13,  24,  44,   81,  149,\n   274, 504, 927, 1705, 3136,\n  5768\n]\n[\n      1,    1,    2,    4,\n      7,   13,   24,   44,\n     81,  149,  274,  504,\n    927, 1705, 3136, 5768,\n  10609\n]\n[\n      1,     1,    2,    4,\n      7,    13,   24,   44,\n     81,   149,  274,  504,\n    927,  1705, 3136, 5768,\n  10609, 19513\n]\n[\n      1,     1,     2,    4,\n      7,    13,    24,   44,\n     81,   149,   274,  504,\n    927,  1705,  3136, 5768,\n  10609, 19513, 35890\n]\n[\n      1,     1,     2,     4,\n      7,    13,    24,    44,\n     81,   149,   274,   504,\n    927,  1705,  3136,  5768,\n  10609, 19513, 35890, 66012\n]\n[\n       1,     1,     2,     4,\n       7,    13,    24,    44,\n      81,   149,   274,   504,\n     927,  1705,  3136,  5768,\n   10609, 19513, 35890, 66012,\n  121415\n]\n[\n       1,      1,     2,     4,\n       7,     13,    24,    44,\n      81,    149,   274,   504,\n     927,   1705,  3136,  5768,\n   10609,  19513, 35890, 66012,\n  121415, 223317\n]\n[\n       1,      1,      2,     4,\n       7,     13,     24,    44,\n      81,    149,    274,   504,\n     927,   1705,   3136,  5768,\n   10609,  19513,  35890, 66012,\n  121415, 223317, 410744\n]\n[\n       1,      1,      2,      4,\n       7,     13,     24,     44,\n      81,    149,    274,    504,\n     927,   1705,   3136,   5768,\n   10609,  19513,  35890,  66012,\n  121415, 223317, 410744, 755476\n]\n[\n        1,      1,      2,      4,\n        7,     13,     24,     44,\n       81,    149,    274,    50",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(1);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp833tn9wl.js:79:12)\n    at Object.<anonymous> (/tmp/tmp833tn9wl.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2, 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 1, 2, 4, 7 ]\n[ 1, 1, 2, 4, 7, 13 ]\n[\n  1,  1,  2, 4,\n  7, 13, 24\n]\n[\n  1,  1,  2,  4,\n  7, 13, 24, 44\n]\n[\n   1,  1,  2,  4, 7,\n  13, 24, 44, 81\n]\n[\n   1,  1,  2,  4,   7,\n  13, 24, 44, 81, 149\n]\n[\n    1,  1,  2,  4,   7,\n   13, 24, 44, 81, 149,\n  274\n]\n[\n    1,   1,  2,  4,   7,\n   13,  24, 44, 81, 149,\n  274, 504\n]\n[\n    1,  1,  2,   4,   7,  13,\n   24, 44, 81, 149, 274, 504,\n  927\n]\n[\n    1,   1,   2,    4,   7,\n   13,  24,  44,   81, 149,\n  274, 504, 927, 1705\n]\n[\n    1,   1,   2,    4,    7,\n   13,  24,  44,   81,  149,\n  274, 504, 927, 1705, 3136\n]\n[\n     1,   1,   2,    4,    7,\n    13,  24,  44,   81,  149,\n   274, 504, 927, 1705, 3136,\n  5768\n]\n[\n      1,    1,    2,    4,\n      7,   13,   24,   44,\n     81,  149,  274,  504,\n    927, 1705, 3136, 5768,\n  10609\n]\n[\n      1,     1,    2,    4,\n      7,    13,   24,   44,\n     81,   149,  274,  504,\n    927,  1705, 3136, 5768,\n  10609, 19513\n]\n[\n      1,     1,     2,    4,\n      7,    13,    24,   44,\n     81,   149,   274,  504,\n    927,  1705,  3",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                arr.push(1 + i / 2);\n            } else {\n                arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n            }\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpl_mg5ty8.js:81:12)\n    at Object.<anonymous> (/tmp/tmpl_mg5ty8.js:92:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, NaN ]\n[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   1, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   1, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10, NaN\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10, NaN,  11\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10, NaN,  11,\n  NaN\n]\n[\n  3,   2,  1, NaN,  3, NaN,  4, NaN,\n  5, NaN,  6, NaN,  7, NaN,  8, NaN,\n  9, NaN, 10, NaN, 11, NaN, 12\n]\n[\n  3,   2,  1, NaN,  3, NaN,  4, NaN,\n  5, NaN,  6, NaN,  7, NaN,  8, NaN,\n  9, NaN, 10, NaN, 11, NaN, 12, NaN\n]\n[\n   3,   2,  1, NaN,  3, NaN,  4, NaN,\n   5, NaN,  6, NaN,  7, NaN,  8, NaN,\n   9, NaN, 10, NaN, 11, NaN, 12, NaN,\n  13\n]\n[\n   3,   2,  1, NaN,  3, NaN,  4, NaN,\n   5, NaN,  6, NaN,  7, NaN,  8, NaN,\n   9, NaN, 10, NaN, 11, NaN, 12, NaN,\n  13, NaN\n]\n[\n   3,   2,  1, NaN,  3, NaN,  4, NaN,\n   5, NaN,  6, NaN,  7, NaN,  8, NaN,\n   9, NaN, 10, NaN, 11, NaN, 12, NaN,\n  13, NaN, 14\n]\n[\n   3,   2,  1, NaN,  3, NaN,  4, NaN,\n   5, NaN,  6, NaN,  7, NaN,  8, NaN,\n   9, NaN, 10, NaN, 11, NaN, 12, NaN,\n  13, NaN, 14, NaN\n]\n[\n   3,   2,  1, NaN,  3, NaN,  4, ",
      "timestamp": 1660333709
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdzzq1ndp.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    let arr = [3, 2, 8];\n    for (let i = 3; i < n; i++) {\n        let next = arr[i - 1] + arr[i - 2] + arr[i - 3];\n        arr.push(next);\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpuam08ypv.js:49:12)\n    at Object.<anonymous> (/tmp/tmpuam08ypv.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[]\n[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpzw2kuj0g.js:74:12)\n    at Object.<anonymous> (/tmp/tmpzw2kuj0g.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,  ",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    const result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpkkxx14ox.js:33:12)\n    at Object.<anonymous> (/tmp/tmpkkxx14ox.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    let arr = [3, 2, 8];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp41j8dk8_.js:80:12)\n    at Object.<anonymous> (/tmp/tmp41j8dk8_.js:91:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[]\n[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10, NaN,  11\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10, NaN,  11,\n  NaN\n]\n[\n  3,   2,  8, NaN,  3, NaN,  4, NaN,\n  5, NaN,  6, NaN,  7, NaN,  8, NaN,\n  9, NaN, 10, NaN, 11, NaN, 12\n]\n[\n  3,   2,  8, NaN,  3, NaN,  4, NaN,\n  5, NaN,  6, NaN,  7, NaN,  8, NaN,\n  9, NaN, 10, NaN, 11, NaN, 12, NaN\n]\n[\n   3,   2,  8, NaN,  3, NaN,  4, NaN,\n   5, NaN,  6, NaN,  7, NaN,  8, NaN,\n   9, NaN, 10, NaN, 11, NaN, 12, NaN,\n  13\n]\n[\n   3,   2,  8, NaN,  3, NaN,  4, NaN,\n   5, NaN,  6, NaN,  7, NaN,  8, NaN,\n   9, NaN, 10, NaN, 11, NaN, 12, NaN,\n  13, NaN\n]\n[\n   3,   2,  8, NaN,  3, NaN,  4, NaN,\n   5, NaN,  6, NaN,  7, NaN,  8, NaN,\n   9, NaN, 10, NaN, 11, NaN, 12, NaN,\n  13, NaN, 14\n]\n[\n   3,   2,  8, NaN,  3, NaN,  4, NaN,\n   5, NaN,  6, NaN,  7, NaN,  8, NaN,\n   9, NaN, 10, NaN, 11, NaN, 12, NaN,\n  13, NaN, 14, NaN\n]\n[\n   3,   2,  8, ",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg0klhchx.js:39:12)\n    at Object.<anonymous> (/tmp/tmpg0klhchx.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmplhr11w0p.js:79:12)\n    at Object.<anonymous> (/tmp/tmplhr11w0p.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  576",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg6gbgqsw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpg6gbgqsw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmputo00_ce.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmputo00_ce.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [1, 1, 1];\n    if (n === 1) {\n        return [1];\n    } else if (n === 2) {\n        return [1, 1];\n    } else if (n === 3) {\n        return [1, 1, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_4ccg7vi.ts(74,1): error TS1005: ',' expected.\n../../../../tmp/tmp_4ccg7vi.ts(74,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    if (n === 0) {\n        return result;\n    }\n    if (n === 1) {\n        result.push(3);\n        return result;\n    }\n    if (n === 2) {\n        result.push(3, 2);\n        return result;\n    }\n    result.push(3, 2, 8);\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpjq0rn3_u.js:53:12)\n    at Object.<anonymous> (/tmp/tmpjq0rn3_u.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[]\n[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpz8dgsyw9.js:32:12)\n    at Object.<anonymous> (/tmp/tmpz8dgsyw9.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 8];\n    } else {\n        for (let i = 3; i < n; i++) {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n        return result;\n    }\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp57ea5jkn.ts(74,1): error TS1005: ',' expected.\n../../../../tmp/tmp57ea5jkn.ts(74,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(10));\nconsole.log(tri(20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp2691f4nv.js:28:12)\n    at Object.<anonymous> (/tmp/tmp2691f4nv.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9, 16 ]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n       3,     2,     1,     6,\n       9,    16,    31,    56,\n     103,   190,   349,   642,\n    1181,  2172,  3995,  7348,\n   13515, 24858, 45721, 84094,\n  154673\n]\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    if (n === 0) {\n        return [0];\n    }\n    if (n === 1) {\n        return [0, 1];\n    }\n    if (n === 2) {\n        return [0, 1, 1];\n    }\n    let arr = [0, 1, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps_nzisz6.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    let arr = [3, 2, 8];\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg90r216h.js:53:12)\n    at Object.<anonymous> (/tmp/tmpg90r216h.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[]\n[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    if (n === 1) {\n        return result;\n    }\n    result.push(2);\n    if (n === 2) {\n        return result;\n    }\n    result.push(8);\n    if (n === 3) {\n        return result;\n    }\n    for (let i = 3; i < n; i++) {\n        result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpps2y4tvf.js:46:12)\n    at Object.<anonymous> (/tmp/tmpps2y4tvf.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    let arr = [3, 2, 8];\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp5ze344qn.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9zos29w_.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpvpwm04ob.js:40:12)\n    at Object.<anonymous> (/tmp/tmpvpwm04ob.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN ]\n[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN, 3, NaN ]\n[\n  3, NaN, 2, NaN,\n  3, NaN, 4\n]\n[\n  3, NaN, 2, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, NaN,   2, NaN, 3,\n  NaN,   4, NaN,   5\n]\n[\n    3, NaN,   2, NaN,   3,\n  NaN,   4, NaN,   5, NaN\n]\n[\n    3, NaN,   2, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6\n]\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg6gbgqsw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpg6gbgqsw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n  let tribonacci = [1, 1, 1];\n  if (n === 0) {\n    return [];\n  } else if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else if (n === 3) {\n    return [1, 1, 1];\n  } else {\n    for (let i = 3; i < n; i++) {\n      tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n  }\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwhl0ee45.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpsrwkkaa8.js:79:12)\n    at Object.<anonymous> (/tmp/tmpsrwkkaa8.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[]\n[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n    ",
      "timestamp": 1660333709
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n < 3) {\n        return arr.slice(0, n);\n    }\n    for (let i = 3; i <= n; i++) {\n        arr.push(i % 2 === 0 ? 1 + i / 2 : arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n    return arr;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpojyf6wp7.js:38:12)\n    at Object.<anonymous> (/tmp/tmpojyf6wp7.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 1, NaN ]\n[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   1, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 8];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                result.push(1 + i / 2);\n            } else {\n                result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmphch4mwve.js:81:12)\n    at Object.<anonymous> (/tmp/tmphch4mwve.js:92:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN, ",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpsrwkkaa8.js:79:12)\n    at Object.<anonymous> (/tmp/tmpsrwkkaa8.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[]\n[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n    ",
      "timestamp": 1660333709
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [3];\n    if (n === 1) {\n        return result;\n    }\n    result.push(2);\n    if (n === 2) {\n        return result;\n    }\n    result.push(8);\n    if (n === 3) {\n        return result;\n    }\n    for (let i = 3; i < n; i++) {\n        let next = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(next);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxdnnzt9l.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333710
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    let i = 3;\n    while (i <= n) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n        i++;\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(3));\nconsole.log(tri(1));\nconsole.log(tri(0));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp9_8e_uax.js:31:12)\n    at Object.<anonymous> (/tmp/tmp9_8e_uax.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9, 16 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n",
      "timestamp": 1660333711
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n  let tribonacci = [3, 2, 8];\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [3];\n  }\n  if (n === 2) {\n    return [3, 2];\n  }\n  if (n === 3) {\n    return [3, 2, 8];\n  }\n  for (let i = 3; i < n; i++) {\n    tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n  }\n  return tribonacci;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4fnwz10g.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333712
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n <= 2) {\n        return result.slice(0, n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmphwxuv5z0.js:36:12)\n    at Object.<anonymous> (/tmp/tmphwxuv5z0.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8 ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN ]\n",
      "timestamp": 1660333712
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 8];\n    } else {\n        for (let i = 3; i < n; i++) {\n            let next = result[i - 1] + result[i - 2] + result[i - 3];\n            result.push(next);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpw7kbrb_p.js:47:12)\n    at Object.<anonymous> (/tmp/tmpw7kbrb_p.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n",
      "timestamp": 1660333712
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp36drwzyu.js:35:12)\n    at Object.<anonymous> (/tmp/tmp36drwzyu.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpsumu5t85.js:77:12)\n    at Object.<anonymous> (/tmp/tmpsumu5t85.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, NaN ]\n[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   1, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   1, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, N",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let triArr = [3, 2, 1];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                triArr.push(1 + i / 2);\n            } else {\n                triArr.push(triArr[i - 1] + triArr[i - 2] + triArr[i + 1]);\n            }\n        }\n    }\n    return triArr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpqw20egxo.js:48:12)\n    at Object.<anonymous> (/tmp/tmpqw20egxo.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, NaN ]\n[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   1, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 8];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                result.push(1 + i / 2);\n            } else {\n                result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmphch4mwve.js:81:12)\n    at Object.<anonymous> (/tmp/tmphch4mwve.js:92:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN, ",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(10));\nconsole.log(tri(15));\nconsole.log(tri(20));\nconsole.log(tri(25));\nconsole.log(tri(30));\nconsole.log(tri(35));\nconsole.log(tri(40));\nconsole.log(tri(45));\nconsole.log(tri(50));\nconsole.log(tri(55));\nconsole.log(tri(60));\nconsole.log(tri(65));\nconsole.log(tri(70));\nconsole.log(tri(75));\nconsole.log(tri(80));\nconsole.log(tri(85));\nconsole.log(tri(90));\nconsole.log(tri(95));\nconsole.log(tri(100));\nconsole.log(tri(105));\nconsole.log(tri(110));\nconsole.log(tri(115));\nconsole.log(tri(120));\nconsole.log(tri(125));\nconsole.log(tri(130));\nconsole.log(tri(135));\nconsole.log(tri(140));\nconsole.log(tri(145));\nconsole.log(tri(150));\nconsole.log(tri(155));\nconsole.log(tri(160));\nconsole.log(tri(165));\nconsole.log(tri(170));\nconsole.log(tri(175));\nconsole.log(tri(180));\nconsole.log(tri(185));\nconsole.log(tri(190));\nconsole.log(tri(195));\nconsole.log(tri(200));\nconsole.log(tri(205));\nconsole.log(tri(210));\nconsole.log(tri(215));\nconsole.log(tri(220));\nconsole.log(tri(225));\nconsole.log(tri(230));\nconsole.log(tri(235));\nconsole.log(tri(240));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpwkiauztz.js:74:12)\n    at Object.<anonymous> (/tmp/tmpwkiauztz.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9, 16 ]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n       3,     2,     1,     6,\n       9,    16,    31,    56,\n     103,   190,   349,   642,\n    1181,  2172,  3995,  7348,\n   13515, 24858, 45721, 84094,\n  154673\n]\n[\n        3,       2,      1,      6,\n        9,      16,     31,     56,\n      103,     190,    349,    642,\n     1181,    2172,   3995,   7348,\n    13515,   24858,  45721,  84094,\n   154673,  284488, 523255, 962416,\n  1770159, 3255830\n]\n[\n         3,        2,        1,        6,\n         9,       16,       31,       56,\n       103,      190,      349,      642,\n      1181,     2172,     3995,     7348,\n     13515,    24858,    45721,    84094,\n    154673,   284488,   523255,   962416,\n   1770159,  3255830,  5988405, 11014394,\n  20258629, 37261428, 68534451\n]\n[\n          3,         2,         1,          6,\n          9,        16,        31,         56,\n      ",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 8];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                result.push(1 + i / 2);\n            } else {\n                result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmphch4mwve.js:81:12)\n    at Object.<anonymous> (/tmp/tmphch4mwve.js:92:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN, ",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [3, 2, 1];\n    if (n <= 2) {\n        return result.slice(0, n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpiy3585_i.js:36:12)\n    at Object.<anonymous> (/tmp/tmpiy3585_i.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN ]\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [3];\n    if (n === 1) {\n        return result;\n    }\n    result.push(1);\n    if (n === 2) {\n        return result;\n    }\n    for (let i = 2; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_6hai4l7.ts(76,1): error TS1005: ',' expected.\n../../../../tmp/tmp_6hai4l7.ts(76,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333712
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg6gbgqsw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpg6gbgqsw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n < 3) {\n        return result.slice(0, n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp56p526w7.js:77:12)\n    at Object.<anonymous> (/tmp/tmp56p526w7.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8 ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10, ",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp6hxemjgm.js:39:12)\n    at Object.<anonymous> (/tmp/tmp6hxemjgm.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(1);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpr205whuw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpr205whuw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2, 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1 ]\n[ 1, 1 ]\n[ 1, 1, 2 ]\n[ 1, 1, 2, 4 ]\n[ 1, 1, 2, 4, 7 ]\n[ 1, 1, 2, 4, 7, 13 ]\n[\n  1,  1,  2, 4,\n  7, 13, 24\n]\n[\n  1,  1,  2,  4,\n  7, 13, 24, 44\n]\n[\n   1,  1,  2,  4, 7,\n  13, 24, 44, 81\n]\n[\n   1,  1,  2,  4,   7,\n  13, 24, 44, 81, 149\n]\n[\n    1,  1,  2,  4,   7,\n   13, 24, 44, 81, 149,\n  274\n]\n[\n    1,   1,  2,  4,   7,\n   13,  24, 44, 81, 149,\n  274, 504\n]\n[\n    1,  1,  2,   4,   7,  13,\n   24, 44, 81, 149, 274, 504,\n  927\n]\n[\n    1,   1,   2,    4,   7,\n   13,  24,  44,   81, 149,\n  274, 504, 927, 1705\n]\n[\n    1,   1,   2,    4,    7,\n   13,  24,  44,   81,  149,\n  274, 504, 927, 1705, 3136\n]\n[\n     1,   1,   2,    4,    7,\n    13,  24,  44,   81,  149,\n   274, 504, 927, 1705, 3136,\n  5768\n]\n[\n      1,    1,    2,    4,\n      7,   13,   24,   44,\n     81,  149,  274,  504,\n    927, 1705, 3136, 5768,\n  10609\n]\n[\n      1,     1,    2,    4,\n      7,    13,   24,   44,\n     81,   149,  274,  504,\n    927,  1705, 3136, 5768,\n  10609, 19513\n]\n[\n      1,     1,     2,    4,\n      7,    13,    24,   44,\n     ",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp440ofaow.js:49:12)\n    at Object.<anonymous> (/tmp/tmp440ofaow.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, NaN ]\n[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   1, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9zos29w_.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpjxypnwf7.js:74:12)\n    at Object.<anonymous> (/tmp/tmpjxypnwf7.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(10));\nconsole.log(tri(15));\nconsole.log(tri(20));\nconsole.log(tri(25));\nconsole.log(tri(30));\nconsole.log(tri(35));\nconsole.log(tri(40));\nconsole.log(tri(45));\nconsole.log(tri(50));\nconsole.log(tri(55));\nconsole.log(tri(60));\nconsole.log(tri(65));\nconsole.log(tri(70));\nconsole.log(tri(75));\nconsole.log(tri(80));\nconsole.log(tri(85));\nconsole.log(tri(90));\nconsole.log(tri(95));\nconsole.log(tri(100));\nconsole.log(tri(105));\nconsole.log(tri(110));\nconsole.log(tri(115));\nconsole.log(tri(120));\nconsole.log(tri(125));\nconsole.log(tri(130));\nconsole.log(tri(135));\nconsole.log(tri(140));\nconsole.log(tri(145));\nconsole.log(tri(150));\nconsole.log(tri(155));\nconsole.log(tri(160));\nconsole.log(tri(165));\nconsole.log(tri(170));\nconsole.log(tri(175));\nconsole.log(tri(180));\nconsole.log(tri(185));\nconsole.log(tri(190));\nconsole.log(tri(195));\nconsole.log(tri(200));\nconsole.log(tri(205));\nconsole.log(tri(210));\nconsole.log(tri(215));\nconsole.log(tri(220));\nconsole.log(tri(225));\nconsole.log(tri(230));\nconsole.log(tri(235));\nconsole.log(tri(240));\nconsole.log(tri(245));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0p1u9bze.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmp0p1u9bze.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    } else if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                arr.push(1 + i / 2);\n            } else {\n                arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n            }\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp0v8yi_7z.js:47:12)\n    at Object.<anonymous> (/tmp/tmp0v8yi_7z.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 8];\n    } else {\n        for (let i = 4; i <= n; i++) {\n            if (i % 2 === 0) {\n                result.push(1 + i / 2);\n            } else {\n                result.push(result[i - 1] + result[i - 2] + result[i - 4]);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpykcq7114.ts(74,1): error TS1005: ',' expected.\n../../../../tmp/tmpykcq7114.ts(74,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    } else if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                tribonacci.push(1 + i / 2);\n            } else {\n                tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1]);\n            }\n        }\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv8n06jk2.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmpv8n06jk2.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(10));\nconsole.log(tri(20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpuvitorrm.js:39:12)\n    at Object.<anonymous> (/tmp/tmpuvitorrm.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4, 7 ]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n      0,    1,     1,     2,     4,\n      7,   13,    24,    44,    81,\n    149,  274,   504,   927,  1705,\n   3136, 5768, 10609, 19513, 35890,\n  66012\n]\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpddv6wleo.js:28:12)\n    at Object.<anonymous> (/tmp/tmpddv6wleo.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpfss53skh.js:33:12)\n    at Object.<anonymous> (/tmp/tmpfss53skh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    let result = [3, 2, 8];\n    for (let i = 4; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptnuagwao.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpzw2kuj0g.js:74:12)\n    at Object.<anonymous> (/tmp/tmpzw2kuj0g.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,  ",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpfdinc_01.js:59:12)\n    at Object.<anonymous> (/tmp/tmpfdinc_01.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, ",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpddv6wleo.js:28:12)\n    at Object.<anonymous> (/tmp/tmpddv6wleo.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp7ds3shxx.js:79:12)\n    at Object.<anonymous> (/tmp/tmp7ds3shxx.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 2 ]\n[ 0, 1, 2, 3 ]\n[ 0, 1, 2, 3, 6 ]\n[ 0, 1, 2, 3, 6, 11 ]\n[\n  0,  1,  2, 3,\n  6, 11, 20\n]\n[\n  0,  1,  2,  3,\n  6, 11, 20, 37\n]\n[\n   0,  1,  2,  3, 6,\n  11, 20, 37, 68\n]\n[\n   0,  1,  2,  3,   6,\n  11, 20, 37, 68, 125\n]\n[\n    0,  1,  2,  3,   6,\n   11, 20, 37, 68, 125,\n  230\n]\n[\n    0,   1,  2,  3,   6,\n   11,  20, 37, 68, 125,\n  230, 423\n]\n[\n    0,  1,  2,   3,   6,  11,\n   20, 37, 68, 125, 230, 423,\n  778\n]\n[\n    0,   1,   2,    3,   6,\n   11,  20,  37,   68, 125,\n  230, 423, 778, 1431\n]\n[\n    0,   1,   2,    3,    6,\n   11,  20,  37,   68,  125,\n  230, 423, 778, 1431, 2632\n]\n[\n     0,   1,   2,    3,    6,\n    11,  20,  37,   68,  125,\n   230, 423, 778, 1431, 2632,\n  4841\n]\n[\n     0,    1,   2,    3,    6,\n    11,   20,  37,   68,  125,\n   230,  423, 778, 1431, 2632,\n  4841, 8904\n]\n[\n     0,     1,    2,    3,\n     6,    11,   20,   37,\n    68,   125,  230,  423,\n   778,  1431, 2632, 4841,\n  8904, 16377\n]\n[\n     0,     1,     2,    3,\n     6,    11,    20,   37,\n    68,   125,   230, ",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpr7enkouu.js:26:12)\n    at Object.<anonymous> (/tmp/tmpr7enkouu.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9, 16 ]\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmplhr11w0p.js:79:12)\n    at Object.<anonymous> (/tmp/tmplhr11w0p.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  576",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkcgk38bz.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        let next = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(next);\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp7qrdizv0.js:78:12)\n    at Object.<anonymous> (/tmp/tmp7qrdizv0.js:89:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n[\n     3,    2,     8,   13,\n    23,   44,    80,  147,\n   271,  498,   916, 1685,\n  3099, 5700, 10484\n]\n[\n     3,    2,     8,    13,\n    23,   44,    80,   147,\n   271,  498,   916,  1685,\n  3099, 5700, 10484, 19283\n]\n[\n      3,    2,     8,    13,\n     23,   44,    80,   147,\n    271,  498,   916,  1685,\n   3099, 5700, 10484, 19283,\n  35467\n]\n[\n      3,     2,     8,    13,\n     23,    44,    80,   147,\n    271,   498,   916,  1685,\n   3099,  5700, 10484, 19283,\n  35467, ",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        let next = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(next);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpoleufkn1.js:78:12)\n    at Object.<anonymous> (/tmp/tmpoleufkn1.js:89:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n[\n     3,    2,     8,   13,\n    23,   44,    80,  147,\n   271,  498,   916, 1685,\n  3099, 5700, 10484\n]\n[\n     3,    2,     8,    13,\n    23,   44,    80,   147,\n   271,  498,   916,  1685,\n  3099, 5700, 10484, 19283\n]\n[\n      3,    2,     8,    13,\n     23,   44,    80,   147,\n    271,  498,   916,  1685,\n   3099, 5700, 10484, 19283,\n  35467\n]\n[\n      3,     2,     8,    13,\n     23,    44,    80,   147,\n    271,   498,   916,  1685,\n   3099,  57",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpzw2kuj0g.js:74:12)\n    at Object.<anonymous> (/tmp/tmpzw2kuj0g.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,  ",
      "timestamp": 1660333699
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    let arr = [3, 2, 8];\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq75puvne.ts(77,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333713
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9zos29w_.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(1);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpr205whuw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpr205whuw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2, 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1 ]\n[ 1, 1 ]\n[ 1, 1, 2 ]\n[ 1, 1, 2, 4 ]\n[ 1, 1, 2, 4, 7 ]\n[ 1, 1, 2, 4, 7, 13 ]\n[\n  1,  1,  2, 4,\n  7, 13, 24\n]\n[\n  1,  1,  2,  4,\n  7, 13, 24, 44\n]\n[\n   1,  1,  2,  4, 7,\n  13, 24, 44, 81\n]\n[\n   1,  1,  2,  4,   7,\n  13, 24, 44, 81, 149\n]\n[\n    1,  1,  2,  4,   7,\n   13, 24, 44, 81, 149,\n  274\n]\n[\n    1,   1,  2,  4,   7,\n   13,  24, 44, 81, 149,\n  274, 504\n]\n[\n    1,  1,  2,   4,   7,  13,\n   24, 44, 81, 149, 274, 504,\n  927\n]\n[\n    1,   1,   2,    4,   7,\n   13,  24,  44,   81, 149,\n  274, 504, 927, 1705\n]\n[\n    1,   1,   2,    4,    7,\n   13,  24,  44,   81,  149,\n  274, 504, 927, 1705, 3136\n]\n[\n     1,   1,   2,    4,    7,\n    13,  24,  44,   81,  149,\n   274, 504, 927, 1705, 3136,\n  5768\n]\n[\n      1,    1,    2,    4,\n      7,   13,   24,   44,\n     81,  149,  274,  504,\n    927, 1705, 3136, 5768,\n  10609\n]\n[\n      1,     1,    2,    4,\n      7,    13,   24,   44,\n     81,   149,  274,  504,\n    927,  1705, 3136, 5768,\n  10609, 19513\n]\n[\n      1,     1,     2,    4,\n      7,    13,    24,   44,\n     ",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        let next = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(next);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpoleufkn1.js:78:12)\n    at Object.<anonymous> (/tmp/tmpoleufkn1.js:89:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n[\n     3,    2,     8,   13,\n    23,   44,    80,  147,\n   271,  498,   916, 1685,\n  3099, 5700, 10484\n]\n[\n     3,    2,     8,    13,\n    23,   44,    80,   147,\n   271,  498,   916,  1685,\n  3099, 5700, 10484, 19283\n]\n[\n      3,    2,     8,    13,\n     23,   44,    80,   147,\n    271,  498,   916,  1685,\n   3099, 5700, 10484, 19283,\n  35467\n]\n[\n      3,     2,     8,    13,\n     23,    44,    80,   147,\n    271,   498,   916,  1685,\n   3099,  57",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg6gbgqsw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpg6gbgqsw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let tribonacci = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n    }\n    return tribonacci;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfhtt3fdp.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333714
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 8];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                result.push(1 + i / 2);\n            } else {\n                result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxjpkm9ce.ts(74,1): error TS1005: ',' expected.\n../../../../tmp/tmpxjpkm9ce.ts(74,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpv9lr608q.js:35:12)\n    at Object.<anonymous> (/tmp/tmpv9lr608q.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpazhnsqbo.js:53:12)\n    at Object.<anonymous> (/tmp/tmpazhnsqbo.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  5768, 10609, 19513\n]\n[\n     0,    1,   ",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnxbb8u0c.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxbb8u0c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole.log(tri(49));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmprehme137.ts(73,1): error TS1005: ',' expected.\n../../../../tmp/tmprehme137.ts(73,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp6tkrqkzk.js:79:12)\n    at Object.<anonymous> (/tmp/tmp6tkrqkzk.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n      9,    16,    31,   56,\n    1",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpi9kscg5l.js:33:12)\n    at Object.<anonymous> (/tmp/tmpi9kscg5l.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333702
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(6));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp9ryjsv4w.js:39:12)\n    at Object.<anonymous> (/tmp/tmp9ryjsv4w.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(5));\nconsole.log(tri(10));\nconsole.log(tri(20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpt0_6iul9.js:28:12)\n    at Object.<anonymous> (/tmp/tmpt0_6iul9.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, 6, 9, 16 ]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n       3,     2,     1,     6,\n       9,    16,    31,    56,\n     103,   190,   349,   642,\n    1181,  2172,  3995,  7348,\n   13515, 24858, 45721, 84094,\n  154673\n]\n",
      "timestamp": 1660333715
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 8];\n    }\n    for (let i = 3; i < n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpijl_zyii.ts(75,1): error TS1005: ',' expected.\n../../../../tmp/tmpijl_zyii.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpew7sbkeg.js:33:12)\n    at Object.<anonymous> (/tmp/tmpew7sbkeg.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1 ]\n[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN ]\n",
      "timestamp": 1660333715
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpomu6uhqb.ts(74,1): error TS1005: ',' expected.\n../../../../tmp/tmpomu6uhqb.ts(74,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(1);\n        } else if (i === 1) {\n            result.push(2);\n        } else if (i === 2) {\n            result.push(3);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmphux0f6ot.js:79:12)\n    at Object.<anonymous> (/tmp/tmphux0f6ot.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1 ]\n[ 1, 2 ]\n[ 1, 2, 3 ]\n[ 1, 2, 3, 6 ]\n[ 1, 2, 3, 6, 11 ]\n[ 1, 2, 3, 6, 11, 20 ]\n[\n   1,  2,  3, 6,\n  11, 20, 37\n]\n[\n   1,  2,  3,  6,\n  11, 20, 37, 68\n]\n[\n   1,  2,  3,   6, 11,\n  20, 37, 68, 125\n]\n[\n   1,  2,  3,   6,  11,\n  20, 37, 68, 125, 230\n]\n[\n    1,  2,  3,   6,  11,\n   20, 37, 68, 125, 230,\n  423\n]\n[\n    1,   2,  3,   6,  11,\n   20,  37, 68, 125, 230,\n  423, 778\n]\n[\n     1,   2,   3,   6,\n    11,  20,  37,  68,\n   125, 230, 423, 778,\n  1431\n]\n[\n    1,   2,    3,    6,  11,\n   20,  37,   68,  125, 230,\n  423, 778, 1431, 2632\n]\n[\n    1,   2,    3,    6,   11,\n   20,  37,   68,  125,  230,\n  423, 778, 1431, 2632, 4841\n]\n[\n     1,   2,    3,    6,   11,\n    20,  37,   68,  125,  230,\n   423, 778, 1431, 2632, 4841,\n  8904\n]\n[\n      1,    2,    3,    6,\n     11,   20,   37,   68,\n    125,  230,  423,  778,\n   1431, 2632, 4841, 8904,\n  16377\n]\n[\n      1,     2,    3,    6,\n     11,    20,   37,   68,\n    125,   230,  423,  778,\n   1431,  2632, 4841, 8904,\n  16377, 30122\n]\n[\n      1,     2,     3,    6,\n     11,    20,    37,   68,\n    125,   230,   423,  778,\n   1431,  2632,  4841, 8904,\n  16377, 30122, 55403\n]\n[\n      1,     2,     3,      6,\n     11,    20,    37,     68,\n    125,   230,   423,    778,\n   1431,  2632,  4841,   8904,\n  16377, 30122, 55403, 101902\n]\n[\n       1,     2,     3,      6,\n      11,    20,    37,     68,\n     125,   230,   423,    778,\n    1431,  2632,  4841,   8904,\n   16377, 30122, 55403, 101902,\n  187427\n]\n[\n       1,      2,     3,      6,\n      11,     20,    37,     68,\n     125,    230,   423,    778,\n    1431,   2632,  4841,   8904,\n   16377,  30122, 55403, 101902,\n  187427, 344732\n]\n[\n       1,      2,      3,      6,\n      11,     20,     37,     68,\n     125,    230,    423,    778,\n    1431,   2632,   4841,   8904,\n   16377,  30122,  55403, 101902,\n  187427, 344732, 634061\n]\n[\n       1,      2,      3,       6,\n      11,     20,     37,      68,\n     125,    230,    423,     778,\n    1431,   2632,   4841,    8904,\n   16377,  30122,  55403,  101902,\n  187427, 344732, 63",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    const result = [3, 2, 8];\n    if (n <= 2) {\n        return result.slice(0, n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp8qed0y0m.js:36:12)\n    at Object.<anonymous> (/tmp/tmp8qed0y0m.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 8 ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN ]\n",
      "timestamp": 1660333716
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n === 1) return [3];\n    if (n === 2) return [3, 2];\n    if (n === 3) return [3, 2, 8];\n    for (let i = 3; i < n; i++) {\n        result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpicdfd3ol.js:76:12)\n    at Object.<anonymous> (/tmp/tmpicdfd3ol.js:87:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, 13 ]\n[ 3, 2, 8, 13, 23 ]\n[ 3, 2, 8, 13, 23, 44 ]\n[\n   3,  2,  8, 13,\n  23, 44, 80\n]\n[\n   3,  2,  8,  13,\n  23, 44, 80, 147\n]\n[\n   3,  2,   8,  13, 23,\n  44, 80, 147, 271\n]\n[\n   3,  2,   8,  13,  23,\n  44, 80, 147, 271, 498\n]\n[\n    3,  2,   8,  13,  23,\n   44, 80, 147, 271, 498,\n  916\n]\n[\n    3,   2,   8,   13,\n   23,  44,  80,  147,\n  271, 498, 916, 1685\n]\n[\n     3,   2,   8,   13,\n    23,  44,  80,  147,\n   271, 498, 916, 1685,\n  3099\n]\n[\n     3,    2,   8,   13,\n    23,   44,  80,  147,\n   271,  498, 916, 1685,\n  3099, 5700\n]\n[\n     3,    2,     8,   13,\n    23,   44,    80,  147,\n   271,  498,   916, 1685,\n  3099, 5700, 10484\n]\n[\n     3,    2,     8,    13,\n    23,   44,    80,   147,\n   271,  498,   916,  1685,\n  3099, 5700, 10484, 19283\n]\n[\n      3,    2,     8,    13,\n     23,   44,    80,   147,\n    271,  498,   916,  1685,\n   3099, 5700, 10484, 19283,\n  35467\n]\n[\n      3,     2,     8,    13,\n     23,    44,    80,   147,\n    271,   498,   916,  1685,\n   3099,  57",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    const result = [3];\n    for (let i = 1; i <= n; i++) {\n        result.push(i % 2 === 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n    return result;\n}\n\nconsole.log(tri(2));\nconsole.log(tri(4));\nconsole.log(tri(3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp245427n8.js:28:12)\n    at Object.<anonymous> (/tmp/tmp245427n8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN, 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, NaN, 2 ]\n[ 3, NaN, 2, NaN, 3 ]\n[ 3, NaN, 2, NaN ]\n",
      "timestamp": 1660333715
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    } else if (n === 1) {\n        return [3];\n    } else if (n === 2) {\n        return [3, 2];\n    } else if (n === 3) {\n        return [3, 2, 1];\n    } else {\n        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n                arr.push(1 + i / 2);\n            } else {\n                arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n            }\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6eemi14d.ts(75,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333698
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxm0v8ntl.ts(74,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660333706
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [3, 2, 8];\n    if (n < 3) {\n        return result.slice(0, n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  8,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp0fnj7hgz.js:77:12)\n    at Object.<anonymous> (/tmp/tmp0fnj7hgz.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 8, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 8 ]\n[ 3, 2, 8, NaN ]\n[ 3, 2, 8, NaN, 3 ]\n[ 3, 2, 8, NaN, 3, NaN ]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 8, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   8, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   8, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   8, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 8, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   8, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, ",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnej277uv.js:77:12)\n    at Object.<anonymous> (/tmp/tmpnej277uv.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, NaN ]\n[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   1, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   1, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN, ",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpg6gbgqsw.js:79:12)\n    at Object.<anonymous> (/tmp/tmpg6gbgqsw.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,",
      "timestamp": 1660333698
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [3];\n    }\n    if (n === 2) {\n        return [3, 2];\n    }\n    if (n === 3) {\n        return [3, 2, 1];\n    }\n    for (let i = 3; i < n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpsrwkkaa8.js:79:12)\n    at Object.<anonymous> (/tmp/tmpsrwkkaa8.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[]\n[ 3 ]\n[ 3, 2 ]\n[ 3, 2, 1 ]\n[ 3, 2, 1, 6 ]\n[ 3, 2, 1, 6, 9 ]\n[ 3, 2, 1, 6, 9, 16 ]\n[\n  3,  2,  1, 6,\n  9, 16, 31\n]\n[\n  3,  2,  1,  6,\n  9, 16, 31, 56\n]\n[\n   3,  2,  1,   6, 9,\n  16, 31, 56, 103\n]\n[\n   3,  2,  1,   6,   9,\n  16, 31, 56, 103, 190\n]\n[\n    3,  2,  1,   6,   9,\n   16, 31, 56, 103, 190,\n  349\n]\n[\n    3,   2,  1,   6,   9,\n   16,  31, 56, 103, 190,\n  349, 642\n]\n[\n     3,   2,   1,   6,\n     9,  16,  31,  56,\n   103, 190, 349, 642,\n  1181\n]\n[\n    3,   2,    1,    6,   9,\n   16,  31,   56,  103, 190,\n  349, 642, 1181, 2172\n]\n[\n    3,   2,    1,    6,    9,\n   16,  31,   56,  103,  190,\n  349, 642, 1181, 2172, 3995\n]\n[\n     3,   2,    1,    6,    9,\n    16,  31,   56,  103,  190,\n   349, 642, 1181, 2172, 3995,\n  7348\n]\n[\n      3,    2,    1,    6,\n      9,   16,   31,   56,\n    103,  190,  349,  642,\n   1181, 2172, 3995, 7348,\n  13515\n]\n[\n      3,     2,    1,    6,\n      9,    16,   31,   56,\n    103,   190,  349,  642,\n   1181,  2172, 3995, 7348,\n  13515, 24858\n]\n[\n      3,     2,     1,    6,\n    ",
      "timestamp": 1660333709
    },
    {
      "exit_code": 2,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let triArr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            triArr.push(1 + i / 2);\n        } else {\n            triArr.push(triArr[i - 1] + triArr[i - 2] + triArr[i + 1]);\n        }\n    }\n    return triArr;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppr2x2o_4.ts(72,1): error TS1005: ',' expected.\n../../../../tmp/tmppr2x2o_4.ts(72,9): error TS1005: ',' expected.\n",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmplhr11w0p.js:79:12)\n    at Object.<anonymous> (/tmp/tmplhr11w0p.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n[\n    0,   1,  1,  2,  4,\n    7,  13, 24, 44, 81,\n  149, 274\n]\n[\n    0,  1,  1,  2,   4,   7,\n   13, 24, 44, 81, 149, 274,\n  504\n]\n[\n    0,   1,  1,  2,   4,   7,\n   13,  24, 44, 81, 149, 274,\n  504, 927\n]\n[\n    0,   1,   1,   2,    4,\n    7,  13,  24,  44,   81,\n  149, 274, 504, 927, 1705\n]\n[\n     0,   1,   1,   2,    4,\n     7,  13,  24,  44,   81,\n   149, 274, 504, 927, 1705,\n  3136\n]\n[\n     0,    1,   1,   2,    4,\n     7,   13,  24,  44,   81,\n   149,  274, 504, 927, 1705,\n  3136, 5768\n]\n[\n     0,     1,    1,    2,\n     4,     7,   13,   24,\n    44,    81,  149,  274,\n   504,   927, 1705, 3136,\n  5768, 10609\n]\n[\n     0,     1,     1,    2,\n     4,     7,    13,   24,\n    44,    81,   149,  274,\n   504,   927,  1705, 3136,\n  576",
      "timestamp": 1660333699
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let arr = [3, 2, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnej277uv.js:77:12)\n    at Object.<anonymous> (/tmp/tmpnej277uv.js:88:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 3, 2, 1, NaN ]\n[ 3, 2, 1, NaN, 3 ]\n[ 3, 2, 1, NaN, 3, NaN ]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4\n]\n[\n  3,   2, 1, NaN,\n  3, NaN, 4, NaN\n]\n[\n    3, 2,   1, NaN, 3,\n  NaN, 4, NaN,   5\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN\n]\n[\n    3, 2,   1, NaN,   3,\n  NaN, 4, NaN,   5, NaN,\n    6\n]\n[\n    3,   2,   1, NaN,   3,\n  NaN,   4, NaN,   5, NaN,\n    6, NaN\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8\n]\n[\n  3,   2, 1, NaN, 3, NaN,\n  4, NaN, 5, NaN, 6, NaN,\n  7, NaN, 8, NaN\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN,  10\n]\n[\n    3,   2,   1, NaN,   3, NaN,   4,\n  NaN,   5, NaN,   6, NaN,   7, NaN,\n    8, NaN,   9, NaN, ",
      "timestamp": 1660333715
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp7wij12h_.js:47:12)\n    at Object.<anonymous> (/tmp/tmp7wij12h_.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0 ]\n[ 0, 1 ]\n[ 0, 1, 1 ]\n[ 0, 1, 1, 2 ]\n[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n[\n  0, 1,  1,  2,\n  4, 7, 13, 24\n]\n[\n  0,  1,  1,  2, 4,\n  7, 13, 24, 44\n]\n[\n  0,  1,  1,  2,  4,\n  7, 13, 24, 44, 81\n]\n[\n    0,  1,  1,  2,  4,\n    7, 13, 24, 44, 81,\n  149\n]\n",
      "timestamp": 1660333716
    },
    {
      "exit_code": 1,
      "program": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\nfunction tri(n: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n            result.push(0);\n        } else if (i === 1) {\n            result.push(1);\n        } else if (i === 2) {\n            result.push(1);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n}\n\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp6hxemjgm.js:39:12)\n    at Object.<anonymous> (/tmp/tmp6hxemjgm.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1, 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 0, 1, 1, 2, 4 ]\n[ 0, 1, 1, 2, 4, 7 ]\n[\n  0, 1,  1, 2,\n  4, 7, 13\n]\n",
      "timestamp": 1660333713
    }
  ]
}