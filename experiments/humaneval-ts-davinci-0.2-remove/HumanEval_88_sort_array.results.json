{
  "language": "ts",
  "name": "HumanEval_88_sort_array",
  "results": [
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sorted = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sorted;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum: number = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  const even = array.filter((x) => !(x % 2)).sort((a, b) => b - a);\n  return array.map((x) => (x % 2 ? odd.shift() : even.shift()));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpfq7qsult.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfq7qsult.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 8, 4, 5, 2 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((num) => num % 2).sort((a, b) => a - b);\n  const even = array.filter((num) => !(num % 2)).sort((a, b) => b - a);\n  return array.map((num) => (num % 2 ? odd.shift() : even.shift()));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpxyfkrclv.js:20:12)\n    at Object.<anonymous> (/tmp/tmpxyfkrclv.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 8, 4, 5, 2 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sorted = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sorted;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let result = array.slice();\n  if (sum % 2 === 0) {\n    result.sort((a, b) => b - a);\n  } else {\n    result.sort((a, b) => a - b);\n  }\n  return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  return array.map((x) => (x % 2 ? odd.shift() : x));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpl3yl8orb.js:19:12)\n    at Object.<anonymous> (/tmp/tmpl3yl8orb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 2, 8, 5, 4 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = array.slice();\n    if (sum % 2 === 0) {\n        result.sort((a, b) => b - a);\n    } else {\n        result.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum: number = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 == 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdc96zhuk.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpdc96zhuk.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sorted = array.sort((a, b) => a - b);\n    if (sum % 2 === 0) {\n        return sorted.reverse();\n    }\n    return sorted;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let first = array[0];\n  let last = array[array.length - 1];\n  let sum = first + last;\n  let sortedArray = [];\n  if (sum % 2 === 0) {\n    sortedArray = array.sort((a, b) => b - a);\n  } else {\n    sortedArray = array.sort((a, b) => a - b);\n  }\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([5, 4, 3, 2, 1, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([5, 4, 3, 2, 1, 6, 7]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(sort_array([5, 4, 3, 2, 1, 6, 7, 8]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 4, 3, 2, 1, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([5, 4, 3, 2, 1, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334311
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return result;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    const sum = array[0] + array[array.length - 1];\n    const sorted = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sorted;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([4, 5, 3, 1, 2]));\nconsole.log(sort_array([1, 3, 5, 2, 4]));\nconsole.log(sort_array([4, 2, 5, 1, 3]));\nconsole.log(sort_array([3, 1, 2, 4, 5]));\nconsole.log(sort_array([5, 1, 4, 2, 3]));\nconsole.log(sort_array([2, 3, 1, 4, 5]));\nconsole.log(sort_array([5, 4, 1, 3, 2]));\nconsole.log(sort_array([3, 5, 2, 4, 1]));\nconsole.log(sort_array([4, 2, 1, 3, 5]));\nconsole.log(sort_array([2, 4, 5, 1, 3]));\nconsole.log(sort_array([3, 1, 4, 5, 2]));\nconsole.log(sort_array([4, 5, 2, 3, 1]));\nconsole.log(sort_array([2, 3, 5, 1, 4]));\nconsole.log(sort_array([5, 2, 4, 3, 1]));\nconsole.log(sort_array([1, 4, 2, 5, 3]));\nconsole.log(sort_array([3, 5, 1, 2, 4]));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = [];\n    if (sum % 2 === 0) {\n        result = array.sort((a, b) => b - a);\n    } else {\n        result = array.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp9ah50_88.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = array.slice();\n    if (sum % 2 === 0) {\n        result.sort((a, b) => b - a);\n    } else {\n        result.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        array.sort((a, b) => b - a);\n    } else {\n        array.sort((a, b) => a - b);\n    }\n    return array;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n[\n  11, 10, 9, 8, 7,\n   6,  5, 4, 3, 2,\n   1\n]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([4, 5, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([4, 5, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([4, 5, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcc8k8e2i.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = array.slice();\n    if (sum % 2 === 0) {\n        result.sort((a, b) => b - a);\n    } else {\n        result.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 !== 0) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([5, 4, 3, 2, 1, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let result = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return result;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum: number = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArr = array.slice();\n    if (sum % 2 == 0) {\n        newArr.sort((a, b) => b - a);\n    } else {\n        newArr.sort((a, b) => a - b);\n    }\n    return newArr;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  return array.map((x) => (x % 2 ? odd.shift() : x));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpl3yl8orb.js:19:12)\n    at Object.<anonymous> (/tmp/tmpl3yl8orb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 2, 8, 5, 4 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sorted = array.sort((a, b) => {\n        if (sum % 2 == 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sorted;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6, 7]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([4, 5, 3, 1, 2]));\nconsole.log(sort_array([1, 3, 5, 2, 4]));\nconsole.log(sort_array([4, 2, 5, 1, 3]));\nconsole.log(sort_array([3, 1, 2, 5, 4]));\nconsole.log(sort_array([4, 5, 1, 3, 2]));\nconsole.log(sort_array([2, 3, 1, 4, 5]));\nconsole.log(sort_array([5, 1, 4, 2, 3]));\nconsole.log(sort_array([3, 2, 4, 1, 5]));\nconsole.log(sort_array([5, 1, 3, 4, 2]));\nconsole.log(sort_array([2, 4, 3, 5, 1]));\nconsole.log(sort_array([1, 5, 2, 4, 3]));\nconsole.log(sort_array([3, 4, 2, 1, 5]));\nconsole.log(sort_array([5, 2, 1, 3, 4]));\nconsole.log(sort_array([4, 3, 1, 2, 5]));\nconsole.log(sort_array([2, 1, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 4, 2, 1]));\nconsole.log(sort_array([1, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe4a2c493.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwlatqaqy.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpwlatqaqy.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  const even = array.filter((x) => !(x % 2)).sort((a, b) => b - a);\n  return array.map((x) => (x % 2 ? odd.shift() : even.shift()));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpfq7qsult.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfq7qsult.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 8, 4, 5, 2 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  return array.map((x) => (x % 2 ? odd.shift() : x));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpl3yl8orb.js:19:12)\n    at Object.<anonymous> (/tmp/tmpl3yl8orb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 2, 8, 5, 4 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    const sum = array[0] + array[array.length - 1];\n    const sorted = array.sort((a, b) => a - b);\n    return sum % 2 === 0 ? sorted.reverse() : sorted;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let newArray = array.slice();\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334315
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334315
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((num) => num % 2 !== 0).sort((a, b) => a - b);\n  const even = array.filter((num) => num % 2 === 0).sort((a, b) => b - a);\n  return array.map((num) => (num % 2 !== 0 ? odd.shift() : even.shift()));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpa7oz8lx9.js:20:12)\n    at Object.<anonymous> (/tmp/tmpa7oz8lx9.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 8, 4, 5, 2 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334315
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  return array.map((x) => (x % 2 ? odd.shift() : x));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpl3yl8orb.js:19:12)\n    at Object.<anonymous> (/tmp/tmpl3yl8orb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 2, 8, 5, 4 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([6, 5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334315
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  const even = array.filter((x) => !(x % 2)).sort((a, b) => b - a);\n  return array.map((x) => (x % 2 ? odd.shift() : even.shift()));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpfq7qsult.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfq7qsult.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 8, 4, 5, 2 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let newArray = array.slice(1, array.length - 1);\n  let sortedArray = newArray.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  sortedArray.unshift(array[0]);\n  sortedArray.push(array[array.length - 1]);\n  return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp5b6y53aj.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5b6y53aj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined, undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n[\n   1, 10, 9, 8, 7,\n   6,  5, 4, 3, 2,\n  11\n]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum: number = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = [];\n    if (sum % 2 === 0) {\n        result = array.sort((a, b) => b - a);\n    } else {\n        result = array.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6, 7]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let newArray = array.slice();\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n}\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = [];\n    if (sum % 2 === 0) {\n        newArray = array.sort((a, b) => b - a);\n    } else {\n        newArray = array.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sorted = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sorted;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([4, 5, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([4, 5, 3, 1, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  return sum % 2 === 0 ? array.sort((a, b) => b - a) : array.sort((a, b) => a - b);\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => (sum % 2 === 0 ? b - a : a - b));\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sorted = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sorted;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 321, 3, 52, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdrzaa97t.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let result = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd: number[] = [];\n  const even: number[] = [];\n  const result: number[] = [];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 === 0) {\n      even.push(array[i]);\n    } else {\n      odd.push(array[i]);\n    }\n  }\n  odd.sort((a, b) => a - b);\n  even.sort((a, b) => b - a);\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 === 0) {\n      result.push(even.shift());\n    } else {\n      result.push(odd.shift());\n    }\n  }\n  return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpu9_sv2nm.js:39:12)\n    at Object.<anonymous> (/tmp/tmpu9_sv2nm.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 8, 4, 5, 2 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const sum = array[0] + array[array.length - 1];\n  const sorted = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sorted;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([2, 4, 6, 8, 10]));\nconsole.log(sort_array([1, 3, 5, 7, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpic9szso4.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpic9szso4.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = array.slice();\n    if (sum % 2 === 0) {\n        result.sort((a, b) => b - a);\n    } else {\n        result.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6, 7, 8]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 == 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334318
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 2, 3, 4, 1]));\nconsole.log(sort_array([1, 321, 3, 52, 5]));\nconsole.log(sort_array([23, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdl2oa27h.ts(41,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334318
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334318
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let newArray = array.slice();\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum: number = array[0] + array[array.length - 1];\n    let sortedArray: number[] = [];\n    if (sum % 2 === 0) {\n        sortedArray = array.sort((a, b) => b - a);\n    } else {\n        sortedArray = array.sort((a, b) => a - b);\n    }\n    return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334320
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = [];\n    if (sum % 2 === 0) {\n        sortedArray = array.sort((a, b) => b - a);\n    } else {\n        sortedArray = array.sort((a, b) => a - b);\n    }\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sorted = array.sort((a, b) => a - b);\n  if (sum % 2 === 0) {\n    return sorted.reverse();\n  } else {\n    return sorted;\n  }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 6, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 6, 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum: number = array[0] + array[array.length - 1];\n    let newArray: number[] = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([4, 5, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 1, 2]));\nconsole.log(sort_array([1, 2, 3, 5, 4]));\nconsole.log(sort_array([4, 5, 3, 1, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([5, 4, 3, 2, 1, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = array.slice();\n    if (sum % 2 === 0) {\n        result.sort((a, b) => b - a);\n    } else {\n        result.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let result: number[] = [];\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    result = array.sort((a, b) => b - a);\n  } else {\n    result = array.sort((a, b) => a - b);\n  }\n  return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const sum = array[0] + array[array.length - 1];\n  const sorted = array.sort((a, b) => (sum % 2 === 0 ? b - a : a - b));\n  return sorted;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334320
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = [];\n    if (sum % 2 === 0) {\n        result = array.sort((a, b) => b - a);\n    } else {\n        result = array.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let newArray = array.slice();\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334320
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => a - b);\n    if (sum % 2 === 0) {\n        return sortedArray.reverse();\n    }\n    return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[\n  7, 6, 5, 4,\n  3, 2, 1\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n",
      "timestamp": 1660334320
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let newArray = array.slice();\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let newArray = array.slice();\n  if (sum % 2 === 0) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334320
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n",
      "timestamp": 1660334320
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334318
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 3, 2, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum: number = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sorted = array.sort((a, b) => sum % 2 === 0 ? b - a : a - b);\n    return sorted;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(sort_array([1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3g16tbjt.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmp3g16tbjt.ts(27,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  const even = array.filter((x) => !(x % 2)).sort((a, b) => b - a);\n  return array.map((x) => (x % 2 ? odd.shift() : even.shift()));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpfq7qsult.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfq7qsult.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 8, 4, 5, 2 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 2,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdc96zhuk.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpdc96zhuk.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let first = array[0];\n  let last = array[array.length - 1];\n  let sum = first + last;\n  let sortedArray: number[] = [];\n  if (sum % 2 === 0) {\n    sortedArray = array.sort((a, b) => b - a);\n  } else {\n    sortedArray = array.sort((a, b) => a - b);\n  }\n  return sortedArray;\n}\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334320
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sorted = array.sort((a, b) => a - b);\n  if (sum % 2 === 0) {\n    return sorted.reverse();\n  } else {\n    return sorted;\n  }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334320
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = [];\n    if (sum % 2 === 0) {\n        sortedArray = array.sort((a, b) => b - a);\n    } else {\n        sortedArray = array.sort((a, b) => a - b);\n    }\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334319
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => a - b);\n  if (sum % 2 === 0) {\n    return sortedArray.reverse();\n  } else {\n    return sortedArray;\n  }\n}\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\nconsole.log(sort_array([5, 4, 3, 2, 1, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334320
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334318
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let result = array.slice();\n    if (sum % 2 === 0) {\n        result.sort((a, b) => b - a);\n    } else {\n        result.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 4, 3, 2, 1]));\nconsole.log(sort_array([1, 3, 2, 4, 5]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n[ 5, 4, 3, 2, 1 ]\n",
      "timestamp": 1660334320
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  return array.map((x) => (x % 2 ? odd.shift() : x));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpl3yl8orb.js:19:12)\n    at Object.<anonymous> (/tmp/tmpl3yl8orb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 2, 8, 5, 4 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = array.slice();\n    if (sum % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum: number = array[0] + array[array.length - 1];\n    let sortedArray: number[] = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334321
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum: number = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let result = array.slice();\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        result.sort((a, b) => b - a);\n    } else {\n        result.sort((a, b) => a - b);\n    }\n    return result;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334321
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n[\n  11, 10, 9, 8, 7,\n   6,  5, 4, 3, 2,\n   1\n]\n[\n   1,  2, 3, 4,  5,\n   6,  7, 8, 9, 10,\n  11, 12\n]\n",
      "timestamp": 1660334321
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(sort_array([1, 3, 5, 7, 9, 11, 13, 15, 17]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[\n  9, 8, 7, 6, 5,\n  4, 3, 2, 1\n]\n[\n  17, 15, 13, 11, 9,\n   7,  5,  3,  1\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n[\n  19, 17, 15, 13, 11,\n   9,  7,  5,  3,  1\n]\n",
      "timestamp": 1660334321
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334308
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334321
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => a - b);\n  if (sum % 2 === 0) {\n    return sortedArray.reverse();\n  } else {\n    return sortedArray;\n  }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334321
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let newArray = [];\n    if (sum % 2 === 0) {\n        newArray = array.sort((a, b) => b - a);\n    } else {\n        newArray = array.sort((a, b) => a - b);\n    }\n    return newArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334316
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    let sortedArray = array.sort((a, b) => {\n        if (sum % 2 === 0) {\n            return b - a;\n        } else {\n            return a - b;\n        }\n    });\n    return sortedArray;\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334312
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 1, 2, 3, 4, 5, 8 ]\n[ 0, 1, 3, 5, 8 ]\n[]\n",
      "timestamp": 1660334309
    },
    {
      "exit_code": 0,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  let sum = array[0] + array[array.length - 1];\n  let sortedArray = array.sort((a, b) => {\n    if (sum % 2 === 0) {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return sortedArray;\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5]));\nconsole.log(sort_array([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 5, 4, 3, 2, 1 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "timestamp": 1660334322
    },
    {
      "exit_code": 1,
      "program": "//Given an array of non-negative integers, return a copy of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\nfunction sort_array(array: number[]): number[] {\n  const odd = array.filter((x) => x % 2).sort((a, b) => a - b);\n  const even = array.filter((x) => !(x % 2)).sort((a, b) => b - a);\n  return array.map((x) => (x % 2 ? odd.shift() : even.shift()));\n}\n\nconsole.log(sort_array([5, 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n  1,\n  0,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  5\n]\n    at test (/tmp/tmpfq7qsult.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfq7qsult.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 1, 0, 3, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 1, 3, 8, 4, 5, 2 ]\n[ 1, 3, 5, 8, 0 ]\n[]\n",
      "timestamp": 1660334309
    }
  ]
}