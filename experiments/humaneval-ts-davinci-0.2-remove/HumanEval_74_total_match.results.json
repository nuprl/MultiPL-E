{
  "language": "ts",
  "name": "HumanEval_74_total_match",
  "results": [
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nlet lst1: string[] = [\"hello\", \"world\"];\nlet lst2: string[] = [\"hi\", \"planet\"];\nconsole.log(total_match(lst1, lst2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpcbjduemh.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcbjduemh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'hi', 'planet' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nlet list1: string[] = [\"a\", \"ab\", \"abc\"];\nlet list2: string[] = [\"a\", \"ab\", \"abc\", \"abcd\"];\nconsole.log(total_match(list1, list2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpweek3s4a.js:33:12)\n    at Object.<anonymous> (/tmp/tmpweek3s4a.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'a', 'ab', 'abc' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nlet lst1: string[] = [\"aaa\", \"bbb\", \"ccc\"];\nlet lst2: string[] = [\"ddd\", \"eee\", \"fff\"];\nconsole.log(total_match(lst1, lst2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpvofssjwb.js:33:12)\n    at Object.<anonymous> (/tmp/tmpvofssjwb.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'ddd', 'eee', 'fff' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpqf9qnml5.js:32:12)\n    at Object.<anonymous> (/tmp/tmpqf9qnml5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let sum1: number = 0;\n    let sum2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpuk8xpe0t.js:33:12)\n    at Object.<anonymous> (/tmp/tmpuk8xpe0t.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpfhu7w2ow.js:33:12)\n    at Object.<anonymous> (/tmp/tmpfhu7w2ow.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"pig\"], [\"cow\", \"horse\", \"sheep\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"pig\"], [\"cow\", \"horse\", \"sheep\", \"chicken\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"pig\"], [\"cow\", \"horse\", \"sheep\", \"chicken\", \"duck\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"pig\"], [\"cow\", \"horse\", \"sheep\", \"chicken\", \"duck\", \"mouse\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"pig\"], [\"cow\", \"horse\", \"sheep\", \"chicken\", \"duck\", \"mouse\", \"elephant\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'cat', 'dog', 'pig' ]\n[ 'cat', 'dog', 'pig' ]\n[ 'cat', 'dog', 'pig' ]\n[ 'cat', 'dog', 'pig' ]\n[ 'cat', 'dog', 'pig' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nlet list1: string[] = [\"hello\", \"world\"];\nlet list2: string[] = [\"hi\", \"planet\"];\nconsole.log(total_match(list1, list2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpn64yx0pm.js:33:12)\n    at Object.<anonymous> (/tmp/tmpn64yx0pm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'hi', 'planet' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\", \"mercury\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"ne\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6vahzm1z.ts(30,113): error TS1002: Unterminated string literal.\n../../../../tmp/tmp6vahzm1z.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp6vahzm1z.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\", \"h\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\", \"h\", \"i\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\", \"h\", \"i\", \"j\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\", \"h\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqetfqa45.ts(29,77): error TS1002: Unterminated string literal.\n../../../../tmp/tmpqetfqa45.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpqetfqa45.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp9cu7nwjc.js:33:12)\n    at Object.<anonymous> (/tmp/tmp9cu7nwjc.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp0qim6kyz.js:38:12)\n    at Object.<anonymous> (/tmp/tmp0qim6kyz.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nlet lst1: string[] = [\"a\", \"ab\", \"abc\"];\nlet lst2: string[] = [\"a\", \"ab\", \"abc\", \"abcd\"];\nconsole.log(total_match(lst1, lst2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpzsz5rch4.js:33:12)\n    at Object.<anonymous> (/tmp/tmpzsz5rch4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'a', 'ab', 'abc' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp7iitg7hq.js:33:12)\n    at Object.<anonymous> (/tmp/tmp7iitg7hq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp_ulk46la.js:32:12)\n    at Object.<anonymous> (/tmp/tmp_ulk46la.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aaa', 'bbb' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmprz85yms_.js:33:12)\n    at Object.<anonymous> (/tmp/tmprz85yms_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"there\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"there\", \"friend\"]));\nconsole.log(total_match([\"hello\", \"world\", \"friend\"], [\"hi\", \"there\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'there' ]\n[ 'hello', 'world' ]\n[ 'hi', 'there' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nlet list1: string[] = [\"a\", \"aa\", \"aaa\"];\nlet list2: string[] = [\"bb\", \"bbb\"];\nconsole.log(total_match(list1, list2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'bb', 'bbb' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpvf2s572x.js:30:12)\n    at Object.<anonymous> (/tmp/tmpvf2s572x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp50ht13j_.ts(29,107): error TS1002: Unterminated string literal.\n../../../../tmp/tmp50ht13j_.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmp50ht13j_.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let count1: number = 0;\n    let count2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        count1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        count2 += lst2[i].length;\n    }\n    if (count1 < count2) {\n        return lst1;\n    }\n    else if (count1 > count2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bbb\", \"ccc\"], [\"ddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bbb\", \"ccc\"], [\"ddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bbb\", \"ccc\"], [\"ddd\", \"eee\", \"fff\", \"ggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'ddd', 'eee' ]\n[ 'aaa', 'bbb', 'ccc' ]\n[ 'aaa', 'bbb', 'ccc' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"ddddd\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"ddddd\", \"eeeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhhhh\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhhhh\", \"iiiiiiii\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhhhh\", \"iiiiiiii\", \"jjjjjjjjj\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhhhh\", \"iiiiiiii\", \"jjjjjjjjj\", \"kkkkkkkkkk\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhhhh\", \"iiiiiiii\", \"jjjjjjjjj\", \"kkkkkkkkkk\", \"lllllllllll\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpwvxfmh9e.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmplbtw4zt2.js:33:12)\n    at Object.<anonymous> (/tmp/tmplbtw4zt2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpvf2s572x.js:30:12)\n    at Object.<anonymous> (/tmp/tmpvf2s572x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334242
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"tiger\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"tiger\", \"bear\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"tiger\", \"bear\", \"panda\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"tiger\", \"bear\", \"panda\", \"giraffe\"]));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnz2uoex_.ts(32,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpg7bfh_nz.js:31:12)\n    at Object.<anonymous> (/tmp/tmpg7bfh_nz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"b\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpy4fbs68_.js:33:12)\n    at Object.<anonymous> (/tmp/tmpy4fbs68_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'b' ]\n[ 'aaa', 'bbb' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe9jujmj_.ts(31,112): error TS1002: Unterminated string literal.\n../../../../tmp/tmpe9jujmj_.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpe9jujmj_.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"cc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"there\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"there\", \"buddy\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"there\", \"buddy\", \"buddy\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'there' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"cc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"cc\", \"ddd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe9jujmj_.ts(31,112): error TS1002: Unterminated string literal.\n../../../../tmp/tmpe9jujmj_.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpe9jujmj_.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"frog\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"frog\", \"toad\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"frog\", \"toad\", \"shark\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"frog\", \"toad\", \"shark\", \"whale\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"frog\", \"toad\", \"shark\", \"whale\", \"dolphin\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp17rutmx8.ts(32,60): error TS1002: Unterminated string literal.\n../../../../tmp/tmp17rutmx8.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp17rutmx8.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"tiger\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"tiger\", \"elephant\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"tiger\", \"elephant\", \"giraffe\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"tiger\", \"elephant\", \"giraffe\", \"zebra\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"tiger\", \"elephant\", \"giraffe\", \"zebra\", \"rhino\"]));\nconsole.log(total_match([\"cat\", \"dog\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv2kzng0h.ts(32,37): error TS1002: Unterminated string literal.\n../../../../tmp/tmpv2kzng0h.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpv2kzng0h.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpvf2s572x.js:30:12)\n    at Object.<anonymous> (/tmp/tmpvf2s572x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let sum1: number = 0;\n    let sum2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    }\n    else if (sum1 > sum2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"ff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"ff\", \"ggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"ff\", \"ggg\", \"hhh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"fgh\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp2x3m3gg8.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2x3m3gg8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'a', 'cde', 'fgh' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let sum1: number = 0;\n    let sum2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    }\n    else if (sum1 > sum2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"a\", \"aa\", \"aaa\"], [\"bb\", \"bbb\", \"bbbb\"]));\nconsole.log(total_match([\"ccc\", \"cccc\", \"ccccc\"], [\"dddd\", \"ddddd\"]));\nconsole.log(total_match([\"eeeee\", \"eeeeee\"], [\"ffffff\", \"fffffff\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'aa', 'aaa' ]\n[ 'dddd', 'ddddd' ]\n[ 'eeeee', 'eeeeee' ]\n",
      "timestamp": 1660334245
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"cc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"cc\", \"dd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'a', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334245
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\", \"dolphin\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\", \"dolphin\", \"whale\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\", \"dolphin\", \"whale\", \"shark\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\", \"dolphin\", \"whale\", \"shark\", \"dolphin\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\", \"dolphin\", \"whale\", \"shark\", \"dolphin\", \"whale\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\", \"dolphin\", \"whale\", \"shark\", \"dolphin\", \"whale\", \"shark\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\", \"dolphin\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe6psnq43.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334245
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp7iitg7hq.js:33:12)\n    at Object.<anonymous> (/tmp/tmp7iitg7hq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"f\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"cc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"ccc\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"cc\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"cc\", \"ddd\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"cc\", \"dd\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"cc\", \"dd\", \"eee\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"cc\", \"dd\", \"ee\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"cc\", \"dd\", \"ee\", \"fff\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeb6b0ovq.ts(30,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmpeb6b0ovq.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpeb6b0ovq.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\", \"sun\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvr1qej94.ts(31,72): error TS1002: Unterminated string literal.\n../../../../tmp/tmpvr1qej94.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpvr1qej94.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"fgh\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"fgh\", \"j\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"fgh\", \"j\", \"k\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'cde', 'fgh' ]\n[ 'a', 'cde', 'fgh', 'j' ]\n[ 'abc', 'de', 'fghi' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp9h_t5p9s.js:32:12)\n    at Object.<anonymous> (/tmp/tmp9h_t5p9s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"cc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"cccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'a', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"ab\", \"cde\", \"fgh\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"ab\", \"cde\", \"fgh\", \"j\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"ab\", \"cde\", \"fgh\", \"jk\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'ab', 'cde', 'fgh' ]\n[ 'abc', 'de', 'fghi' ]\n[ 'abc', 'de', 'fghi' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let sum1: number = 0;\n    let sum2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpuk8xpe0t.js:33:12)\n    at Object.<anonymous> (/tmp/tmpuk8xpe0t.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\", \"dolphin\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'cat', 'dog', 'mouse' ]\n[ 'cat', 'dog', 'mouse' ]\n[ 'cat', 'dog', 'mouse' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"elephant\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"elephant\", \"giraffe\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"elephant\", \"giraffe\", \"zebra\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"elephant\", \"giraffe\", \"zebra\", \"monkey\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"elephant\", \"giraffe\", \"zebra\", \"monkey\", \"lion\"]));\nconsole.log(total_match([\"cat\", \"dog\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjm8jkc_m.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"b\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'b' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nlet list1: string[] = [\"hello\", \"world\"];\nlet list2: string[] = [\"hi\", \"planet\"];\n\nconsole.log(total_match(list1, list2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nlet lst1: string[] = [\"abc\", \"def\", \"ghi\"];\nlet lst2: string[] = [\"ab\", \"de\", \"gh\"];\nconsole.log(total_match(lst1, lst2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpoa8lvjpa.js:33:12)\n    at Object.<anonymous> (/tmp/tmpoa8lvjpa.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'ab', 'de', 'gh' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpvf2s572x.js:30:12)\n    at Object.<anonymous> (/tmp/tmpvf2s572x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334242
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"b\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp1b7vtz6v.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1b7vtz6v.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'b' ]\n[ 'aaa', 'bbb' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"ghij\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"ghij\", \"klmno\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'cde', 'f' ]\n[ 'abc', 'de', 'fghi' ]\n[ 'abc', 'de', 'fghi' ]\n",
      "timestamp": 1660334247
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ffff\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'a', 'bb', 'ccc' ]\n[ 'a', 'bb', 'ccc' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"f\", \"g\", \"h\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'cde', 'f' ]\n[ 'a', 'cde', 'f', 'g' ]\n[ 'a', 'cde', 'f', 'g', 'h' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"lizard\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"lizard\", \"snake\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"lizard\", \"snake\", \"frog\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"lizard\", \"snake\", \"frog\", \"elephant\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"lizard\", \"snake\", \"frog\", \"elephant\", \"giraffe\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"lizard\", \"snake\", \"frog\", \"elephant\", \"giraffe\", \"zebra\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"lizard\", \"snake\", \"frog\", \"elephant\", \"giraffe\", \"zebra\", \"monkey\"]));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4bgrkor1.ts(30,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334248
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334249
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe9jujmj_.ts(31,112): error TS1002: Unterminated string literal.\n../../../../tmp/tmpe9jujmj_.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpe9jujmj_.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp9h_t5p9s.js:32:12)\n    at Object.<anonymous> (/tmp/tmp9h_t5p9s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let count1: number = 0;\n    let count2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        count1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        count2 += lst2[i].length;\n    }\n    if (count1 < count2) {\n        return lst1;\n    }\n    else if (count1 > count2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"mars\", \"jupiter\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334249
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpae80jp3r.ts(30,105): error TS1002: Unterminated string literal.\n../../../../tmp/tmpae80jp3r.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpae80jp3r.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334249
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw0jhk0_t.ts(29,112): error TS1002: Unterminated string literal.\n../../../../tmp/tmpw0jhk0_t.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpw0jhk0_t.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334249
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"def\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"def\", \"gh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpi0img8s9.js:32:12)\n    at Object.<anonymous> (/tmp/tmpi0img8s9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'a', 'bc', 'def' ]\n[ 'a', 'bc', 'def', 'gh' ]\n",
      "timestamp": 1660334249
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\", \"mercury\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"nept\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6psba83j.ts(29,115): error TS1002: Unterminated string literal.\n../../../../tmp/tmp6psba83j.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmp6psba83j.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334249
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let sum1: number = 0;\n    let sum2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    }\n    else if (sum1 > sum2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"\", \"\", \"\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp_imuuapm.js:34:12)\n    at Object.<anonymous> (/tmp/tmp_imuuapm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aaa', 'bbb' ]\n[ 'aa', 'bb', 'cc' ]\n[ '', '', '' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\", \"h\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\", \"h\", \"j\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bcd', 'efg' ]\n[ 'a', 'bcd', 'efg', 'h' ]\n[ 'abc', 'de', 'fghi' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fffff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"f\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fffff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"whale\", \"shark\", \"dolphin\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'cat', 'dog', 'mouse' ]\n[ 'cat', 'dog', 'mouse' ]\n[ 'cat', 'dog', 'mouse' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"rabbit\"], [\"cat\", \"dog\", \"rabbit\", \"mouse\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"rabbit\"], [\"cat\", \"dog\", \"rabbit\", \"mouse\", \"elephant\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"rabbit\"], [\"cat\", \"dog\", \"rabbit\", \"mouse\", \"elephant\", \"giraffe\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'cat', 'dog', 'rabbit' ]\n[ 'cat', 'dog', 'rabbit' ]\n[ 'cat', 'dog', 'rabbit' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fffff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"f\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp8o6pbidj.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8o6pbidj.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let sum1: number = 0;\n    let sum2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    }\n    else if (sum1 > sum2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"f\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"def\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"def\", \"ghij\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"def\", \"ghij\", \"klmno\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"def\", \"ghij\", \"klmno\", \"pqrstu\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"def\", \"ghij\", \"klmno\", \"pqrstu\", \"vwxyz\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bc', 'def' ]\n[ 'abc', 'de', 'fghi' ]\n[ 'abc', 'de', 'fghi' ]\n[ 'abc', 'de', 'fghi' ]\n[ 'abc', 'de', 'fghi' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"b\", \"c\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"c\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"c\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aaa', 'b', 'c' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"b\", \"c\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"c\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"c\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"\", \"\", \"\"]));\nconsole.log(total_match([\"\", \"\", \"\"], [\"aa\", \"bb\", \"cc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aaa', 'b', 'c' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ '', '', '' ]\n[ '', '', '' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpv784v5gx.js:30:12)\n    at Object.<anonymous> (/tmp/tmpv784v5gx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334252
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let sum1: number = 0;\n    let sum2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    }\n    else if (sum1 > sum2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334252
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"elephant\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"elephant\", \"lion\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"elephant\", \"lion\", \"tiger\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"elephant\", \"lion\", \"tiger\", \"bear\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"elephant\", \"lion\", \"tiger\", \"bear\", \"panda\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"elephant\", \"lion\", \"tiger\", \"bear\", \"panda\", \"giraffe\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjshkct2j.ts(32,52): error TS1002: Unterminated string literal.\n../../../../tmp/tmpjshkct2j.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpjshkct2j.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334252
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpr1mgm3e3.js:32:12)\n    at Object.<anonymous> (/tmp/tmpr1mgm3e3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aaa', 'bbb' ]\n",
      "timestamp": 1660334252
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"ffff\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpoxkfrns5.js:32:12)\n    at Object.<anonymous> (/tmp/tmpoxkfrns5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"venus\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"venus\", \"pluto\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let sum1: number = 0;\n    let sum2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    }\n    else if (sum1 > sum2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"ddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"ddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"ddd\", \"eee\", \"ff\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"mars\", \"jupiter\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhhhh\", \"iiiiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhhhh\", \"iiiiiiii\", \"jjjjjjjjj\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'cat', 'dog', 'mouse' ]\n[ 'cat', 'dog', 'mouse' ]\n[ 'cat', 'dog', 'mouse' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nlet lst1: string[] = [\"aaa\", \"bbb\", \"ccc\"];\nlet lst2: string[] = [\"ddd\", \"eee\", \"fff\"];\nconsole.log(total_match(lst1, lst2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bbb', 'ccc' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nlet list1: string[] = [\"aaa\", \"bbb\", \"ccc\"];\nlet list2: string[] = [\"ddd\", \"eee\", \"fff\"];\nconsole.log(total_match(list1, list2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bbb', 'ccc' ]\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"mars\", \"jupiter\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw0jhk0_t.ts(29,112): error TS1002: Unterminated string literal.\n../../../../tmp/tmpw0jhk0_t.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpw0jhk0_t.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334249
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\n\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"hamster\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"hamster\", \"gerbil\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"hamster\", \"gerbil\", \"mouse\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"bird\"], [\"cat\", \"dog\", \"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"hamster\", \"gerbil\", \"mouse\", \"rat\"]));\nconsole.log(total_match([\"cat\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpirujn6dq.ts(30,30): error TS1002: Unterminated string literal.\n../../../../tmp/tmpirujn6dq.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpirujn6dq.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpjd8zqx84.js:33:12)\n    at Object.<anonymous> (/tmp/tmpjd8zqx84.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"a\", \"aa\", \"aaa\"], [\"bb\", \"bbb\", \"bbbb\"]));\nconsole.log(total_match([\"a\", \"aa\", \"aaa\"], [\"bb\", \"bbb\", \"bbbb\", \"bbbbb\"]));\nconsole.log(total_match([\"a\", \"aa\", \"aaa\"], [\"bb\", \"bbb\", \"bbbb\", \"bbbbb\", \"bbbbbb\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'aa', 'aaa' ]\n[ 'a', 'aa', 'aaa' ]\n[ 'a', 'aa', 'aaa' ]\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bbb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bbb\", \"ccc\", \"dddd\", \"eeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpfmda1joe.js:33:12)\n    at Object.<anonymous> (/tmp/tmpfmda1joe.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"ffffff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"f\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\", \"hij\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\", \"hij\", \"klm\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\", \"hij\", \"klm\", \"nop\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\", \"hij\", \"klm\", \"nop\", \"qrs\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\", \"hij\", \"klm\", \"nop\", \"qrs\", \"tuv\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\", \"hij\", \"klm\", \"nop\", \"qrs\", \"tuv\", \"wxyz\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bcd\", \"efg\", \"hij\", \"klm\", \"nop\", \"qrs\", \"tuv\", \"wxyz\", \"abc\"]));\nconsole.log(total_match([\"abc\",\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpky2ciwx4.ts(29,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"de\", \"fgh\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"de\", \"fgh\", \"j\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"de\", \"fgh\", \"j\", \"k\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'de', 'fgh' ]\n[ 'a', 'de', 'fgh', 'j' ]\n[ 'a', 'de', 'fgh', 'j', 'k' ]\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 > total2) {\n        return lst2;\n    }\n    else if (total1 < total2) {\n        return lst1;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"b\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'b' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    }\n    else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp9q5q4954.js:33:12)\n    at Object.<anonymous> (/tmp/tmp9q5q4954.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aaa', 'bbb' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334254
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nlet list1: string[] = [\"abc\", \"def\", \"ghi\"];\nlet list2: string[] = [\"abc\", \"def\", \"ghi\", \"jkl\"];\nconsole.log(total_match(list1, list2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmptb53063x.js:33:12)\n    at Object.<anonymous> (/tmp/tmptb53063x.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'abc', 'def', 'ghi' ]\n",
      "timestamp": 1660334255
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334255
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"whale\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'cat', 'dog', 'mouse' ]\n[ 'cat', 'dog', 'mouse' ]\n[ 'bird', 'fish' ]\n",
      "timestamp": 1660334256
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmptlvy_9g3.js:32:12)\n    at Object.<anonymous> (/tmp/tmptlvy_9g3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334256
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\", \"mercury\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"nept\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp6psba83j.ts(29,115): error TS1002: Unterminated string literal.\n../../../../tmp/tmp6psba83j.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmp6psba83j.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334249
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"])); // [\"aa\", \"bb\", \"cc\"]\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])); // [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\"]\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpe8xpmdvz.js:35:12)\n    at Object.<anonymous> (/tmp/tmpe8xpmdvz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aaa', 'bbb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334256
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"there\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"there\", \"friend\"]));\nconsole.log(total_match([\"hello\", \"world\", \"friend\"], [\"hi\", \"there\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'there' ]\n[ 'hello', 'world' ]\n[ 'hi', 'there' ]\n",
      "timestamp": 1660334256
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334246
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334256
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmppace09ww.ts(30,110): error TS1002: Unterminated string literal.\n../../../../tmp/tmppace09ww.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmppace09ww.ts(31,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334256
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"rabbit\"], [\"elephant\", \"bear\", \"fox\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"rabbit\"], [\"elephant\", \"bear\", \"fox\", \"mouse\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"rabbit\"], [\"elephant\", \"bear\", \"fox\", \"mouse\", \"tiger\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'cat', 'dog', 'rabbit' ]\n[ 'cat', 'dog', 'rabbit' ]\n[ 'cat', 'dog', 'rabbit' ]\n",
      "timestamp": 1660334256
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"ddddd\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n",
      "timestamp": 1660334257
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n",
      "timestamp": 1660334250
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"there\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"there\", \"how\", \"are\", \"you\"]));\nconsole.log(total_match([\"hello\", \"world\", \"how\", \"are\", \"you\"], [\"hi\", \"there\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpz8ihgwbz.js:33:12)\n    at Object.<anonymous> (/tmp/tmpz8ihgwbz.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'hi', 'there' ]\n[ 'hello', 'world' ]\n[ 'hi', 'there' ]\n",
      "timestamp": 1660334256
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp7iitg7hq.js:33:12)\n    at Object.<anonymous> (/tmp/tmp7iitg7hq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bbb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bb\", \"cc\"], [\"a\", \"bb\", \"cc\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aa', 'bb', 'cc' ]\n[ 'aa', 'bb', 'cc' ]\n[ 'a', 'bb', 'cc' ]\n",
      "timestamp": 1660334257
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"rabbit\"], [\"cat\", \"dog\", \"rabbit\", \"horse\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"rabbit\"], [\"cat\", \"dog\", \"rabbit\", \"horse\", \"pig\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"rabbit\"], [\"cat\", \"dog\", \"rabbit\", \"horse\", \"pig\", \"cow\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'cat', 'dog', 'rabbit' ]\n[ 'cat', 'dog', 'rabbit' ]\n[ 'cat', 'dog', 'rabbit' ]\n",
      "timestamp": 1660334257
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"ffff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"ff\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334257
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe9jujmj_.ts(31,112): error TS1002: Unterminated string literal.\n../../../../tmp/tmpe9jujmj_.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpe9jujmj_.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"eee\", \"fff\", \"gggggg\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\", \"ff\", \"gggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kk\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp50ht13j_.ts(29,107): error TS1002: Unterminated string literal.\n../../../../tmp/tmp50ht13j_.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmp50ht13j_.ts(30,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"mars\", \"jupiter\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334253
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"defg\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"defg\", \"hijkl\"]));\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"bc\", \"defg\", \"hijkl\", \"mnopqr\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bc', 'defg' ]\n[ 'abc', 'de', 'fghi' ]\n[ 'abc', 'de', 'fghi' ]\n",
      "timestamp": 1660334257
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    }\n    else if (total2 < total1) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"pig\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"pig\", \"horse\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"pig\", \"horse\", \"cow\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"pig\", \"horse\", \"cow\", \"elephant\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\", \"turtle\", \"snake\", \"lizard\", \"pig\", \"horse\", \"cow\", \"elephant\", \"giraffe\"]));\nconsole.log(total_match([\"cat\", \"dog\", \"mouse\"], [\"bird\", \"fish\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpynlbw75i.ts(32,64): error TS1002: Unterminated string literal.\n../../../../tmp/tmpynlbw75i.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpynlbw75i.ts(33,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334256
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpg7bfh_nz.js:31:12)\n    at Object.<anonymous> (/tmp/tmpg7bfh_nz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'aaa', 'bb', 'c' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\"]));\nconsole.log(total_match([\"aa\", \"bbb\", \"cccc\"], [\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'a', 'bb', 'ccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n[ 'aa', 'bbb', 'cccc' ]\n",
      "timestamp": 1660334257
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334242
    },
    {
      "exit_code": 2,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let sum1: number = 0;\n    let sum2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    }\n    else if (sum1 > sum2) {\n        return lst2;\n    }\n    else {\n        return lst1;\n    }\n}\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\", \"kkkkkkkk\", \"lllllllll\"]));\nconsole.log(total_match([\"aaa\", \"bb\", \"c\"], [\"dddd\", \"ee\", \"fff\", \"gggggg\", \"hhhhh\", \"iiiiii\", \"jjjjjjj\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfuhhiksv.ts(31,104): error TS1002: Unterminated string literal.\n../../../../tmp/tmpfuhhiksv.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpfuhhiksv.ts(32,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334257
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  let total1: number = 0;\n  let total2: number = 0;\n  for (let i: number = 0; i < lst1.length; i++) {\n    total1 += lst1[i].length;\n  }\n  for (let i: number = 0; i < lst2.length; i++) {\n    total2 += lst2[i].length;\n  }\n  if (total1 < total2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nconsole.log(total_match([\"abc\", \"de\", \"fghi\"], [\"a\", \"cde\", \"fgh\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmp2x3m3gg8.js:31:12)\n    at Object.<anonymous> (/tmp/tmp2x3m3gg8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'a', 'cde', 'fgh' ]\n",
      "timestamp": 1660334243
    },
    {
      "exit_code": 1,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"venus\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"venus\", \"jupiter\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"venus\", \"jupiter\", \"saturn\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"venus\", \"jupiter\", \"saturn\", \"uranus\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"venus\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"]));\nconsole.log(total_match([\"hello\", \"world\"], [\"hi\", \"planet\", \"earth\", \"mars\", \"venus\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'hI',\n  'hi',\n  'hii'\n]\n\nshould loosely deep-equal\n\n[\n  'hi',\n  'admin'\n]\n    at test (/tmp/tmpuy2v0xyb.js:39:12)\n    at Object.<anonymous> (/tmp/tmpuy2v0xyb.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi', 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "[ 'hi', 'planet' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n[ 'hello', 'world' ]\n",
      "timestamp": 1660334257
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334239
    },
    {
      "exit_code": 0,
      "program": "//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let total1: number = 0;\n    let total2: number = 0;\n    for (let i: number = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nlet lst1: string[] = [\"a\", \"aa\", \"aaa\"];\nlet lst2: string[] = [\"bb\", \"bbb\"];\nconsole.log(total_match(lst1, lst2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([], [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "[ 'bb', 'bbb' ]\n",
      "timestamp": 1660334257
    }
  ]
}