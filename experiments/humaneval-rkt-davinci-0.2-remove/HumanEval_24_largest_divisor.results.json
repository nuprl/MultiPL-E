{
  "language": "rkt",
  "name": "HumanEval_24_largest_divisor",
  "results": [
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (+ i 1))))\n  (iter 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm_n0s050.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm_n0s050.rkt:17:4\nactual:     7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm_n0s050.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm_n0s050.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (if (&gt; (square test-divisor) n)\n        n\n        (if (divides? test-divisor n)\n            test-divisor\n            (find-divisor n (+ test-divisor 1)))))\n  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_dpxwgcq.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "stdout": "",
      "timestamp": 1660028134
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42y15hwf.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42y15hwf.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42y15hwf.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (zero? (modulo n i))\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwou1pruz.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwou1pruz.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwou1pruz.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpshj_ptm5.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpshj_ptm5.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpshj_ptm5.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsqnq18gu.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsqnq18gu.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsqnq18gu.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= n i)\n        0\n        (if (= (modulo n i) 0)\n            i\n            (largest_divisor-iter n (+ i 1)))))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzxouobhl.rkt:18:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzxouobhl.rkt:19:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzxouobhl.rkt:20:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzxouobhl.rkt:21:4\nactual:     2\nexpected:   50\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixr54vka.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixr54vka.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixr54vka.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (if (&gt; (square test-divisor) n)\n        n\n        (if (divides? test-divisor n)\n            test-divisor\n            (find-divisor n (+ test-divisor 1)))))\n  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_dpxwgcq.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "stdout": "",
      "timestamp": 1660028134
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter current-divisor n)\n    (if (= (remainder n current-divisor) 0)\n        current-divisor\n        (largest_divisor_iter (- current-divisor 1) n)))\n  (largest_divisor_iter (/ n 2) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpol3ahfox.rkt:16:4\n\nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpol3ahfox.rkt:17:4\n\nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpol3ahfox.rkt:20:4\n\nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (zero? (modulo n i))\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (if (&gt; (square test-divisor) n)\n        n\n        (if (divides? test-divisor n)\n            test-divisor\n            (find-divisor n (+ test-divisor 1)))))\n  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_dpxwgcq.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "stdout": "",
      "timestamp": 1660028134
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor-iter n test-divisor)\n    (if (&lt; test-divisor n)\n        (if (zero? (modulo n test-divisor))\n            test-divisor\n            (divisor-iter n (+ test-divisor 1)))\n        n))\n  (divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppa786m7o.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "stdout": "",
      "timestamp": 1660028134
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vnptx8.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vnptx8.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vnptx8.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpshj_ptm5.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpshj_ptm5.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpshj_ptm5.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1cp2xkwk.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1cp2xkwk.rkt:17:4\nactual:     7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1cp2xkwk.rkt:18:4\nactual:     10\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1cp2xkwk.rkt:19:4\nactual:     100\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1cp2xkwk.rkt:20:4\nactual:     49\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028136
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter current-divisor n)\n    (if (= (remainder n current-divisor) 0)\n        current-divisor\n        (largest_divisor_iter (- current-divisor 1) n)))\n  (largest_divisor_iter (- n 1) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028136
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n divisor)\n    (if (= (modulo n divisor) 0)\n        divisor\n        (largest_divisor_iter n (- divisor 1))))\n  (largest_divisor_iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028136
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsqnq18gu.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsqnq18gu.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsqnq18gu.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter current-divisor n)\n    (if (= (remainder n current-divisor) 0)\n        current-divisor\n        (largest_divisor-iter (- current-divisor 1) n)))\n  (largest_divisor-iter (- n 1) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028136
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n divisor)\n    (if (= (modulo n divisor) 0)\n        (largest_divisor_iter n (- divisor 1))\n        divisor))\n  (largest_divisor_iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl29a5jh6.rkt:16:4\nactual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl29a5jh6.rkt:17:4\nactual:     6\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl29a5jh6.rkt:18:4\nactual:     9\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl29a5jh6.rkt:19:4\nactual:     99\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl29a5jh6.rkt:20:4\nactual:     48\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor-iter i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor-iter (- i 1))))\n  (divisor-iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n d)\n    (if (= n d)\n        n\n        (if (= (remainder n d) 0)\n            d\n            (divisor n (+ d 1)))))\n  (divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88kvjy6q.rkt:18:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88kvjy6q.rkt:19:4\nactual:     7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88kvjy6q.rkt:20:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88kvjy6q.rkt:21:4\nactual:     2\nexpected:   50\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (+ i 1))))\n  (iter 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6ht5jpx.rkt:18:4\nactual:     1\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6ht5jpx.rkt:19:4\nactual:     1\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6ht5jpx.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwou1pruz.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwou1pruz.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwou1pruz.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (quotient n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (find-divisor test-divisor)\n    (cond ((> (square test-divisor) n) n)\n          ((divides? test-divisor n) test-divisor)\n          (else (find-divisor (+ test-divisor 1)))))\n  (find-divisor 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmpbgcen9xu.rkt:6:15: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpbgcen9xu.rkt:6:15\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (let loop ([i n])\n    (if (zero? (modulo n i))\n        i\n        (loop (- i 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyxxdkfr.rkt:15:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyxxdkfr.rkt:16:4\nactual:     7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyxxdkfr.rkt:17:4\nactual:     10\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyxxdkfr.rkt:18:4\nactual:     100\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyxxdkfr.rkt:19:4\nactual:     49\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (zero? (modulo n i))\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= n i)\n        n\n        (if (= (modulo n i) 0)\n            (largest_divisor-iter n (- i 1))\n            (largest_divisor-iter n (- i 1)))))\n  (largest_divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkqv65y_f.rkt:18:4\n\nmodulo: division by zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkqv65y_f.rkt:19:4\n\nmodulo: division by zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkqv65y_f.rkt:20:4\n\nmodulo: division by zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkqv65y_f.rkt:21:4\n\nmodulo: division by zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkqv65y_f.rkt:22:4\n\nmodulo: division by zero\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (if (= (remainder n test-divisor) 0)\n        test-divisor\n        (find-divisor n (- test-divisor 1))))\n  (find-divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        (if (= i 1)\n            (error \"No divisors\")\n            i)\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpht1hiy4d.rkt:18:4\n\nNo divisors\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpht1hiy4d.rkt:19:4\n\nNo divisors\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (zero? (modulo n i))\n        (largest_divisor-iter n (- i 1))\n        i))\n  (largest_divisor-iter n (quotient n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp56281eaj.rkt:16:4\n\nmodulo: division by zero\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56281eaj.rkt:17:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56281eaj.rkt:18:4\nactual:     4\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56281eaj.rkt:19:4\nactual:     49\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56281eaj.rkt:20:4\nactual:     24\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= n i)\n        1\n        (if (= (modulo n i) 0)\n            i\n            (largest_divisor_iter n (+ i 1)))))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplqi0_1wc.rkt:20:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplqi0_1wc.rkt:21:4\nactual:     2\nexpected:   50\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= n i)\n        1\n        (if (= (modulo n i) 0)\n            i\n            (largest_divisor-iter n (+ i 1)))))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9g7cknko.rkt:20:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9g7cknko.rkt:21:4\nactual:     2\nexpected:   50\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (zero? (modulo n i))\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (if (&gt; (square test-divisor) n)\n        n\n        (if (divides? test-divisor n)\n            test-divisor\n            (find-divisor n (+ test-divisor 1)))))\n  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_dpxwgcq.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "stdout": "",
      "timestamp": 1660028134
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixr54vka.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixr54vka.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixr54vka.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        (if (= i 1)\n            1\n            i)\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= n i)\n        n\n        (if (= (modulo n i) 0)\n            (largest_divisor_iter n (+ i 1))\n            (largest_divisor_iter n (+ i 1)))))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jhyo0zq.rkt:18:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jhyo0zq.rkt:19:4\nactual:     7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jhyo0zq.rkt:20:4\nactual:     10\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jhyo0zq.rkt:21:4\nactual:     100\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2jhyo0zq.rkt:22:4\nactual:     49\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (if (= n 1)\n      1\n      (let loop ([i (- n 1)])\n        (if (= (modulo n i) 0)\n            i\n            (loop (- i 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor-iter test-divisor)\n    (if (&gt; (remainder n test-divisor) 0)\n        (divisor-iter (+ test-divisor 1))\n        test-divisor))\n  (divisor-iter 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_6jop83g.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ibk9raa.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i n)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter (+ i 1) n)\n        (- i 1)))\n  (largest_divisor_iter 2 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp09mryyy.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp09mryyy.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp09mryyy.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter d n)\n    (if (= (remainder n d) 0)\n        d\n        (largest_divisor_iter (- d 1) n)))\n  (largest_divisor_iter (- n 1) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest-divisor-iter current-divisor n)\n    (if (= (remainder n current-divisor) 0)\n        current-divisor\n        (largest-divisor-iter (- current-divisor 1) n)))\n  (largest-divisor-iter (- n 1) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        (if (= i 1)\n            0\n            i)\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8s85dxhm.rkt:18:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8s85dxhm.rkt:19:4\nactual:     0\nexpected:   1\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (divisor n i)\n    (if (= (remainder n i) 0)\n        i\n        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (if (= (remainder n test-divisor) 0)\n        test-divisor\n        (find-divisor n (- test-divisor 1))))\n  (find-divisor n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbrhtkcd6.rkt:16:4\n\nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbrhtkcd6.rkt:17:4\n\nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbrhtkcd6.rkt:20:4\n\nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt7w_8no.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028137
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (zero? (modulo n i))\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_9bq9_w.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vnptx8.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vnptx8.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vnptx8.rkt:20:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62v3tikc.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:18:4\nactual:     2\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:19:4\nactual:     2\nexpected:   50\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjb8n1ls.rkt:20:4\nactual:     1\nexpected:   7\n--------------------\n",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028135
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; For a given number n, find the largest number that divides n evenly, smaller than n\n(define (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660028137
    }
  ]
}