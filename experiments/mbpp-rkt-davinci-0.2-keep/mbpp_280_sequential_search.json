{
  "name": "mbpp_280_sequential_search",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond [(empty? dlist) (values #f -1)]\n        [(equal? (first dlist) item) (values #t 0)]\n        [else (let-values ([(found? index) (sequential_search (rest dlist) item)])\n                (values found? (+ 1 index)))])\n  )\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item i)\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t i)]\n          [else (iter (rest dlist) item (+ i 1))]))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item i)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t i))\n          (else (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (search dlist item)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t (sub1 (length dlist)))]\n      [else (search (rest dlist) item)]))\n  (search (reverse dlist) item))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? item (car dlist)) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? item (car dlist)) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item i)\n    (cond ((null? dlist) #f)\n          ((equal? (car dlist) item) (cons #t i))\n          (else (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (if (eq? (car dlist) item)\n        (values #t index)\n        (if (null? (cdr dlist))\n            (values #f -1)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (search dlist item)\n    (if (null? dlist)\n        (values #f -1)\n        (let ((first (car dlist))\n              (rest (cdr dlist)))\n          (if (equal? first item)\n              (values #t 0)\n              (let ((rec (search rest item)))\n                (values (car rec) (+ 1 (cadr rec))))))))\n  (search dlist item))\n",
    "  (define (iter dlist item i)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t i))\n          (else (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item pos)\n    (cond [(empty? dlist) (values #f -1)]\n          [(= item (first dlist)) (values #t pos)]\n          [else (iter (rest dlist) item (+ pos 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [i 0])\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t i)\n            (loop (cdr dlist) (+ i 1))))))\n",
    "  (define (iter dlist item)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? item (car dlist)) (values #t (length dlist)))\n          (else (iter (cdr dlist) item))))\n  (iter dlist item))\n",
    "  (define (iter dlist item i)\n    (if (empty? dlist)\n        (values #f -1)\n        (if (equal? (first dlist) item)\n            (values #t i)\n            (iter (rest dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (define (search dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (search (rest dlist) item (+ index 1))]))\n  (search dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) #f]\n          [(equal? item (first dlist)) (cons #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item pos)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? item (car dlist)) (values #t pos))\n          (else (iter (cdr dlist) item (+ pos 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item i)\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t i)]\n          [else (iter (rest dlist) item (+ i 1))]))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item i)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t i))\n          (else (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item i)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? item (car dlist)) (values #t i))\n          (else (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? item (first dlist)) (values #t 0)]\n    [else\n     (let ([result (sequential_search (rest dlist) item)])\n       (values (first result) (+ 1 (second result))))]))\n",
    "  (define (iter dlist item i)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t i)]\n      [else (iter (rest dlist) item (+ i 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item i)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t i)\n            (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist]\n             [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (search dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (search (cdr dlist) item (+ index 1)))))\n  (search dlist item 0))\n",
    "  (define (search dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (search (rest dlist) item (+ index 1))]))\n  (search dlist item 0))\n",
    "  (define (iter dlist item count)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t count)\n            (iter (cdr dlist) item (+ count 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? item (first dlist)) (values #t 0)]\n    [else (let* ([rec (sequential_search (rest dlist) item)]\n                 [found (first rec)]\n                 [index (second rec)])\n            (if found\n                (values #t (+ index 1))\n                (values #f -1)))]))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(null? dlist) (values #f -1)]\n          [(equal? (car dlist) item) (values #t index)]\n          [else (loop (cdr dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item i)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t i)]\n      [else (iter (rest dlist) item (+ i 1))]))\n  (iter dlist item 0))\n",
    "  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n",
    "  (define (iter dlist item count)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t count)]\n      [else (iter (rest dlist) item (+ count 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(= item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (loop (cdr dlist) (+ index 1))))))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n",
    "  (define (iter dlist item pos)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t pos)]\n      [else (iter (rest dlist) item (+ pos 1))]))\n  (iter dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else\n     (let* ([rest (rest dlist)]\n            [result (sequential_search rest item)]\n            [found (first result)]\n            [index (second result)])\n       (if found\n           (values #t (+ index 1))\n           (values #f -1)))]))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item i)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t i))\n          (else (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (values (first result) (+ (second result) 1)))]))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (helper dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (helper (cdr dlist) item (+ index 1)))))\n  (helper dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else\n     (let* ([rest (rest dlist)]\n            [found? (sequential_search rest item)]\n            [index (second found?)])\n       (if (first found?)\n           (values #t (+ index 1))\n           (values #f (- index 1))))]))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(= item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) #f)\n          ((equal? (car dlist) item) (cons #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) (+ index 1))]))\n  (iter dlist 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? item (first dlist)) (values #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (values (first result) (+ 1 (second result))))]))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) #f)\n          ((equal? (car dlist) item) (cons #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ((dlist dlist) (index 0))\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (loop (cdr dlist) (+ index 1))))))\n",
    "  (define (iter dlist item i)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t i)\n            (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item i)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t i)\n            (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(= (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let-values ([(found? index) (sequential_search (rest dlist) item)])\n            (values found? (+ index 1)))]))\n",
    "  (define (helper dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (helper (cdr dlist) item (+ index 1)))))\n  (helper dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(null? dlist) (values #f -1)]\n      [(equal? (car dlist) item) (values #t index)]\n      [else (iter (cdr dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? item (car dlist))\n            (values #t index)\n            (loop (cdr dlist) (+ index 1))))))\n",
    "  (define (iter dlist index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (iter (cdr dlist) (+ index 1)))))\n  (iter dlist 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (search dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (search (rest dlist) item (+ index 1))]))\n  (search dlist item 0))\n",
    "  (define (iter dlist item i)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t i))\n          (else (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) #f)\n          ((equal? item (car dlist)) (list #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item i)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? item (car dlist)) (values #t i))\n          (else (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let* ([rest (rest dlist)]\n                 [result (sequential_search rest item)])\n             (values (first result) (+ 1 (second result))))]))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist]\n             [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist]\n             [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (loop (cdr dlist) (+ index 1))))))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (search dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (search (cdr dlist) item (+ index 1)))))\n  (search dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else\n     (let* ([rest (rest dlist)]\n            [result (sequential_search rest item)]\n            [found (first result)]\n            [index (second result)])\n       (values found (+ index 1)))]))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) #f]\n      [(equal? (first dlist) item) (cons #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let-values ([(found? index) (sequential_search (rest dlist) item)])\n            (values found? (+ index 1)))]))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (loop (cdr dlist) (+ index 1))))))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (loop (cdr dlist) (+ index 1))))))\n",
    "  (define (iter dlist item count)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t count)]\n      [else (iter (rest dlist) item (+ count 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item count)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t count)\n            (iter (cdr dlist) item (+ count 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item)\n    (if (null? dlist)\n        (values #f -1)\n        (let ([index (car dlist)])\n          (if (= item index)\n              (values #t index)\n              (iter (cdr dlist) item)))))\n  (iter dlist item))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ((dlist dlist) (index 0))\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (loop (cdr dlist) (+ index 1))))))\n",
    "  (define (iter dlist item i)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t i)\n            (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist]\n             [index 0])\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? item (car dlist)) (values #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item count)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t count)\n            (iter (cdr dlist) item (+ count 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item pos)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t pos)]\n      [else (iter (rest dlist) item (+ pos 1))]))\n  (iter dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? item (first dlist)) (values #t 0)]\n    [else\n     (let* ([rest (rest dlist)]\n            [result (sequential_search rest item)]\n            [found (first result)]\n            [index (second result)])\n       (if found\n           (values #t (+ index 1))\n           (values #f -1)))]))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? item (car dlist))\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let-values ([(found index) (sequential_search (rest dlist) item)])\n            (values found (+ index 1)))]))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? item (car dlist))\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item count)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t count))\n          (else (iter (cdr dlist) item (+ count 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item pos)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? item (car dlist))\n            (values #t pos)\n            (iter (cdr dlist) item (+ pos 1)))))\n  (iter dlist item 0))\n",
    "  (define (search-helper dlist item index)\n    (cond\n      [(empty? dlist) #f -1]\n      [(equal? (first dlist) item) #t index]\n      [else (search-helper (rest dlist) item (+ index 1))]))\n  (search-helper dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (values (first result) (+ 1 (second result))))]))\n",
    "  (define (iter dlist item i)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t i)\n            (iter (cdr dlist) item (+ i 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond ((null? dlist) #f)\n          ((equal? (car dlist) item) (list #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item i)\n    (cond\n      [(empty? dlist) #f]\n      [(equal? (first dlist) item) (cons #t i)]\n      [else (iter (rest dlist) item (+ i 1))]))\n  (iter dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (values (first result) (+ (second result) 1)))]))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) #f]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let-values ([(found index) (sequential_search (rest dlist) item)])\n            (values found (+ index 1)))]))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (search dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (search (rest dlist) item (+ index 1))]))\n  (search dlist item 0))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (if (null? dlist)\n        (values #f -1)\n        (if (= item (car dlist))\n            (values #t index)\n            (loop (cdr dlist) (+ index 1))))))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? item (first dlist)) (values #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (values (first result) (+ (second result) 1)))]))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? (first dlist) item) (values #t index)]\n          [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(= item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (if (null? dlist)\n        (values #f -1)\n        (if (equal? (car dlist) item)\n            (values #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (iter dlist item)\n    (if (null? dlist)\n        (values #f -1)\n        (let ([index (add1 (cdr (iter (cdr dlist) item)))])\n          (if (equal? item (car dlist))\n              (values #t index)\n              (iter (cdr dlist) item)))))\n  (iter dlist item))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let* ([rest (rest dlist)]\n                 [result (sequential_search rest item)]\n                 [found (first result)]\n                 [index (second result)])\n            (if found\n                (values #t (+ index 1))\n                (values #f -1)))]))\n",
    "  (define (search dlist item)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t (add1 (length dlist))))\n          (else (search (cdr dlist) item))))\n  (search dlist item))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (define (search dlist item index)\n    (cond ((null? dlist) (values #f -1))\n          ((equal? item (car dlist)) (values #t index))\n          (else (search (cdr dlist) item (+ index 1)))))\n  (search dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item count)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t count)]\n      [else (iter (rest dlist) item (+ count 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? (first dlist) item) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let-values ([(found? index) (sequential_search (rest dlist) item)])\n            (values found? (+ index 1)))])\n  )\n",
    "  (let loop ((dlist dlist) (index 0))\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (loop (cdr dlist) (+ index 1))))))\n",
    "  (cond\n    [(empty? dlist) (values #f -1)]\n    [(equal? (first dlist) item) (values #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (values (first result) (+ 1 (second result))))]))\n",
    "  (let loop ((dlist dlist) (index 0))\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (loop (cdr dlist) (+ index 1))))))\n",
    "  (define (iter dlist item index)\n    (cond\n      [(empty? dlist) (values #f -1)]\n      [(equal? item (first dlist)) (values #t index)]\n      [else (iter (rest dlist) item (+ index 1))]))\n  (iter dlist item 0))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (values #f -1)]\n          [(equal? item (first dlist)) (values #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n",
    "  (let loop ((dlist dlist)\n             (index 0))\n    (cond ((null? dlist) (values #f -1))\n          ((equal? (car dlist) item) (values #t index))\n          (else (loop (cdr dlist) (+ index 1))))))\n",
    "  (let loop ([dlist dlist] [index 0])\n    (cond [(null? dlist) (values #f -1)]\n          [(equal? (car dlist) item) (values #t index)]\n          [else (loop (cdr dlist) (+ index 1))])))\n"
  ]
}