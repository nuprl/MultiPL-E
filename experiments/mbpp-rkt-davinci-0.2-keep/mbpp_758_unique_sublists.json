{
  "name": "mbpp_758_unique_sublists",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n(define (unique_sublists list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_sublists))\n    (check-equal? (candidate (list (list 1 3) (list 5 7) (list 1 3) (list 13 15 17) (list 5 7) (list 9 11))) #hash(((list 1 3) .  2) ((list 5 7) .  2) ((list 13 15 17) .  1) ((list 9 11) .  1)))\n    (check-equal? (candidate (list (list \"green\" \"orange\") (list \"black\") (list \"green\" \"orange\") (list \"white\"))) #hash(((list \"green\" \"orange\") .  2) ((list \"black\") .  1) ((list \"white\") .  1)))\n    (check-equal? (candidate (list (list 10 20 30 40) (list 60 70 50 50) (list 90 100 200))) #hash(((list 10 20 30 40) .  1) ((list 60 70 50 50) .  1) ((list 90 100 200) .  1)))\n    (check-equal? (candidate (list (list \"john\"))) #hash(((list \"john\") .  1)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper list1 result)\n    (cond\n      [(empty? list1) result]\n      [(list? (first list1))\n       (if (member (first list1) result)\n           (helper (rest list1) (cons (cons (first list1) (add1 (cdr (assoc (first list1) result)))) (remove (assoc (first list1) result) result)))\n           (helper (rest list1) (cons (cons (first list1) 1) result)))]\n      [else (helper (rest list1) result)]))\n  (helper list1 '()))\n",
    "  (define (unique-sublists-iter list1 result)\n    (cond ((null? list1) result)\n          ((list? (car list1))\n           (let ((tuple (cons (car list1) (cdr list1))))\n             (unique-sublists-iter (cdr list1) (if (assoc tuple result)\n                                                   (cons (cons tuple (+ 1 (cdr (assoc tuple result)))) (remove (assoc tuple result) result))\n                                                   (cons (cons tuple 1) result)))))\n          (else (unique-sublists-iter (cdr list1) result))))\n  (unique-sublists-iter list1 '()))\n",
    "  (define (unique_sublists_helper list1 result)\n    (cond\n      [(empty? list1) result]\n      [(list? (first list1))\n       (unique_sublists_helper (rest list1) (add-to-dict result (first list1) 1))]\n      [else (unique_sublists_helper (rest list1) result)]))\n  (unique_sublists_helper list1 (make-dict)))\n",
    "  (letrec ([sublists (lambda (list1)\n                       (cond [(empty? list1) empty]\n                             [(list? (first list1)) (cons (first list1) (sublists (rest list1)))]\n                             [else (sublists (rest list1))]))]\n           [count (lambda (list1)\n                    (cond [(empty? list1) empty]\n                          [(equal? (first list1) (second list1)) (cons (first list1) (count (rest list1)))]\n                          [else (cons (first list1) (count (rest list1)))]))]\n           [count_all (lambda (list1)\n                        (cond [(empty? list1) empty]\n                              [else (cons (count (first list1)) (count_all (rest list1)))]))]\n           [count_all_unique (lambda (list1)\n                               (cond [(empty? list1) empty]\n                                     [(equal? (first list1) (second list1)) (count_all_unique (rest list1))]\n                                     [else (cons (first list1) (count_all_unique (rest list1)))]))]\n           [count_all_unique_sublists (lambda (list1)\n                                        (cond [(empty? list1) empty]\n                                              [else (cons (count (first list1)) (count_all_unique_sublists (rest list1)))]))]\n           [count_all_unique_sublists_dict (lambda (list1)\n                                             (cond [(empty? list1) empty]\n                                                   [else (cons (cons (first (first list1)) (second (first list1))) (count_all_unique_sublists_dict (rest list1)))]))])\n    (count_all_unique_sublists_dict (count_all_unique_sublists (count_all (sublists list1))))))\n",
    "  (let ([sublists (sublists list1)])\n    (for/fold ([dict (make-hash)])\n              ([sublist sublists])\n              (hash-update sublist add1 0 dict))))\n",
    "  (define (unique_sublists-iter list1 list2)\n    (if (null? list1)\n        list2\n        (let ((tuple (tuple (car list1) (count (car list1) list1))))\n          (unique_sublists-iter (cdr list1) (cons tuple list2)))))\n  (unique_sublists-iter list1 '()))\n",
    "  (define (unique_sublists_helper list1 result)\n    (cond\n      [(empty? list1) result]\n      [(list? (first list1))\n       (cond\n         [(member (first list1) result)\n          (unique_sublists_helper (rest list1) (cons (first list1) result))]\n         [else\n          (unique_sublists_helper (rest list1) (cons (first list1) result))])]\n      [else\n       (unique_sublists_helper (rest list1) result)]))\n  (unique_sublists_helper list1 '()))\n",
    "  (define (count_sublist list1 list2)\n    (cond\n      [(empty? list1) 0]\n      [(equal? (first list1) (first list2)) (+ 1 (count_sublist (rest list1) (rest list2)))]\n      [else (count_sublist list1 (rest list2))]))\n  (define (unique_sublists_helper list1 list2)\n    (cond\n      [(empty? list1) list2]\n      [(empty? (first list1)) (unique_sublists_helper (rest list1) list2)]\n      [(member (first list1) list2) (unique_sublists_helper (rest list1) list2)]\n      [else (unique_sublists_helper (rest list1) (cons (first list1) list2))]))\n  (define (count_sublists list1 list2)\n    (cond\n      [(empty? list1) list2]\n      [(empty? (first list1)) (count_sublists (rest list1) list2)]\n      [(member (first list1) list2) (count_sublists (rest list1) (cons (list (first list1) (count_sublist (first list1) list1)) (rest list2)))]\n      [else (count_sublists (rest list1) (cons (list (first list1) (count_sublist (first list1) list1)) list2))]))\n  (count_sublists (unique_sublists_helper list1 '()) '()))\n",
    "  (letrec ([count (lambda (list2)\n                    (cond\n                      [(empty? list2) empty]\n                      [(list? (first list2))\n                       (cons (cons (first list2) (count (first list2)))\n                             (count (rest list2)))]\n                      [else (count (rest list2))]))]\n           [count_occ (lambda (list3)\n                        (cond\n                          [(empty? list3) empty]\n                          [else (cons (cons (first list3) (length (filter (lambda (x) (equal? (first list3) x)) list3)))\n                                      (count_occ (rest list3)))]))])\n    (count_occ (count list1))))\n",
    "  (define (unique_sublists_helper list1 result)\n    (cond\n      [(empty? list1) result]\n      [else\n       (define sublist (first list1))\n       (define sublist-tuple (cons (hash sublist) sublist))\n       (cond\n         [(assoc sublist-tuple result)\n          (define new-result (cons (cons sublist-tuple (+ 1 (cdr (assoc sublist-tuple result)))) (remove (assoc sublist-tuple result) result)))\n          (unique_sublists_helper (rest list1) new-result)]\n         [else\n          (define new-result (cons (cons sublist-tuple 1) result))\n          (unique_sublists_helper (rest list1) new-result)])])\n    )\n  (unique_sublists_helper list1 '())\n  )\n",
    "  (letrec ([sublists (lambda (list1)\n                       (cond [(empty? list1) empty]\n                             [(list? (first list1)) (cons (first list1) (sublists (rest list1)))]\n                             [else (sublists (rest list1))]))]\n           [count_sublists (lambda (list1)\n                             (cond [(empty? list1) empty]\n                                   [(list? (first list1)) (cons (cons (first list1) (count (first list1) (sublists list1))) (count_sublists (rest list1)))]\n                                   [else (count_sublists (rest list1))]))])\n    (count_sublists (sublists list1))))\n",
    "  (define (unique_sublists_helper list1 list2)\n    (if (null? list1)\n        list2\n        (let ((tuple (tuple (car list1) (count (car list1) list1))))\n          (if (member tuple list2)\n              (unique_sublists_helper (cdr list1) list2)\n              (unique_sublists_helper (cdr list1) (cons tuple list2))))))\n  (unique_sublists_helper list1 '()))\n",
    "  (let ([sublists (sublists list1)])\n    (for/fold ([dict '()]) ([sublist sublists])\n      (let ([tuple (tuple sublist)])\n        (dict-set dict tuple (add1 (dict-ref dict tuple 0)))))))\n",
    "  (let ([sublists (sublists list1)])\n    (for/fold ([dict '()]) ([sublist sublists])\n      (let ([tuple (tuple sublist)])\n        (if (dict-has-key? dict tuple)\n            (dict-set dict tuple (+ 1 (dict-ref dict tuple)))\n            (dict-set dict tuple 1))))))\n</code>\n",
    "  (define (count_sublists list1 list2)\n    (cond\n      [(empty? list1) list2]\n      [(member (first list1) (map car list2))\n       (count_sublists (rest list1)\n                       (map (lambda (x) (if (equal? (first list1) (car x))\n                                            (cons (car x) (add1 (cdr x)))\n                                            x))\n                            list2))]\n      [else (count_sublists (rest list1)\n                            (cons (cons (first list1) 1) list2))]))\n  (count_sublists list1 '()))\n",
    "  (let ([sublists (sublists list1)])\n    (for/fold ([dictionary '()]) ([sublist sublists])\n      (let ([tuple (tuple sublist)])\n        (if (dict-has-key? dictionary tuple)\n            (dict-set dictionary tuple (+ 1 (dict-ref dictionary tuple)))\n            (dict-set dictionary tuple 1))))))\n",
    "  (let ([sublists (sublists list1)])\n    (for/fold ([dict '()]) ([sublist sublists])\n      (let ([tuple (list->vector sublist)])\n        (if (dict-has-key? dict tuple)\n            (dict-set dict tuple (+ 1 (dict-ref dict tuple)))\n            (dict-set dict tuple 1))))))\n",
    "  (define (helper list1 result)\n    (cond\n      [(empty? list1) result]\n      [(list? (first list1))\n       (if (assoc (first list1) result)\n           (helper (rest list1) (cons (list (first list1) (+ 1 (cdr (assoc (first list1) result)))) (remove (assoc (first list1) result) result)))\n           (helper (rest list1) (cons (list (first list1) 1) result)))]\n      [else (helper (rest list1) result)]))\n  (helper list1 '()))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (define (count_sublist list1 list2)\n    (cond ((null? list1) 0)\n          ((equal? list1 list2) (+ 1 (count_sublist (cdr list1) list2)))\n          (else (count_sublist (cdr list1) list2))))\n  (define (count_sublists list1 list2)\n    (cond ((null? list1) '())\n          ((null? list2) (count_sublists list1 (cdr list1)))\n          (else (cons (cons list2 (count_sublist list1 list2)) (count_sublists list1 (cdr list1))))))\n  (count_sublists list1 list1))\n",
    "  (define (unique_sublists-helper list1 list2)\n    (cond ((null? list1) list2)\n          ((list? (car list1))\n           (unique_sublists-helper (cdr list1) (cons (car list1) list2)))\n          (else (unique_sublists-helper (cdr list1) list2))))\n  (define (count-sublists list1 list2)\n    (cond ((null? list1) list2)\n          ((member (car list1) (car list2))\n           (count-sublists (cdr list1) (cons (cons (car list1) (+ 1 (cdr (assoc (car list1) list2)))) (remove (assoc (car list1) list2) list2))))\n          (else (count-sublists (cdr list1) (cons (cons (car list1) 1) list2)))))\n  (count-sublists (unique_sublists-helper list1 '()) '()))\n</code>\n"
  ]
}