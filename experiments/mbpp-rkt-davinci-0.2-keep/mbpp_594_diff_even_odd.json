{
  "name": "mbpp_594_diff_even_odd",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the difference of the first even and first odd number of a given list.\n(define (diff_even_odd list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate diff_even_odd))\n    (check-equal? (candidate (list 1 3 5 7 4 1 6 8)) 3)\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) 1)\n    (check-equal? (candidate (list 1 5 7 9 10)) 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([even (find-first-even list1)]\n        [odd (find-first-odd list1)])\n    (- even odd)))\n",
    "  (let ((even (first (filter even? list1)))\n        (odd (first (filter odd? list1))))\n    (- even odd)))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (if (null? list1)\n      0\n      (if (even? (car list1))\n          (- (car list1) (diff_even_odd (cdr list1)))\n          (diff_even_odd (cdr list1)))))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([evens (filter even? list1)]\n        [odds (filter odd? list1)])\n    (- (first evens) (first odds))))\n</code>\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (if (null? list1)\n      0\n      (if (even? (car list1))\n          (- (car list1) (diff_even_odd (cdr list1)))\n          (diff_even_odd (cdr list1)))))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([even (car (filter even? list1))]\n        [odd (car (filter odd? list1))])\n    (- even odd)))\n",
    "  (letrec ([even (lambda (list1)\n                   (cond [(empty? list1) 0]\n                         [(even? (first list1)) (first list1)]\n                         [else (even (rest list1))]))]\n           [odd (lambda (list1)\n                  (cond [(empty? list1) 0]\n                        [(odd? (first list1)) (first list1)]\n                        [else (odd (rest list1))]))])\n    (- (even list1) (odd list1))))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([even (find-first-even list1)]\n        [odd (find-first-odd list1)])\n    (- even odd)))\n",
    "  (let ([even (car (filter even? list1))]\n        [odd (car (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (let ([even (first (filter even? list1))]\n        [odd (first (filter odd? list1))])\n    (- even odd)))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (odd? n)\n    (if (= (remainder n 2) 1)\n        #t\n        #f))\n  (define (first_even list)\n    (if (null? list)\n        #f\n        (if (even? (car list))\n            (car list)\n            (first_even (cdr list)))))\n  (define (first_odd list)\n    (if (null? list)\n        #f\n        (if (odd? (car list))\n            (car list)\n            (first_odd (cdr list)))))\n  (- (first_even list1) (first_odd list1)))\n",
    "  (let ([even (find-first-even list1)]\n        [odd (find-first-odd list1)])\n    (- even odd)))\n"
  ]
}