{
  "name": "mbpp_767_get_pairs_count",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n(define (get_pairs_count arr sum)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_pairs_count))\n    (check-equal? (candidate (list 1 1 1 1) 2) 6)\n    (check-equal? (candidate (list 1 5 7 -1 5) 6) 3)\n    (check-equal? (candidate (list 1 -2 3) 1) 1)\n    (check-equal? (candidate (list -1 -2 3) -3) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_pairs_count_helper arr sum)\n    (cond\n      [(empty? arr) 0]\n      [(= (first arr) sum) (+ 1 (get_pairs_count_helper (rest arr) sum))]\n      [else (get_pairs_count_helper (rest arr) sum)]))\n  (get_pairs_count_helper arr sum))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(>= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr i) (+ (list-ref arr j) sum))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr i) (- (list-ref arr j) sum))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= (first arr) sum) (loop (rest arr) sum (+ count 1))]\n          [(= (first arr) 0) (loop (rest arr) sum (+ count 1))]\n          [(= (first arr) sum) (loop (rest arr) sum (+ count 1))]\n          [(= (first arr) 0) (loop (rest arr) sum (+ count 1))]\n          [else (loop (rest arr) sum count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (+ (list-ref arr i) (list-ref arr j)) sum)\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(> (+ (list-ref arr i) (list-ref arr j)) sum)\n           (loop i (sub1 j) count)]\n          [else (loop (add1 i) j count)])))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 count))]\n      [else (get_pairs_count_helper (cdr arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [j (add1 len)] [count 0])\n      (cond [(>= i j) count]\n            [(= (add (list-ref arr i) (list-ref arr j)) sum)\n             (loop (add1 i) (sub1 j) (add1 count))]\n            [else\n             (cond [(> (list-ref arr i) sum) (loop (add1 i) j count)]\n                   [(> (list-ref arr j) sum) (loop i (sub1 j) count)]\n                   [else (loop (add1 i) (sub1 j) count)])]))))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) count)]\n      [else\n       (loop (add1 i) j count)])))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond ((null? arr) count)\n          ((member (- sum (car arr)) arr)\n           (loop (cdr arr) (+ 1 count)))\n          (else (loop (cdr arr) count)))))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond ((null? arr) count)\n          ((member (- sum (car arr)) arr)\n           (loop (cdr arr) (+ count 1)))\n          (else (loop (cdr arr) count)))))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond\n      [(empty? arr) count]\n      [(member (car arr) (cdr arr)) (loop (cdr arr) (+ count 1))]\n      [else (loop (cdr arr) count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n      [else (loop (cdr arr) sum count)])))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [count 0])\n      (if (= i (- len 1))\n          count\n          (if (= (+ (list-ref arr i) (list-ref arr (+ i 1))) sum)\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (let* ([first (car arr)]\n               [rest (cdr arr)]\n               [new-count (if (member (- sum first) rest)\n                              (add1 count)\n                              count)])\n          (loop rest new-count)))))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) count)]\n          [else (loop (add1 i) j count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n      [(= sum (+ sum (car arr))) (loop (cdr arr) sum (+ count 1))]\n      [else (loop (cdr arr) sum count)])))\n",
    "  (define (get_pairs_count-iter arr sum pairs-count)\n    (cond [(empty? arr) pairs-count]\n          [(= sum (add1 (first arr))) (get_pairs-count-iter (rest arr) sum (add1 pairs-count))]\n          [else (get_pairs-count-iter (rest arr) sum pairs-count)]))\n  (get_pairs_count-iter arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(null? arr) pairs]\n      [(= sum (car arr)) (get_pairs_count_helper (cdr arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum count)\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (helper (cdr arr) sum (+ count 1))\n            (helper (cdr arr) sum count))))\n  (helper arr sum 0))\n"
  ]
}