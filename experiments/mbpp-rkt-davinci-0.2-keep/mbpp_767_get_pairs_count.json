{
  "name": "mbpp_767_get_pairs_count",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n(define (get_pairs_count arr sum)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_pairs_count))\n    (check-equal? (candidate (list 1 1 1 1) 2) 6)\n    (check-equal? (candidate (list 1 5 7 -1 5) 6) 3)\n    (check-equal? (candidate (list 1 -2 3) 1) 1)\n    (check-equal? (candidate (list -1 -2 3) -3) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_pairs_count_helper arr sum)\n    (cond\n      [(empty? arr) 0]\n      [(= (first arr) sum) (+ 1 (get_pairs_count_helper (rest arr) sum))]\n      [else (get_pairs_count_helper (rest arr) sum)]))\n  (get_pairs_count_helper arr sum))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(>= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr i) (+ (list-ref arr j) sum))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr i) (- (list-ref arr j) sum))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= (first arr) sum) (loop (rest arr) sum (+ count 1))]\n          [(= (first arr) 0) (loop (rest arr) sum (+ count 1))]\n          [(= (first arr) sum) (loop (rest arr) sum (+ count 1))]\n          [(= (first arr) 0) (loop (rest arr) sum (+ count 1))]\n          [else (loop (rest arr) sum count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (+ (list-ref arr i) (list-ref arr j)) sum)\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(> (+ (list-ref arr i) (list-ref arr j)) sum)\n           (loop i (sub1 j) count)]\n          [else (loop (add1 i) j count)])))\n",
    "  (define (get_pairs_count_helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 count))]\n      [else (get_pairs_count_helper (cdr arr) sum count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [j (add1 len)] [count 0])\n      (cond [(>= i j) count]\n            [(= (add (list-ref arr i) (list-ref arr j)) sum)\n             (loop (add1 i) (sub1 j) (add1 count))]\n            [else\n             (cond [(> (list-ref arr i) sum) (loop (add1 i) j count)]\n                   [(> (list-ref arr j) sum) (loop i (sub1 j) count)]\n                   [else (loop (add1 i) (sub1 j) count)])]))))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) count)]\n      [else\n       (loop (add1 i) j count)])))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond ((null? arr) count)\n          ((member (- sum (car arr)) arr)\n           (loop (cdr arr) (+ 1 count)))\n          (else (loop (cdr arr) count)))))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond ((null? arr) count)\n          ((member (- sum (car arr)) arr)\n           (loop (cdr arr) (+ count 1)))\n          (else (loop (cdr arr) count)))))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond\n      [(empty? arr) count]\n      [(member (car arr) (cdr arr)) (loop (cdr arr) (+ count 1))]\n      [else (loop (cdr arr) count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n      [else (loop (cdr arr) sum count)])))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [count 0])\n      (if (= i (- len 1))\n          count\n          (if (= (+ (list-ref arr i) (list-ref arr (+ i 1))) sum)\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (let* ([first (car arr)]\n               [rest (cdr arr)]\n               [new-count (if (member (- sum first) rest)\n                              (add1 count)\n                              count)])\n          (loop rest new-count)))))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) count)]\n          [else (loop (add1 i) j count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n      [(= sum (+ sum (car arr))) (loop (cdr arr) sum (+ count 1))]\n      [else (loop (cdr arr) sum count)])))\n",
    "  (define (get_pairs_count-iter arr sum pairs-count)\n    (cond [(empty? arr) pairs-count]\n          [(= sum (add1 (first arr))) (get_pairs-count-iter (rest arr) sum (add1 pairs-count))]\n          [else (get_pairs-count-iter (rest arr) sum pairs-count)]))\n  (get_pairs_count-iter arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(null? arr) pairs]\n      [(= sum (car arr)) (get_pairs_count_helper (cdr arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum count)\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (helper (cdr arr) sum (+ count 1))\n            (helper (cdr arr) sum count))))\n  (helper arr sum 0))\n",
    "  (let loop ((i 0) (j (add1 (length arr))) (count 0))\n    (cond ((= i j) count)\n          ((= (list-ref arr i) (list-ref arr j))\n           (loop (add1 i) (sub1 j) (add1 count)))\n          ((&gt; (list-ref arr i) (list-ref arr j))\n           (loop (add1 i) (sub1 j) count))\n          (else (loop (add1 i) j count)))))\n</code>\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(null? arr) pairs_count]\n      [(= (car arr) sum) (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) count)]\n      [else (loop (add1 i) j count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i j)\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (if (&lt; (list-ref arr i) (list-ref arr j))\n                (loop (add1 i) j count)\n                (loop i (sub1 j) count)))\n        count)))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i j)\n        (if (= (list-ref arr i) (list-ref arr (- j 1)))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (loop (add1 i) (sub1 j) count))\n        count)))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (apply + (take 2 arr))) (loop (drop 2 arr) (+ count 1))]\n          [else (loop (drop 1 arr) count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(>= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (+ (list-ref arr i) (list-ref arr j)) sum)\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= (car arr) sum) (+ count 1)]\n          [else (loop (cdr arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum count)\n    (if (null? arr)\n        count\n        (if (= (car arr) sum)\n            (helper (cdr arr) sum (+ count 1))\n            (helper (cdr arr) sum count))))\n  (helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= (sum (first arr) (second arr)) sum)\n           (loop (rest (rest arr)) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
    "  (let loop ([i 0] [j 1] [count 0])\n    (cond\n      [(>= i (length arr)) count]\n      [(>= j (length arr)) (loop (+ i 1) (+ i 2) count)]\n      [(= (+ (list-ref arr i) (list-ref arr j)) sum) (loop i (+ j 1) (+ count 1))]\n      [else (loop i (+ j 1) count)])))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [j (sub1 len)] [count 0])\n      (cond [(> i j) count]\n            [(= (+ (list-ref arr i) (list-ref arr j)) sum)\n             (loop (add1 i) (sub1 j) (add1 count))]\n            [else (loop (add1 i) (sub1 j) count)]))))\n",
    "  (let loop ([i 0] [count 0])\n    (if (= i (length arr))\n        count\n        (let ([j (add1 i)])\n          (let loop ([j j])\n            (if (= j (length arr))\n                (loop (add1 i) count)\n                (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n                    (loop (add1 j) (add1 count))\n                    (loop (add1 j) count))))))))\n",
    "  (let loop ((i 0) (j (add1 (length arr))) (count 0))\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr i) (add (list-ref arr j) sum))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr i) (sub (list-ref arr j) sum))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i j)\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (loop (add1 i) (sub1 j) count))\n        count)))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) j count)]\n      [else (loop i (sub1 j) count)])))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (let ([first (car arr)])\n          (if (member (- sum first) arr)\n              (loop (cdr arr) (+ count 1))\n              (loop (cdr arr) count))))))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) (rest arr)) (loop (rest arr) (+ count 1))]\n      [else (loop (rest arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n      [(< (list-ref arr i) (list-ref arr j)) (loop (add1 i) j count)]\n      [else (loop i (sub1 j) count)])))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (let ([first (car arr)])\n          (loop (cdr arr)\n                (if (member (- sum first) arr)\n                    (+ count 1)\n                    count))))))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [j (- len 1)] [count 0])\n      (cond\n        [(> i j) count]\n        [(= (+ (list-ref arr i) (list-ref arr j)) sum)\n         (loop (+ i 1) (- j 1) (+ count 1))]\n        [(> (+ (list-ref arr i) (list-ref arr j)) sum)\n         (loop i (- j 1) count)]\n        [else\n         (loop (+ i 1) j count)]))))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ((i 0) (j 1) (count 0))\n    (if (&lt; i (- (length arr) 1))\n        (if (&lt; j (length arr))\n            (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n                (loop i (+ j 1) (+ count 1))\n                (loop i (+ j 1) count))\n            (loop (+ i 1) (+ i 2) count))\n        count)))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i (sub1 j)) count]\n      [(= (+ (list-ref arr i) (list-ref arr j)) sum) (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (+ (list-ref arr i) (list-ref arr j)) sum) (loop i (sub1 j) count)]\n      [else (loop (add1 i) j count)])))\n",
    "  (let loop ((arr arr) (sum sum) (count 0))\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum (+ count 1))\n            (loop (cdr arr) sum count)))))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(>= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [else (loop (add1 i) j count)])))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(member (- sum (first arr)) arr)\n       (loop (rest arr) (+ count 1))]\n      [else (loop (rest arr) count)])))\n",
    "  (let loop ((i 0) (j (add1 (length arr))) (count 0))\n    (if (&lt; i (sub1 j))\n        (let ((a (list-ref arr i))\n              (b (list-ref arr j)))\n          (cond ((= (+ a b) sum)\n                 (loop (add1 i) (sub1 j) (add1 count)))\n                ((&gt; (+ a b) sum)\n                 (loop i (sub1 j) count))\n                (else\n                 (loop (add1 i) j count))))\n        count)))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (if (null? arr)\n        count\n        (if (= sum (car arr))\n            (loop (cdr arr) sum (+ count 1))\n            (loop (cdr arr) sum count)))))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= (first arr) sum) (loop (rest arr) sum (+ count 1))]\n          [else (loop (rest arr) sum count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (if (null? arr)\n        pairs_count\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ 1 pairs_count))\n            (get_pairs_count_helper (cdr arr) sum pairs_count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (helper (cdr arr) sum (+ count 1))]\n      [else (helper (cdr arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) (rest arr))\n       (loop (rest arr) (add1 count))]\n      [else (loop (rest arr) count)])))\n",
    "  (let loop ((i 0) (j (add1 (length arr))) (count 0))\n    (cond ((= i j) count)\n          ((= (list-ref arr i) (list-ref arr j))\n           (loop (add1 i) (sub1 j) (add1 count)))\n          ((&lt; (list-ref arr i) (list-ref arr j))\n           (loop (add1 i) j count))\n          (else (loop i (sub1 j) count)))))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond [(empty? arr) pairs_count]\n          [(= (car arr) sum) (get_pairs_count_helper (cdr arr) sum (+ 1 pairs_count))]\n          [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [else (let ([first (first arr)]\n                       [rest (rest arr)])\n                  (loop rest (+ count (count (filter (lambda (x) (= (+ first x) sum)) rest)))))])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(null? arr) pairs]\n      [(= sum (+ (car arr) (car (cdr arr)))) (get_pairs_count_helper (cdr arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ((i 0) (j (add1 (length arr))))\n    (cond\n      [(= i j) 0]\n      [(= (list-ref arr i) (list-ref arr j)) (add1 (loop (add1 i) (sub1 j)))]\n      [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) j)]\n      [else (loop i (sub1 j))])))\n",
    "  (letrec ([helper (lambda (arr sum)\n                     (cond\n                       [(empty? arr) 0]\n                       [(= (first arr) sum) (+ 1 (helper (rest arr) sum))]\n                       [else (helper (rest arr) sum)]))])\n    (helper arr sum)))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i j)\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (loop (add1 i) (sub1 j) count))\n        count)))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (if (null? arr)\n        pairs_count\n        (let* ([first_num (car arr)]\n               [second_num (car (cdr arr))]\n               [new_pairs_count (if (= (+ first_num second_num) sum)\n                                    (+ pairs_count 1)\n                                    pairs_count)])\n          (get_pairs_count_helper (cdr arr) sum new_pairs_count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (add (list-ref arr j) sum)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr j) (add (list-ref arr i) sum)) (loop (add1 i) (sub1 j) (add1 count))]\n          [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (let ((pairs 0))\n    (for ((i (in-range (length arr))))\n      (for ((j (in-range (length arr))))\n        (when (and (not (= i j)) (= (+ (list-ref arr i) (list-ref arr j)) sum))\n          (set! pairs (+ pairs 1)))))\n    pairs))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (loop (cdr arr)\n              (+ count\n                 (let loop ([arr2 (cdr arr)] [count 0])\n                   (if (null? arr2)\n                       count\n                       (loop (cdr arr2)\n                             (+ count\n                                (if (= (+ (car arr) (car arr2)) sum)\n                                    1\n                                    0))))))))))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(null? arr) count]\n          [else\n           (let ([first (car arr)]\n                 [second (cadr arr)])\n             (cond [(= (+ first second) sum)\n                    (loop (cdr arr) sum (+ count 1))]\n                   [else (loop (cdr arr) sum count)]))])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(>= i j) count]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (define (helper arr sum count)\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (helper (cdr arr) sum (+ count 1))\n            (helper (cdr arr) sum count))))\n  (helper arr sum 0))\n",
    "  (length (filter (lambda (pair) (= (apply + pair) sum)) (combinations arr 2))))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(member (- sum (first arr)) (rest arr))\n       (loop (rest arr) (+ count 1))]\n      [else (loop (rest arr) count)])))\n",
    "  (let loop ((arr arr) (sum sum) (count 0))\n    (cond\n      [(empty? arr) count]\n      [(= (first arr) sum) (loop (rest arr) sum (+ count 1))]\n      [else (loop (rest arr) sum count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs-count)\n    (cond [(empty? arr) pairs-count]\n          [(= (sum (first arr) (second arr)) sum)\n           (get_pairs_count_helper (rest arr) sum (+ pairs-count 1))]\n          [else (get_pairs_count_helper (rest arr) sum pairs-count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (list-ref arr i) (list-ref arr j))\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) sum)\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr j) sum)\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) count)]\n      [else\n       (loop (add1 i) j count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ 1 pairs))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (let ([first (car arr)] [rest (cdr arr)])\n          (loop rest\n               (if (member (- sum first) rest)\n                   (+ count 1)\n                   count))))))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [else\n       (define (get_pairs_count_helper_helper arr sum pairs_count)\n         (cond\n           [(empty? arr) pairs_count]\n           [else\n            (if (= (+ (first arr) (first (rest arr))) sum)\n                (get_pairs_count_helper_helper (rest arr) sum (+ pairs_count 1))\n                (get_pairs_count_helper_helper (rest arr) sum pairs_count))]))\n       (get_pairs_count_helper (rest arr) sum (get_pairs_count_helper_helper arr sum pairs_count))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [else\n       (define (get_pairs_count_helper_helper arr sum pairs)\n         (cond\n           [(empty? arr) pairs]\n           [else\n            (if (= (+ (first arr) (first (rest arr))) sum)\n                (get_pairs_count_helper_helper (rest arr) sum (+ pairs 1))\n                (get_pairs_count_helper_helper (rest arr) sum pairs))]))\n       (get_pairs_count_helper (rest arr) sum (get_pairs_count_helper_helper arr sum pairs))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum acc)\n    (if (null? arr)\n        acc\n        (if (member (car arr) (cdr arr))\n            (helper (cdr arr) sum (+ acc 1))\n            (helper (cdr arr) sum acc))))\n  (helper arr sum 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)])\n       (+ (get_pairs_count (rest arr) sum)\n          (if (member (sub1 sum first) arr) 1 0)))]))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ((arr arr) (sum sum) (count 0))\n    (cond\n      [(null? arr) count]\n      [(= (car arr) sum) (+ count 1)]\n      [else\n       (loop (cdr arr) sum (+ count (get_pairs_count (cdr arr) (- sum (car arr)))))])))\n",
    "  (let loop ((i 0) (j (add1 (length arr))) (count 0))\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) sum) (loop (add1 i) j (add1 count))]\n      [(= (list-ref arr j) sum) (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (add (list-ref arr i) (list-ref arr j)) sum) (loop (add1 i) (sub1 j) (add1 count))]\n      [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond [(empty? arr) pairs_count]\n          [(= sum (+ (first arr) (second arr))) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n          [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (let ([x (car arr)] [xs (cdr arr)])\n          (loop xs\n                (if (member (- sum x) xs)\n                    (+ count 1)\n                    count))))))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [(= sum (sub1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i (sub1 j))\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (loop (add1 i) j count))\n        count)))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= (sum (first arr) (second arr)) sum) (loop (rest (rest arr)) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (if (null? arr)\n        pairs\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ pairs 1))\n            (get_pairs_count_helper (cdr arr) sum pairs))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond [(empty? arr) pairs_count]\n          [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs_count))]\n          [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([pairs (filter (lambda (x) (= (sum x) sum)) (combinations arr 2))])\n    (length pairs)))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= (sum (first arr) (second arr)) sum) (helper (rest arr) sum (+ count 1))]\n      [else (helper (rest arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ((arr arr) (count 0))\n    (cond\n      [(null? arr) count]\n      [(member (car arr) (cdr arr))\n       (loop (cdr arr) (+ count 1))]\n      [else (loop (cdr arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) j count)]\n      [else (loop i (sub1 j) count)])))\n",
    "  (let ([pairs (filter (lambda (pair) (= (apply + pair) sum)) (combinations arr 2))])\n    (length pairs)))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr i) (add (list-ref arr j) sum))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr j) (add (list-ref arr i) sum))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(null? arr) pairs]\n      [(= sum (car arr)) (get_pairs_count_helper (cdr arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([len (length arr)])\n    (let loop ([i 0] [j (- len 1)])\n      (cond\n        [(= i j) 0]\n        [(= (+ (list-ref arr i) (list-ref arr j)) sum) (+ 1 (loop (+ i 1) (- j 1)))]\n        [else (loop (+ i 1) (- j 1))]))))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (sum (first arr) (second arr)) sum)\n       (get_pairs_count_helper (rest (rest arr)) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs_count 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum acc)\n    (cond\n      [(empty? arr) acc]\n      [(= sum (+ (first arr) (second arr))) (helper (rest (rest arr)) sum (+ acc 1))]\n      [else (helper (rest arr) sum acc)]))\n  (helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (= i (sub1 j))\n        count\n        (let ([a (list-ref arr i)]\n              [b (list-ref arr j)])\n          (if (= (+ a b) sum)\n              (loop (add1 i) (sub1 j) (add1 count))\n              (if (&lt; (+ a b) sum)\n                  (loop (add1 i) j count)\n                  (loop i (sub1 j) count)))))))\n",
    "  (let ([pairs (filter (lambda (x) (equal? (car x) (cadr x)))\n                       (for/list ([i (in-range (length arr))]\n                                  [j (in-range (length arr))])\n                         (list (list-ref arr i) (list-ref arr j))))])\n    (length pairs)))\n",
    "  (length (filter (lambda (x) (member (- sum x) arr)) arr)))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) (rest arr))\n       (loop (rest arr) (add1 count))]\n      [else (loop (rest arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum acc)\n    (cond\n      [(null? arr) acc]\n      [(= (car arr) sum) (get_pairs_count_helper (cdr arr) sum (+ acc 1))]\n      [else (get_pairs_count_helper (cdr arr) sum acc)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr i) sum) (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr j) sum) (loop (add1 i) (sub1 j) (add1 count))]\n      [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(member (sub1 sum (first arr)) (rest arr))\n       (loop (rest arr) (add1 count))]\n      [else (loop (rest arr) count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i j)\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (loop (add1 i) (sub1 j) count))\n        count)))\n",
    "  (let ([pairs (for/list ([i (in-range (length arr))]\n                          [j (in-range (length arr))])\n                  (list (list-ref arr i) (list-ref arr j)))])\n    (length (filter (lambda (pair) (= sum (+ (car pair) (cadr pair)))) pairs))))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (if (null? arr)\n        count\n        (if (= (car arr) sum)\n            (loop (cdr arr) sum (+ count 1))\n            (loop (cdr arr) sum count)))))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (helper arr sum acc)\n    (cond\n      [(empty? arr) acc]\n      [(= (car arr) sum) (helper (cdr arr) sum (+ acc 1))]\n      [else (helper (cdr arr) sum acc)]))\n  (helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond [(empty? arr) pairs_count]\n          [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ 1 pairs_count))]\n          [(= (first arr) (- sum)) (get_pairs_count_helper (rest arr) sum (+ 1 pairs_count))]\n          [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n      [else (loop (cdr arr) sum count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n          [else (loop (cdr arr) sum count)])))\n",
    "  (define (helper arr sum count)\n    (if (null? arr)\n        count\n        (if (= (list-ref arr 0) sum)\n            (helper (cdr arr) sum (+ count 1))\n            (helper (cdr arr) sum count))))\n  (helper arr sum 0))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (apply + (take 2 arr))) (loop (drop 2 arr) (+ count 1))]\n          [else (loop (drop 1 arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ((i 0) (j (length arr)) (count 0))\n    (if (&lt; i j)\n        (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n            (loop (+ i 1) (- j 1) (+ count 1))\n            (loop (+ i 1) (- j 1) count))\n        count)))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr i) sum) (loop (add1 i) (sub1 j) (add1 count))]\n      [(= (list-ref arr j) sum) (loop (add1 i) (sub1 j) (add1 count))]\n      [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (list-ref arr i) (list-ref arr j))\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (sub1 (list-ref arr j)))\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (add1 (list-ref arr i)) (list-ref arr j))\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (add1 (list-ref arr i)) (sub1 (list-ref arr j)))\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (sub1 (list-ref arr i)) (list-ref arr j))\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (sub1 (list-ref arr i)) (sub1 (list-ref arr j)))\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i j)\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (loop (add1 i) (sub1 j) count))\n        count)))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(> (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) count)]\n          [else (loop (add1 i) (sub1 j) (add1 count))])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n          [else (loop (cdr arr) sum count)])))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (apply + (take 2 arr))) (loop (drop 2 arr) (+ count 1))]\n          [else (loop (drop 1 arr) count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (if (null? arr)\n        count\n        (if (member (car arr) (cdr arr))\n            (loop (cdr arr) sum (+ count 1))\n            (loop (cdr arr) sum count)))))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n          [else (loop (cdr arr) sum count)])))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (if (&lt; i j)\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (loop (add1 i) (sub1 j) count))\n        count)))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= (sum (first arr) (second arr)) sum) (loop (rest (rest arr)) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [else\n        (let* ([first (first arr)]\n               [rest (rest arr)]\n               [new-pairs (if (member sum (cons first rest)) (add1 pairs) pairs)])\n          (get_pairs_count_helper rest sum new-pairs))]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i (sub1 j)) count]\n      [(= (add (list-ref arr i) (list-ref arr j)) sum)\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (add (list-ref arr i) (list-ref arr j)) sum)\n       (loop i (sub1 j) count)]\n      [else\n       (loop (add1 i) j count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= (car arr) sum) (loop (cdr arr) sum (+ count 1))]\n          [(= (car arr) 0) (loop (cdr arr) sum (+ count 1))]\n          [else (loop (cdr arr) sum count)])))\n",
    "  (let loop ((i 0) (j (length arr)) (count 0))\n    (if (= i j)\n        count\n        (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n            (loop (+ i 1) (- j 1) (+ count 1))\n            (loop (+ i 1) (- j 1) count)))))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(>= i j) count]\n          [(= (list-ref arr i) (list-ref arr j))\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (define (helper arr sum count)\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (helper (cdr arr) sum (+ count 1))]\n      [else (helper (cdr arr) sum count)]))\n  (helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([count 0])\n    (for ([i (in-range (length arr))])\n      (for ([j (in-range (length arr))])\n        (when (and (not (= i j)) (= (+ (list-ref arr i) (list-ref arr j)) sum))\n          (set! count (+ count 1)))))\n    count))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [(= (first arr) (first (rest arr))) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) (add1 count))]\n      [(> (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (sub1 j) count)]\n      [else (loop (add1 i) j count)])))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (apply + (take 2 arr)))\n           (loop (drop 2 arr) (+ count 1))]\n          [else (loop (drop 1 arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (car arr)) (get_pairs_count_helper (cdr arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(>= i j) count]\n          [(= sum (+ (list-ref arr i) (list-ref arr j)))\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(> (+ (list-ref arr i) (list-ref arr j)) sum)\n           (loop i (sub1 j) count)]\n          [else (loop (add1 i) j count)])))\n",
    "  (let ([pairs (for/list ([i (in-range (length arr))]\n                          [j (in-range (length arr))])\n                  (list (list-ref arr i) (list-ref arr j)))])\n    (length (filter (lambda (pair) (= (apply + pair) sum)) pairs))))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (if (null? arr)\n        pairs\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ pairs 1))\n            (get_pairs_count_helper (cdr arr) sum pairs))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (if (null? arr)\n        pairs\n        (if (member sum (cons (car arr) (cdr arr)))\n            (get_pairs_count_helper (cdr arr) sum (+ pairs 1))\n            (get_pairs_count_helper (cdr arr) sum pairs))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(= sum (car arr)) (loop (cdr arr) sum (+ count 1))]\n      [else (loop (cdr arr) sum count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs-count)\n    (cond [(empty? arr) pairs-count]\n          [(= sum (apply + (take arr 2)))\n           (get_pairs_count_helper (drop arr 1) sum (+ pairs-count 1))]\n          [else (get_pairs_count_helper (drop arr 1) sum pairs-count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (if (null? arr)\n        pairs\n        (if (member sum (cons (car arr) (cdr arr)))\n            (get_pairs_count_helper (cdr arr) sum (+ pairs 1))\n            (get_pairs_count_helper (cdr arr) sum pairs))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond\n      [(= i j) count]\n      [(= (list-ref arr i) (list-ref arr j))\n       (loop (add1 i) (add1 j) (add1 count))]\n      [(= (list-ref arr i) (add1 (list-ref arr j)))\n       (loop (add1 i) (add1 j) count)]\n      [(= (add1 (list-ref arr i)) (list-ref arr j))\n       (loop (add1 i) (add1 j) count)]\n      [else (loop (add1 i) (add1 j) count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(= (first arr) sum) (+ count 1)]\n      [else (loop (rest arr) sum count)])))\n",
    "  (let ([pairs (for/list ([i (in-range (length arr))]\n                         [j (in-range (length arr))])\n                 (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n                     (list (list-ref arr i) (list-ref arr j))))])\n    (length pairs)))\n",
    "  (let ([pairs (filter (lambda (pair) (= (apply + pair) sum)) (combinations arr 2))])\n    (length pairs)))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (car arr) sum) (get_pairs_count_helper (cdr arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([pairs (for/list ([i (in-range (length arr))]\n                         [j (in-range (length arr))])\n                (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n                    (list (list-ref arr i) (list-ref arr j))))])\n    (length pairs)))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr) count]\n          [(= (first arr) sum) (loop (rest arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let ([len (length arr)])\n    (for/fold ([count 0]) ([i (in-range len)])\n      (for/fold ([count count]) ([j (in-range (+ i 1) len)])\n        (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n            (+ count 1)\n            count)))))\n",
    "  (define (helper arr sum acc)\n    (cond\n      [(empty? arr) acc]\n      [(= sum (add1 (first arr))) (helper (rest arr) sum (add1 acc))]\n      [else (helper (rest arr) sum acc)]))\n  (helper arr sum 0))\n",
    "  (let ([len (length arr)]\n        [count 0])\n    (for ([i (in-range len)])\n      (for ([j (in-range (+ i 1) len)])\n        (when (= (+ (list-ref arr i) (list-ref arr j)) sum)\n          (set! count (+ count 1)))))\n    count))\n",
    "  (let ([len (length arr)]\n        [count 0])\n    (for ([i (in-range len)])\n      (for ([j (in-range (+ i 1) len)])\n        (when (= (+ (list-ref arr i) (list-ref arr j)) sum)\n          (set! count (+ count 1)))))\n    count))\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (let ([first (car arr)] [rest (cdr arr)])\n          (loop rest\n               (+ count\n                  (if (member (- sum first) rest) 1 0)))))))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i (sub1 j)) count]\n          [(= (+ (list-ref arr i) (list-ref arr j)) sum)\n           (loop (add1 i) (sub1 j) (add1 count))]\n          [(&gt; (+ (list-ref arr i) (list-ref arr j)) sum)\n           (loop i (sub1 j) count)]\n          [else (loop (add1 i) j count)])))\n",
    "  (let loop ((i 0) (j (add1 (length arr))) (count 0))\n    (if (&gt;= i (sub1 j))\n        count\n        (if (= (list-ref arr i) (list-ref arr j))\n            (loop (add1 i) j count)\n            (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n                (loop (add1 i) j (add1 count))\n                (loop (add1 i) j count))))))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (cond\n      [(empty? arr) pairs_count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs_count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs_count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [count 0])\n    (cond [(= i (sub1 (length arr))) count]\n          [(= (list-ref arr i) (list-ref arr (add1 i)))\n           (loop (add1 i) (add1 count))]\n          [else (loop (add1 i) count)])))\n",
    "  (let ([pairs (for/list ([i (in-range (length arr))])\n                  (for/list ([j (in-range (length arr))])\n                    (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n                        (list (list-ref arr i) (list-ref arr j)))))])\n    (length pairs)))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [else (loop (add1 i) (sub1 j) count)])))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond\n      [(null? arr) count]\n      [(member (- sum (car arr)) arr) (loop (cdr arr) (+ count 1))]\n      [else (loop (cdr arr) count)])))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (if (null? arr)\n        count\n        (let ([first (car arr)])\n          (if (member (- sum first) arr)\n              (loop (cdr arr) sum (+ count 1))\n              (loop (cdr arr) sum count))))))\n",
    "  (let loop ([i 0] [j (add1 (length arr))])\n    (cond [(> i j) 0]\n          [(= (list-ref arr i) (list-ref arr j))\n           (add1 (loop (add1 i) (sub1 j)))]\n          [else (loop (add1 i) (sub1 j))])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs-count)\n    (cond\n      [(empty? arr) pairs-count]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs-count))]\n      [else (get_pairs_count_helper (rest arr) sum pairs-count)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))] [count 0])\n    (cond [(= i j) count]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i) (list-ref arr j)) (loop (add1 i) (sub1 j) (add1 count))]\n          [(= (list-ref arr i",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (if (null? arr)\n        count\n        (let ([a (car arr)]\n              [b (cadr arr)])\n          (if (and (number? a) (number? b))\n              (if (= (+ a b) sum)\n                  (loop (cdr arr) sum (+ count 1))\n                  (loop (cdr arr) sum count))\n              (loop (cdr arr) sum count))))))\n",
    "  (define (helper arr sum count)\n    (if (null? arr)\n        count\n        (if (= (list-ref arr 0) sum)\n            (helper (cdr arr) sum (+ count 1))\n            (helper (cdr arr) sum count))))\n  (helper arr sum 0))\n",
    "  (let loop ([i 0] [j 1] [count 0])\n    (if (= i (- (length arr) 1))\n        count\n        (if (= j (length arr))\n            (loop (+ i 1) (+ i 2) count)\n            (if (= (+ (list-ref arr i) (list-ref arr j)) sum)\n                (loop i (+ j 1) (+ count 1))\n                (loop i (+ j 1) count))))))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (car arr))) (get_pairs_count_helper (cdr arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (cdr arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= sum (add1 (first arr))) (get_pairs_count_helper (rest arr) sum (add1 pairs))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (if (null? arr)\n        pairs_count\n        (let* ([first (car arr)]\n               [rest (cdr arr)]\n               [new_pairs_count (if (member (- sum first) rest)\n                                    (+ pairs_count 1)\n                                    pairs_count)])\n          (get_pairs_count_helper rest sum new_pairs_count))))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (define (get_pairs_count_helper arr sum)\n    (cond [(empty? arr) 0]\n          [(= sum (car arr)) (+ 1 (get_pairs_count_helper (cdr arr) sum))]\n          [else (get_pairs_count_helper (cdr arr) sum)]))\n  (get_pairs_count_helper arr sum))\n",
    "  (let loop ([arr arr] [sum sum] [count 0])\n    (cond [(empty? arr) count]\n          [(= sum (car arr))\n           (loop (cdr arr) sum (+ count 1))]\n          [else (loop (cdr arr) sum count)])))\n",
    "  (let loop ([arr arr] [count 0])\n    (cond\n      [(empty? arr) count]\n      [(member (- sum (first arr)) (rest arr)) (loop (rest arr) (+ count 1))]\n      [else (loop (rest arr) count)])))\n",
    "  (define (get_pairs_count_helper arr sum pairs)\n    (cond\n      [(empty? arr) pairs]\n      [(= (first arr) sum) (get_pairs_count_helper (rest arr) sum (+ pairs 1))]\n      [else (get_pairs_count_helper (rest arr) sum pairs)]))\n  (get_pairs_count_helper arr sum 0))\n",
    "  (let loop ((i 0) (j (add1 (length arr))) (count 0))\n    (cond\n      [(= i (sub1 j)) count]\n      [(= (+ (list-ref arr i) (list-ref arr j)) sum) (loop (add1 i) (sub1 j) (add1 count))]\n      [(&gt; (+ (list-ref arr i) (list-ref arr j)) sum) (loop i (sub1 j) count)]\n      [else (loop (add1 i) j count)])))\n</code>\n",
    "  (let loop ([arr arr] [count 0])\n    (if (null? arr)\n        count\n        (loop (cdr arr)\n              (+ count\n                 (let loop ([arr2 (cdr arr)] [count2 0])\n                   (if (null? arr2)\n                       count2\n                       (if (= (+ (car arr) (car arr2)) sum)\n                           (loop (cdr arr2) (+ count2 1))\n                           (loop (cdr arr2) count2)))))))))\n",
    "  (define (get_pairs_count_helper arr sum pairs_count)\n    (if (null? arr)\n        pairs_count\n        (if (member (car arr) (cdr arr))\n            (get_pairs_count_helper (cdr arr) sum (+ pairs_count 1))\n            (get_pairs_count_helper (cdr arr) sum pairs_count))))\n  (get_pairs_count_helper arr sum 0))\n"
  ]
}