{
  "name": "mbpp_754_extract_index_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond [(empty? l1) empty]\n        [(empty? l2) empty]\n        [(empty? l3) empty]\n        [else (cons (list (list-ref l1 0) (list-ref l2 0) (list-ref l3 0))\n                   (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [(and (equal? (first l1) (first l2)) (equal? (first l1) (first l3)))\n     (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n    [else (extract_index_list (rest l1) (rest l2) (rest l3))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [(and (equal? (first l1) (first l2)) (equal? (first l1) (first l3)))\n     (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n    [else (extract_index_list (rest l1) (rest l2) (rest l3))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [(and (equal? (first l1) (first l2)) (equal? (first l1) (first l3)))\n     (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n    [else (extract_index_list (rest l1) (rest l2) (rest l3))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [(and (equal? (first l1) (first l2)) (equal? (first l1) (first l3)))\n     (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n    [else (extract_index_list (rest l1) (rest l2) (rest l3))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(and (null? l1) (null? l2) (null? l3)) '()]\n    [(and (not (null? l1)) (not (null? l2)) (not (null? l3)))\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]\n    [else '()]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n",
    "  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n"
  ]
}