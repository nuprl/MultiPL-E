{
  "name": "mbpp_130_max_occurrences",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the item with maximum frequency in a given list.\n(define (max_occurrences nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_occurrences))\n    (check-equal? (candidate (list 2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2)) 2)\n    (check-equal? (candidate (list 2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18)) 8)\n    (check-equal? (candidate (list 10 20 20 30 40 90 80 50 30 20 50 10)) 20)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (max_occurrences_helper (cdr nums) num count)\n              (max_occurrences_helper (cdr nums) max-num max-count)))))\n  (max_occurrences_helper nums (car nums) (count (car nums) nums)))\n",
    "  (define (helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (helper (cdr nums) num count)\n              (helper (cdr nums) max-num max-count)))))\n  (helper nums (car nums) (count (car nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ((freqs (list->hash (map (lambda (x) (cons x (count x nums))) nums))))\n    (hash-ref freqs (hash-keys freqs) (lambda (a b) (> (hash-ref freqs a) (hash-ref freqs b))))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (max_occurrences-helper (cdr nums) num count)\n              (max_occurrences-helper (cdr nums) max-num max-count)))))\n  (max_occurrences-helper nums (car nums) (count (car nums) nums)))\n",
    "  (let ([freq-table (make-hash)])\n    (for ([num nums])\n      (hash-update! freq-table num add1 0))\n    (let ([max-freq (apply max (hash-values freq-table))])\n      (hash-ref freq-table max-freq))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (c) (list (cadr c) (car c))) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (letrec ([count (lambda (n nums)\n                    (if (null? nums)\n                        0\n                        (+ (if (= n (car nums)) 1 0)\n                           (count n (cdr nums)))))])\n    (letrec ([max-count (lambda (nums)\n                          (if (null? nums)\n                              0\n                              (max (count (car nums) nums)\n                                   (max-count (cdr nums)))))])\n      (letrec ([max-count-item (lambda (nums)\n                                 (if (null? nums)\n                                     0\n                                     (if (= (count (car nums) nums)\n                                            (max-count nums))\n                                         (car nums)\n                                         (max-count-item (cdr nums))))])\n        (max-count-item nums)))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [else\n       (define count (count (first nums) nums))\n       (if (> count max-count)\n           (max_occurrences-helper (rest nums) (first nums) count)\n           (max_occurrences-helper (rest nums) max-num max-count))]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (define (max-occurrences-helper nums)\n    (if (null? nums)\n        '()\n        (cons (list (car nums) (count (car nums) nums))\n              (max-occurrences-helper (cdr nums)))))\n  (define (count num lst)\n    (if (null? lst)\n        0\n        (+ (if (equal? num (car lst)) 1 0)\n           (count num (cdr lst)))))\n  (define (max-occurrences-helper2 lst)\n    (if (null? lst)\n        '()\n        (cons (car (car lst))\n              (max-occurrences-helper2 (cdr lst)))))\n  (define (max-occurrences-helper3 lst)\n    (if (null? lst)\n        '()\n        (cons (cdr (car lst))\n              (max-occurrences-helper3 (cdr lst)))))\n  (define (max-occurrences-helper4 lst)\n    (if (null? lst)\n        '()\n        (cons (max (car lst) (car (cdr lst)))\n              (max-occurrences-helper4 (cdr (cdr lst))))))\n  (define (max-occurrences-helper5 lst)\n    (if (null? lst)\n        '()\n        (cons (car lst)\n              (max-occurrences-helper5 (cdr lst)))))\n  (define (max-occurrences-helper6 lst)\n    (if (null? lst)\n        '()\n        (cons (cdr lst)\n              (max-occurrences-helper6 (cdr lst)))))\n  (define (max-occurrences-helper7 lst)\n    (if (null? lst)\n        '()\n        (cons (max (car lst) (car (cdr lst)))\n              (max-occurrences-helper7 (cdr (cdr lst))))))\n  (define (",
    "  (define (max_occurrences_helper nums max_num max_count)\n    (cond\n      [(empty? nums) max_num]\n      [(= (first nums) max_num)\n       (max_occurrences_helper (rest nums) max_num (+ max_count 1))]\n      [(> (count (first nums) nums) max_count)\n       (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_helper (rest nums) max_num max_count)]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map (lambda (x) (cdr x)) counts))))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (+ (if (= (car nums) num) 1 0)\n           (count-occurrences (cdr nums) num))))\n  (define (max-occurrences nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count-occurrences nums (car nums))))\n          (if (> count max-count)\n              (max-occurrences (cdr nums) (car nums) count)\n              (max-occurrences (cdr nums) max-num max-count)))))\n  (max-occurrences nums 0 0))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([new-acc (if (assoc (car nums) acc)\n                           (let ([new-count (+ (cdr (assoc (car nums) acc)) 1)])\n                             (cons (cons (car nums) new-count) (remove (assoc (car nums) acc) acc)))\n                           (cons (cons (car nums) 1) acc))])\n          (helper (cdr nums) new-acc))))\n  (let ([acc (helper nums '())])\n    (let ([max-count (apply max (map cdr acc))])\n      (filter (lambda (x) (= (cdr x) max-count)) acc))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond ((null? nums) max-num)\n          ((= (count (car nums) nums) max-count)\n           (max_occurrences-helper (cdr nums) (car nums) (count (car nums) nums)))\n          ((&gt; (count (car nums) nums) max-count)\n           (max_occurrences-helper (cdr nums) (car nums) (count (car nums) nums)))\n          (else (max_occurrences-helper (cdr nums) max-num max-count))))\n  (max_occurrences-helper nums 0 0))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second freqs))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([occurrences (list->hash (map (lambda (n) (cons n (count n nums))) nums))])\n    (hash-ref occurrences (apply max (hash-keys occurrences)))))\n",
    "  (define (count num)\n    (length (filter (lambda (x) (= num x)) nums)))\n  (define (max_count num)\n    (max (count num) (max_count (cdr nums))))\n  (max_count nums))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([occurrences (map (lambda (num) (list num (count num nums))) nums)])\n    (apply max (map second occurrences))))\n",
    "  (let ((occurrences (make-hash)))\n    (for ([num nums])\n      (hash-update occurrences num add1 0))\n    (hash-ref occurrences (apply max (hash-keys occurrences)))))\n",
    "  (define (helper nums)\n    (cond\n      [(empty? nums) empty]\n      [else (cons (list (first nums) (count (first nums) nums)) (helper (rest nums)))]))\n  (define (count num nums)\n    (cond\n      [(empty? nums) 0]\n      [(= num (first nums)) (+ 1 (count num (rest nums)))]\n      [else (count num (rest nums))]))\n  (define (max_occurrence nums)\n    (cond\n      [(empty? nums) empty]\n      [(empty? (rest nums)) (first nums)]\n      [(> (second (first nums)) (second (first (rest nums)))) (max_occurrence (cons (first nums) (rest (rest nums))))]\n      [else (max_occurrence (cons (first (rest nums)) (rest (rest nums))))]))\n  (max_occurrence (helper nums)))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (define (count nums num)\n    (cond\n      [(empty? nums) 0]\n      [(= num (first nums)) (+ 1 (count (rest nums) num))]\n      [else (count (rest nums) num)]))\n  (define (max_count nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(> (count nums (first nums)) (count nums acc)) (max_count (rest nums) (first nums))]\n      [else (max_count (rest nums) acc)]))\n  (max_count (helper nums empty) (first nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (cond\n    [(empty? nums) '()]\n    [else\n     (let ([max (max_occurrences (rest nums))])\n       (if (equal? (count (first nums) nums) (count max nums))\n           (first nums)\n           max))]))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([count (count (car nums) nums)])\n          (if (> count (cdr acc))\n              (helper (cdr nums) (cons (car nums) count))\n              (helper (cdr nums) acc)))))\n  (helper nums (cons 0 0)))\n",
    "  (define (max_occurrences_helper nums max_num max_count)\n    (cond [(empty? nums) max_num]\n          [(= (first nums) max_num)\n           (max_occurrences_helper (rest nums) max_num (+ max_count 1))]\n          [else (max_occurrences_helper (rest nums) (first nums) 1)]))\n  (max_occurrences_helper nums 0 0))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (define (max_occurrences_helper nums max-num max-occurrences)\n    (cond ((null? nums) max-num)\n          ((= (count (car nums) nums) max-occurrences)\n           (max_occurrences_helper (cdr nums) (car nums) max-occurrences))\n          ((> (count (car nums) nums) max-occurrences)\n           (max_occurrences_helper (cdr nums) (car nums)\n                                   (count (car nums) nums)))\n          (else (max_occurrences_helper (cdr nums) max-num max-occurrences))))\n  (max_occurrences_helper nums (car nums) (count (car nums) nums)))\n",
    "  (define (max_occurrences-helper nums max-occurrences max-occurrences-num)\n    (if (null? nums)\n        max-occurrences-num\n        (let ([num (car nums)])\n          (let ([occurrences (count num nums)])\n            (if (> occurrences max-occurrences)\n                (max_occurrences-helper (cdr nums) occurrences num)\n                (max_occurrences-helper (cdr nums) max-occurrences max-occurrences-num))))))\n  (max_occurrences-helper nums 0 0))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (if (equal? (car nums) num)\n            (+ 1 (count-occurrences (cdr nums) num))\n            (count-occurrences (cdr nums) num))))\n  (define (max_occurrences_helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count-occurrences nums (car nums))))\n          (if (> count max-count)\n              (max_occurrences_helper (cdr nums) (car nums) count)\n              (max_occurrences_helper (cdr nums) max-num max-count)))))\n  (max_occurrences_helper nums 0 0))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count (car nums) nums)))\n          (if (&gt; count max-count)\n              (max_occurrences-helper (cdr nums) (car nums) count)\n              (max_occurrences-helper (cdr nums) max-num max-count)))))\n  (max_occurrences-helper nums 0 0))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count (cdr acc))\n              (helper (cdr nums) (cons num count))\n              (helper (cdr nums) acc)))))\n  (helper nums (cons 0 0)))\n",
    "  (cond\n    [(empty? nums) '()]\n    [else (max_occurrences_helper nums (first nums) 1 (first nums) 1)]))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (cond\n      [(empty? nums) max-num]\n      [(= (count (first nums) nums) max-count)\n       (loop (rest nums) (first nums) (count (first nums) nums))]\n      [(> (count (first nums) nums) max-count)\n       (loop (rest nums) (first nums) (count (first nums) nums))]\n      [else (loop (rest nums) max-num max-count)])))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)])\n          (if (= num max-num)\n              (loop (cdr nums) max-num (+ max-count 1))\n              (if (&gt; max-count (count nums num))\n                  (loop (cdr nums) max-num max-count)\n                  (loop (cdr nums) num (count nums num))))))))\n",
    "  (define (max_occurrences_helper nums max_num max_count)\n    (if (null? nums)\n        max_num\n        (let* ([num (car nums)]\n               [count (count num nums)])\n          (if (> count max_count)\n              (max_occurrences_helper (cdr nums) num count)\n              (max_occurrences_helper (cdr nums) max_num max_count)))))\n  (max_occurrences_helper nums 0 0))\n",
    "  (define (count_occurrences nums num)\n    (if (null? nums)\n        0\n        (if (equal? (car nums) num)\n            (+ 1 (count_occurrences (cdr nums) num))\n            (count_occurrences (cdr nums) num))))\n  (define (max_occurrence nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count_occurrences nums (car nums))))\n          (if (> count max-count)\n              (max_occurrence (cdr nums) (car nums) count)\n              (max_occurrence (cdr nums) max-num max-count)))))\n  (max_occurrence nums 0 0))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (c) (cadr c)) counts))))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (f) (list (cadr f) (car f))) freqs))))\n",
    "  (define (helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (helper (rest nums) max-num (+ max-count 1))]\n      [(> max-count (count (first nums) nums)) (helper (rest nums) max-num max-count)]\n      [else (helper (rest nums) (first nums) (count (first nums) nums))]))\n  (helper nums (first nums) (count (first nums) nums)))\n",
    "  (letrec ([count (lambda (nums)\n                    (cond [(empty? nums) empty]\n                          [(member? (first nums) (rest nums))\n                           (cons (first nums) (count (rest nums)))]\n                          [else (count (rest nums))]))]\n           [max-occurrence (lambda (nums)\n                             (cond [(empty? nums) empty]\n                                   [(> (length (count (first nums)))\n                                       (length (count (max-occurrence (rest nums)))))\n                                    (first nums)]\n                                   [else (max-occurrence (rest nums))]))])\n    (max-occurrence nums)))\n",
    "  (letrec ([count (lambda (n)\n                    (length (filter (lambda (x) (= x n)) nums)))]\n            [max (lambda (nums)\n                   (if (null? (cdr nums))\n                       (car nums)\n                       (if (> (count (car nums)) (count (cadr nums)))\n                           (max (cons (car nums) (cddr nums)))\n                           (max (cdr nums)))))]\n            [max_occurrences (lambda (nums)\n                               (if (null? nums)\n                                   '()\n                                   (list (max nums))))])\n    (max_occurrences nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (define (occurrences nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (occurrences (rest nums) (cons (first nums) acc))]\n      [else (occurrences (rest nums) acc)]))\n  (define (max_occurrences_helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(> (length (occurrences nums '())) (length acc)) (max_occurrences_helper (rest nums) (occurrences nums '()))]\n      [else (max_occurrences_helper (rest nums) acc)]))\n  (max_occurrences_helper (helper nums '()) '()))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (cadr n)) counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (if (= (car nums) num)\n            (+ 1 (count-occurrences (cdr nums) num))\n            (count-occurrences (cdr nums) num))))\n  (define (max-occurrences nums max-num max-occurrences)\n    (if (null? nums)\n        max-num\n        (let ((occurrences (count-occurrences nums (car nums))))\n          (if (> occurrences max-occurrences)\n              (max-occurrences (cdr nums) (car nums) occurrences)\n              (max-occurrences (cdr nums) max-num max-occurrences)))))\n  (max-occurrences nums 0 0))\n",
    "  (letrec ([count (lambda (n nums)\n                    (cond [(empty? nums) 0]\n                          [(= n (first nums)) (+ 1 (count n (rest nums)))]\n                          [else (count n (rest nums))]))]\n           [max-count (lambda (nums)\n                        (cond [(empty? nums) 0]\n                              [else (max (count (first nums) nums)\n                                         (max-count (rest nums)))]))]\n           [max-occurrences (lambda (nums)\n                              (cond [(empty? nums) 0]\n                                    [(= (count (first nums) nums)\n                                        (max-count nums))\n                                     (first nums)]\n                                    [else (max-occurrences (rest nums))]))])\n    (max-occurrences nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-iter nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [else\n       (let* ([num (first nums)]\n              [count (count num nums)])\n         (if (> count max-count)\n             (max_occurrences-iter (rest nums) num count)\n             (max_occurrences-iter (rest nums) max-num max-count)))]))\n  (max_occurrences-iter nums 0 0))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences_helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_helper (rest nums) max-num max-count)]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (n) (cons n (count n nums))) nums)])\n    (apply max (map car counts))))\n",
    "  (let ([freqs (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) freqs))))\n",
    "  (letrec ([count (lambda (nums)\n                    (cond [(empty? nums) empty]\n                          [else (cons (cons (first nums) (count (filter (lambda (x) (= x (first nums))) (rest nums))))\n                                      (count (filter (lambda (x) (not (= x (first nums)))) (rest nums))))]))]\n           [max-count (lambda (nums)\n                        (cond [(empty? nums) 0]\n                              [(> (length (first nums)) (max-count (rest nums))) (length (first nums))]\n                              [else (max-count (rest nums))]))]\n           [max-occurrences (lambda (nums)\n                              (cond [(empty? nums) empty]\n                                    [(= (length (first nums)) (max-count (count nums))) (first nums)]\n                                    [else (max-occurrences (rest nums))]))])\n    (max-occurrences (count nums))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second freqs))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let loop ([nums nums]\n             [max-num (car nums)]\n             [max-count 0])\n    (if (null? nums)\n        max-num\n        (let ([count (count (car nums) nums)])\n          (if (&gt; count max-count)\n              (loop (cdr nums) (car nums) count)\n              (loop (cdr nums) max-num max-count))))))\n</code>\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (x) (list (second x) (first x))) counts))))\n",
    "  (define (helper nums)\n    (if (null? nums)\n        '()\n        (cons (list (car nums) (count (car nums) nums))\n              (helper (remove (car nums) nums)))))\n  (let ([max-occurrences (apply max (map (lambda (x) (cadr x)) (helper nums)))]\n        [max-occurrences-list (filter (lambda (x) (= max-occurrences (cadr x))) (helper nums))])\n    (map (lambda (x) (car x)) max-occurrences-list)))\n",
    "  (define (max-occurrences-iter nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max-occurrences-iter (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (max-occurrences-iter (rest nums) (first nums) (count (first nums) nums))]\n      [else (max-occurrences-iter (rest nums) max-num max-count)]))\n  (max-occurrences-iter nums (first nums) (count (first nums) nums)))\n",
    "  (define (count-occurrences nums num)\n    (if (empty? nums)\n        0\n        (if (= (first nums) num)\n            (+ 1 (count-occurrences (rest nums) num))\n            (count-occurrences (rest nums) num))))\n  (define (max-occurrence nums)\n    (if (empty? nums)\n        0\n        (max (count-occurrences nums (first nums))\n             (max-occurrence (rest nums)))))\n  (define (find-num nums num)\n    (if (empty? nums)\n        0\n        (if (= (first nums) num)\n            (first nums)\n            (find-num (rest nums) num))))\n  (find-num nums (max-occurrence nums)))\n",
    "  (define (count-occurrences num nums)\n    (cond ((null? nums) 0)\n          ((= num (car nums)) (+ 1 (count-occurrences num (cdr nums))))\n          (else (count-occurrences num (cdr nums)))))\n  (define (max-occurrences nums)\n    (cond ((null? nums) 0)\n          ((> (count-occurrences (car nums) nums) (max-occurrences (cdr nums)))\n           (count-occurrences (car nums) nums))\n          (else (max-occurrences (cdr nums)))))\n  (define (find-max-occurrences nums)\n    (cond ((null? nums) 0)\n          ((= (count-occurrences (car nums) nums) (max-occurrences nums))\n           (car nums))\n          (else (find-max-occurrences (cdr nums)))))\n  (find-max-occurrences nums))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (helper nums acc)\n    (cond [(empty? nums) acc]\n          [else (define num (first nums))\n                (define rest (rest nums))\n                (define count (count num rest))\n                (define max (max count (second acc)))\n                (define max-num (if (= count max) num (first acc)))\n                (helper rest (list max-num max))]))\n  (helper nums (list 0 0)))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([new-acc (if (assoc (car nums) acc)\n                           (let ([new-val (+ (cdr (assoc (car nums) acc)) 1)])\n                             (cons (cons (car nums) new-val) (remove (assoc (car nums) acc) acc)))\n                           (cons (cons (car nums) 1) acc))])\n          (helper (cdr nums) new-acc))))\n  (let ([acc (helper nums '())])\n    (let ([max-val (apply max (map cdr acc))])\n      (filter (lambda (x) (= (cdr x) max-val)) acc))))\n",
    "  (define (max_occurrences-iter nums max-num max-occurrences)\n    (cond\n      [(empty? nums) max-num]\n      [(= (count (first nums) nums) max-occurrences)\n       (max_occurrences-iter (rest nums) (first nums) max-occurrences)]\n      [(> (count (first nums) nums) max-occurrences)\n       (max_occurrences-iter (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-iter (rest nums) max-num max-occurrences)]))\n  (max_occurrences-iter nums (first nums) (count (first nums) nums)))\n",
    "  (let loop ((nums nums) (max-num 0) (max-count 0) (count 0))\n    (cond ((null? nums) max-num)\n          ((= (car nums) max-num) (loop (cdr nums) max-num (+ max-count 1) count))\n          ((> max-count count) (loop (cdr nums) (car nums) 1 (+ count 1)))\n          (else (loop (cdr nums) max-num max-count (+ count 1))))))\n",
    "  (let ((counts (map (lambda (x) (list x (count x nums))) nums)))\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (let ([max-occurrences (apply max (map length (group nums)))]\n        [max-occurrences-nums (filter (lambda (nums) (= (length nums) max-occurrences)) (group nums))])\n    (map car max-occurrences-nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) (removedup nums))])\n    (apply max (map second counts))))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (if (= (car nums) num)\n            (+ 1 (count-occurrences (cdr nums) num))\n            (count-occurrences (cdr nums) num))))\n  (define (max-occurrence nums)\n    (if (null? nums)\n        0\n        (if (> (count-occurrences nums (car nums)) (max-occurrence (cdr nums)))\n            (car nums)\n            (max-occurrence (cdr nums)))))\n  (max-occurrence nums))\n",
    "  (define (helper nums)\n    (if (null? nums)\n        '()\n        (cons (list (car nums) (count (car nums) nums))\n              (helper (remove (car nums) nums)))))\n  (define (count num nums)\n    (if (null? nums)\n        0\n        (if (= num (car nums))\n            (+ 1 (count num (cdr nums)))\n            (count num (cdr nums)))))\n  (define (remove num nums)\n    (if (null? nums)\n        '()\n        (if (= num (car nums))\n            (remove num (cdr nums))\n            (cons (car nums) (remove num (cdr nums))))))\n  (define (max_occurrences_helper nums)\n    (if (null? nums)\n        '()\n        (cons (car (car nums)) (max_occurrences_helper (cdr nums)))))\n  (max_occurrences_helper (sort (helper nums) (lambda (x y) (&gt; (cadr x) (cadr y))))))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max_occurrences_helper (rest nums) max-num (+ max-count 1))]\n      [(> max-count (count (first nums) nums)) (max_occurrences_helper (rest nums) max-num max-count)]\n      [else (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (define (max-occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max-occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (max-occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max-occurrences-helper (rest nums) max-num max-count)]))\n  (max-occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([new-acc (if (assoc (car nums) acc)\n                           (let ([new-count (+ (cdr (assoc (car nums) acc)) 1)])\n                             (cons (cons (car nums) new-count) (remove (assoc (car nums) acc) acc)))\n                           (cons (cons (car nums) 1) acc))])\n          (helper (cdr nums) new-acc))))\n  (let ([acc (helper nums '())])\n    (let ([max-count (apply max (map cdr acc))])\n      (filter (lambda (x) (= (cdr x) max-count)) acc))))\n",
    "  (define (max_occurrences_helper nums max_num max_occurrences)\n    (cond\n      [(empty? nums) max_num]\n      [(= (first nums) max_num) (max_occurrences_helper (rest nums) max_num (+ max_occurrences 1))]\n      [(> (count (first nums) nums) max_occurrences) (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_helper (rest nums) max_num max_occurrences)]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map (\u03bb (k v) v) counts))))\n",
    "  (let ([counts (map (lambda (x) (cons x (count x nums))) nums)])\n    (apply max (map car counts))))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second occurrences))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([max-occurrences (max-occurrences-helper nums)])\n    (car max-occurrences)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([new-acc (if (assoc (car nums) acc)\n                           (let ([new-count (+ 1 (cdr (assoc (car nums) acc)))])\n                             (cons (cons (car nums) new-count)\n                                   (remove (lambda (x) (equal? (car x) (car nums))) acc)))\n                           (cons (cons (car nums) 1) acc))])\n          (helper (cdr nums) new-acc))))\n  (let ([acc (helper nums '())])\n    (let ([max-count (apply max (map cdr acc))])\n      (filter (lambda (x) (equal? (cdr x) max-count)) acc))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (helper nums)\n    (cond\n      [(empty? nums) empty]\n      [else (cons (list (first nums) (count (first nums) nums)) (helper (rest nums)))]))\n  (define (count num lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? num (first lst)) (+ 1 (count num (rest lst)))]\n      [else (count num (rest lst))]))\n  (define (max_count lst)\n    (cond\n      [(empty? lst) 0]\n      [(> (second (first lst)) (max_count (rest lst))) (second (first lst))]\n      [else (max_count (rest lst))]))\n  (define (max_occurrences_helper lst)\n    (cond\n      [(empty? lst) empty]\n      [(equal? (second (first lst)) (max_count lst)) (cons (first (first lst)) (max_occurrences_helper (rest lst)))]\n      [else (max_occurrences_helper (rest lst))]))\n  (max_occurrences_helper (helper nums)))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second freqs))))\n",
    "  (define (helper nums acc)\n    (cond [(empty? nums) acc]\n          [else (helper (rest nums) (cons (list (first nums) (count (first nums) nums)) acc))]))\n  (define (count num nums)\n    (cond [(empty? nums) 0]\n          [(= num (first nums)) (+ 1 (count num (rest nums)))]\n          [else (count num (rest nums))]))\n  (define (max_count nums)\n    (cond [(empty? nums) 0]\n          [(> (second (first nums)) (max_count (rest nums))) (second (first nums))]\n          [else (max_count (rest nums))]))\n  (define (max_occurrence nums)\n    (cond [(empty? nums) 0]\n          [(= (second (first nums)) (max_count nums)) (first (first nums))]\n          [else (max_occurrence (rest nums))]))\n  (max_occurrence (helper nums '())))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (cond [(empty? nums) max-num]\n          [(= (count (first nums) nums) max-count)\n           (loop (rest nums) (first nums) (count (first nums) nums))]\n          [(> (count (first nums) nums) max-count)\n           (loop (rest nums) (first nums) (count (first nums) nums))]\n          [else (loop (rest nums) max-num max-count)])))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums 0 0))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (pair) (list (cadr pair) (car pair))) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max-occurrences-helper nums max-num max-occurrences)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max-occurrences-helper (rest nums) max-num (+ max-occurrences 1))]\n      [(> (count (first nums) nums) max-occurrences) (max-occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max-occurrences-helper (rest nums) max-num max-occurrences)]))\n  (max-occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (define (max_occurrences_iter nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((new-num (car nums))\n              (new-count (count new-num nums)))\n          (if (> new-count max-count)\n              (max_occurrences_iter (cdr nums) new-num new-count)\n              (max_occurrences_iter (cdr nums) max-num max-count)))))\n  (max_occurrences_iter nums (car nums) (count (car nums) nums)))\n",
    "  (let ([counts (hash)])\n    (for ([num nums])\n      (hash-update counts num add1 0))\n    (let ([max-count (apply max (hash-values counts))])\n      (for/first ([(num count) (in-hash counts)])\n        (when (= count max-count)\n          num)))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let loop ((nums nums) (max-occurrences 0) (max-occurrence 0))\n    (if (null? nums)\n        max-occurrence\n        (let ((occurrences (count (car nums) nums)))\n          (if (&gt; occurrences max-occurrences)\n              (loop (cdr nums) occurrences (car nums))\n              (loop (cdr nums) max-occurrences max-occurrence))))))\n</code>\n",
    "  (let ([max-occurrence (apply max (map length (group nums)))]\n        [max-occurrences (filter (lambda (x) (= (length x) max-occurrence)) (group nums))])\n    (if (= (length max-occurrences) 1)\n        (car (car max-occurrences))\n        (error \"Multiple max occurrences\"))))\n",
    "  (let ([freqs (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second freqs))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(= (count (first nums) nums) (count (first (rest nums)) nums)) (max_occurrences (rest nums))]\n    [(> (count (first nums) nums) (count (first (rest nums)) nums)) (first nums)]\n    [else (max_occurrences (rest nums))]))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([current (car nums)])\n          (if (null? acc)\n              (helper (cdr nums) (list current 1))\n              (let ([current-count (cadr acc)])\n                (if (= current (car acc))\n                    (helper (cdr nums) (list current (+ current-count 1)))\n                    (if (> current-count (cadr acc))\n                        (helper (cdr nums) (list current current-count))\n                        (helper (cdr nums) acc))))))))\n  (helper nums '()))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let ((occurrences (make-hash)))\n    (for ([n nums])\n      (hash-update occurrences n add1 0))\n    (let ((max-occurrence 0)\n          (max-occurrence-key 0))\n      (hash-for-each occurrences\n        (lambda (k v)\n          (when (> v max-occurrence)\n            (set! max-occurrence v)\n            (set! max-occurrence-key k))))\n      max-occurrence-key)))\n",
    "  (let ([counts (map (lambda (n) (count n nums)) nums)])\n    (apply max (map (lambda (n) (list n (list-ref counts n))) nums))))\n",
    "  (let ([occurrences (count-occurrences nums)])\n    (apply max (map (lambda (k v) v) occurrences))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-helper nums max-occurrences max-occurrences-num)\n    (cond\n      [(empty? nums) max-occurrences-num]\n      [(> (count (first nums) nums) max-occurrences)\n       (max_occurrences-helper (rest nums) (count (first nums) nums) (first nums))]\n      [else (max_occurrences-helper (rest nums) max-occurrences max-occurrences-num)]))\n  (max_occurrences-helper nums 0 0))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (pair) (list (cadr pair) (car pair))) counts))))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max_occurrences_helper (rest nums) max-num (+ max-count 1))]\n      [else (max_occurrences_helper (rest nums) (first nums) 1)]))\n  (max_occurrences_helper nums (first nums) 1))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ((counts (map (lambda (x) (list x (count x nums))) nums)))\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([curr (car nums)])\n          (if (assoc curr acc)\n              (helper (cdr nums) (cons (cons curr (+ 1 (cdr (assoc curr acc)))) (remove (lambda (x) (equal? (car x) curr)) acc)))\n              (helper (cdr nums) (cons (cons curr 1) acc))))))\n  (let ([acc (helper nums '())])\n    (let ([max-count (apply max (map cdr acc))])\n      (filter (lambda (x) (equal? (cdr x) max-count)) acc))))\n",
    "  (define (max_occurrences_iter nums max-num max-occurrences)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [occurrences (count num nums)])\n          (if (&gt; occurrences max-occurrences)\n              (max_occurrences_iter (cdr nums) num occurrences)\n              (max_occurrences_iter (cdr nums) max-num max-occurrences)))))\n  (max_occurrences_iter nums 0 0))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max occurrences)))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([num (car nums)])\n          (if (assoc num acc)\n              (helper (cdr nums) (cons (cons num (+ 1 (cdr (assoc num acc)))) (remove (assoc num acc) acc)))\n              (helper (cdr nums) (cons (cons num 1) acc))))))\n  (let ([acc (helper nums '())])\n    (let ([max (apply max (map cdr acc))])\n      (filter (lambda (x) (= (cdr x) max)) acc))))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([new-acc (if (assoc (car nums) acc)\n                           (let ([new-val (+ (cdr (assoc (car nums) acc)) 1)])\n                             (cons (cons (car nums) new-val) (assoc-remove acc (car nums))))\n                           (cons (cons (car nums) 1) acc))])\n          (helper (cdr nums) new-acc))))\n  (let ([acc (helper nums '())])\n    (let ([max-val (apply max (map cdr acc))])\n      (filter (lambda (x) (= (cdr x) max-val)) acc))))\n",
    "  (define (helper nums max-count max-num)\n    (if (null? nums)\n        max-num\n        (let ((count (count (car nums) nums)))\n          (if (> count max-count)\n              (helper (cdr nums) count (car nums))\n              (helper (cdr nums) max-count max-num)))))\n  (helper nums 0 0))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences-helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences-helper (rest nums) max-num max-count)]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (car n) (cadr n))) counts))))\n",
    "  (let ([occurrences (make-hash)])\n    (for ([num nums])\n      (hash-update occurrences num add1 0))\n    (hash-ref occurrences (apply max (hash-keys occurrences)))))\n",
    "  (define (max_occurrences-helper nums max-occurrences max-occurrences-num)\n    (cond ((null? nums) max-occurrences-num)\n          ((= (count (car nums) nums) max-occurrences)\n           (max_occurrences-helper (cdr nums) max-occurrences (car nums)))\n          ((&gt; (count (car nums) nums) max-occurrences)\n           (max_occurrences-helper (cdr nums) (count (car nums) nums) (car nums)))\n          (else (max_occurrences-helper (cdr nums) max-occurrences max-occurrences-num))))\n  (max_occurrences-helper nums 0 0))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (+ (if (= (car nums) num) 1 0)\n           (count-occurrences (cdr nums) num))))\n  (define (max-occurrences nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count-occurrences nums (car nums))))\n          (if (> count max-count)\n              (max-occurrences (cdr nums) (car nums) count)\n              (max-occurrences (cdr nums) max-num max-count)))))\n  (max-occurrences nums 0 0))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [else\n       (let ([num (first nums)])\n         (cond\n           [(= num max-num)\n            (max_occurrences_helper (rest nums) max-num (+ max-count 1))]\n           [else\n            (max_occurrences_helper (rest nums) num 1)]))]))\n  (max_occurrences_helper nums 0 0))\n",
    "  (define (max_occurrences-helper nums acc)\n    (if (null? nums)\n        acc\n        (let ([num (car nums)])\n          (if (null? acc)\n              (max_occurrences-helper (cdr nums) (list num 1))\n              (let ([acc-num (car acc)]\n                    [acc-count (cadr acc)])\n                (if (= num acc-num)\n                    (max_occurrences-helper (cdr nums) (list acc-num (+ acc-count 1)))\n                    (if (> acc-count (cadr (max_occurrences-helper (cdr nums) (list num 1))))\n                        acc\n                        (max_occurrences-helper (cdr nums) (list num 1)))))))))\n  (max_occurrences-helper nums '()))\n",
    "  (define (occurrences nums num)\n    (cond\n      [(empty? nums) 0]\n      [(= (first nums) num) (+ 1 (occurrences (rest nums) num))]\n      [else (occurrences (rest nums) num)]))\n  (define (max_occurrences_helper nums max-num max-occurrences)\n    (cond\n      [(empty? nums) max-num]\n      [(> (occurrences nums (first nums)) max-occurrences)\n       (max_occurrences_helper (rest nums) (first nums) (occurrences nums (first nums)))]\n      [else (max_occurrences_helper (rest nums) max-num max-occurrences)]))\n  (max_occurrences_helper nums (first nums) (occurrences nums (first nums))))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (loop (cdr nums) num count)\n              (loop (cdr nums) max-num max-count))))))\n",
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map car counts))))\n",
    "  (let ([occurrences (make-hash)])\n    (for ([n nums])\n      (hash-update! occurrences n add1 0))\n    (let ([max-occurrence (apply max (hash-values occurrences))])\n      (hash-ref occurrences max-occurrence))))\n",
    "  (let ([counts (map (lambda (n) (count n nums)) nums)])\n    (apply max (map (lambda (n) (list n (list-ref counts n))) nums))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)]\n        [max-count (apply max (map second counts))])\n    (filter (lambda (pair) (= max-count (second pair))) counts)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (max_occurrences-helper (rest nums) max-num (+ max-count 1))]\n      [else (max_occurrences-helper (rest nums) (first nums) 1)]))\n  (max_occurrences-helper nums (first nums) 1))\n",
    "  (let ([max-occurrence (max-key occurrences nums)])\n    (list max-occurrence (occurrences max-occurrence nums))))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num)\n       (max_occurrences_helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count)\n       (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_helper (rest nums) max-num max-count)]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (define (max-occurrences-helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (max-occurrences-helper (cdr nums) num count)\n              (max-occurrences-helper (cdr nums) max-num max-count)))))\n  (max-occurrences-helper nums (car nums) (count (car nums) nums)))\n",
    "  (let loop ([nums nums] [max-occurrences 0] [max-occurrences-num 0])\n    (cond [(empty? nums) max-occurrences-num]\n          [else (let ([num (first nums)]\n                      [occurrences (count num nums)])\n                  (if (> occurrences max-occurrences)\n                      (loop (rest nums) occurrences num)\n                      (loop (rest nums) max-occurrences max-occurrences-num)))])))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (c) (list (cadr c) (car c))) counts))))\n",
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map second counts))))\n",
    "  (let loop ([nums nums]\n             [max-occurrences 0]\n             [max-occurrences-num 0])\n    (cond [(empty? nums) max-occurrences-num]\n          [else\n           (let* ([num (first nums)]\n                  [occurrences (count num nums)])\n             (if (> occurrences max-occurrences)\n                 (loop (rest nums) occurrences num)\n                 (loop (rest nums) max-occurrences max-occurrences-num)))])))\n",
    "  (let ([counts (map (lambda (num) (list num (count num nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map second freqs))))\n",
    "  (define (helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [(= (first nums) max-num) (helper (rest nums) max-num (+ max-count 1))]\n      [(> (count (first nums) nums) max-count) (helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (helper (rest nums) max-num max-count)]))\n  (helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (if (empty? nums)\n        max-num\n        (let ([num (first nums)])\n          (if (= num max-num)\n              (loop (rest nums) max-num (+ max-count 1))\n              (loop (rest nums) num 1))))))\n",
    "  (let ([max-num (apply max nums)]\n        [max-count 0])\n    (for ([n nums])\n      (let ([count (count n nums)])\n        (when (&gt; count max-count)\n          (set! max-num n)\n          (set! max-count count))))\n    max-num))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (x) (list (cadr x) (car x))) counts))))\n",
    "  (let loop ([nums nums] [max-num 0] [max-count 0])\n    (cond [(empty? nums) max-num]\n          [(= (count (first nums) nums) max-count)\n           (loop (rest nums) (first nums) (count (first nums) nums))]\n          [(> (count (first nums) nums) max-count)\n           (loop (rest nums) (first nums) (count (first nums) nums))]\n          [else (loop (rest nums) max-num max-count)])))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (count num)\n    (length (filter (lambda (x) (= x num)) nums)))\n  (define (max_occurrence nums)\n    (cond\n      [(empty? nums) (error \"Empty list\")]\n      [(= (length nums) 1) (first nums)]\n      [else (if (> (count (first nums)) (count (first (rest nums))))\n                (first nums)\n                (max_occurrence (rest nums)))]))\n  (max_occurrence nums))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ((new-acc (if (assoc (car nums) acc)\n                           (let ((old-count (cdr (assoc (car nums) acc))))\n                             (cons (cons (car nums) (+ 1 old-count))\n                                   (remove (assoc (car nums) acc) acc)))\n                           (cons (cons (car nums) 1) acc))))\n          (helper (cdr nums) new-acc))))\n  (let ((acc (helper nums '())))\n    (let ((max-count (apply max (map cdr acc))))\n      (filter (lambda (pair) (= max-count (cdr pair))) acc))))\n",
    "  (let ([counts (for/hash ([num nums])\n                  (hash-ref (hash-ref counts num 0) + 1))])\n    (for/first ([(num count) counts])\n      (if (> count (hash-ref counts num 0))\n          num\n          (max_occurrences nums)))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (let ((curr (car nums)))\n          (if (assoc curr acc)\n              (helper (cdr nums) (cons (cons curr (+ 1 (cdr (assoc curr acc)))) (remove (lambda (x) (equal? curr (car x))) acc)))\n              (helper (cdr nums) (cons (cons curr 1) acc))))))\n  (let ((acc (helper nums '())))\n    (let ((max (apply max (map cdr acc))))\n      (filter (lambda (x) (equal? max (cdr x))) acc))))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map (lambda (n) (cadr n)) freqs))))\n",
    "  (let ([occurrences (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second occurrences))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (if (= (car nums) num)\n            (+ 1 (count-occurrences (cdr nums) num))\n            (count-occurrences (cdr nums) num))))\n  (define (max-occurrence nums)\n    (if (null? nums)\n        0\n        (if (> (count-occurrences nums (car nums)) (max-occurrence (cdr nums)))\n            (car nums)\n            (max-occurrence (cdr nums)))))\n  (max-occurrence nums))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) (remove-duplicates nums))])\n    (apply max (map second occurrences))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (cadr n)) counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ((counts (map (lambda (x) (list x (count x nums))) nums)))\n    (apply max (map (lambda (x) (cadr x)) counts))))\n",
    "  (define (helper nums)\n    (if (null? nums)\n        '()\n        (cons (list (car nums) (count (car nums) nums))\n              (helper (remove (car nums) nums)))))\n  (apply max (map second (helper nums))))\n",
    "  (let ([freqs (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map second freqs))))\n",
    "  (define (max_occurrences_helper nums max)\n    (cond\n      [(empty? nums) max]\n      [(= (length (filter (lambda (x) (= x (first nums))) nums)) (length (filter (lambda (x) (= x max)) nums))) (max_occurrences_helper (rest nums) (first nums))]\n      [else (max_occurrences_helper (rest nums) max)]))\n  (max_occurrences_helper nums (first nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let ([occurrences (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second occurrences))))\n",
    "  (letrec ([count (lambda (n nums)\n                    (if (null? nums)\n                        0\n                        (+ (if (equal? n (car nums))\n                               1\n                               0)\n                           (count n (cdr nums)))))])\n    (letrec ([max (lambda (nums)\n                    (if (null? nums)\n                        0\n                        (max-of (count (car nums) nums)\n                                (max (cdr nums)))))]\n             [max-of (lambda (a b)\n                       (if (&gt; a b)\n                           a\n                           b))])\n      (max nums))))\n"
  ]
}