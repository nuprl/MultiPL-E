{
  "name": "mbpp_130_max_occurrences",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the item with maximum frequency in a given list.\n(define (max_occurrences nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_occurrences))\n    (check-equal? (candidate (list 2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2)) 2)\n    (check-equal? (candidate (list 2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18)) 8)\n    (check-equal? (candidate (list 10 20 20 30 40 90 80 50 30 20 50 10)) 20)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences_helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (max_occurrences_helper (cdr nums) num count)\n              (max_occurrences_helper (cdr nums) max-num max-count)))))\n  (max_occurrences_helper nums (car nums) (count (car nums) nums)))\n",
    "  (define (helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (helper (cdr nums) num count)\n              (helper (cdr nums) max-num max-count)))))\n  (helper nums (car nums) (count (car nums) nums)))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (let ((freqs (list->hash (map (lambda (x) (cons x (count x nums))) nums))))\n    (hash-ref freqs (hash-keys freqs) (lambda (a b) (> (hash-ref freqs a) (hash-ref freqs b))))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ([num (car nums)]\n              [count (count num nums)])\n          (if (> count max-count)\n              (max_occurrences-helper (cdr nums) num count)\n              (max_occurrences-helper (cdr nums) max-num max-count)))))\n  (max_occurrences-helper nums (car nums) (count (car nums) nums)))\n",
    "  (let ([freq-table (make-hash)])\n    (for ([num nums])\n      (hash-update! freq-table num add1 0))\n    (let ([max-freq (apply max (hash-values freq-table))])\n      (hash-ref freq-table max-freq))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (c) (list (cadr c) (car c))) counts))))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) (remove-duplicates nums))])\n    (apply max (map second counts))))\n",
    "  (let ([counts (map (lambda (x) (list x (count x nums))) nums)])\n    (apply max (map second counts))))\n",
    "  (letrec ([count (lambda (n nums)\n                    (if (null? nums)\n                        0\n                        (+ (if (= n (car nums)) 1 0)\n                           (count n (cdr nums)))))])\n    (letrec ([max-count (lambda (nums)\n                          (if (null? nums)\n                              0\n                              (max (count (car nums) nums)\n                                   (max-count (cdr nums)))))])\n      (letrec ([max-count-item (lambda (nums)\n                                 (if (null? nums)\n                                     0\n                                     (if (= (count (car nums) nums)\n                                            (max-count nums))\n                                         (car nums)\n                                         (max-count-item (cdr nums))))])\n        (max-count-item nums)))))\n",
    "  (define (max_occurrences-helper nums max-num max-count)\n    (cond\n      [(empty? nums) max-num]\n      [else\n       (define count (count (first nums) nums))\n       (if (> count max-count)\n           (max_occurrences-helper (rest nums) (first nums) count)\n           (max_occurrences-helper (rest nums) max-num max-count))]))\n  (max_occurrences-helper nums (first nums) (count (first nums) nums)))\n",
    "  (define (max-occurrences-helper nums)\n    (if (null? nums)\n        '()\n        (cons (list (car nums) (count (car nums) nums))\n              (max-occurrences-helper (cdr nums)))))\n  (define (count num lst)\n    (if (null? lst)\n        0\n        (+ (if (equal? num (car lst)) 1 0)\n           (count num (cdr lst)))))\n  (define (max-occurrences-helper2 lst)\n    (if (null? lst)\n        '()\n        (cons (car (car lst))\n              (max-occurrences-helper2 (cdr lst)))))\n  (define (max-occurrences-helper3 lst)\n    (if (null? lst)\n        '()\n        (cons (cdr (car lst))\n              (max-occurrences-helper3 (cdr lst)))))\n  (define (max-occurrences-helper4 lst)\n    (if (null? lst)\n        '()\n        (cons (max (car lst) (car (cdr lst)))\n              (max-occurrences-helper4 (cdr (cdr lst))))))\n  (define (max-occurrences-helper5 lst)\n    (if (null? lst)\n        '()\n        (cons (car lst)\n              (max-occurrences-helper5 (cdr lst)))))\n  (define (max-occurrences-helper6 lst)\n    (if (null? lst)\n        '()\n        (cons (cdr lst)\n              (max-occurrences-helper6 (cdr lst)))))\n  (define (max-occurrences-helper7 lst)\n    (if (null? lst)\n        '()\n        (cons (max (car lst) (car (cdr lst)))\n              (max-occurrences-helper7 (cdr (cdr lst))))))\n  (define (",
    "  (define (max_occurrences_helper nums max_num max_count)\n    (cond\n      [(empty? nums) max_num]\n      [(= (first nums) max_num)\n       (max_occurrences_helper (rest nums) max_num (+ max_count 1))]\n      [(> (count (first nums) nums) max_count)\n       (max_occurrences_helper (rest nums) (first nums) (count (first nums) nums))]\n      [else (max_occurrences_helper (rest nums) max_num max_count)]))\n  (max_occurrences_helper nums (first nums) (count (first nums) nums)))\n",
    "  (let ([counts (map (lambda (n) (list n (count n nums))) nums)])\n    (apply max (map (lambda (n) (list (cadr n) (car n))) counts))))\n",
    "  (let ([counts (count-occurrences nums)])\n    (apply max (map (lambda (x) (cdr x)) counts))))\n",
    "  (define (count-occurrences nums num)\n    (if (null? nums)\n        0\n        (+ (if (= (car nums) num) 1 0)\n           (count-occurrences (cdr nums) num))))\n  (define (max-occurrences nums max-num max-count)\n    (if (null? nums)\n        max-num\n        (let ((count (count-occurrences nums (car nums))))\n          (if (> count max-count)\n              (max-occurrences (cdr nums) (car nums) count)\n              (max-occurrences (cdr nums) max-num max-count)))))\n  (max-occurrences nums 0 0))\n"
  ]
}