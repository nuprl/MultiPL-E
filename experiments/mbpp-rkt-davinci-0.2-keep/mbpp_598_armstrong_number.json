{
  "name": "mbpp_598_armstrong_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong-helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong-helper number 0))\n",
    "  (define (power number power)\n    (if (= power 1)\n        number\n        (* number (power number (- power 1)))))\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (modulo number 10) (sum-of-digits (quotient number 10)))))\n  (define (armstrong-number? number)\n    (= number (sum-of-digits (power number (length (number->string number))))))\n  (armstrong-number? number))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= sum number))\n          (else (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient number 10))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-to-power-of-number-of-digits number)\n    (define (sum-of-digits-to-power-of-number-of-digits-iter number sum)\n      (cond ((zero? number) sum)\n            (else (sum-of-digits-to-power-of-number-of-digits-iter (quotient number 10)\n                                                                   (+ sum (expt (remainder number 10)\n                                                                                (number-of-digits number)))))))\n    (sum-of-digits-to-power-of-number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-power-of-number-of-digits number)))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (&lt; number 10)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ (* (remainder number 10) (remainder number 10) (remainder number 10)) sum))))\n  (armstrong_number_iter number 0))\n",
    "  (let ([digits (string->list (number->string number))])\n    (equal? number (apply + (map (lambda (digit) (expt (string->number (char->string digit)) (length digits))) digits)))))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (= number (sum-of-cubes-of-digits number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n"
  ]
}