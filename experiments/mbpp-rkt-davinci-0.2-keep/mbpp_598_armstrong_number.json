{
  "name": "mbpp_598_armstrong_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-equal? (candidate 153) #t)\n    (check-equal? (candidate 259) #f)\n    (check-equal? (candidate 4458) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong-helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong-helper number 0))\n",
    "  (define (power number power)\n    (if (= power 1)\n        number\n        (* number (power number (- power 1)))))\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (modulo number 10) (sum-of-digits (quotient number 10)))))\n  (define (armstrong-number? number)\n    (= number (sum-of-digits (power number (length (number->string number))))))\n  (armstrong-number? number))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= sum number))\n          (else (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient number 10))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-to-power-of-number-of-digits number)\n    (define (sum-of-digits-to-power-of-number-of-digits-iter number sum)\n      (cond ((zero? number) sum)\n            (else (sum-of-digits-to-power-of-number-of-digits-iter (quotient number 10)\n                                                                   (+ sum (expt (remainder number 10)\n                                                                                (number-of-digits number)))))))\n    (sum-of-digits-to-power-of-number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-power-of-number-of-digits number)))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (&lt; number 10)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ (* (remainder number 10) (remainder number 10) (remainder number 10)) sum))))\n  (armstrong_number_iter number 0))\n",
    "  (let ([digits (string->list (number->string number))])\n    (equal? number (apply + (map (lambda (digit) (expt (string->number (char->string digit)) (length digits))) digits)))))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (= number (sum-of-cubes-of-digits number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (= number (sum-of-digits-cubes number)))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (cond ((= number 0) 0)\n          (else (+ (expt (remainder number 10) power)\n                   (sum-of-digits-raised-to-power (quotient number 10) power)))))\n  (define (number-of-digits number)\n    (cond ((= number 0) 0)\n          (else (+ 1 (number-of-digits (quotient number 10))))))\n  (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      \"Armstrong\"\n      \"Not Armstrong\"))\n",
    "  (define (sum-of-digits-to-power-of-number-of-digits number)\n    (define (sum-of-digits-to-power-of-number-of-digits-iter number sum)\n      (if (zero? number)\n          sum\n          (sum-of-digits-to-power-of-number-of-digits-iter (quotient number 10)\n                                                           (+ sum (expt (remainder number 10)\n                                                                        (number-of-digits number))))))\n    (sum-of-digits-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (if (zero? number)\n          count\n          (number-of-digits-iter (quotient number 10)\n                                 (+ count 1))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-power-of-number-of-digits number)))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (power x y)\n    (if (= y 0)\n        1\n        (* x (power x (- y 1)))))\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10) (sum-of-digits (quotient number 10)))))\n  (if (= number (power (sum-of-digits number) (number-of-digits number)))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) power)\n               (sum-of-digits-raised-to-power (quotient number 10) power))]))\n  (define (number-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (armstrong? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ (* (remainder number 10) (remainder number 10) (remainder number 10)) sum))))\n  (armstrong_number_helper number 0))\n",
    "  (let loop ((number number) (sum 0) (digits 0))\n    (cond ((= number 0) (= sum number))\n          (else (loop (quotient number 10)\n                      (+ sum (expt (remainder number 10) digits))\n                      (+ digits 1))))))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ sum (* (expt (remainder number 10) 3)\n                                                 (expt 10 (quotient (log number 10) 1))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= number sum)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) power)\n               (sum-of-digits-raised-to-power (quotient number 10) power))]))\n  (define (number-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (armstrong? number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (armstrong? number))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      number\n      0))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (= number (sum-of-digits-to-the-power-of-3 number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10)\n                                 (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      \"Armstrong\"\n      \"Not Armstrong\"))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits_to_power_of_digits_count number)\n    (define (sum_of_digits_to_power_of_digits_count_iter number sum)\n      (if (&lt; number 10)\n          (+ sum (expt number (length (number-&gt;string number))))\n          (sum_of_digits_to_power_of_digits_count_iter (quotient number 10) (+ sum (expt (remainder number 10) (length (number-&gt;string number)))))))\n    (sum_of_digits_to_power_of_digits_count_iter number 0))\n  (if (= number (sum_of_digits_to_power_of_digits_count number))\n      true\n      false))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong-helper number sum)\n    (if (zero? number)\n        (equal? sum number)\n        (armstrong-helper (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong-helper number 0))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (if (= number (power-of-digits number))\n      (display \"Armstrong Number\")\n      (display \"Not an Armstrong Number\")))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (number-of-digits number) 1))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (let ([digits (string->list (number->string number))])\n    (= number (apply + (map (lambda (digit) (expt (string->number (char->string digit)) (length digits))) digits)))))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (if (= number (power-of-digits number))\n      (display \"Armstrong Number\")\n      (display \"Not an Armstrong Number\")))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (sub1 (length (number->string number)))))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (equal? number sum)\n        (armstrong_number_iter (quotient number 10) (+ (* (remainder number 10) (remainder number 10) (remainder number 10)) sum))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= (sum_of_digits_cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits-to-the-power-of-number-of-digits-iter number sum)\n      (if (zero? number)\n          sum\n          (sum-of-digits-to-the-power-of-number-of-digits-iter (quotient number 10)\n                                                               (+ sum (expt (remainder number 10)\n                                                                            (number-of-digits number))))))\n    (sum-of-digits-to-the-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (if (zero? number)\n          count\n          (number-of-digits-iter (quotient number 10)\n                                 (+ count 1))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-the-power-of-number-of-digits number)))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-to-power-of-number-of-digits number)\n    (define (sum-of-digits-to-power-of-number-of-digits-iter number sum-of-digits-to-power-of-number-of-digits)\n      (cond ((= number 0) sum-of-digits-to-power-of-number-of-digits)\n            (else (sum-of-digits-to-power-of-number-of-digits-iter (quotient number 10) (+ sum-of-digits-to-power-of-number-of-digits (expt (remainder number 10) (number-of-digits number)))))))\n    (sum-of-digits-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number number-of-digits)\n      (cond ((= number 0) number-of-digits)\n            (else (number-of-digits-iter (quotient number 10) (+ number-of-digits 1)))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-power-of-number-of-digits number)))\n",
    "  (define (sum-of-digits-raised-to-power-of-number-of-digits number)\n    (define (sum-of-digits-raised-to-power-of-number-of-digits-iter number sum)\n      (cond ((= number 0) sum)\n            (else (sum-of-digits-raised-to-power-of-number-of-digits-iter\n                   (quotient number 10)\n                   (+ sum (expt (remainder number 10)\n                                (number-of-digits number)))))))\n    (sum-of-digits-raised-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (cond ((= number 0) count)\n            (else (number-of-digits-iter (quotient number 10)\n                                         (+ count 1)))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-raised-to-power-of-number-of-digits number)))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (let loop ((number number)\n             (sum 0)\n             (digits 0))\n    (cond ((= number 0) (= sum number))\n          (else (loop (quotient number 10)\n                      (+ sum (expt (remainder number 10) digits))\n                      (+ digits 1))))))\n",
    "  (define (armstrong_number-helper number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))]))\n  (armstrong_number-helper number 0))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (power n p)\n    (if (= p 0)\n        1\n        (* n (power n (- p 1)))))\n  (define (sum-of-digits n)\n    (if (= n 0)\n        0\n        (+ (remainder n 10) (sum-of-digits (quotient n 10)))))\n  (define (num-of-digits n)\n    (if (= n 0)\n        0\n        (+ 1 (num-of-digits (quotient n 10)))))\n  (define (armstrong? n)\n    (= n (sum-of-digits (power n (num-of-digits n)))))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (= number (sum-of-digits-cubes number)))\n",
    "  (let ([digits (string->list (number->string number))])\n    (let loop ([digits digits] [sum 0])\n      (cond [(empty? digits) (= sum number)]\n            [else (loop (rest digits) (+ sum (expt (car digits) (length digits))))]))))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) 3)\n               (sum-of-digits-cubes (quotient number 10)))]))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number-helper number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))]))\n  (armstrong_number-helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-raised-to-the-power-of-number-of-digits number)\n    (if (&lt; number 10)\n        (expt number (number-of-digits number))\n        (+ (expt (modulo number 10) (number-of-digits number))\n           (sum-of-digits-raised-to-the-power-of-number-of-digits (quotient number 10)))))\n  (if (= number (sum-of-digits-raised-to-the-power-of-number-of-digits number))\n      number\n      false))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (= number (sum-of-digits-to-the-power-of-3 number)))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number_helper (quotient number 10) (+ sum (expt (remainder number 10) 3)))]))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (if (= (sum-of-digits number)\n           (power-of-digits number))\n        #t\n        #f))\n  (armstrong? number))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= (sum-of-cubes-of-digits number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= number (sum-of-digits-cubed number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power-of-number-of-digits number)\n    (define (sum-of-digits-raised-to-power-of-number-of-digits-iter number sum)\n      (if (&lt; number 10)\n          (+ sum (expt number (number-of-digits number)))\n          (sum-of-digits-raised-to-power-of-number-of-digits-iter (quotient number 10) (+ sum (expt (remainder number 10) (number-of-digits number))))))\n    (sum-of-digits-raised-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (if (&lt; number 10)\n          count\n          (number-of-digits-iter (quotient number 10) (+ count 1))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-raised-to-power-of-number-of-digits number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10)))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= number (sum-of-cubes-of-digits number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (= number 0)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (power number power)\n    (if (= power 0)\n        1\n        (* number (power number (- power 1)))))\n  (= number (sum-of-digits number (number-of-digits number))))\n",
    "  (define (power x n)\n    (if (= n 0)\n        1\n        (* x (power x (- n 1)))))\n  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10) (sum-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (= number 0)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (if (= number (sum-of-digits number (number-of-digits number)))\n      #t\n      #f))\n",
    "  (define (sum-of-digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= number (power-of-digits number)))\n  (armstrong? number))\n",
    "  (define (sum-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10)\n           (sum-digits (quotient number 10)))))\n  (define (power-digits number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (power-digits (quotient number 10)))))\n  (if (= (sum-digits number) (power-digits number))\n      true\n      false))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= (sum-of-digits-to-the-power-of-3 number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (log number 10) 1))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      true\n      false))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubed number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubed (quotient number 10)))))\n  (if (= (sum-of-digits-cubed number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits number)\n    (cond [(zero? number) 0]\n          [else (+ (remainder number 10)\n                   (sum-of-digits (quotient number 10)))]))\n  (define (number-of-digits number)\n    (cond [(zero? number) 0]\n          [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (power-of-digits number)\n    (cond [(zero? number) 0]\n          [else (+ (expt (remainder number 10)\n                        (number-of-digits number))\n                   (power-of-digits (quotient number 10)))]))\n  (= (power-of-digits number)\n     (sum-of-digits number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (let loop ([number number] [sum 0] [digits 0])\n    (if (&lt; number 10)\n        (= number (expt sum digits))\n        (loop (quotient number 10)\n              (+ sum (expt (remainder number 10) digits))\n              (+ digits 1)))))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient (number-of-digits number) 1))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (cond\n      [(zero? number) 0]\n      [else (+ (expt (remainder number 10) power)\n               (sum-of-digits-raised-to-power (quotient number 10) power))]))\n  (define (number-of-digits number)\n    (cond\n      [(zero? number) 0]\n      [else (+ 1 (number-of-digits (quotient number 10)))]))\n  (define (is-armstrong number)\n    (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n  (is-armstrong number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10)\n                                 (+ sum (* (expt (remainder number 10) 3)\n                                          (expt (remainder number 10) 3)\n                                          (expt (remainder number 10) 3))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-raised-to-power number power)\n    (cond ((= number 0) 0)\n          (else (+ (expt (modulo number 10) power)\n                   (sum-of-digits-raised-to-power (quotient number 10) power)))))\n  (define (number-of-digits number)\n    (cond ((= number 0) 0)\n          (else (+ 1 (number-of-digits (quotient number 10))))))\n  (= number (sum-of-digits-raised-to-power number (number-of-digits number))))\n",
    "  (define (sum-of-digits number)\n    (if (= number 0)\n        0\n        (+ (remainder number 10)\n           (sum-of-digits (quotient number 10)))))\n  (define (power-of-digits number)\n    (if (= number 0)\n        1\n        (* (remainder number 10)\n           (power-of-digits (quotient number 10)))))\n  (= number (power-of-digits (sum-of-digits number))))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum_of_digits (quotient number 10)))))\n  (define (power number power)\n    (if (zero? power)\n        1\n        (* number (power number (- power 1)))))\n  (define (number_of_digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number_of_digits (quotient number 10)))))\n  (define (armstrong? number)\n    (if (zero? number)\n        #t\n        (if (= (power (remainder number 10) (number_of_digits number))\n               (sum_of_digits number))\n            (armstrong? (quotient number 10))\n            #f)))\n  (armstrong? number))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (equal? number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (&lt; number 10)\n        (expt number 3)\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number-helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number-helper (quotient number 10)\n                                 (+ sum (* (expt (remainder number 10) 3)\n                                           (expt 10 (quotient (length (number->string number)) 1))))))\n  (armstrong_number-helper number 0))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits number)\n    (if (zero? number)\n        0\n        (+ (remainder number 10)\n           (sum_of_digits (quotient number 10)))))\n  (define (power_of_digits number)\n    (if (zero? number)\n        1\n        (* (remainder number 10)\n           (power_of_digits (quotient number 10)))))\n  (define (number_of_digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number_of_digits (quotient number 10)))))\n  (define (armstrong? number)\n    (= (expt (sum_of_digits number)\n             (number_of_digits number))\n       (power_of_digits number)))\n  (armstrong? number))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond\n      [(zero? number) (= number sum)]\n      [else (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))]))\n  (armstrong_number_iter number 0))\n",
    "  (let* ([digits (string->list (number->string number))]\n         [length (length digits)])\n    (= number (apply + (map (lambda (digit) (expt digit length)) digits)))))\n",
    "  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits number)\n      (if (= number 0)\n          0\n          (+ (remainder number 10)\n             (sum-of-digits (quotient number 10)))))\n    (define (number-of-digits number)\n      (if (= number 0)\n          0\n          (+ 1 (number-of-digits (quotient number 10)))))\n    (define (power number power)\n      (if (= power 0)\n          1\n          (* number (power number (- power 1)))))\n    (power (sum-of-digits number) (number-of-digits number)))\n  (if (= number (sum-of-digits-to-the-power-of-number-of-digits number))\n      number\n      0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (cond ((= number 0) (= number sum))\n          (else (armstrong_number_iter (quotient number 10)\n                                       (+ sum (* (expt (remainder number 10) 3)\n                                                 (expt 10 (quotient (length number) 1))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= sum number)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      true\n      false))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (equal? number sum)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (if (= number sum)\n            #t\n            #f)\n        (armstrong_number_iter (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (sub1 (length (number->string number)))))))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum_of_digits_cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum_of_digits_cubes (quotient number 10)))))\n  (if (= number (sum_of_digits_cubes number))\n      #t\n      #f))\n",
    "  (define (sum_of_digits_cubes number)\n    (cond\n      [(= number 0) 0]\n      [else (+ (expt (remainder number 10) 3)\n               (sum_of_digits_cubes (quotient number 10)))]))\n  (= number (sum_of_digits_cubes number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (sum-of-digits-raised-to-power-of-number-of-digits number)\n    (define (sum-of-digits-raised-to-power-of-number-of-digits-iter number sum)\n      (if (zero? number)\n          sum\n          (sum-of-digits-raised-to-power-of-number-of-digits-iter (quotient number 10) (+ sum (expt (remainder number 10) (number-of-digits number))))))\n    (sum-of-digits-raised-to-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (if (zero? number)\n          count\n          (number-of-digits-iter (quotient number 10) (+ count 1))))\n    (number-of-digits-iter number 0))\n  (if (= number (sum-of-digits-raised-to-power-of-number-of-digits number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (cond ((= number 0) sum)\n          (else (armstrong_number_helper (quotient number 10)\n                                         (+ sum (* (expt (remainder number 10) 3)\n                                                   (expt 10 (quotient number 10))))))))\n  (if (= number (armstrong_number_helper number 0))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= (sum-of-digits-cubes number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (zero? number)\n        (equal? number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_helper number 0))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10) (+ (* (remainder number 10) (remainder number 10) (remainder number 10)) sum))))\n  (armstrong_number_iter number 0))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits-to-the-power-of-number-of-digits-iter number sum)\n      (cond ((= number 0) sum)\n            (else (sum-of-digits-to-the-power-of-number-of-digits-iter (quotient number 10) (+ sum (expt (remainder number 10) (number-of-digits number)))))))\n    (sum-of-digits-to-the-power-of-number-of-digits-iter number 0))\n  (define (number-of-digits number)\n    (define (number-of-digits-iter number count)\n      (cond ((= number 0) count)\n            (else (number-of-digits-iter (quotient number 10) (+ count 1)))))\n    (number-of-digits-iter number 0))\n  (= number (sum-of-digits-to-the-power-of-number-of-digits number)))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_iter number sum)\n    (if (zero? number)\n        (= number sum)\n        (armstrong_number_iter (quotient number 10)\n                               (+ sum (expt (remainder number 10) 3)))))\n  (armstrong_number_iter number 0))\n",
    "  (define (sum-of-digits-to-the-power-of-3 number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-to-the-power-of-3 (quotient number 10)))))\n  (if (= number (sum-of-digits-to-the-power-of-3 number))\n      #t\n      #f))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (= number 0)\n        (= sum number)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (expt 10 (quotient number 10)))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-to-the-power-of-number-of-digits number)\n    (define (sum-of-digits-to-the-power-of number power)\n      (if (zero? number)\n          0\n          (+ (expt (remainder number 10) power)\n             (sum-of-digits-to-the-power-of (quotient number 10) power))))\n    (sum-of-digits-to-the-power-of number (number-of-digits number)))\n  (define (number-of-digits number)\n    (if (zero? number)\n        0\n        (+ 1 (number-of-digits (quotient number 10)))))\n  (= number (sum-of-digits-to-the-power-of-number-of-digits number)))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (modulo number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (= number (sum-of-cubes-of-digits number)))\n",
    "  (define (armstrong_number_helper number sum)\n    (if (&lt; number 10)\n        (= number sum)\n        (armstrong_number_helper (quotient number 10) (+ sum (* (remainder number 10) (expt 10 (length (number-&gt;string number))))))))\n  (armstrong_number_helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n",
    "  (define (sum-of-cubes-of-digits number)\n    (if (zero? number)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-cubes-of-digits (quotient number 10)))))\n  (if (= (sum-of-cubes-of-digits number) number)\n      #t\n      #f))\n",
    "  (define (armstrong_number-helper number sum)\n    (if (= number 0)\n        (= number sum)\n        (armstrong_number-helper (quotient number 10) (+ sum (* (expt (remainder number 10) 3) (remainder number 10))))))\n  (armstrong_number-helper number 0))\n",
    "  (define (sum-of-digits-cubes number)\n    (if (= number 0)\n        0\n        (+ (expt (remainder number 10) 3)\n           (sum-of-digits-cubes (quotient number 10)))))\n  (if (= number (sum-of-digits-cubes number))\n      #t\n      #f))\n"
  ]
}