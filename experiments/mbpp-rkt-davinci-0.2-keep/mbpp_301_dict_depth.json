{
  "name": "mbpp_301_dict_depth",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the depth of a dictionary.\n(define (dict_depth d)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate dict_depth))\n    (check-equal? (candidate #hash((\"a\" .  1) (\"b\" .  #hash((\"c\" .  #hash((\"d\" .  #hash()))))))) 4)\n    (check-equal? (candidate #hash((\"a\" .  1) (\"b\" .  #hash((\"c\" .  \"python\"))))) 2)\n    (check-equal? (candidate #hash((1 .  \"Sun\") (2 .  #hash((3 .  #hash((4 .  \"Mon\"))))))) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond [(dict? d) (max (dict_depth (dict-ref d \"left\"))\n                        (dict-ref d \"right\"))]\n        [else 0]))\n",
    "  (cond [(dict? d) (add1 (max (dict_depth (dict-ref d \"left\"))\n                             (dict-ref d \"right\")))]\n        [else 0]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (left d)) (dict_depth (right d)))]))\n",
    "  (cond [(dict? d) (max (dict-depth (dict-ref d \"left\"))\n                        (dict-depth (dict-ref d \"right\")))]\n        [else 1]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict_depth (dict-ref d \"right\")))]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict_depth (dict-ref d 'right)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n</code>\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (\u03bb (x) (+ 1 (dict_depth (dict-ref d x))))\n                 (dict-keys d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(and (dict? (first d)) (dict? (rest d)))\n         (max (dict_depth (first d)) (dict_depth (rest d)))]\n        [else 1]))\n",
    "  (if (dictionary? d)\n      (if (empty? d)\n          0\n          (add1 (max (dict_depth (dict-ref d (dict-keys d)))\n                    (dict_depth (dict-ref d (dict-keys d))))))\n      0))\n",
    "  (if (dict? d)\n      (let ([max-depth (for/max ([(k v) (in-dict d)])\n                          (if (dict? v)\n                              (add1 (dict_depth v))\n                              1))])\n        (if (number? max-depth)\n            max-depth\n            1))\n      0))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else (max (dict_depth (dict-rest d))\n               (dict_depth (dict-value (dict-first d))))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict_depth (dict-ref d 'right)))]))\n",
    "  (cond\n    [(dict? d) (add1 (max (dict_depth (dict-ref d \"left\"))\n                        (dict-ref d \"right\")))]\n    [else 0]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict_depth (dict-ref d 'right)))]))\n",
    "  (if (dict? d)\n      (let ([k (dict-keys d)])\n        (if (empty? k)\n            0\n            (apply max (map (lambda (x) (+ 1 (dict_depth (dict-ref d x)))) k))))\n      0))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict_depth (dict-ref d 'right)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else (apply max (map (lambda (k) (dict_depth (dict-ref d k))) (dict-keys d)))\n     ]))\n"
  ]
}