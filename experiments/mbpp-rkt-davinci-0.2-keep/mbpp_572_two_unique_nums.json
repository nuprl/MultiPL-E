{
  "name": "mbpp_572_two_unique_nums",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to remove duplicate numbers from a given number of lists.\n(define (two_unique_nums nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate two_unique_nums))\n    (check-equal? (candidate (list 1 2 3 2 3 4 5)) (list 1 4 5))\n    (check-equal? (candidate (list 1 2 3 2 4 5)) (list 1 3 4 5))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 1 2 3 4 5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? nums)\n      '()\n      (if (member (car nums) (cdr nums))\n          (two_unique_nums (cdr nums))\n          (cons (car nums) (two_unique_nums (cdr nums))))))\n",
    "  (define (helper nums1 nums2)\n    (cond\n      [(empty? nums1) nums2]\n      [(member (first nums1) nums2) (helper (rest nums1) nums2)]\n      [else (helper (rest nums1) (cons (first nums1) nums2))]))\n  (helper nums '()))\n",
    "  (cond [(empty? nums) empty]\n        [else (cons (first nums) (two_unique_nums (remove (first nums) (rest nums))))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([unique-nums (list)]\n        [unique-num-count 0])\n    (for ([num nums])\n      (if (not (member num unique-nums))\n          (begin\n            (set! unique-nums (cons num unique-nums))\n            (set! unique-num-count (+ unique-num-count 1)))))\n    (if (= unique-num-count 2)\n        (reverse unique-nums)\n        (two_unique_nums (cdr nums)))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([nums (sort nums <)])\n    (if (null? nums)\n        '()\n        (cons (car nums)\n              (two_unique_nums (remove (car nums) (cdr nums)))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (if (null? nums)\n      '()\n      (if (member (car nums) (cdr nums))\n          (two_unique_nums (cdr nums))\n          (cons (car nums) (two_unique_nums (cdr nums))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(= (first nums) (second nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let loop ([nums nums] [unique-nums '()])\n    (cond [(empty? nums) unique-nums]\n          [(member (first nums) unique-nums) (loop (rest nums) unique-nums)]\n          [else (loop (rest nums) (cons (first nums) unique-nums))])))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (if (member (car nums) acc)\n            (helper (cdr nums) acc)\n            (helper (cdr nums) (cons (car nums) acc)))))\n  (helper nums '()))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([num1 (car nums)]\n        [num2 (cadr nums)])\n    (if (equal? num1 num2)\n        (cons num1 (two_unique_nums (cdr nums)))\n        (cons num1 (cons num2 (two_unique_nums (cdr nums)))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let loop ([nums nums]\n             [acc '()])\n    (cond [(empty? nums) acc]\n          [(member (first nums) acc) (loop (rest nums) acc)]\n          [else (loop (rest nums) (cons (first nums) acc))])))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([nums (sort nums <)])\n    (if (null? nums)\n        '()\n        (cons (car nums)\n              (two_unique_nums (remove (car nums) (cdr nums)))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (if (null? nums)\n      '()\n      (if (member (car nums) (cdr nums))\n          (two_unique_nums (cdr nums))\n          (cons (car nums) (two_unique_nums (cdr nums))))))\n",
    "  (let ([num1 (car nums)]\n        [num2 (car (cdr nums))])\n    (if (equal? num1 num2)\n        (two_unique_nums (cdr nums))\n        (cons num1 (cons num2 '())))))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(null? (cdr nums)) nums]\n    [(equal? (car nums) (cadr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let loop ([nums nums] [acc '()])\n    (if (null? nums)\n        acc\n        (if (member (car nums) (cdr nums))\n            (loop (cdr nums) acc)\n            (loop (cdr nums) (cons (car nums) acc))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([nums (sort nums <)])\n    (if (null? nums)\n        '()\n        (if (null? (cdr nums))\n            (list (car nums))\n            (if (= (car nums) (cadr nums))\n                (two_unique_nums (cddr nums))\n                (cons (car nums) (two_unique_nums (cdr nums))))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(null? nums) '()]\n        [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n        [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let loop ([nums nums] [unique '()])\n    (if (null? nums)\n        unique\n        (if (member (car nums) unique)\n            (loop (cdr nums) unique)\n            (loop (cdr nums) (cons (car nums) unique))))))\n",
    "  (let ([nums (sort nums <)])\n    (cond [(null? nums) '()]\n          [(null? (cdr nums)) nums]\n          [(= (car nums) (cadr nums)) (two_unique_nums (cdr nums))]\n          [else (cons (car nums) (two_unique_nums (cdr nums)))])))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([nums (sort nums <)])\n    (cond [(null? nums) '()]\n          [(null? (cdr nums)) nums]\n          [(= (car nums) (cadr nums)) (two_unique_nums (cdr nums))]\n          [else (cons (car nums) (two_unique_nums (cdr nums)))])))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([unique-nums (list)]\n        [unique-num-count (list)])\n    (for ([num nums])\n      (if (member num unique-nums)\n          (set! unique-num-count (cons (add1 (car unique-num-count)) (cdr unique-num-count)))\n          (set! unique-nums (cons num unique-nums))\n          (set! unique-num-count (cons 1 unique-num-count))))\n    (for/list ([num unique-nums]\n               [count unique-num-count])\n      (list num count))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(= (first nums) (second nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (if (member (car nums) acc)\n            (helper (cdr nums) acc)\n            (helper (cdr nums) (cons (car nums) acc)))))\n  (helper nums '()))\n",
    "  (let ([nums (sort nums <)])\n    (if (null? (cdr nums))\n        nums\n        (if (= (car nums) (cadr nums))\n            (two_unique_nums (cddr nums))\n            (cons (car nums) (two_unique_nums (cdr nums)))))))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (let ([nums (sort nums <)])\n    (if (null? nums)\n        '()\n        (if (equal? (car nums) (cadr nums))\n            (two_unique_nums (cddr nums))\n            (cons (car nums) (two_unique_nums (cdr nums)))))))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (if (member (car nums) acc)\n            (helper (cdr nums) acc)\n            (helper (cdr nums) (cons (car nums) acc)))))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums)\n    (cond\n      [(empty? nums) '()]\n      [(member (first nums) (rest nums)) (helper (rest nums))]\n      [else (cons (first nums) (helper (rest nums)))]))\n  (helper nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums seen)\n    (if (null? nums)\n        '()\n        (if (member (car nums) seen)\n            (helper (cdr nums) seen)\n            (cons (car nums) (helper (cdr nums) (cons (car nums) seen))))))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let loop ([nums nums] [acc '()])\n    (cond [(empty? nums) acc]\n          [(member (first nums) acc) (loop (rest nums) acc)]\n          [else (loop (rest nums) (cons (first nums) acc))])))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        acc\n        (if (member (car nums) acc)\n            (helper (cdr nums) acc)\n            (helper (cdr nums) (cons (car nums) acc)))))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let loop ([nums nums] [unique '()])\n    (if (null? nums)\n        unique\n        (if (member (car nums) unique)\n            (loop (cdr nums) unique)\n            (loop (cdr nums) (cons (car nums) unique))))))\n",
    "  (let ([nums (sort nums <)])\n    (if (null? (cdr nums))\n        nums\n        (if (= (car nums) (cadr nums))\n            (two_unique_nums (cddr nums))\n            (cons (car nums) (two_unique_nums (cdr nums)))))))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let loop ([nums nums] [unique '()])\n    (cond [(empty? nums) unique]\n          [(member (first nums) unique) (loop (rest nums) unique)]\n          [else (loop (rest nums) (cons (first nums) unique))])))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (cdr nums)) nums]\n    [else\n     (if (equal? (car nums) (cadr nums))\n         (two_unique_nums (cdr nums))\n         (cons (car nums) (two_unique_nums (cdr nums))))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums)\n    (cond\n      [(empty? nums) empty]\n      [(member (first nums) (rest nums)) (helper (rest nums))]\n      [else (cons (first nums) (helper (rest nums)))]))\n  (helper nums))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else (cons (first nums) (two_unique_nums (remove (first nums) (rest nums))))]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [else\n     (cons (first nums)\n           (two_unique_nums (filter (lambda (x) (not (equal? x (first nums)))) (rest nums))))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [else\n     (cons (first nums)\n           (two_unique_nums (filter (lambda (x) (not (equal? x (first nums)))) (rest nums))))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else\n     (cons (first nums)\n           (two_unique_nums (remove (first nums) (rest nums))))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([unique-nums (list)]\n        [unique-num-count (list)])\n    (for ([num nums])\n      (if (not (member num unique-nums))\n          (begin\n            (set! unique-nums (append unique-nums (list num)))\n            (set! unique-num-count (append unique-num-count (list 1)))))\n      (else\n        (set! unique-num-count (append unique-num-count (list (+ 1 (cadr (member num unique-nums))))))))\n    (for ([i (in-range (length unique-nums))])\n      (if (= (list-ref unique-num-count i) 1)\n          (display (list-ref unique-nums i))))))\n",
    "  (let loop ([nums nums] [acc '()])\n    (cond [(empty? nums) acc]\n          [(member (first nums) acc) (loop (rest nums) acc)]\n          [else (loop (rest nums) (cons (first nums) acc))])))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums seen)\n    (cond\n      [(empty? nums) empty]\n      [(member (first nums) seen) (helper (rest nums) seen)]\n      [else (cons (first nums) (helper (rest nums) (cons (first nums) seen)))]))\n  (helper nums empty))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums seen)\n    (cond\n      [(empty? nums) empty]\n      [(member (first nums) seen) (helper (rest nums) seen)]\n      [else (cons (first nums) (helper (rest nums) (cons (first nums) seen)))]))\n  (helper nums empty))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums seen)\n    (cond\n      [(empty? nums) empty]\n      [(member (first nums) seen) (helper (rest nums) seen)]\n      [else (cons (first nums) (helper (rest nums) (cons (first nums) seen)))]))\n  (helper nums empty))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) '()]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([unique-nums (set nums)])\n    (if (equal? (length unique-nums) 2)\n        unique-nums\n        (two_unique_nums (remove (first unique-nums) nums)))))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let loop ([nums nums] [acc '()])\n    (if (null? nums)\n        acc\n        (if (member (car nums) (cdr nums))\n            (loop (cdr nums) acc)\n            (loop (cdr nums) (cons (car nums) acc))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (let ([nums (sort nums <)])\n    (if (null? nums)\n        '()\n        (cons (car nums)\n              (two_unique_nums (remove (car nums) (cdr nums)))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(null? nums) empty]\n    [(null? (cdr nums)) nums]\n    [(equal? (car nums) (cadr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (if (null? nums)\n      '()\n      (if (member (car nums) (cdr nums))\n          (two_unique_nums (cdr nums))\n          (cons (car nums) (two_unique_nums (cdr nums))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([unique-nums (list)]\n        [unique-nums-count 0])\n    (for ([num nums])\n      (if (not (member num unique-nums))\n          (begin\n            (set! unique-nums (cons num unique-nums))\n            (set! unique-nums-count (+ unique-nums-count 1)))))\n    (if (= unique-nums-count 2)\n        (reverse unique-nums)\n        (two_unique_nums (cdr nums)))))\n",
    "  (define (helper nums acc)\n    (cond [(empty? nums) acc]\n          [(member (first nums) acc) (helper (rest nums) acc)]\n          [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums acc)\n    (cond\n      [(empty? nums) acc]\n      [(member (first nums) acc) (helper (rest nums) acc)]\n      [else (helper (rest nums) (cons (first nums) acc))]))\n  (helper nums '()))\n"
  ]
}