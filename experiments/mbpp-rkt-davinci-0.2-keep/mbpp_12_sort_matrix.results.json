{
  "name": "mbpp_12_sort_matrix",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y)\n            (< (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmpbq8cypl7.rkt:5:19: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmp34tpsy5x.rkt:5:26: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M)\n        <\n        M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmptk4xj5mt.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmptk4xj5mt.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmp0ak_mwkn.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmp0ak_mwkn.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmpy8cg6o4g.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123490,
      "stdout": "",
      "stderr": "/tmp/tmprtss_xl0.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzhbzyye.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzhbzyye.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzhbzyye.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpytpsk2x0.rkt:8:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpytpsk2x0.rkt:8:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "/tmp/tmpx9eo0jcp.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx9eo0jcp.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (row1 row2)\n             (< (apply + row1)\n                (apply + row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y)\n            (< (apply + x)\n               (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y) (&lt; (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "/tmp/tmphbb7yj0_.rkt:5:24: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (a b)\n            (< (apply + a) (apply + b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpc0k9hd0t.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (define (sum_row r)\n    (apply + r))\n  (define (sort_rows M)\n    (sort M (\u03bb (r1 r2) (< (sum_row r1) (sum_row r2)))))\n  (sort_rows M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123490,
      "stdout": "",
      "stderr": "/tmp/tmprtss_xl0.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpytpsk2x0.rkt:8:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpytpsk2x0.rkt:8:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y)\n            (< (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2) (sum_row r1) &lt; (sum_row r2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "/tmp/tmplrxcfim3.rkt:5:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (a b)\n            (< (apply + a) (apply + b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (list (apply + row) row))\n             M)\n        (lambda (x y)\n          (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvmhxri4t.rkt:16:4\nactual:     '((3 (1 1 1)) (6 (1 2 3)) (11 (2 4 5)))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvmhxri4t.rkt:17:4\nactual:     '((-3 (-2 4 -5)) (1 (1 -1 1)) (6 (1 2 3)))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvmhxri4t.rkt:18:4\nactual:     '((7 (2 1 4)) (13 (6 4 3)) (22 (5 8 9)))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpymb8k86g.rkt:5:21: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (cons row (apply + row)))\n             M)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg1g_v5v_.rkt:16:4\nactual:     '(((1 1 1) . 3) ((1 2 3) . 6) ((2 4 5) . 11))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg1g_v5v_.rkt:17:4\nactual:     '(((-2 4 -5) . -3) ((1 -1 1) . 1) ((1 2 3) . 6))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg1g_v5v_.rkt:18:4\nactual:     '(((2 1 4) . 7) ((6 4 3) . 13) ((5 8 9) . 22))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw12x7e2.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw12x7e2.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw12x7e2.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (a b)\n            (< (apply + a)\n               (apply + b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (r1 r2) (&lt; (car r1) (car r2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123490,
      "stdout": "",
      "stderr": "/tmp/tmpwapfacmm.rkt:6:24: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (define (sum_row M i)\n    (apply + (list-ref M i)))\n  (define (sort_matrix_helper M i)\n    (if (= i (length M))\n        M\n        (sort_matrix_helper (swap-rows M i (argmin (list-ref M i) (lambda (x) (sum_row M x)) (lambda (x) (sum_row M x)) (add1 i))) (add1 i))))\n  (sort_matrix_helper M 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "/tmp/tmpkdev7pqy.rkt:10:29: swap-rows: unbound identifier\n  in: swap-rows\n  location...:\n   /tmp/tmpkdev7pqy.rkt:10:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M)\n        <\n        M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmptk4xj5mt.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmptk4xj5mt.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y)\n            (< (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmp07cj6qck.rkt:6:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp07cj6qck.rkt:6:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmpy8cg6o4g.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpymb8k86g.rkt:5:21: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (list row (apply + row))) M)\n        (lambda (row1 row2) (&lt; (cadr row1) (cadr row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "/tmp/tmp1zptfqpz.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "/tmp/tmpexq5h1yl.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmpbq8cypl7.rkt:5:19: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y)\n            (< (apply + x)\n               (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) vector-&gt;list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "/tmp/tmpbdtq8dof.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y) (&lt; (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "/tmp/tmphbb7yj0_.rkt:5:24: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmpy8cg6o4g.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M)\n        <\n        M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmptk4xj5mt.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmptk4xj5mt.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmpy8cg6o4g.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpc0k9hd0t.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (define (sum_row row)\n    (apply + row))\n  (define (sort_rows M)\n    (sort M < #:key sum_row))\n  (sort_rows M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (row1 row2)\n            (< (apply + row1) (apply + row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmpy8cg6o4g.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M)\n        (lambda (x y)\n          (< x y))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "/tmp/tmpgnd5e8e4.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmpgnd5e8e4.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmpy8cg6o4g.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons row (apply + row))) M)\n        (lambda (row1 row2) (&lt; (cdr row1) (cdr row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "/tmp/tmp_acciusv.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpytpsk2x0.rkt:8:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpytpsk2x0.rkt:8:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (define (row-sum r)\n    (apply + r))\n  (define (row-sort M)\n    (sort M (\u03bb (r1 r2)\n              (< (row-sum r1)\n                 (row-sum r2)))))\n  (row-sort M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "/tmp/tmpy8cg6o4g.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (row1 row2)\n            (< (apply + row1)\n               (apply + row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmp07cj6qck.rkt:6:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp07cj6qck.rkt:6:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyq00kr3u.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y)\n            (< (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (for/list ([row (in-list M)])\n          (cons row (apply + row)))\n        < #:key cdr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123493,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxub0cbm.rkt:14:4\nactual:     '(((1 1 1) . 3) ((1 2 3) . 6) ((2 4 5) . 11))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxub0cbm.rkt:15:4\nactual:     '(((-2 4 -5) . -3) ((1 -1 1) . 1) ((1 2 3) . 6))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxub0cbm.rkt:16:4\nactual:     '(((2 1 4) . 7) ((6 4 3) . 13) ((5 8 9) . 22))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123490,
      "stdout": "",
      "stderr": "/tmp/tmprtss_xl0.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}