{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n(define (count_reverse_pairs test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_reverse_pairs))\n    (check-equal? (candidate (list \"julia\" \"best\" \"tseb\" \"for\" \"ailuj\")) 2)\n    (check-equal? (candidate (list \"geeks\" \"best\" \"for\" \"skeeg\")) 1)\n    (check-equal? (candidate (list \"makes\" \"best\" \"sekam\" \"for\" \"rof\")) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (empty? str)\n          result\n          (reverse_string_helper (rest str) (string-append (string (first str)) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (empty? test_list)\n        count\n        (if (equal? (reverse_string (first test_list)) (second test_list))\n            (count_reverse_pairs_helper (rest (rest test_list)) (+ count 1))\n            (count_reverse_pairs_helper (rest (rest test_list)) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse-string s)\n    (string-append (reverse (string->list s))))\n  (define (count-reverse-pairs-helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(string=? (car test_list) (reverse-string (car test_list)))\n       (count-reverse-pairs-helper (cdr test_list) (+ count 1))]\n      [else (count-reverse-pairs-helper (cdr test_list) count)]))\n  (count-reverse-pairs-helper test_list 0))\n",
    "  (define (reverse_string str)\n    (apply string (reverse (string->list str))))\n  (define (is_reverse_pair str1 str2)\n    (string=? (reverse_string str1) str2))\n  (define (count_reverse_pairs_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [else\n       (define (count_reverse_pairs_helper_helper test_list count)\n         (cond\n           [(null? test_list) count]\n           [else\n            (define (count_reverse_pairs_helper_helper_helper test_list count)\n              (cond\n                [(null? test_list) count]\n                [else\n                 (if (is_reverse_pair (car test_list) (car (cdr test_list)))\n                     (count_reverse_pairs_helper_helper_helper (cdr test_list) (+ count 1))\n                     (count_reverse_pairs_helper_helper_helper (cdr test_list) count))]))\n            (count_reverse_pairs_helper_helper (cdr test_list) (count_reverse_pairs_helper_helper_helper test_list count))]))\n       (count_reverse_pairs_helper (cdr test_list) (count_reverse_pairs_helper_helper test_list count))]))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_pair? str1 str2)\n    (and (string=? (string-reverse str1) str2)\n         (string=? (string-reverse str2) str1)))\n  (define (count_reverse_pairs_helper test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          (else (count_reverse_pairs_helper (cdr test_list)\n                                            (+ count (if (reverse_pair? (car test_list) (cadr test_list)) 1 0))))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (null? str)\n          result\n          (reverse_string_helper (rest str) (append result (list (first str))))))\n    (reverse_string_helper str '()))\n  (define (count_reverse_pairs_helper test_list result)\n    (if (null? test_list)\n        result\n        (count_reverse_pairs_helper (rest test_list) (+ result (if (equal? (reverse_string (first test_list)) (second test_list)) 1 0)))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(null? test_list) count]\n          [(null? (cdr test_list)) count]\n          [(string=? (car test_list) (reverse (cadr test_list)))\n           (loop (cdr test_list) (+ count 1))]\n          [else (loop (cdr test_list) count)])))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (empty? str)\n          result\n          (reverse_string_helper (rest str) (cons (first str) result))))\n    (reverse_string_helper str '()))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (empty? test_list)\n        count\n        (if (equal? (reverse_string (first test_list)) (second test_list))\n            (count_reverse_pairs_helper (rest (rest test_list)) (+ count 1))\n            (count_reverse_pairs_helper (rest test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (let loop ([str str] [rev_str '()])\n      (if (null? str)\n          rev_str\n          (loop (cdr str) (cons (car str) rev_str)))))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (equal? (car test_list) (reverse_string (car test_list)))\n            (count_reverse_pairs_helper (cdr test_list) (+ count 1))\n            (count_reverse_pairs_helper (cdr test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(equal? (reverse (first test_list)) (second test_list))\n           (loop (rest (rest test_list)) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(string=? (reverse (first test_list)) (second test_list))\n           (loop (rest (rest test_list)) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (define (is_reverse? str1 str2)\n    (define (is_reverse?-helper str1 str2)\n      (if (or (null? str1) (null? str2))\n          #t\n          (and (equal? (car str1) (car str2))\n               (is_reverse?-helper (cdr str1) (cdr str2)))))\n    (and (equal? (length str1) (length str2))\n         (is_reverse?-helper (reverse str1) str2)))\n  (define (count_reverse_pairs-helper test_list count)\n    (if (null? test_list)\n        count\n        (let ((first (car test_list))\n              (rest (cdr test_list)))\n          (count_reverse_pairs-helper rest\n                                      (if (is_reverse? first (car rest))\n                                          (+ count 1)\n                                          count)))))\n  (count_reverse_pairs-helper test_list 0))\n",
    "  (define (reverse_pair? str1 str2)\n    (equal? (string-reverse str1) str2))\n  (define (count_reverse_pairs_helper test_list count)\n    (cond ((null? test_list) count)\n          ((reverse_pair? (car test_list) (cadr test_list))\n           (count_reverse_pairs_helper (cddr test_list) (+ count 1)))\n          (else (count_reverse_pairs_helper (cdr test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_pairs lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) empty]\n      [else\n       (cons (list (first lst) (first (rest lst)))\n             (reverse_pairs (rest (rest lst))))]))\n  (define (is_reverse? str1 str2)\n    (cond\n      [(empty? str1) true]\n      [(empty? str2) true]\n      [(equal? (first str1) (first str2))\n       (is_reverse? (rest str1) (rest str2))]\n      [else false]))\n  (define (count_reverse_pairs_helper lst)\n    (cond\n      [(empty? lst) 0]\n      [else\n       (cond\n         [(is_reverse? (first lst) (second lst))\n          (+ 1 (count_reverse_pairs_helper (rest (rest lst))))]\n         [else (count_reverse_pairs_helper (rest (rest lst)))])]))\n  (count_reverse_pairs_helper (reverse_pairs test_list)))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(= (first test_list) (reverse (second test_list))) (loop (rest (rest test_list)) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (define (reverse_pair? str1 str2)\n    (string=? (string-reverse str1) str2))\n  (define (count_reverse_pairs_helper test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          (else (count_reverse_pairs_helper (cdr test_list)\n                                            (+ count (if (reverse_pair? (car test_list) (cadr test_list)) 1 0))))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (empty? str)\n          result\n          (reverse_string_helper (rest str) (string-append (string (first str)) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (empty? test_list)\n        count\n        (if (equal? (first test_list) (reverse_string (second test_list)))\n            (count_reverse_pairs_helper (rest (rest test_list)) (+ 1 count))\n            (count_reverse_pairs_helper (rest (rest test_list)) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_helper str result)\n      (if (empty? str)\n          result\n          (reverse_helper (rest str) (string-append (string (first str)) result))))\n    (reverse_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (empty? test_list)\n        count\n        (if (equal? (reverse_string (first test_list)) (second test_list))\n            (count_reverse_pairs_helper (rest (rest test_list)) (+ count 1))\n            (count_reverse_pairs_helper (rest test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [else\n           (if (equal? (reverse (first test_list)) (second test_list))\n               (loop (rest (rest test_list)) (+ count 1))\n               (loop (rest (rest test_list)) count))])))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (empty? str)\n          result\n          (reverse_string_helper (rest str) (string-append (string (first str)) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (empty? test_list)\n        count\n        (if (equal? (first test_list) (reverse_string (second test_list)))\n            (count_reverse_pairs_helper (rest (rest test_list)) (+ count 1))\n            (count_reverse_pairs_helper (rest (rest test_list)) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_pair? str1 str2)\n    (and (string=? str1 (string-reverse str2))\n         (string=? str2 (string-reverse str1))))\n  (define (count_reverse_pairs_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(empty? (rest test_list)) count]\n      [else (count_reverse_pairs_helper (rest test_list)\n                                        (+ count\n                                           (if (reverse_pair? (first test_list)\n                                                              (first (rest test_list)))\n                                               1\n                                               0)))]))\n  (count_reverse_pairs_helper test_list 0))\n"
  ]
}