{
  "name": "mbpp_8_square_nums",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find squares of individual elements in a list.\n(define (square_nums nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30)) (list 100 400 900))\n    (check-equal? (candidate (list 12 15)) (list 144 225))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n",
    "  (map (lambda (x) (* x x)) nums))\n"
  ]
}