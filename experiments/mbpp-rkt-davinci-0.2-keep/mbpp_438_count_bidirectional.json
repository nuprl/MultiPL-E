{
  "name": "mbpp_438_count_bidirectional",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count bidirectional tuple pairs.\n(define (count_bidirectional test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_bidirectional))\n    (check-equal? (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 3)\n    (check-equal? (candidate (list (list 5 6) (list 1 3) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 2)\n    (check-equal? (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 2) (list 6 5) (list 2 1))) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(member (cdr (car test_list)) (map car test_list))\n       (count_bidirectional_helper (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_helper (cdr test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (is_bidirectional? test_list)\n         (cond\n           [(empty? test_list) #f]\n           [(equal? (first test_list) (second test_list)) #t]\n           [else (is_bidirectional? (rest test_list))]))\n       (cond\n         [(is_bidirectional? test_list) (count_bidirectional_helper (rest test_list) (+ count 1))]\n         [else (count_bidirectional_helper (rest test_list) count)])]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond [(empty? test_list) count]\n          [(member (car test_list) (cdr test_list))\n           (count_bidirectional_iter (cdr test_list) (+ count 1))]\n          [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (member (cdr (car test_list)) (map car test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)]\n           [rest (rest test_list)])\n       (+ (count_bidirectional rest)\n          (count_bidirectional (filter (lambda (x) (test first x)) rest))))]))\n",
    "  (length (filter (lambda (x) (member x test_list)) test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (letrec ([count (lambda (test_list)\n                    (cond [(empty? test_list) 0]\n                          [(empty? (rest test_list)) 0]\n                          [else (+ (count (rest test_list))\n                                   (count (rest (rest test_list)))\n                                   (if (test (first test_list) (second test_list))\n                                       1\n                                       0))]))])\n    (count test_list)))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (loop (rest test_list) (+ count 1))]\n      [else (loop (rest test_list) count)])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (member (list (car test_list) (cadr test_list)) (cddr test_list))\n            (count_bidirectional_helper (cddr test_list) (+ count 1))\n            (count_bidirectional_helper (cddr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list counter)\n    (cond ((null? test_list) counter)\n          ((member (reverse (car test_list)) (cdr test_list))\n           (count_bidirectional_helper (cdr test_list) (+ counter 1)))\n          (else (count_bidirectional_helper (cdr test_list) counter))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((and (member (car test_list) (cdr test_list))\n                (member (cadr test_list) (cddr test_list)))\n           (count_bidirectional_helper (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(null? test_list) count]\n          [(and (pair? (car test_list))\n                (pair? (cdr test_list))\n                (equal? (car (car test_list)) (cdr (cdr (car test_list))))\n                (equal? (cdr (car test_list)) (car (cdr (car test_list)))))\n           (loop (cdr test_list) (+ count 1))]\n          [else (loop (cdr test_list) count)])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond [(empty? test_list) count]\n          [(member (first test_list) (rest test_list))\n           (count_bidirectional_helper (rest test_list) (+ count 1))]\n          [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define first_pair (first test_list))\n       (define first_pair_reverse (reverse first_pair))\n       (define rest_of_list (rest test_list))\n       (cond\n         [(member first_pair_reverse rest_of_list)\n          (count_bidirectional_helper rest_of_list (+ count 1))]\n         [else\n          (count_bidirectional_helper rest_of_list count)])]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [(and (member (first test_list) (rest test_list))\n                (member (rest test_list) (first test_list)))\n           (loop (rest test_list) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [else (let ([first (first test_list)])\n                  (loop (rest test_list)\n                        (+ count (count_bidirectional_helper first (rest test_list)))))])))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond\n      [(null? test_list) count]\n      [(and (member (car test_list) (cdr test_list))\n            (member (cadr test_list) (cddr test_list)))\n       (loop (cddr test_list) (+ count 1))]\n      [else (loop (cdr test_list) count)])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else (count_bidirectional_helper (cdr test_list)\n                                        (+ count (count_bidirectional_helper (cdr test_list) 0)))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(and (member (car test_list) (cdr test_list))\n            (member (cadr test_list) (cddr test_list)))\n       (count_bidirectional_helper (cddr test_list) (+ count 1))]\n      [else (count_bidirectional_helper (cdr test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [else\n           (let ([first (car test_list)])\n             (loop (cdr test_list)\n                   (if (member first (cdr test_list))\n                       (+ count 1)\n                       count)))])))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(and (test_list (car test_list) (cadr test_list))\n            (test_list (cadr test_list) (car test_list)))\n       (loop (cdr test_list) (+ count 1))]\n      [else (loop (cdr test_list) count)])))\n",
    "  (let loop ((test_list test_list)\n             (count 0))\n    (cond ((null? test_list) count)\n          ((and (member (car test_list) (cdr test_list))\n                (member (cadr test_list) (cddr test_list)))\n           (loop (cddr test_list) (+ count 1)))\n          (else (loop (cdr test_list) count)))))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (cdr test_list)) 0]\n                                               [(and (test_list (car test_list) (cadr test_list))\n                                                     (test_list (cadr test_list) (car test_list)))\n                                                (+ 1 (count_bidirectional_helper (cdr test_list)))]\n                                               [else (count_bidirectional_helper (cdr test_list))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond ((null? test_list) count)\n          ((member (car test_list) (cdr test_list))\n           (loop (cdr test_list) (+ count 1)))\n          (else (loop (cdr test_list) count)))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (is_bidirectional? test_list)\n         (and (member (first test_list) (rest test_list))\n              (member (rest test_list) (first test_list))))\n       (count_bidirectional_iter (rest test_list)\n                                 (+ count (is_bidirectional? test_list)))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (member (cdr (car test_list)) (map car test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(and (member (car test_list) (cdr test_list))\n                (member (cdr test_list) (car test_list)))\n           (loop (cdr test_list) (+ count 1))]\n          [else (loop (cdr test_list) count)])))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (if (null? test_list)\n                                             0\n                                             (+ (count_bidirectional_helper (cdr test_list))\n                                                (count_bidirectional_helper (cdr (cdr test_list)))\n                                                (if (and (equal? (car test_list) (caddr test_list))\n                                                         (equal? (cadr test_list) (car (cdr test_list))))\n                                                    1\n                                                    0))))])\n    (count_bidirectional_helper test_list)))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (if (null? test_list)\n        count\n        (loop (cdr test_list)\n              (+ count (count_bidirectional (cdr test_list) (car test_list)))))))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (let ([first (car test_list)]\n              [rest (cdr test_list)])\n          (if (member (reverse first) rest)\n              (count_bidirectional_helper rest (+ count 1))\n              (count_bidirectional_helper rest count)))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let ([count 0])\n    (for ([i (in-range (length test_list))])\n      (for ([j (in-range (length test_list))])\n        (if (and (equal? (list-ref test_list i) (list-ref test_list j))\n                 (equal? (list-ref (cdr (list-ref test_list i)) 0)\n                         (list-ref (cdr (list-ref test_list j)) 1)))\n            (set! count (+ count 1)))))\n    count))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (cdr test_list)) 0]\n                                               [else (+ (if (and (test_list (car test_list)) (test_list (cadr test_list)))\n                                                            1\n                                                            0)\n                                                        (count_bidirectional_helper (cdr test_list)))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else (cond\n              [(member (first test_list) (rest test_list))\n               (count_bidirectional_helper (rest test_list) (+ count 1))]\n              [else (count_bidirectional_helper (rest test_list) count)])]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let ([count 0])\n    (for ([i (in-range (length test_list))])\n      (for ([j (in-range (length test_list))])\n        (if (and (equal? (list-ref test_list i) (list-ref test_list j))\n                 (equal? (list-ref test_list j) (list-ref test_list i)))\n            (set! count (+ count 1)))))\n    count))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((member (reverse (car test_list)) (cdr test_list))\n           (count_bidirectional_helper (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let ([count 0])\n    (for ([i (in-range (length test_list))])\n      (for ([j (in-range (length test_list))])\n        (if (and (test_list i) (test_list j))\n            (set! count (+ count 1)))))\n    count))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (cdr test_list)) 0]\n                                               [else (+ (if (and (= (car test_list) (cadr test_list))\n                                                                 (= (cadr test_list) (car test_list)))\n                                                            1\n                                                            0)\n                                                       (count_bidirectional_helper (cdr test_list)))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (let ([first (car test_list)]\n              [rest (cdr test_list)])\n          (if (member (cons (cdr first) (car first)) rest)\n              (count_bidirectional_helper (cdr test_list) (+ count 1))\n              (count_bidirectional_helper (cdr test_list) count)))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(and (member (car test_list) (cdr test_list))\n                (member (cadr test_list) (cddr test_list)))\n           (loop (cddr test_list) (+ count 1))]\n          [else (loop (cdr test_list) count)])))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (cdr test_list)) 0]\n                                               [(and (equal? (car test_list) (caddr test_list))\n                                                     (equal? (cadr test_list) (cadddr test_list)))\n                                                (+ 1 (count_bidirectional_helper (cddr test_list)))]\n                                               [else (count_bidirectional_helper (cdr test_list))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (let ((first (car test_list))\n              (rest (cdr test_list)))\n          (if (member first rest)\n              (count_bidirectional_helper (cdr test_list) (+ count 1))\n              (count_bidirectional_helper (cdr test_list) count)))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let ([count 0])\n    (for ([i (in-range (length test_list))])\n      (for ([j (in-range (length test_list))])\n        (if (and (equal? (list-ref test_list i) (list-ref test_list j))\n                 (equal? (list-ref test_list j) (list-ref test_list i)))\n            (set! count (+ count 1)))))\n    count))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((and (member (car test_list) (cdr test_list))\n                (member (cadr test_list) (cddr test_list)))\n           (count_bidirectional_helper (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (if (null? test_list)\n        count\n        (let ([first (car test_list)]\n              [second (cadr test_list)])\n          (if (and (test first second) (test second first))\n              (loop (cddr test_list) (+ count 1))\n              (loop (cddr test_list) count))))))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (member (reverse (car test_list)) (cdr test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else\n     (if (and (member (car test_list) (cdr test_list))\n              (member (cadr test_list) (cddr test_list)))\n         (+ 1 (count_bidirectional (cdr test_list)))\n         (count_bidirectional (cdr test_list)))]))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(and (member (car test_list) (cdr test_list))\n                (member (cadr test_list) (cddr test_list)))\n           (loop (cddr test_list) (+ count 1))]\n          [else (loop (cdr test_list) count)])))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond\n      [(empty? test_list) count]\n      [(member (car test_list) (cdr test_list))\n       (loop (cdr test_list) (+ count 1))]\n      [else (loop (cdr test_list) count)])))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [else (let ([x (car test_list)])\n                  (cond [(member x (cdr test_list))\n                         (loop (cdr test_list) (+ count 1))]\n                        [else (loop (cdr test_list) count)]))])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(member (cdr (car test_list)) (map car test_list))\n       (count_bidirectional_helper (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_helper (cdr test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(member (car test_list) (cdr test_list))\n           (loop (cdr test_list) (+ count 1))]\n          [else (loop (cdr test_list) count)])))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond\n      [(empty? test_list) count]\n      [else (loop (cdr test_list)\n                  (if (member (car test_list) (cdr test_list))\n                      (+ count 1)\n                      count))])))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (car test_list)]\n           [rest (cdr test_list)])\n       (cond\n         [(empty? rest) 0]\n         [else\n          (+ (count_bidirectional rest)\n             (count_bidirectional (filter (lambda (x) (and (test first x) (test x first))) rest)))\n          ]))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (is_bidirectional? test_list)\n         (cond\n           [(empty? test_list) #f]\n           [else\n            (and (equal? (first test_list) (second test_list))\n                 (is_bidirectional? (rest (rest test_list))))]))\n       (cond\n         [(is_bidirectional? test_list)\n          (count_bidirectional_helper (rest (rest test_list)) (+ count 1))]\n         [else\n          (count_bidirectional_helper (rest test_list) count)])]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (cond\n       [(bidirectional? (first test_list))\n        (+ 1 (count_bidirectional (rest test_list)))]\n       [else\n        (count_bidirectional (rest test_list))])]))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(and (member (first test_list) (rest test_list))\n                (member (second test_list) (rest test_list)))\n           (loop (rest test_list) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [else (loop (cdr test_list) (+ count (if (equal? (car test_list) (cadr test_list)) 1 0)))])))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [(and (member (first test_list) (rest test_list))\n                (member (rest test_list) (first test_list)))\n           (loop (rest test_list) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (is_bidirectional? test_list)\n         (cond\n           [(empty? test_list) #f]\n           [else\n            (and\n             (member (first test_list) (rest test_list))\n             (member (first (rest test_list)) (rest test_list)))]))\n       (count_bidirectional_helper (rest test_list)\n                                   (+ count (is_bidirectional? test_list)))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (is_bidirectional? test_list)\n         (cond\n           [(empty? test_list) #f]\n           [else\n            (and (equal? (car test_list) (cadr test_list))\n                 (is_bidirectional? (cdr test_list)))]))\n       (cond\n         [(is_bidirectional? test_list)\n          (count_bidirectional_helper (cdr test_list) (+ count 1))]\n         [else\n          (count_bidirectional_helper (cdr test_list) count)])]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (is_bidirectional? test_list)\n         (and (member (first test_list) (rest test_list))\n              (member (rest test_list) (first test_list))))\n       (count_bidirectional_helper (rest test_list)\n                                   (+ count (is_bidirectional? test_list)))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)])\n       (+ (count_bidirectional (rest test_list))\n          (count_bidirectional (filter (lambda (x) (equal? first x))\n                                       (rest test_list)))))\n     ]))\n",
    "  (letrec ([count (lambda (test_list)\n                    (cond\n                      [(empty? test_list) 0]\n                      [(empty? (rest test_list)) 0]\n                      [(test_list (first test_list) (second test_list))\n                       (+ 1 (count (rest test_list)))]\n                      [else (count (rest test_list))]))])\n    (count test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond [(empty? test_list) count]\n          [(member (first test_list) (rest test_list))\n           (count_bidirectional_helper (rest test_list) (+ count 1))]\n          [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [else (let ([first (first test_list)])\n                  (loop (rest test_list)\n                        (+ count (count_bidirectional_helper first (rest test_list)))))])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (member (reverse (car test_list)) (cdr test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [else (+ (count_bidirectional_helper (cdr test_list))\n                                                         (count_bidirectional_helper (cdr (cdr test_list)))\n                                                         (if (and (member (car test_list) (cdr (cdr test_list)))\n                                                                  (member (cadr test_list) (cdr (cdr test_list))))\n                                                             1\n                                                             0))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)])\n       (+ (count_bidirectional (rest test_list))\n          (count_bidirectional (filter (lambda (x) (equal? (first x) (second first)))\n                                       (rest test_list)))\n          1))]))\n",
    "  (cond [(empty? test_list) 0]\n        [else (+ (count_bidirectional (cdr test_list))\n                (count_bidirectional (cdr (cdr test_list)))\n                (if (and (equal? (car test_list) (caddr test_list))\n                         (equal? (cadr test_list) (car (cdr test_list))))\n                    1\n                    0))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond\n      [(empty? test_list) count]\n      [(and (pair? (first test_list))\n            (pair? (second test_list))\n            (equal? (first (first test_list)) (second (second test_list)))\n            (equal? (second (first test_list)) (first (second test_list))))\n       (loop (rest (rest test_list)) (+ count 1))]\n      [else (loop (rest test_list) count)])))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [else (let ([first (first test_list)]\n                       [second (second test_list)])\n                  (if (and (test first second) (test second first))\n                      (loop (rest (rest test_list)) (+ count 1))\n                      (loop (rest (rest test_list)) count)))])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (let* ([first (car test_list)]\n               [rest (cdr test_list)]\n               [first_reverse (reverse first)]\n               [count_increment (if (member first_reverse rest) 1 0)])\n          (count_bidirectional_helper rest (+ count count_increment)))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_iter (rest test_list) (+ count 1))]\n      [else (count_bidirectional_iter (rest test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond\n                                           [(empty? test_list) 0]\n                                           [(member (cdr (car test_list)) (car test_list))\n                                            (+ 1 (count_bidirectional_helper (cdr test_list)))]\n                                           [else (count_bidirectional_helper (cdr test_list))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond\n      [(empty? test_list) count]\n      [else\n       (let ((first (first test_list))\n             (rest (rest test_list)))\n         (cond\n           [(test_list (list (second first) (first first)))\n            (loop rest (+ count 1))]\n           [else\n            (loop rest count)]))])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (car test_list) (cdr test_list))\n       (count_bidirectional_helper (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_helper (cdr test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond ((null? test_list) count)\n          ((and (member (car test_list) (cdr test_list))\n                (member (cadr test_list) (cddr test_list)))\n           (loop (cddr test_list) (+ count 1)))\n          (else (loop (cdr test_list) count)))))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (cond [(empty? test_list) 0]\n        [else\n         (let ([first (first test_list)])\n           (+ (count_bidirectional (rest test_list))\n              (count_bidirectional (filter (lambda (x) (equal? first x))\n                                           (rest test_list)))))])\n</code>\nThis is a recursive function that takes a list of tuples as input and returns the number of bidirectional pairs in the list.\nFor example,\n<code>(count_bidirectional (list (list 1 2) (list 2 1) (list 3 4) (list 4 3) (list 5 6)))\n</code>\nshould return 2.\nI'm getting a stack overflow error when I run this code. I'm not sure what's causing it.\n\n\nA:\n\nYou're not terminating the recursion, you're calling <code>count_bidirectional</code> again and again.\nThe problem is that you're using <code>filter</code> to find the elements that match the first element, but you're not using the result of the filtering.\nYou can use <code>member</code> to check if the first element is in the rest of the list, and if it is, you add 1 to the result, otherwise you just return the result of the recursive call.\n<code>(define (count_bidirectional test_list)\n  (cond [(empty? test_list) 0]\n        [else\n         (let ([first (first test_list)])\n           (+ (if (member first (rest test_list))\n                  1\n                  0)\n              (count_bidirectional (rest test_list))))]))\n</code>\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond\n      [(empty? test_list) count]\n      [else\n       (let ((first (first test_list))\n             (rest (rest test_list)))\n         (loop rest\n               (if (member (reverse first) rest)\n                   (+ count 1)\n                   count)))])))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (member (reverse (car test_list)) (cdr test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else (count_bidirectional_helper (cdr test_list)\n                                        (+ count (count_bidirectional_helper (cdr test_list) 0)))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [(member (reverse (first test_list)) (rest test_list))\n           (loop (rest test_list) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (let loop ((test_list test_list)\n             (count 0))\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (loop (rest test_list) (+ count 1))]\n      [else (loop (rest test_list) count)])))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (count_bidirectional_helper (cdr test_list)\n                                    (+ count (count_bidirectional_helper (cdr test_list) 0)))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([lst test_list] [count 0])\n    (cond [(empty? lst) count]\n          [(member (first lst) (rest lst))\n           (loop (rest lst) (+ count 1))]\n          [else (loop (rest lst) count)])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (is_bidirectional? test_list)\n         (cond\n           [(empty? test_list) #f]\n           [else\n            (if (equal? (first test_list) (last test_list))\n                #t\n                (is_bidirectional? (rest test_list)))]))\n       (if (is_bidirectional? test_list)\n           (count_bidirectional_helper (rest test_list) (+ count 1))\n           (count_bidirectional_helper (rest test_list) count))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (if (null? test_list)\n        count\n        (let ((first (car test_list))\n              (rest (cdr test_list)))\n          (loop rest (+ count (count_bidirectional_helper first rest)))))))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (cdr test_list)) 0]\n                                               [(and (equal? (car test_list) (caddr test_list))\n                                                     (equal? (cadr test_list) (cadddr test_list)))\n                                                (+ 1 (count_bidirectional_helper (cddr test_list)))]\n                                               [else (count_bidirectional_helper (cdr test_list))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (cond\n       [(bidirectional? (first test_list))\n        (+ 1 (count_bidirectional (rest test_list)))]\n       [else\n        (count_bidirectional (rest test_list))])]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (rest test_list)) 0]\n                                               [(and (equal? (first test_list) (third test_list))\n                                                     (equal? (second test_list) (fourth test_list)))\n                                                (+ 1 (count_bidirectional_helper (rest (rest test_list))))]\n                                               [else (count_bidirectional_helper (rest test_list))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (letrec ([count_bidirectional_iter (lambda (test_list count)\n                                       (cond [(empty? test_list) count]\n                                             [(member (car test_list) (cdr test_list))\n                                              (count_bidirectional_iter (cdr test_list) (+ count 1))]\n                                             [else (count_bidirectional_iter (cdr test_list) count)]))])\n    (count_bidirectional_iter test_list 0)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_iter (rest test_list) (+ count 1))]\n      [else (count_bidirectional_iter (rest test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list counter)\n    (cond\n      [(empty? test_list) counter]\n      [else\n       (define (find_match test_list counter)\n         (cond\n           [(empty? test_list) counter]\n           [(test_list (first test_list)) (count_bidirectional_helper (rest test_list) (+ counter 1))]\n           [else (find_match (rest test_list) counter)]))\n       (count_bidirectional_helper (rest test_list) (find_match (rest test_list) counter))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (cdr test_list)) 0]\n                                               [(test_list (car test_list) (cadr test_list))\n                                                (+ 1 (count_bidirectional_helper (cdr test_list)))]\n                                               [else (count_bidirectional_helper (cdr test_list))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (let loop ((test_list test_list)\n             (count 0))\n    (cond\n      [(empty? test_list) count]\n      [(member (car test_list) (cdr test_list))\n       (loop (cdr test_list) (+ count 1))]\n      [else (loop (cdr test_list) count)])))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [else (let ([first (car test_list)]\n                      [rest (cdr test_list)])\n                  (loop rest (+ count (count_bidirectional_helper first rest))))])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(test_list (first test_list)) (loop (rest test_list) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(member (reverse (first test_list)) (rest test_list))\n           (loop (rest test_list) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (cond\n       [(member (first test_list) (rest test_list))\n        (+ 1 (count_bidirectional (rest test_list)))]\n       [else (count_bidirectional (rest test_list))])]))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [else (let ([first (car test_list)]\n                       [rest (cdr test_list)])\n                  (loop rest (if (member first rest)\n                                 (+ count 1)\n                                 count)))])))\n",
    "  (cond [(empty? test_list) 0]\n        [(empty? (rest test_list)) 0]\n        [else (+ (count_bidirectional (rest test_list))\n                 (count_bidirectional (rest (rest test_list)))\n                 (if (and (test_bidirectional (first test_list) (second test_list))\n                          (test_bidirectional (second test_list) (first test_list)))\n                     1\n                     0))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(member (reverse (car test_list)) (cdr test_list))\n       (count_bidirectional_helper (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_helper (cdr test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [else (let ([first (first test_list)])\n                  (loop (rest test_list)\n                        (if (member first (rest test_list))\n                            (+ count 1)\n                            count)))])))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(bidirectional? (first test_list))\n     (+ 1 (count_bidirectional (rest test_list)))]\n    [else (count_bidirectional (rest test_list))]))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (check_bidirectional test_list)\n         (cond\n           [(empty? test_list) #f]\n           [else\n            (if (equal? (first test_list) (first (rest test_list)))\n                #t\n                (check_bidirectional (rest test_list)))]))\n       (if (check_bidirectional test_list)\n           (count_bidirectional_iter (rest test_list) (+ count 1))\n           (count_bidirectional_iter (rest test_list) count))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (member (reverse (car test_list)) (cdr test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond\n      [(empty? test_list) count]\n      [(member (cdr (car test_list)) (map car test_list))\n       (loop (cdr test_list) (+ count 1))]\n      [else (loop (cdr test_list) count)])))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [(not (pair? (car test_list))) (loop (cdr test_list) count)]\n          [else\n           (let ([a (car test_list)]\n                 [b (cadr test_list)])\n             (cond [(and (equal? a b)\n                         (equal? b a))\n                    (loop (cddr test_list) (+ count 1))]\n                   [else (loop (cdr test_list) count)]))])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (let ((first (car test_list))\n              (rest (cdr test_list)))\n          (if (member (reverse first) rest)\n              (count_bidirectional_helper rest (+ count 1))\n              (count_bidirectional_helper rest count)))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (rest test_list)) 0]\n                                               [(and (equal? (first test_list) (third test_list))\n                                                     (equal? (second test_list) (fourth test_list)))\n                                                (+ 1 (count_bidirectional_helper (rest (rest test_list))))]\n                                               [else (count_bidirectional_helper (rest test_list))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [(member (first test_list) (rest test_list))\n           (loop (rest test_list) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((member (cdr (car test_list)) (map car test_list))\n           (count_bidirectional_helper (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let* ([first (first test_list)]\n            [rest (rest test_list)]\n            [count (count_bidirectional rest)])\n       (if (member first rest)\n           (+ count 1)\n           count))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(member (cdr (car test_list)) (map car test_list))\n       (count_bidirectional_iter (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)]\n           [rest (rest test_list)])\n       (+ (count_bidirectional rest)\n          (count_bidirectional (filter (lambda (x) (test first x)) rest))))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (empty? test_list)\n        count\n        (let ([first_item (first test_list)])\n          (count_bidirectional_helper (rest test_list)\n                                      (+ count (count_bidirectional_helper (rest test_list) 0 first_item))))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond\n      [(empty? test_list) count]\n      [(and (member (first test_list) (rest test_list))\n            (member (reverse (first test_list)) (rest test_list)))\n       (loop (rest test_list) (+ count 1))]\n      [else (loop (rest test_list) count)])))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond\n                                           [(empty? test_list) 0]\n                                           [(member (cdr (car test_list)) (car test_list))\n                                            (+ 1 (count_bidirectional_helper (cdr test_list)))]\n                                           [else (count_bidirectional_helper (cdr test_list))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (if (null? test_list)\n        count\n        (let ([first (car test_list)]\n              [rest (cdr test_list)])\n          (loop rest (+ count (count_bidirectional_helper first rest)))))))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (rest test_list)) 0]\n                                               [else (+ (if (test_list (first test_list) (second test_list)) 1 0)\n                                                        (count_bidirectional_helper (rest test_list)))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else\n     (let ([first (car test_list)]\n           [second (cadr test_list)])\n       (cond\n         [(and (equal? first (car second))\n               (equal? second (car first)))\n          (+ 1 (count_bidirectional (cdr test_list)))]\n         [else (count_bidirectional (cdr test_list))]))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (is_bidirectional? test_list)\n         (cond\n           [(empty? test_list) #f]\n           [else\n            (if (equal? (car test_list) (cdr test_list))\n                #t\n                (is_bidirectional? (cdr test_list)))]))\n       (if (is_bidirectional? test_list)\n           (count_bidirectional_helper (cdr test_list) (+ count 1))\n           (count_bidirectional_helper (cdr test_list) count))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)])\n       (+ (count_bidirectional (rest test_list))\n          (count_bidirectional (filter (lambda (x) (and (equal? (first x) (second first))\n                                                        (equal? (second x) (first first))))\n                                        (rest test_list))))]))\n",
    "  (define (helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (helper (rest test_list) (+ count 1))]\n      [else (helper (rest test_list) count)]))\n  (helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)])\n       (+ (count_bidirectional (rest test_list))\n          (count_bidirectional (filter (lambda (x) (equal? (first x) (second first))) (rest test_list)))\n          1))]))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (if (null? test_list)\n        count\n        (let ([first (car test_list)]\n              [rest (cdr test_list)])\n          (loop rest\n                (+ count\n                   (count_bidirectional_helper first rest)))))))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define first_pair (first test_list))\n       (define second_pair (second test_list))\n       (define third_pair (third test_list))\n       (define fourth_pair (fourth test_list))\n       (define fifth_pair (fifth test_list))\n       (define sixth_pair (sixth test_list))\n       (define seventh_pair (seventh test_list))\n       (define eighth_pair (eighth test_list))\n       (define ninth_pair (ninth test_list))\n       (define tenth_pair (tenth test_list))\n       (define eleventh_pair (eleventh test_list))\n       (define twelfth_pair (twelfth test_list))\n       (define thirteenth_pair (thirteenth test_list))\n       (define fourteenth_pair (fourteenth test_list))\n       (define fifteenth_pair (fifteenth test_list))\n       (define sixteenth_pair (sixteenth test_list))\n       (define seventeenth_pair (seventeenth test_list))\n       (define eighteenth_pair (eighteenth test_list))\n       (define nineteenth_pair (nineteenth test_list))\n       (define twentieth_pair (twentieth test_list))\n       (define twentyfirst_pair (twentyfirst test_list))\n       (define twentysecond_pair (twentysecond test_list))\n       (define twentythird_pair (twentythird test_list))\n       (define twentyfourth_pair (twentyfourth test_list))\n       (define twentyfifth_pair (twentyfifth test_list))\n       (define twentysixth_pair (twentysixth test_list))\n       (define twentyseventh_pair (twentyseventh test_list))\n       (define twentyeighth_pair (twentyeighth test_list))\n       (define twentyninth_pair (twentyninth test_list))\n       (define thirtieth_pair (thirtieth test_list))\n       (define thirtyfirst_pair (thirtyfirst test_list))\n      ",
    "  (define (count_bidirectional_helper test_list count)\n    (cond [(empty? test_list) count]\n          [(member (first test_list) (rest test_list))\n           (count_bidirectional_helper (rest test_list) (+ count 1))]\n          [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(bidirectional? (first test_list))\n     (+ 1 (count_bidirectional (rest test_list)))]\n    [else (count_bidirectional (rest test_list))]))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [(and (member (car test_list) (cdr test_list))\n                (member (cdr test_list) (car test_list)))\n           (loop (cdr test_list) (+ count 1))]\n          [else (loop (cdr test_list) count)])))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define first_pair (first test_list))\n       (define second_pair (second test_list))\n       (define third_pair (third test_list))\n       (define fourth_pair (fourth test_list))\n       (define fifth_pair (fifth test_list))\n       (define sixth_pair (sixth test_list))\n       (define seventh_pair (seventh test_list))\n       (define eighth_pair (eighth test_list))\n       (define ninth_pair (ninth test_list))\n       (define tenth_pair (tenth test_list))\n       (define eleventh_pair (eleventh test_list))\n       (define twelfth_pair (twelfth test_list))\n       (define thirteenth_pair (thirteenth test_list))\n       (define fourteenth_pair (fourteenth test_list))\n       (define fifteenth_pair (fifteenth test_list))\n       (define sixteenth_pair (sixteenth test_list))\n       (define seventeenth_pair (seventeenth test_list))\n       (define eighteenth_pair (eighteenth test_list))\n       (define nineteenth_pair (nineteenth test_list))\n       (define twentieth_pair (twentieth test_list))\n       (define twentyfirst_pair (twentyfirst test_list))\n       (define twentysecond_pair (twentysecond test_list))\n       (define twentythird_pair (twentythird test_list))\n       (define twentyfourth_pair (twentyfourth test_list))\n       (define twentyfifth_pair (twentyfifth test_list))\n       (define twentysixth_pair (twentysixth test_list))\n       (define twentyseventh_pair (twentyseventh test_list))\n       (define twentyeighth_pair (twentyeighth test_list))\n       (define twentyninth_pair (twentyninth test_list))\n       (define thirtieth_pair (thirtieth test_list))\n       (define thirtyfirst_pair (thirtyfirst test_list))\n      ",
    "  (letrec ([count-bidirectional (lambda (test_list)\n                                  (cond [(empty? test_list) 0]\n                                        [(empty? (rest test_list)) 0]\n                                        [(test_list (first test_list) (second test_list))\n                                         (+ 1 (count-bidirectional (rest test_list)))]\n                                        [else (count-bidirectional (rest test_list))]))])\n    (count-bidirectional test_list)))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond\n                                           [(empty? test_list) 0]\n                                           [else (+ (count_bidirectional_helper (cdr test_list))\n                                                    (count_bidirectional_helper (cdr (cdr test_list)))\n                                                    (if (equal? (car test_list) (caddr test_list)) 1 0))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (define (count_bidirectional_helper test_list acc)\n    (cond ((null? test_list) acc)\n          ((member (cdr (car test_list))\n                   (map car test_list))\n           (count_bidirectional_helper (cdr test_list) (+ acc 1)))\n          (else (count_bidirectional_helper (cdr test_list) acc))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)])\n       (+ (count_bidirectional (rest test_list))\n          (count_bidirectional (filter (lambda (x) (equal? (first x) first))\n                                       (rest test_list)))\n          1))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((and (member (car test_list) (cdr test_list))\n                (member (cdr test_list) (car test_list)))\n           (count_bidirectional_helper (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)])\n       (+ (count_bidirectional (rest test_list))\n          (count_bidirectional (filter (lambda (x) (and (test first x) (test x first)))\n                                       (rest test_list)))\n          1))]))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (cdr test_list)) 0]\n                                               [(and (equal? (car test_list) (caddr test_list))\n                                                     (equal? (cadr test_list) (cadddr test_list)))\n                                                (+ 1 (count_bidirectional_helper (cddr test_list)))]\n                                               [else (count_bidirectional_helper (cdr test_list))]))])\n    (count_bidirectional_helper test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (let ((first (car test_list))\n              (rest (cdr test_list)))\n          (if (member first rest)\n              (count_bidirectional_helper rest (+ count 1))\n              (count_bidirectional_helper rest count)))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [(and (member (first test_list) (rest test_list))\n                (member (rest test_list) (first test_list)))\n           (loop (rest test_list) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (letrec ([count_bidirectional-helper (lambda (test_list)\n                                         (cond [(empty? test_list) 0]\n                                               [(empty? (rest test_list)) 0]\n                                               [(and (test_list (first test_list) (second test_list))\n                                                     (test_list (second test_list) (first test_list)))\n                                                (+ 1 (count_bidirectional-helper (rest (rest test_list))))]\n                                               [else (count_bidirectional-helper (rest test_list))]))])\n    (count_bidirectional-helper test_list)))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (cond\n       [(member (first test_list) (rest test_list))\n        (+ 1 (count_bidirectional (rest test_list)))]\n       [else (count_bidirectional (rest test_list))])]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define first_pair (first test_list))\n       (define second_pair (second test_list))\n       (define third_pair (third test_list))\n       (define fourth_pair (fourth test_list))\n       (define fifth_pair (fifth test_list))\n       (define sixth_pair (sixth test_list))\n       (cond\n         [(and (equal? (first first_pair) (first second_pair))\n               (equal? (second first_pair) (second second_pair))\n               (equal? (first third_pair) (first fourth_pair))\n               (equal? (second third_pair) (second fourth_pair))\n               (equal? (first fifth_pair) (first sixth_pair))\n               (equal? (second fifth_pair) (second sixth_pair))\n               (equal? (first first_pair) (second third_pair))\n               (equal? (second first_pair) (first third_pair))\n               (equal? (first second_pair) (second fifth_pair))\n               (equal? (second second_pair) (first fifth_pair))\n               (equal? (first fourth_pair) (second sixth_pair))\n               (equal? (second fourth_pair) (first sixth_pair)))\n          (count_bidirectional_helper (rest test_list) (+ count 1))]\n         [else\n          (count_bidirectional_helper (rest test_list) count)]))])\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [else (let ([first (first test_list)])\n                  (loop (rest test_list)\n                        (if (member first (rest test_list))\n                            (+ count 1)\n                            count)))])))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (if (null? test_list)\n        count\n        (let ((first (car test_list))\n              (rest (cdr test_list)))\n          (loop rest (+ count (count_bidirectional_helper first rest)))))))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (member (list (cadr test_list) (car test_list)) (cddr test_list))\n            (count_bidirectional_helper (cddr test_list) (+ count 1))\n            (count_bidirectional_helper (cddr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond [(empty? test_list) count]\n          [(member (reverse (first test_list)) (rest test_list))\n           (count_bidirectional_helper (rest test_list) (+ count 1))]\n          [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_helper (rest test_list) (+ count 1))]\n      [else (count_bidirectional_helper (rest test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (loop (rest test_list) (+ count 1))]\n      [else (loop (rest test_list) count)])))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [else (let ([a (first test_list)]\n                      [b (second test_list)])\n                  (if (and (test a b) (test b a))\n                      (loop (rest (rest test_list)) (+ count 1))\n                      (loop (rest (rest test_list)) count)))])))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (if (null? test_list)\n                                             0\n                                             (+ (count_bidirectional_helper (cdr test_list))\n                                                (count_bidirectional_helper (cdr (cdr test_list)))\n                                                (if (and (equal? (car test_list) (caddr test_list))\n                                                         (equal? (cadr test_list) (car (cdr (cdr test_list)))))\n                                                    1\n                                                    0))))])\n    (count_bidirectional_helper test_list)))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(member (first test_list) (rest test_list))\n       (count_bidirectional_iter (rest test_list) (+ count 1))]\n      [else (count_bidirectional_iter (rest test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first_pair (first test_list)])\n       (cond\n         [(and (pair? first_pair)\n               (equal? (first first_pair) (second first_pair)))\n          (+ 1 (count_bidirectional (rest test_list)))]\n         [else\n          (count_bidirectional (rest test_list))]))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [else\n     (let ([first (car test_list)]\n           [rest (cdr test_list)])\n       (cond\n         [(null? rest) 0]\n         [else\n          (let ([second (car rest)]\n                [rest_rest (cdr rest)])\n            (cond\n              [(null? rest_rest) 0]\n              [else\n               (cond\n                 [(and (equal? first (car rest_rest))\n                       (equal? second (car (cdr rest_rest))))\n                  (+ 1 (count_bidirectional rest_rest))]\n                 [else\n                  (count_bidirectional rest_rest)])]))]))]))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)]\n           [rest (rest test_list)])\n       (cond\n         [(empty? rest) 0]\n         [else\n          (+ (count_bidirectional rest)\n             (count_bidirectional (filter (lambda (x) (and (test first x) (test x first))) rest)))\n          ]))]))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(bidirectional? (first test_list))\n     (+ 1 (count_bidirectional (rest test_list)))]\n    [else (count_bidirectional (rest test_list))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (let ([first (first test_list)]\n             [rest (rest test_list)])\n         (cond\n           [(member first rest)\n            (count_bidirectional_helper (remove first rest) (+ count 1))]\n           [else\n            (count_bidirectional_helper rest count)]))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else (count_bidirectional_iter (rest test_list)\n                                      (+ count (count_bidirectional_iter (rest test_list) 0)))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(member (reverse (car test_list)) (cdr test_list))\n       (count_bidirectional_helper (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_helper (cdr test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (if (null? test_list)\n        count\n        (loop (cdr test_list)\n              (if (member (car test_list) (cdr test_list))\n                  (+ count 1)\n                  count)))))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [(member (first test_list) (rest test_list))\n           (loop (rest test_list) (+ count 1))]\n          [else (loop (rest test_list) count)])))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (if (null? test_list)\n        count\n        (let ([first (car test_list)]\n              [rest (cdr test_list)])\n          (loop rest (+ count (count_bidirectional_helper first rest)))))))\n",
    "  (letrec ([count 0]\n           [count-bidirectional (lambda (test_list)\n                                  (cond [(empty? test_list) count]\n                                        [else (let ([first (first test_list)])\n                                                (if (member first (rest test_list))\n                                                    (set! count (+ count 1))\n                                                    (set! count count))\n                                                (count-bidirectional (rest test_list))))])])\n    (count-bidirectional test_list)))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list count)\n                                         (cond [(empty? test_list) count]\n                                               [(member (second test_list) (first test_list))\n                                                (count_bidirectional_helper (rest test_list) (+ count 1))]\n                                               [else (count_bidirectional_helper (rest test_list) count)]))])\n    (count_bidirectional_helper test_list 0)))\n",
    "  (length (filter (lambda (x) (member (reverse x) test_list)) test_list)))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (cond [(empty? test_list) count]\n          [(pair? (car test_list))\n           (let ([a (car (car test_list))]\n                 [b (cdr (car test_list))])\n             (loop (cdr test_list)\n                   (if (or (and (equal? a b) (equal? b a))\n                           (and (equal? a b) (equal? b a)))\n                       (+ count 1)\n                       count)))]\n          [else (loop (cdr test_list) count)])))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(empty? test_list) count]\n          [else (loop (cdr test_list)\n                      (+ count (count_bidirectional_helper (car test_list) (cdr test_list))))])))\n",
    "  (let ([count 0])\n    (for ([i (in-range (length test_list))])\n      (for ([j (in-range (length test_list))])\n        (if (and (equal? (list-ref test_list i) (list-ref test_list j))\n                 (equal? (list-ref test_list j) (list-ref test_list i)))\n            (set! count (+ count 1)))))\n    count))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let* ([first (first test_list)]\n            [rest (rest test_list)]\n            [first_reverse (reverse first)]\n            [rest_reverse (map reverse rest)])\n       (+ (count_bidirectional rest)\n          (count_bidirectional rest_reverse)\n          (count_bidirectional (filter (lambda (x) (equal? first x)) rest_reverse))\n          (count_bidirectional (filter (lambda (x) (equal? first_reverse x)) rest))\n          (count_bidirectional (filter (lambda (x) (equal? first_reverse x)) rest_reverse))))]))\n",
    "  (letrec ([count_bidirectional_helper (lambda (test_list)\n                                         (if (null? test_list)\n                                             0\n                                             (+ (count_bidirectional_helper (cdr test_list))\n                                                (count_bidirectional_helper (cdr (cdr test_list)))\n                                                (if (and (equal? (car test_list) (caddr test_list))\n                                                         (equal? (cadr test_list) (car (cdr (cdr test_list)))))\n                                                    1\n                                                    0))))])\n    (count_bidirectional_helper test_list)))\n"
  ]
}