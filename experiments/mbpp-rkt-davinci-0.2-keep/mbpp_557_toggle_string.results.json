{
  "name": "mbpp_557_toggle_string",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-alphabetic? c)\n         (if (char-lower-case? c)\n             (char-upcase c)\n             (char-downcase c))\n         c))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpevowxhll.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpevowxhll.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c)\n                              (char-downcase c)\n                              (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp9pkexfia.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp9pkexfia.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x)\n                (if (char-alphabetic? x)\n                    (if (char-upper-case? x)\n                        (char-downcase x)\n                        (char-upcase x))\n                    x))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpz4pd6vzf.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpz4pd6vzf.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-lower-case? c)\n                        (char-upcase c)\n                        (char-downcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp1hujkcmv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp1hujkcmv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-upper-case? char)\n         (char-downcase char)\n         (char-upcase char)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmprwu2x7iy.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmprwu2x7iy.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-upper-case? char)\n                    (char-downcase char)\n                    (char-upcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmppu_th39_.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmppu_th39_.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-upper-case? c)\n         (char-downcase c)\n         (char-upcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_wk0npqt.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_wk0npqt.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-alphabetic? char)\n                    (if (char-lower-case? char)\n                        (char-upcase char)\n                        (char-downcase char))\n                    char))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpboeta1o_.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpboeta1o_.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpq9ayo98k.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpq9ayo98k.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-upper-case? x) (char-downcase x) (char-upcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpr6stymf1.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpr6stymf1.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join\n   (map\n    (lambda (c)\n      (if (char-alphabetic? c)\n          (if (char-upper-case? c)\n              (char-downcase c)\n              (char-upcase c))\n          c))\n    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4yweu9n.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4yweu9n.rkt:21:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4yweu9n.rkt:22:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-upper-case? char)\n                    (char-downcase char)\n                    (char-upcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmppu_th39_.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmppu_th39_.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (c)\n                      (if (char-alphabetic? c)\n                          (if (char-upper-case? c)\n                              (char-downcase c)\n                              (char-upcase c))\n                          c))\n                    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9rhx3y.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9rhx3y.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9rhx3y.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-lower-case? char)\n             (char-upcase char)\n             (char-downcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmphudva_e6.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmphudva_e6.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-alphabetic? char)\n                    (if (char-upper-case? char)\n                        (char-downcase char)\n                        (char-upcase char))\n                    char))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpjishxyxw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpjishxyxw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmpnphwqaql.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpnphwqaql.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (c)\n                      (if (char-lower-case? c)\n                          (char-upcase c)\n                          (char-downcase c)))\n                    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2eccxwno.rkt:16:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2eccxwno.rkt:17:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2eccxwno.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-upper-case? c)\n         (char-downcase c)\n         (char-upcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_wk0npqt.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_wk0npqt.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (c)\n                      (if (char-alphabetic? c)\n                          (if (char-upper-case? c)\n                              (char-downcase c)\n                              (char-upcase c))\n                          c))\n                    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9rhx3y.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9rhx3y.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9rhx3y.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-lower-case? char)\n                    (char-upcase char)\n                    (char-downcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpkp9emu34.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkp9emu34.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-upper-case? x) (char-downcase x) (char-upcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpr6stymf1.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpr6stymf1.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-upper-case? x) (char-downcase x) (char-upcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpr6stymf1.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpr6stymf1.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-upper-case? c)\n         (char-downcase c)\n         (char-upcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_wk0npqt.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_wk0npqt.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-alphabetic? c)\n         (if (char-lower-case? c)\n             (char-upcase c)\n             (char-downcase c))\n         c))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpevowxhll.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpevowxhll.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-lower-case? char)\n                    (char-upcase char)\n                    (char-downcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpkp9emu34.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkp9emu34.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (map (lambda (c)\n         (if (char-alphabetic? c)\n             (if (char-lower-case? c)\n                 (char-upcase c)\n                 (char-downcase c))\n             c))\n       string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0qs9m4k8.rkt:18:4\n\nmap: contract violation\n  expected: list?\n  given: \"Python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0qs9m4k8.rkt:19:4\n\nmap: contract violation\n  expected: list?\n  given: \"Pangram\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0qs9m4k8.rkt:20:4\n\nmap: contract violation\n  expected: list?\n  given: \"LIttLE\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmpnphwqaql.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpnphwqaql.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (ch)\n                (if (char-lower-case? ch)\n                    (char-upcase ch)\n                    (char-downcase ch)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "/tmp/tmpnlnczuff.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpnlnczuff.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-lower-case? char)\n                    (char-upcase char)\n                    (char-downcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpkp9emu34.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkp9emu34.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (char)\n                      (if (char-alphabetic? char)\n                          (if (char-lower-case? char)\n                              (char-upcase char)\n                              (char-downcase char))\n                          char))\n                    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppt826etg.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppt826etg.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppt826etg.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case? c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmptwj8xa0b.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmptwj8xa0b.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-upper-case? char)\n             (char-downcase char)\n             (char-upcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp_45nrvj9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_45nrvj9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-upper-case? c)\n         (char-downcase c)\n         (char-upcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_wk0npqt.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_wk0npqt.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmpnphwqaql.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpnphwqaql.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-alphabetic? char)\n                    (if (char-upper-case? char)\n                        (char-downcase char)\n                        (char-upcase char))\n                    char))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpjishxyxw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpjishxyxw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-upper-case? char)\n             (char-downcase char)\n             (char-upcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp_45nrvj9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_45nrvj9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-alphabetic? c)\n         (if (char-upper-case? c)\n             (char-downcase c)\n             (char-upcase c))\n         c))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpg5r_d8iw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpg5r_d8iw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-alphabetic? c)\n         (if (char-upper-case? c)\n             (char-downcase c)\n             (char-upcase c))\n         c))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpg5r_d8iw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpg5r_d8iw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join\n   (map\n    (lambda (char)\n      (if (char-alphabetic? char)\n          (if (char-upper-case? char)\n              (char-downcase char)\n              (char-upcase char))\n          char))\n    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn6zv330.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn6zv330.rkt:21:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn6zv330.rkt:22:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-lower-case? char)\n                    (char-upcase char)\n                    (char-downcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpkp9emu34.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkp9emu34.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join\n   (map (lambda (c)\n          (if (char-alphabetic? c)\n              (if (char-upper-case? c)\n                  (char-downcase c)\n                  (char-upcase c))\n              c))\n        (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb5qt0byo.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb5qt0byo.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb5qt0byo.rkt:21:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-lower-case? c)\n                        (char-upcase c)\n                        (char-downcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp1hujkcmv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp1hujkcmv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (char)\n                      (if (char-alphabetic? char)\n                          (if (char-upper-case? char)\n                              (char-downcase char)\n                              (char-upcase char))\n                          char))\n                    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0vuwi1nc.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0vuwi1nc.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0vuwi1nc.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-alphabetic? c)\n         (if (char-upper-case? c)\n             (char-downcase c)\n             (char-upcase c))\n         c))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpg5r_d8iw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpg5r_d8iw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case? c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmptwj8xa0b.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmptwj8xa0b.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-upper-case? char)\n             (char-downcase char)\n             (char-upcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp_45nrvj9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_45nrvj9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join\n   (map\n    (lambda (c)\n      (if (char-alphabetic? c)\n          (if (char-upper-case? c)\n              (char-downcase c)\n              (char-upcase c))\n          c))\n    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4yweu9n.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4yweu9n.rkt:21:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4yweu9n.rkt:22:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-alphabetic? c)\n         (if (char-upper-case? c)\n             (char-downcase c)\n             (char-upcase c))\n         c))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpg5r_d8iw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpg5r_d8iw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-ci=? c #\\a)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "/tmp/tmpz54_ti95.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpz54_ti95.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join\n   (map\n    (lambda (char)\n      (if (char-alphabetic? char)\n          (if (char-upper-case? char)\n              (char-downcase char)\n              (char-upcase char))\n          char))\n    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn6zv330.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn6zv330.rkt:21:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjn6zv330.rkt:22:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x)\n                (if (char-alphabetic? x)\n                    (if (char-upper-case? x)\n                        (char-downcase x)\n                        (char-upcase x))\n                    x))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpz4pd6vzf.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpz4pd6vzf.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-alphabetic? x)\n                              (char-downcase x)\n                              (char-upcase x)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp2v_jk_i9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp2v_jk_i9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (ch)\n                (if (char-upper-case? ch)\n                    (char-downcase ch)\n                    (char-upcase ch)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "/tmp/tmpbu7hzsb2.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpbu7hzsb2.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (map (lambda (c)\n         (if (char-alphabetic? c)\n             (if (char-upper-case? c)\n                 (char-downcase c)\n                 (char-upcase c))\n             c))\n       string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbje5io16.rkt:18:4\n\nmap: contract violation\n  expected: list?\n  given: \"Python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbje5io16.rkt:19:4\n\nmap: contract violation\n  expected: list?\n  given: \"Pangram\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbje5io16.rkt:20:4\n\nmap: contract violation\n  expected: list?\n  given: \"LIttLE\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-alphabetic? c)\n                              (char-downcase c)\n                              (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpyu86t256.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpyu86t256.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmpnphwqaql.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpnphwqaql.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x)\n                (if (char-lower-case? x)\n                    (char-upcase x)\n                    (char-downcase x)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp0bukcdy0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp0bukcdy0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join\n   (map\n    (lambda (char)\n      (if (char-lower-case? char)\n          (char-upcase char)\n          (char-downcase char)))\n    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuaygals.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuaygals.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuaygals.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-lower-case? char)\n                    (char-upcase char)\n                    (char-downcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpkp9emu34.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkp9emu34.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-alphabetic? char)\n                    (if (char-upper-case? char)\n                        (char-downcase char)\n                        (char-upcase char))\n                    char))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpjishxyxw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpjishxyxw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-lower-case? c)\n                        (char-upcase c)\n                        (char-downcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp1hujkcmv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp1hujkcmv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmpnphwqaql.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpnphwqaql.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-upper-case? char)\n                    (char-downcase char)\n                    (char-upcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmppu_th39_.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmppu_th39_.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case? char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp22gfepgy.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp22gfepgy.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case? c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmptwj8xa0b.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmptwj8xa0b.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-upper-case? c)\n         (char-downcase c)\n         (char-upcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_wk0npqt.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_wk0npqt.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-upper-case? char)\n         (char-downcase char)\n         (char-upcase char)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmprwu2x7iy.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmprwu2x7iy.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (c)\n                      (if (char-alphabetic? c)\n                          (if (char-upper-case? c)\n                              (char-downcase c)\n                              (char-upcase c))\n                          c))\n                    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9rhx3y.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9rhx3y.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9rhx3y.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpq9ayo98k.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpq9ayo98k.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-upper-case? char)\n             (char-downcase char)\n             (char-upcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp_45nrvj9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_45nrvj9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join\n   (map\n    (lambda (char)\n      (if (char-alphabetic? char)\n          (char-downcase char)\n          (char-upcase char)))\n    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0108w2es.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\y #\\t #\\h #\\o #\\n)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0108w2es.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\a #\\n #\\g #\\r #\\a #\\m)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0108w2es.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\t #\\t #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmpnphwqaql.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpnphwqaql.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-upper-case? char)\n             (char-downcase char)\n             (char-upcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp_45nrvj9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_45nrvj9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join\n   (map\n    (lambda (char)\n      (if (char-alphabetic? char)\n          (if (char-lower-case? char)\n              (char-upcase char)\n              (char-downcase char))\n          char))\n    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpphg0kn_i.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpphg0kn_i.rkt:21:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpphg0kn_i.rkt:22:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case? char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp22gfepgy.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp22gfepgy.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-alphabetic? char)\n                    (if (char-upper-case? char)\n                        (char-downcase char)\n                        (char-upcase char))\n                    char))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpjishxyxw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpjishxyxw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-upper-case? char)\n             (char-downcase char)\n             (char-upcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp_45nrvj9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_45nrvj9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (char)\n                      (if (char-alphabetic? char)\n                          (if (char-lower-case? char)\n                              (char-upcase char)\n                              (char-downcase char))\n                          char))\n                    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppt826etg.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppt826etg.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppt826etg.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-lower-case? char)\n             (char-upcase char)\n             (char-downcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmphudva_e6.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmphudva_e6.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-alphabetic? char)\n                    (if (char-upper-case? char)\n                        (char-downcase char)\n                        (char-upcase char))\n                    char))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpjishxyxw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpjishxyxw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-alphabetic? char)\n                    (char-downcase char)\n                    (char-upcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmpe47u81mn.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpe47u81mn.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-lower-case? char)\n                    (char-upcase char)\n                    (char-downcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpkp9emu34.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkp9emu34.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (x) (if (char-upper-case? x) (char-downcase x) (char-upcase x))) (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8cr23bw.rkt:12:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8cr23bw.rkt:13:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8cr23bw.rkt:14:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-upper-case? char)\n             (char-downcase char)\n             (char-upcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp_45nrvj9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_45nrvj9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-alphabetic? c)\n         (if (char-upper-case? c)\n             (char-downcase c)\n             (char-upcase c))\n         c))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpg5r_d8iw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpg5r_d8iw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-lower-case? char)\n                    (char-upcase char)\n                    (char-downcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpkp9emu34.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkp9emu34.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-upper-case? c)\n         (char-downcase c)\n         (char-upcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_wk0npqt.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_wk0npqt.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-lower-case? char)\n                    (char-upcase char)\n                    (char-downcase char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpkp9emu34.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkp9emu34.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (char)\n                      (if (char-alphabetic? char)\n                          (if (char-upper-case? char)\n                              (char-downcase char)\n                              (char-upcase char))\n                          char))\n                    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0vuwi1nc.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0vuwi1nc.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0vuwi1nc.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upcase? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "/tmp/tmp31u0ppq5.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp31u0ppq5.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (c)\n     (if (char-upper-case? c)\n         (char-downcase c)\n         (char-upcase c)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmp_wk0npqt.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_wk0npqt.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-alphabetic? c)\n                              (char-upcase c)\n                              (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "/tmp/tmpguot8sq_.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpguot8sq_.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join (map (lambda (c)\n                      (if (char-upper-case? c)\n                          (char-downcase c)\n                          (char-upcase c)))\n                    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptuz0m_0l.rkt:16:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptuz0m_0l.rkt:17:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptuz0m_0l.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-upper-case? char)\n             (char-downcase char)\n             (char-upcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp_45nrvj9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_45nrvj9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (char)\n                (if (char-alphabetic? char)\n                    (if (char-upper-case? char)\n                        (char-downcase char)\n                        (char-upcase char))\n                    char))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpjishxyxw.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpjishxyxw.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic? char)\n         (if (char-upper-case? char)\n             (char-downcase char)\n             (char-upcase char))\n         char))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp_45nrvj9.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_45nrvj9.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-upper-case? c)\n                        (char-downcase c)\n                        (char-upcase c))\n                    c))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpd3swzed0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpd3swzed0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-join\n   (map\n    (lambda (char)\n      (if (char-lower-case? char)\n          (char-upcase char)\n          (char-downcase char)))\n    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuaygals.rkt:18:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\Y #\\T #\\H #\\O #\\N)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuaygals.rkt:19:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\p #\\A #\\N #\\G #\\R #\\A #\\M)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuaygals.rkt:20:4\n\nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\l #\\i #\\T #\\T #\\l #\\e)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-numeric? c)\n                    c\n                    (if (char-alphabetic? c)\n                        (if (char-lower-case? c)\n                            (char-upcase c)\n                            (char-downcase c))\n                        c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123858,
      "stdout": "",
      "stderr": "/tmp/tmppu_ff1bq.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmppu_ff1bq.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmpkey7tktz.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpkey7tktz.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpqzp572mv.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpqzp572mv.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509729,
      "stdout": "",
      "stderr": "/tmp/tmp18lsxpmg.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp18lsxpmg.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (x)\n                (if (char-lower-case? x)\n                    (char-upcase x)\n                    (char-downcase x)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "/tmp/tmp0bukcdy0.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp0bukcdy0.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
      "timestamp": 1665509730,
      "stdout": "",
      "stderr": "/tmp/tmpcevutt9y.rkt:5:3: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpcevutt9y.rkt:5:3\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}