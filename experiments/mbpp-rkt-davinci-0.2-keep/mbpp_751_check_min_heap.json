{
  "name": "mbpp_751_check_min_heap",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n(define (check_min_heap arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_min_heap))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) #t)\n    (check-equal? (candidate (list 2 3 4 5 10 15)) #t)\n    (check-equal? (candidate (list 2 10 4 5 3 15)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([i 0])\n    (if (= i (quotient (- (vector-length arr) 2) 2))\n        #t\n        (and (and (<= (vector-ref arr i) (vector-ref arr (+ (* 2 i) 1)))\n                  (<= (vector-ref arr i) (vector-ref arr (+ (* 2 i) 2))))\n             (loop (+ i 1))))))\n",
    "  (define (check-min-heap-helper arr i)\n    (if (&lt; i (array-length arr))\n        (and (if (&lt; i (array-length arr) -1)\n                 (&lt;= (array-ref arr i) (array-ref arr (+ i 1)))\n                 #t)\n             (if (&lt; i (array-length arr) -2)\n                 (&lt;= (array-ref arr i) (array-ref arr (+ i 2)))\n                 #t)\n             (check-min-heap-helper arr (+ i 1)))\n        #t))\n  (check-min-heap-helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (cond\n      [(>= i (quotient (length arr) 2)) #t]\n      [(and (< (vector-ref arr i) (vector-ref arr (* 2 i 1)))\n            (< (vector-ref arr i) (vector-ref arr (* 2 i 1))))\n       (check_min_heap_helper arr (+ i 1))]\n      [else #f]))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check-heap-rec arr i)\n    (if (&lt; i (quotient (length arr) 2))\n        (and (&lt;= (list-ref arr i) (list-ref arr (+ i 1)))\n             (&lt;= (list-ref arr i) (list-ref arr (+ i 2)))\n             (check-heap-rec arr (+ i 1))\n             (check-heap-rec arr (+ i 2)))\n        #t))\n  (check-heap-rec arr 0))\n",
    "  (define (check-heap-rec arr i)\n    (cond\n      [(< i (quotient (length arr) 2))\n       (and (and (<= (vector-ref arr i) (vector-ref arr (+ i 1)))\n                 (<= (vector-ref arr i) (vector-ref arr (+ i 2))))\n            (and (check-heap-rec arr (+ i 1))\n                 (check-heap-rec arr (+ i 2))))]\n      [else #t]))\n  (check-heap-rec arr 0))\n",
    "  (define (check-min-heap-helper arr i)\n    (if (&gt;= i (array-length arr))\n        #t\n        (and (and (&lt;= (array-ref arr i) (array-ref arr (* 2 i 1)))\n                  (&lt;= (array-ref arr i) (array-ref arr (* 2 i 2))))\n             (check-min-heap-helper arr (+ i 1)))))\n  (check-min-heap-helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&gt;= i (quotient (length arr) 2)) #t\n        (and (&lt; (list-ref arr i) (list-ref arr (quotient (+ i 1) 2)))\n             (&lt; (list-ref arr i) (list-ref arr (quotient (+ i 2) 2)))\n             (check_min_heap_helper arr (+ i 1)))))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check-heap-helper arr i)\n    (if (&lt; i (array-length arr))\n        (and (&lt;= (array-ref arr i) (array-ref arr (* 2 i)))\n             (&lt;= (array-ref arr i) (array-ref arr (+ (* 2 i) 1)))\n             (check-heap-helper arr (* 2 i))\n             (check-heap-helper arr (+ (* 2 i) 1)))\n        #t))\n  (check-heap-helper arr 1))\n",
    "  (define (check-heap-rec arr i)\n    (if (= i (length arr))\n        #t\n        (and (or (null? (list-ref arr i))\n                 (and (<= (list-ref arr i) (list-ref arr (* 2 i 1)))\n                      (<= (list-ref arr i) (list-ref arr (* 2 i 1 1)))))\n             (check-heap-rec arr (+ i 1)))))\n  (check-heap-rec arr 0))\n",
    "  (define (check-heap-rec arr i)\n    (if (= i (quotient (length arr) 2))\n        #t\n        (and (<= (vector-ref arr i) (vector-ref arr (+ (* 2 i) 1)))\n             (<= (vector-ref arr i) (vector-ref arr (+ (* 2 i) 2)))\n             (check-heap-rec arr (+ i 1)))))\n  (check-heap-rec arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&gt;= i (array-length arr))\n        #t\n        (and (or (&lt; (array-ref arr i) (array-ref arr (* 2 i)))\n                 (&lt; (array-ref arr i) (array-ref arr (+ (* 2 i) 1))))\n             (check_min_heap_helper arr (+ i 1)))))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check-heap arr i)\n    (if (&lt; i (array-length arr))\n        (and (&lt;= (array-ref arr i) (array-ref arr (* 2 i 1)))\n             (&lt;= (array-ref arr i) (array-ref arr (* 2 i 2)))\n             (check-heap arr (+ i 1)))\n        #t))\n  (check-heap arr 0))\n",
    "  (define (check_node i)\n    (if (< i (length arr))\n        (and (<= (vector-ref arr i) (vector-ref arr (min (+ i 1) (length arr))))\n             (and (<= (vector-ref arr i) (vector-ref arr (min (+ i 2) (length arr))))\n                  (check_node (+ i 1))))\n        #t))\n  (check_node 0))\n",
    "  (define (check-heap-at-index i)\n    (if (< i (array-length arr))\n        (and (<= (array-ref arr i) (array-ref arr (* 2 i 1)))\n             (<= (array-ref arr i) (array-ref arr (* 2 i 2)))\n             (check-heap-at-index (* 2 i 1))\n             (check-heap-at-index (* 2 i 2)))\n        #t))\n  (check-heap-at-index 0))\n",
    "  (define (check-min-heap-helper arr i)\n    (if (&lt; i (array-length arr))\n        (and (&lt;= (array-ref arr i) (array-ref arr (* 2 i 1)))\n             (&lt;= (array-ref arr i) (array-ref arr (* 2 i 1)))\n             (check-min-heap-helper arr (+ i 1)))\n        #t))\n  (check-min-heap-helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (cond [(= i (sub1 (length arr))) #t]\n          [(< (vector-ref arr i) (vector-ref arr (add1 i))) #f]\n          [else (check_min_heap_helper arr (add1 i))]))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&lt; i (quotient (length arr) 2))\n        (and (and (&lt;= (vector-ref arr i) (vector-ref arr (* 2 i)))\n                  (&lt;= (vector-ref arr i) (vector-ref arr (+ (* 2 i) 1))))\n             (and (check_min_heap_helper arr (* 2 i))\n                  (check_min_heap_helper arr (+ (* 2 i) 1))))\n        #t))\n  (check_min_heap_helper arr 1))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&gt;= i (array-length arr)) #t\n        (let ([left-child (array-ref arr (+ i 1))]\n              [right-child (array-ref arr (+ i 2))])\n          (and (or (not left-child) (&lt;= (array-ref arr i) left-child))\n               (or (not right-child) (&lt;= (array-ref arr i) right-child))\n               (check_min_heap_helper arr (+ i 1))))))\n  (check_min_heap_helper arr 0))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&lt; i (array-length arr))\n        (if (&lt; (array-ref arr i) (array-ref arr (* 2 i)))\n            (if (&lt; (array-ref arr i) (array-ref arr (+ (* 2 i) 1)))\n                (check_min_heap_helper arr (+ i 1))\n                #f)\n            #f)\n        #t))\n  (check_min_heap_helper arr 1))\n",
    "  (define (check_min_heap_helper arr i)\n    (if (&lt; i (quotient (length arr) 2))\n        (and (&lt;= (vector-ref arr i) (vector-ref arr (* 2 i)))\n             (&lt;= (vector-ref arr i) (vector-ref arr (+ (* 2 i) 1)))\n             (check_min_heap_helper arr (* 2 i))\n             (check_min_heap_helper arr (+ (* 2 i) 1)))\n        #t))\n  (check_min_heap_helper arr 1))\n"
  ]
}