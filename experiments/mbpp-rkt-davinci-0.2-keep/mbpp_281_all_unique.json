{
  "name": "mbpp_281_all_unique",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check if the elements of a given list are unique or not.\n(define (all_unique test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_unique))\n    (check-equal? (candidate (list 1 2 3)) #t)\n    (check-equal? (candidate (list 1 2 1 2)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_list) true]\n    [(member (first test_list) (rest test_list)) false]\n    [else (all_unique (rest test_list))]))\n",
    "  (let loop ([test_list test_list]\n             [acc '()])\n    (if (null? test_list)\n        (null? acc)\n        (if (member (car test_list) acc)\n            #f\n            (loop (cdr test_list) (cons (car test_list) acc))))))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [(member (first test_list) (rest test_list)) #f]\n    [else (all_unique (rest test_list))]))\n",
    "  (define (all_unique_helper test_list seen_list)\n    (cond\n      [(empty? test_list) #t]\n      [(member (first test_list) seen_list) #f]\n      [else (all_unique_helper (rest test_list) (cons (first test_list) seen_list))]))\n  (all_unique_helper test_list '()))\n",
    "  (let loop ([test_list test_list]\n             [result #t])\n    (cond [(empty? test_list) result]\n          [(member (first test_list) (rest test_list)) (loop (rest test_list) #f)]\n          [else (loop (rest test_list) result)])))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [(member (first test_list) (rest test_list)) #f]\n    [else (all_unique (rest test_list))]))\n",
    "  (cond ((null? test_list) #t)\n        ((member (car test_list) (cdr test_list)) #f)\n        (else (all_unique (cdr test_list)))))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [(member (first test_list) (rest test_list)) #f]\n    [else (all_unique (rest test_list))]))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [else\n     (cond\n       [(member (first test_list) (rest test_list)) #f]\n       [else (all_unique (rest test_list))])]))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [(member (first test_list) (rest test_list)) #f]\n    [else (all_unique (rest test_list))]))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [(member (first test_list) (rest test_list)) #f]\n    [else (all_unique (rest test_list))]))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [(member (first test_list) (rest test_list)) #f]\n    [else (all_unique (rest test_list))]))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [(member (first test_list) (rest test_list)) #f]\n    [else (all_unique (rest test_list))]))\n",
    "  (let loop ([test_list test_list]\n             [unique_list '()])\n    (cond\n      [(empty? test_list) #t]\n      [(member (first test_list) unique_list) #f]\n      [else (loop (rest test_list) (cons (first test_list) unique_list))])))\n",
    "  (let loop ([test_list test_list] [unique_list '()])\n    (cond\n      [(empty? test_list) #t]\n      [(member (first test_list) unique_list) #f]\n      [else (loop (rest test_list) (cons (first test_list) unique_list))])))\n",
    "  (define (all_unique_helper test_list seen_list)\n    (cond ((null? test_list) #t)\n          ((member (car test_list) seen_list) #f)\n          (else (all_unique_helper (cdr test_list) (cons (car test_list) seen_list)))))\n  (all_unique_helper test_list '()))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [(member (first test_list) (rest test_list)) #f]\n    [else (all_unique (rest test_list))]))\n",
    "  (cond\n    [(null? test_list) #t]\n    [(member (car test_list) (cdr test_list)) #f]\n    [else (all_unique (cdr test_list))]))\n",
    "  (if (null? test_list)\n      #t\n      (if (member (car test_list) (cdr test_list))\n          #f\n          (all_unique (cdr test_list)))))\n",
    "  (cond\n    [(empty? test_list) #t]\n    [(member (first test_list) (rest test_list)) #f]\n    [else (all_unique (rest test_list))]))\n"
  ]
}