{
  "name": "mbpp_635_heap_sort",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort the given list.\n(define (heap_sort iterable)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate heap_sort))\n    (check-equal? (candidate (list 1 3 5 7 9 2 4 6 8 0)) (list 0 1 2 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 25 35 22 85 14 65 75 25 58)) (list 14 22 25 25 35 58 65 75 85))\n    (check-equal? (candidate (list 7 1 9 5)) (list 1 5 7 9))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (swap lst i j)\n    (define (swap-help lst i j)\n      (if (zero? i)\n          (cons (list-ref lst j) (list-ref lst i))\n          (cons (list-ref lst i) (swap-help (cdr lst) (- i 1) j))))\n    (swap-help lst i j))\n\n  (define (heapify lst i n)\n    (define (heapify-help lst i n)\n      (if (zero? i)\n          lst\n          (let ((largest (if (> (list-ref lst i) (list-ref lst (max-child lst i n)))\n                            i\n                            (max-child lst i n))))\n            (heapify-help (swap lst i largest) (- i 1) n))))\n    (heapify-help lst i n))\n\n  (define (max-child lst i n)\n    (define (max-child-help lst i n)\n      (if (or (>= (* 2 i) n) (>= (* 2 i 1) n))\n          i\n          (if (> (list-ref lst (* 2 i 1)) (list-ref lst (* 2 i)))\n              (* 2 i 1)\n              (* 2 i))))\n    (max-child-help lst i n))\n\n  (define (build-heap lst)\n    (define (build-heap-help lst i)\n      (if (zero? i)\n          lst\n          (build-heap-help (heapify lst i (length lst)) (- i 1))))\n    (build-heap-help lst (- (length lst) 1)))\n\n  (define (sort-heap lst)\n    (define (sort-heap-help lst n)\n      (if (zero? n)\n          lst\n          (sort-heap-help (swap lst 0 (- n 1)) (- n 1))))\n    (sort-heap-help lst (length lst)))\n\n  (sort-heap (build-heap iterable)))\n",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (max_heapify iterable i)\n      (define left (add1 (* 2 i)))\n      (define right (add1 (* 2 i 1)))\n      (define largest\n        (cond\n          [(> left (length iterable)) i]\n          [(> right (length iterable))\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable i)) left]\n             [else i])]\n          [else\n           (cond\n             [(> (list-ref iterable left) (list-ref iterable i)) left]\n             [(> (list-ref iterable right) (list-ref iterable i)) right]\n             [else i])]))\n      (cond\n        [(not (= largest i))\n         (swap i largest)\n         (max_heapify iterable largest)]\n        [else #f]))\n    (define (build_max_heap iterable)\n      (for ([i (in-range (quotient (length iterable) 2) -1 -1)])\n        (max_heapify iterable i)))\n    (define (heap_sort iterable)\n      (build_max_heap iterable)\n      (define (sort iterable)\n        (define (heapify iterable)\n          (define (swap i j)\n            (define temp (list-ref iterable i))\n            (set-car! (list-ref iterable i) (list-ref iterable j))\n            (set-car! (list-ref iterable j) temp))\n          (define (max_heapify iterable i)\n            (define left (add1 (* 2 i)))\n            (define right (add1 (* 2 i 1)))\n            (define largest\n              (cond\n                [(> left (length iterable)) i]\n                [(> right (length iterable))\n                 (cond\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable)\n      (define (swap i j)\n        (let* ([temp (list-ref iterable i)]\n               [iterable (list-set iterable i (list-ref iterable j))]\n               [iterable (list-set iterable j temp)])\n          iterable))\n      (define (sift-down i)\n        (let* ([left-child (+ i 1)]\n               [right-child (+ i 2)]\n               [largest (if (and (< left-child (length iterable))\n                                 (< (list-ref iterable left-child)\n                                    (list-ref iterable i)))\n                            left-child\n                            i)]\n               [largest (if (and (< right-child (length iterable))\n                                 (< (list-ref iterable right-child)\n                                    (list-ref iterable largest)))\n                            right-child\n                            largest)])\n          (if (not (= largest i))\n              (begin\n                (swap i largest)\n                (sift-down largest)))))\n      (define (sift-up i)\n        (let* ([parent (quotient (- i 1) 2)])\n          (if (and (> parent 0)\n                   (< (list-ref iterable i)\n                      (list-ref iterable parent)))\n              (begin\n                (swap i parent)\n                (sift-up parent)))))\n      (define (build-heap)\n        (for ([i (in-range (quotient (- (length iterable) 2) 2) -1 -1)])\n          (sift-down i)))\n      (define (insert-item item)\n        (set! iterable (append iterable (list item)))\n        (sift-up (- (length iterable) 1)))\n      (define (extract-max)\n        (let* ([max (list-ref iterable 0)]\n               [iterable (list-set iterable 0 (list-ref iterable (- (length iterable) 1)))])\n          (set! iterable (sublist iterable 0 (- (length iterable) 1)))\n          (sift",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable i)\n      (if (&lt; i (length iterable))\n          (begin\n            (heapify-iter iterable (+ i 1))\n            (define (sift-down iterable i)\n              (define (swap iterable i j)\n                (define (swap-iter iterable i j)\n                  (if (&lt; i j)\n                      (begin\n                        (define temp (list-ref iterable i))\n                        (set-car! (list-ref iterable i) (list-ref iterable j))\n                        (set-car! (list-ref iterable j) temp)\n                        (swap-iter iterable (+ i 1) (+ j 1)))\n                      iterable))\n                (swap-iter iterable i j))\n              (define (sift-down-iter iterable i)\n                (if (&lt; i (length iterable))\n                    (begin\n                      (define left-child (+ i i))\n                      (define right-child (+ left-child 1))\n                      (define largest (if (&lt; left-child (length iterable))\n                                          (if (&lt; (list-ref iterable left-child) (list-ref iterable i))\n                                              i\n                                              left-child)\n                                          i))\n                      (set! largest (if (&lt; right-child (length iterable))\n                                        (if (&lt; (list-ref iterable right-child) (list-ref iterable largest))\n                                            largest\n                                            right-child)\n                                        largest))\n                      (if (= largest i)\n                          iterable\n                          (begin\n                            (swap iterable i largest)\n                            (sift-down-iter iterable largest))))\n                    iterable))\n              (sift-down-iter iterable i))\n            (sift-down iterable i)))\n      iterable)\n    (heapify-iter iterable 0))\n  (define (sort-iter iterable)\n    (if (empty? iterable)\n        '()\n        (begin\n          (define temp (list-ref iterable 0))\n         ",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (largest iterable i)\n        (define (largest-helper iterable i largest)\n          (if (&lt; i (length iterable))\n              (if (&gt; (list-ref iterable i) (list-ref iterable largest))\n                  (largest-helper iterable (+ i 1) i)\n                  (largest-helper iterable (+ i 1) largest))\n              largest))\n      (define (swap iterable i j)\n        (define (swap-helper iterable i j)\n          (if (&lt; i (length iterable))\n              (if (= i j)\n                  (cons (list-ref iterable i) (swap-helper iterable (+ i 1) j))\n                  (cons (list-ref iterable j) (swap-helper iterable (+ i 1) j)))\n              '()))\n      (swap-helper iterable 0 j))\n      (define (largest-index iterable i)\n        (define (largest-index-helper iterable i largest)\n          (if (&lt; i (length iterable))\n              (if (&gt; (list-ref iterable i) (list-ref iterable largest))\n                  (largest-index-helper iterable (+ i 1) i)\n                  (largest-index-helper iterable (+ i 1) largest))\n              largest))\n      (largest-index-helper iterable 0 i))\n      (define (largest-index-helper iterable i largest)\n        (if (&lt; i (length iterable))\n            (if (&gt; (list-ref iterable i) (list-ref iterable largest))\n                (largest-index-helper iterable (+ i 1) i)\n                (largest-index-helper iterable (+ i 1) largest))\n            largest))\n      (define (largest-index iterable i)\n        (largest-index-helper iterable 0 i))\n      (define (left i) (+ i 1))\n      (define (right",
    "  (let ((heap (make-heap)))\n    (for ([x iterable])\n      (heap-insert heap x))\n    (let loop ()\n      (if (heap-empty? heap)\n          '()\n          (cons (heap-pop heap) (loop))))))\n",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable result)\n      (if (null? iterable)\n          result\n          (let* ([value (car iterable)]\n                 [rest (cdr iterable)]\n                 [new-result (heapify-iter rest (cons value result))])\n            (if (and (not (null? new-result))\n                     (&lt; value (car new-result)))\n                (cons value new-result)\n                new-result))))\n    (heapify-iter iterable '()))\n  (define (heap-sort-iter iterable result)\n    (if (null? iterable)\n        result\n        (let* ([value (car iterable)]\n               [rest (cdr iterable)]\n               [new-result (heap-sort-iter rest (cons value result))])\n          (if (and (not (null? new-result))\n                   (&lt; value (car new-result)))\n              (cons value new-result)\n              new-result))))\n  (heap-sort-iter (heapify iterable) '()))\n</code>\n",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (heapify-helper-helper iterable)\n        (define (heapify-helper-helper-helper iterable)\n          (define (heapify-helper-helper-helper-helper iterable)\n            (define (heapify-helper-helper-helper-helper-helper iterable)\n              (define (heapify-helper-helper-helper-helper-helper-helper iterable)\n                (define (heapify-helper-helper-helper-helper-helper-helper-helper iterable)\n                  (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                    (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                      (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                        (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                          (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                            (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                              (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                                (define (heapify-helper-helper-helper-helper-helper-helper-hel",
    "  (define (heapify iterable)\n    (define (heapify-iter iterable i)\n      (if (&lt; i (length iterable))\n          (begin\n            (heapify-iter iterable (+ i 1))\n            (define parent (quotient i 2))\n            (define child i)\n            (while (&lt; parent 0)\n              (if (&lt; (list-ref iterable parent) (list-ref iterable child))\n                  (begin\n                    (define temp (list-ref iterable parent))\n                    (set-car! (list-ref iterable parent) (list-ref iterable child))\n                    (set-car! (list-ref iterable child) temp)\n                    (define child parent)\n                    (define parent (quotient parent 2))))))\n          iterable))\n    (heapify-iter iterable 0))\n  (define (sort-iter iterable)\n    (if (empty? iterable)\n        '()\n        (begin\n          (define temp (list-ref iterable 0))\n          (set-car! (list-ref iterable 0) (list-ref iterable (- (length iterable) 1)))\n          (set-car! (list-ref iterable (- (length iterable) 1)) temp)\n          (define (sift-down iterable i)\n            (define left-child (+ (* 2 i) 1))\n            (define right-child (+ (* 2 i) 2))\n            (if (&lt; left-child (length iterable))\n                (begin\n                  (define largest i)\n                  (if (&lt; (list-ref iterable left-child) (list-ref iterable largest))\n                      (set! largest left-child))\n                  (if (&lt; (list-ref iterable right-child) (list-ref iterable largest))\n                      (set! largest right-child))\n                  (if (&lt; largest i)\n                      (begin\n                        (define temp (list-ref iterable i))\n                        (set-car! (list-ref iterable i) (list-ref iterable largest))\n                        (set-car! (list-ref iterable largest) temp)\n                        (sift-down iterable largest))))))",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define (swap-helper i j)\n          (define (swap-helper-helper i j)\n            (define (swap-helper-helper-helper i j)\n              (define (swap-helper-helper-helper-helper i j)\n                (define (swap-helper-helper-helper-helper-helper i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                  (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper i j)\n                                    (define (swap-helper-helper-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left-child i)\n        (+ i 1))\n      (define (right-child i)\n        (+ i 2))\n      (define (swap lst i j)\n        (define (swap-helper lst i j)\n          (if (= i j)\n              lst\n              (swap-helper (list-set lst i (list-ref lst j))\n                           j\n                           i)))\n      (swap-helper lst i j))\n      (define (max-heapify lst i)\n        (define (max-heapify-helper lst i)\n          (define (largest lst i)\n            (define (left-child i)\n              (+ i 1))\n            (define (right-child i)\n              (+ i 2))\n            (define (largest-helper lst i largest)\n              (if (and (not (null? (left-child i)))\n                       (&gt; (left-child i) (length lst))\n                       (&gt; (list-ref lst (left-child i)) (list-ref lst largest)))\n                  (largest-helper lst (left-child i) (left-child i))\n                  (if (and (not (null? (right-child i)))\n                           (&gt; (right-child i) (length lst))\n                           (&gt; (list-ref lst (right-child i)) (list-ref lst largest)))\n                      (largest-helper lst (right-child i) (right-child i))\n                      largest)))\n            (largest-helper lst i i))\n          (if (&gt; (largest lst i) i)\n              (max-heapify (swap lst i (largest lst i)) (largest lst i))\n              lst))\n        (max-heapify-helper lst i))\n      (define (build-max-heap lst)\n        (define (build-max-heap-helper lst i)\n          (if (&lt; i (length lst))\n",
    "  (define (heapify i)\n    (define (left i) (+ (* 2 i) 1))\n    (define (right i) (+ (* 2 i) 2))\n    (define (swap i j)\n      (define (swap-helper i j)\n        (set! (list-ref iterable i) (list-ref iterable j))\n        (set! (list-ref iterable j) (list-ref iterable i)))\n      (swap-helper i j))\n    (define (max-heapify i)\n      (define (largest i)\n        (cond ((and (not (null? (left i)))\n                    (&gt; (list-ref iterable (left i)) (list-ref iterable i)))\n               (left i))\n              ((and (not (null? (right i)))\n                    (&gt; (list-ref iterable (right i)) (list-ref iterable i)))\n               (right i))\n              (else i)))\n      (define (max-heapify-helper i)\n        (define (max-heapify-helper-helper i)\n          (max-heapify-helper (largest i)))\n        (cond ((&gt; (list-ref iterable (largest i)) (list-ref iterable i))\n               (swap i (largest i))\n               (max-heapify-helper-helper (largest i)))\n              (else i)))\n      (max-heapify-helper i))\n    (max-heapify i))\n  (define (build-max-heap)\n    (define (build-max-heap-helper i)\n      (cond ((&gt; i 0)\n             (build-max-heap-helper (- i 1))\n             (heapify i))\n            (else i)))\n    (build-max-heap-helper (- (length iterable) 1)))\n  (define (heap-sort-helper i)\n    (define (heap-sort-helper-helper i)\n      (heap-sort-helper (- i 1)))\n    (cond ((&gt; i 0)\n           (swap 0 i)",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (define (sift-down i)\n        (define (sift-down-helper i)\n          (define left (+ i i))\n          (define right (+ left 1))\n          (define largest\n            (cond\n              [(> left (length iterable)) i]\n              [(> right (length iterable))\n               (cond\n                 [(> (list-ref iterable left) (list-ref iterable i)) left]\n                 [else i])]\n              [(> (list-ref iterable left) (list-ref iterable right))\n               (cond\n                 [(> (list-ref iterable left) (list-ref iterable i)) left]\n                 [else i])]\n              [else\n               (cond\n                 [(> (list-ref iterable right) (list-ref iterable i)) right]\n                 [else i])]))\n          (when (not (= i largest))\n            (swap i largest)\n            (sift-down-helper largest)))\n        (sift-down-helper i))\n      (define (build-heap)\n        (define (build-heap-helper i)\n          (when (> i 0)\n            (sift-down (- i 1))\n            (build-heap-helper (- i 1))))\n        (build-heap-helper (quotient (length iterable) 2)))\n      (build-heap)\n      iterable)\n    (heapify-helper iterable))\n  (define (sort-helper iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (s",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable)\n      (define (heapify-helper-helper iterable)\n        (define (heapify-helper-helper-helper iterable)\n          (define (heapify-helper-helper-helper-helper iterable)\n            (define (heapify-helper-helper-helper-helper-helper iterable)\n              (define (heapify-helper-helper-helper-helper-helper-helper iterable)\n                (define (heapify-helper-helper-helper-helper-helper-helper-helper iterable)\n                  (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                    (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                      (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                        (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                          (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                            (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                              (define (heapify-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper iterable)\n                                (define (heapify-helper-helper-helper-helper-helper-helper-hel",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (left i) (+ i 1))\n      (define (right i) (+ i 2))\n      (define (parent i) (quotient i 2))\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (cond [(empty? iterable) empty]\n                [(= i 0) (cons (list-ref iterable j) (swap-helper (rest iterable) i (- j 1)))]\n                [else (cons (list-ref iterable i) (swap-helper (rest iterable) (- i 1) j))]))\n        (swap-helper iterable i j))\n      (define (max-heapify iterable i)\n        (define (max-heapify-helper iterable i)\n          (cond [(empty? iterable) empty]\n                [(= i 0) (cons (list-ref iterable 0) (max-heapify-helper (rest iterable) (- i 1)))]\n                [else (cons (list-ref iterable i) (max-heapify-helper (rest iterable) (- i 1)))]))\n        (define (max-heapify-helper2 iterable i)\n          (cond [(empty? iterable) empty]\n                [(= i 0) (cons (list-ref iterable 0) (max-heapify-helper2 (rest iterable) (- i 1)))]\n                [else (cons (list-ref iterable i) (max-heapify-helper2 (rest iterable) (- i 1)))]))\n        (define (max-heapify-helper3 iterable i)\n          (cond [(empty? iterable) empty]\n                [(= i 0) (cons (list-ref iterable 0) (max-heapify-helper3 (rest iterable) (- i 1)))]\n                [else (cons (list-ref iterable i) (max-heapify-helper3 (rest iterable) (- i 1)))]))\n        (define (max-heapify-helper",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (= i j)\n              iterable\n              (swap-helper (append (take iterable i)\n                                   (list (list-ref iterable j))\n                                   (take (drop iterable (+ i 1)) (- j i))\n                                   (list (list-ref iterable i))\n                                   (drop iterable (+ j 1)))\n                           i\n                           j)))\n        (swap-helper iterable i j))\n      (define (left i)\n        (+ (* 2 i) 1))\n      (define (right i)\n        (+ (* 2 i) 2))\n      (define (parent i)\n        (quotient (- i 1) 2))\n      (define (max-heapify iterable i)\n        (define (max-heapify-helper iterable i)\n          (define (largest iterable i)\n            (define (largest-helper iterable i l r)\n              (if (and (not (null? l))\n                       (&gt; (list-ref iterable l) (list-ref iterable i)))\n                  (largest-helper iterable l l r)\n                  (if (and (not (null? r))\n                           (&gt; (list-ref iterable r) (list-ref iterable i)))\n                      (largest-helper iterable r l r)\n                      i)))\n            (largest-helper iterable i (left i) (right i)))\n          (define (largest-index iterable i)\n            (define (largest-index-helper iterable i l r)\n              (if (and (not (null? l))\n                       (&gt; (list-ref iterable l) (list-ref iterable i)))\n                  (largest-index-helper iterable l l r)\n                  (if (and (not (null? r))\n                           (&gt; (list-ref iterable r) (list-ref iterable i)))\n                      (largest-index-helper iterable r l r)\n                     ",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define (swap-help i j)\n        (define (swap-help-help i j)\n          (define (swap-help-help-help i j)\n            (define (swap-help-help-help-help i j)\n              (define (swap-help-help-help-help-help i j)\n                (define (swap-help-help-help-help-help-help i j)\n                  (define (swap-help-help-help-help-help-help-help i j)\n                    (define (swap-help-help-help-help-help-help-help-help i j)\n                      (define (swap-help-help-help-help-help-help-help-help-help i j)\n                        (define (swap-help-help-help-help-help-help-help-help-help-help i j)\n                          (define (swap-help-help-help-help-help-help-help-help-help-help-help i j)\n                            (define (swap-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                              (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                  (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                    (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                      (define (swap-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help-help i j)\n                                        (define (swap",
    "  (define (heapify iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sift-down start end)\n      (define root start)\n      (define child (* 2 root))\n      (while (< child end)\n        (if (and (< (+ child 1) end)\n                 (< (list-ref iterable child)\n                    (list-ref iterable (+ child 1))))\n            (set! child (+ child 1)))\n        (if (< (list-ref iterable root)\n               (list-ref iterable child))\n            (begin\n              (swap root child)\n              (set! root child)\n              (set! child (* 2 root))))))\n    (define (heapify-helper iterable)\n      (define (heapify-helper-helper iterable start end)\n        (if (< start end)\n            (begin\n              (sift-down start end)\n              (heapify-helper-helper iterable (+ start 1) end))))\n      (heapify-helper-helper iterable 0 (- (length iterable) 1)))\n    (heapify-helper iterable)\n    iterable)\n  (define (sort-helper iterable)\n    (define (sort-helper-helper iterable end)\n      (if (> end 0)\n          (begin\n            (swap 0 end)\n            (sift-down 0 (- end 1))\n            (sort-helper-helper iterable (- end 1)))))\n    (sort-helper-helper iterable (- (length iterable) 1)))\n  (define (swap i j)\n    (define temp (list-ref iterable i))\n    (set-car! (list-ref iterable i) (list-ref iterable j))\n    (set-car! (list-ref iterable j) temp))\n  (define (sift-down start end)\n    (define root start)\n    (define child (* 2 root",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define temp (list-ref iterable i))\n        (set-car! (list-ref iterable i) (list-ref iterable j))\n        (set-car! (list-ref iterable j) temp))\n      (define (max-heapify iterable i)\n        (define left-child (+ i i))\n        (define right-child (+ left-child 1))\n        (define largest\n          (cond\n            [(> left-child (length iterable)) i]\n            [(> right-child (length iterable))\n             (if (> (list-ref iterable left-child) (list-ref iterable i))\n                 left-child\n                 i)]\n            [else\n             (if (> (list-ref iterable left-child) (list-ref iterable i))\n                 (if (> (list-ref iterable left-child) (list-ref iterable right-child))\n                     left-child\n                     right-child)\n                 (if (> (list-ref iterable right-child) (list-ref iterable i))\n                     right-child\n                     i))]))\n        (when (not (= largest i))\n          (swap i largest)\n          (max-heapify iterable largest)))\n      (when (< i (length iterable))\n        (max-heapify iterable i)\n        (heapify-helper iterable (+ i 1))))\n    (heapify-helper iterable 1))\n  (define (heap-sort-helper iterable)\n    (define (swap i j)\n      (define temp (list-ref iterable i))\n      (set-car! (list-ref iterable i) (list-ref iterable j))\n      (set-car! (list-ref iterable j) temp))\n    (define (sort-helper iterable i)\n      (swap 1 i)\n      (define (max-heapify iterable i)\n        (define left-child (+ i i))\n        (define right-child (+ left-child 1))\n        (",
    "  (define (heapify iterable)\n    (define (heapify-helper iterable i)\n      (define (swap i j)\n        (define (swap-helper iterable i j)\n          (if (eq? i j)\n              iterable\n              (swap-helper (append (list-ref iterable j)\n                                   (list-ref iterable i)\n                                   (list-ref iterable (add1 i)))\n                           (add1 i)\n                           (add1 j))))\n        (swap-helper iterable i j))\n      (if (< i (sub1 (length iterable)))\n          (if (> (list-ref iterable i)\n                 (list-ref iterable (add1 i)))\n              (heapify-helper (swap i (add1 i)) (add1 i))\n              (heapify-helper iterable (add1 i)))\n          iterable))\n    (heapify-helper iterable 0))\n  (define (heap_sort-helper iterable)\n    (define (swap i j)\n      (define (swap-helper iterable i j)\n        (if (eq? i j)\n            iterable\n            (swap-helper (append (list-ref iterable j)\n                                 (list-ref iterable i)\n                                 (list-ref iterable (add1 i)))\n                         (add1 i)\n                         (add1 j))))\n      (swap-helper iterable i j))\n    (if (eq? (length iterable) 1)\n        iterable\n        (heap_sort-helper (swap 0 (sub1 (length iterable)))\n                          (sub1 (length iterable)))))\n  (heap_sort-helper (heapify iterable)))\n"
  ]
}