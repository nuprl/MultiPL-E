{
  "name": "mbpp_420_cube_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the cube sum of first n even natural numbers.\n(define (cube_Sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_Sum))\n    (check-equal? (candidate 2) 72)\n    (check-equal? (candidate 3) 288)\n    (check-equal? (candidate 4) 800)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (cube_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cube_Sum_iter (- n 1) (+ sum (* n n n)))]))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 1 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ (* n n n) sum))))\n  (cubeSum_iter n 0))\n",
    "  (define (cubeSumHelper n acc)\n    (if (= n 0)\n        acc\n        (cubeSumHelper (- n 1) (+ acc (* n n n)))))\n  (cubeSumHelper n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x)\n    (* x x x))\n  (define (even? x)\n    (= (remainder x 2) 0))\n  (define (sum-of-cubes x)\n    (if (= x 0)\n        0\n        (+ (cube x) (sum-of-cubes (- x 1)))))\n  (define (even-numbers x)\n    (if (= x 0)\n        0\n        (+ x (even-numbers (- x 2)))))\n  (sum-of-cubes (even-numbers n)))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum-cubes a b)\n    (if (&gt; a b)\n        0\n        (+ (cube a) (sum-cubes (+ a 2) b))))\n  (sum-cubes 2 n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [else (cubeSum_iter (+ i 1) (+ sum (* i i i)))]))\n  (cubeSum_iter 1 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 0 0))\n",
    "  (for/sum ([i (in-range 1 n)])\n    (* i i i)))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [else (cube_Sum_iter (+ i 1) (+ sum (* i i i)))]))\n  (cube_Sum_iter 1 0))\n",
    "  (define (cube_Sum_iter n acc)\n    (if (= n 0)\n        acc\n        (cube_Sum_iter (- n 1) (+ (* n n n) acc))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n"
  ]
}