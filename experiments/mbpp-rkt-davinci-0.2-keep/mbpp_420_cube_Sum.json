{
  "name": "mbpp_420_cube_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the cube sum of first n even natural numbers.\n(define (cube_Sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_Sum))\n    (check-equal? (candidate 2) 72)\n    (check-equal? (candidate 3) 288)\n    (check-equal? (candidate 4) 800)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (cube_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cube_Sum_iter (- n 1) (+ sum (* n n n)))]))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 1 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ (* n n n) sum))))\n  (cubeSum_iter n 0))\n",
    "  (define (cubeSumHelper n acc)\n    (if (= n 0)\n        acc\n        (cubeSumHelper (- n 1) (+ acc (* n n n)))))\n  (cubeSumHelper n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x)\n    (* x x x))\n  (define (even? x)\n    (= (remainder x 2) 0))\n  (define (sum-of-cubes x)\n    (if (= x 0)\n        0\n        (+ (cube x) (sum-of-cubes (- x 1)))))\n  (define (even-numbers x)\n    (if (= x 0)\n        0\n        (+ x (even-numbers (- x 2)))))\n  (sum-of-cubes (even-numbers n)))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum-cubes a b)\n    (if (&gt; a b)\n        0\n        (+ (cube a) (sum-cubes (+ a 2) b))))\n  (sum-cubes 2 n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [else (cubeSum_iter (+ i 1) (+ sum (* i i i)))]))\n  (cubeSum_iter 1 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 0 0))\n",
    "  (for/sum ([i (in-range 1 n)])\n    (* i i i)))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [else (cube_Sum_iter (+ i 1) (+ sum (* i i i)))]))\n  (cube_Sum_iter 1 0))\n",
    "  (define (cube_Sum_iter n acc)\n    (if (= n 0)\n        acc\n        (cube_Sum_iter (- n 1) (+ (* n n n) acc))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else\n       (cube_Sum_iter (- n 1) (+ sum (* n n n)))]))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum_of_cubes (- n 1)))))\n  (define (even_numbers n)\n    (if (= n 0)\n        0\n        (+ (if (even? n) n 0) (even_numbers (- n 1)))))\n  (sum_of_cubes (even_numbers n)))\n",
    "  (define (cubeSum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 0) (cubeSum_iter (- n 1) (+ sum (expt n 3))))\n          (else (cubeSum_iter (- n 1) sum))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum_of_cubes (- n 2)))))\n  (sum_of_cubes n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_helper (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_helper n 0))\n",
    "  (define (cube n)\n    (* n n n))\n  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n)\n           (sum_of_cubes (- n 1)))))\n  (sum_of_cubes n))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (define (cubeSum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cubeSum_iter (- n 1) (+ sum (* n n n))))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_cubes n)\n    (if (= n 1)\n        (cube 1)\n        (+ (cube n) (sum_cubes (- n 1)))))\n  (sum_cubes n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 2) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 0) (cube_Sum_iter (- n 1) (+ sum (expt n 3))))\n          (else (cube_Sum_iter (- n 1) sum))))\n  (cube_Sum_iter n 0))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-cubes-of-evens n)\n    (if (= n 0)\n        0\n        (+ (cube (if (even? n) n 0))\n           (sum-cubes-of-evens (- n 1)))))\n  (sum-cubes-of-evens n))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum_even_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum_even_cubes (- n 1)))))\n  (sum_even_cubes n))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum_of_cubes x)\n    (if (= x 0)\n        0\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (define (even_numbers x)\n    (if (= x 0)\n        0\n        (+ (if (even? x) x 0) (even_numbers (- x 1)))))\n  (sum_of_cubes (even_numbers n)))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (expt (* 2 n) 3)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cube_Sum_iter (- n 1) (+ sum (* n n n))))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter i sum)\n    (if (= i n)\n        sum\n        (cubeSum_iter (+ i 1) (+ sum (* i i i)))))\n  (cubeSum_iter 0 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 2) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cube_Sum_iter (- n 1) (+ sum (* n n n))))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_helper n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_helper (- n 1) (+ sum (* n n n)))))\n  (cubeSum_helper n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter i sum)\n    (if (= i n)\n        sum\n        (cubeSum_iter (+ i 1) (+ sum (* i i i)))))\n  (cubeSum_iter 0 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 1 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt n 3) (cube_Sum (- n 2)))]))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-of-cubes-of-evens n)\n    (if (= n 0)\n        0\n        (+ (cube (if (even? n) n 0))\n           (sum-of-cubes-of-evens (- n 1)))))\n  (sum-of-cubes-of-evens n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter total i)\n    (if (= i n)\n        total\n        (cubeSum_iter (+ total (* i i i)) (+ i 1))))\n  (cubeSum_iter 0 2))\n",
    "  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum_of_cubes (- n 1)))))\n  (define (even? n)\n    (= (modulo n 2) 0))\n  (define (cube_Sum_helper n i)\n    (if (= i n)\n        0\n        (+ (sum_of_cubes (if (even? i) i (- i 1))) (cube_Sum_helper n (+ i 1)))))\n  (cube_Sum_helper n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes n)\n    (if (= n 1)\n        (cube 1)\n        (+ (cube n) (sum_of_cubes (- n 1)))))\n  (sum_of_cubes n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cube_Sum_iter (- n 1) (+ sum (* n n n))))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube n) (* n n n))\n  (define (even? n) (= (remainder n 2) 0))\n  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-even-cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-even-cubes (- n 2)))))\n  (if (even? n)\n      (sum-of-even-cubes n)\n      (sum-of-cubes n)))\n",
    "  (define (cubeSumIter i sum)\n    (cond ((= i n) sum)\n          (else (cubeSumIter (+ i 1) (+ sum (* i i i))))))\n  (cubeSumIter 0 0))\n",
    "  (define (cubeSum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cubeSum_iter (- n 2) (+ sum (* n n n))))))\n  (cubeSum_iter n 0))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (+ acc (* n n n)))))\n  (helper n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-of-cubes-of-evens n)\n    (if (= n 0)\n        0\n        (+ (cube (if (even? n) n 0))\n           (sum-of-cubes-of-evens (- n 1)))))\n  (sum-of-cubes-of-evens n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x)\n    (* x x x))\n  (define (sum x)\n    (if (= x n)\n        0\n        (+ (cube x) (sum (+ x 2)))))\n  (sum 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum-cubes a b)\n    (if (&gt; a b)\n        0\n        (+ (cube a) (sum-cubes (+ a 2) b))))\n  (sum-cubes 0 n))\n",
    "  (define (cubeSumHelper n sum)\n    (if (= n 0)\n        sum\n        (cubeSumHelper (- n 1) (+ sum (* n n n)))))\n  (cubeSumHelper n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum_of_cubes x)\n    (if (= x 0)\n        0\n        (+ (cube x) (sum_of_cubes (- x 2)))))\n  (sum_of_cubes n))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_Iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_Iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_Iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cube_Sum_iter (- n 1) (+ sum (* n n n)))]))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum_of_cubes (- n 1)))))\n  (define (even_numbers n)\n    (if (= n 0)\n        0\n        (+ (if (even? n) n 0) (even_numbers (- n 1)))))\n  (sum_of_cubes (even_numbers n)))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter i sum)\n    (if (= i n)\n        sum\n        (cubeSum_iter (+ i 1) (+ sum (* i i i)))))\n  (cubeSum_iter 0 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* 2 n) (* 2 n) (* 2 n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* 2 n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube-sum-iter n sum)\n    (cond ((= n 0) sum)\n          (else (cube-sum-iter (- n 1) (+ sum (* n n n))))))\n  (cube-sum-iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_cubes a b)\n    (if (&gt; a b)\n        0\n        (+ (cube a) (sum_cubes (+ a 2) b))))\n  (sum_cubes 0 n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 2) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter i sum)\n    (if (= i n)\n        sum\n        (cubeSum_iter (+ i 1) (+ sum (* i i i)))))\n  (cubeSum_iter 0 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-even-cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-even-cubes (- n 1)))))\n  (define (sum-of-even-cubes-upto n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-even-cubes-upto (- n 1)))))\n  (define (sum-of-even-cubes-upto n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-even-cubes-upto (- n 1)))))\n  (define (sum-of-even-cubes-upto n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-even-cubes-upto (- n 1)))))\n  (define (sum-of-even-cubes-upto n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-even-cubes-upto (- n 1)))))\n  (define (sum-of-even-cubes-upto n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-even-cubes-upto (- n 1)))))\n  (define (sum-of-even-cubes-upto n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-even-cubes-upto (- n 1)))))\n  (define (sum-of-even-cubes-upto n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-even-cubes-upto (- n 1)))))\n  (define (sum-of-even-cubes-upto n)\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum_of_cubes (- n 1)))))\n  (define (even_sum n)\n    (if (= n 0)\n        0\n        (+ (even? n) (even_sum (- n 1)))))\n  (define (even_sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (even? n) (even_sum_of_cubes (- n 1)))))\n  (define (cube_sum n)\n    (if (= n 0)\n        0\n        (+ (cube n) (cube_sum (- n 1)))))\n  (define (even_cube_sum n)\n    (if (= n 0)\n        0\n        (+ (even? n) (even_cube_sum (- n 1)))))\n  (define (even_cube_sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (even? n) (even_cube_sum_of_cubes (- n 1)))))\n  (define (cube_sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (cube_sum_of_cubes (- n 1)))))\n  (define (even_cube_sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (even? n) (even_cube_sum_of_cubes (- n 1)))))\n  (define (even_cube_sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (even? n) (even_cube_sum_of_cubes (- n 1)))))\n  (define (even_cube_sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (even? n) (even_cube_sum_of_cubes (- n 1)))))\n  (define (even_cube_sum_of_cubes n)",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum_of_cubes (- n 2)))))\n  (sum_of_cubes n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_evens n)\n    (if (= n 0)\n        0\n        (+ (cube (* 2 n)) (sum_evens (- n 1)))))\n  (sum_evens n))\n",
    "  (define (cube_Sum_iter n acc)\n    (if (= n 0)\n        acc\n        (cube_Sum_iter (- n 1) (+ (* n n n) acc))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cube_Sum_iter (- n 1) (+ sum (expt n 3)))]))\n  (cube_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (define (cubeSum_iter n acc)\n    (if (= n 0)\n        acc\n        (cubeSum_iter (- n 1) (+ acc (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 0 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes n)\n    (if (= n 1)\n        (cube 1)\n        (+ (cube n) (sum_of_cubes (- n 1)))))\n  (sum_of_cubes n))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum_of_cubes_of_evens n)\n    (if (= n 0)\n        0\n        (+ (cube (if (even? n) n 0))\n           (sum_of_cubes_of_evens (- n 1)))))\n  (sum_of_cubes_of_evens n))\n",
    "  (define (cubeSum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cubeSum_iter (- n 1) (+ sum (* n n n)))]))\n  (cubeSum_iter n 0))\n",
    "  (define (cubeSum_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [else (cubeSum_iter (- n 1) (+ acc (* n n n)))]))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n n) (cube_Sum (- n 1)))]))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum-of-cubes (- n 2)))))\n  (sum-of-cubes n))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n n) (cube_Sum (- n 2)))))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n acc)\n    (if (= n 0)\n        acc\n        (cube_Sum_iter (- n 1) (+ acc (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-of-cubes-of-evens n)\n    (if (= n 0)\n        0\n        (+ (cube (if (even? n) n 0))\n           (sum-of-cubes-of-evens (- n 1)))))\n  (sum-of-cubes-of-evens n))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 3)\n         (cube_Sum (- n 1)))))\n",
    "  (define (cube_Sum_iter n acc)\n    (if (= n 0)\n        acc\n        (cube_Sum_iter (- n 1) (+ acc (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt n 3) (cube_Sum (- n 2)))]))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-of-cubes a b)\n    (if (&gt; a b)\n        0\n        (+ (cube a) (sum-of-cubes (+ a 2) b))))\n  (sum-of-cubes 2 (* 2 n)))\n",
    "  (define (cubeSum n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (cubeSum (- n 1)))))\n  (cubeSum n))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (* (sum n) 2))\n",
    "  (define (cubeSum_iter n acc)\n    (if (= n 0)\n        acc\n        (cubeSum_iter (- n 2) (+ acc (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt n 3) (cube_Sum (- n 2)))]))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 0 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 0 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum_cubes (- n 2)))))\n  (sum_cubes n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_cubes a b)\n    (if (&gt; a b)\n        0\n        (+ (cube a) (sum_cubes (+ a 2) b))))\n  (sum_cubes 0 n))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 2) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (cube n) (sum_of_cubes (- n 2)))))\n  (sum_of_cubes n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n i sum)\n    (cond ((= i n) sum)\n          (else (cubeSum_iter n (+ i 1) (+ sum (* i i i))))))\n  (cubeSum_iter n 1 0))\n",
    "  (define (cubeSum_iter i sum)\n    (if (= i n)\n        sum\n        (cubeSum_iter (+ i 1) (+ sum (* i i i)))))\n  (cubeSum_iter 0 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-cubes a b)\n    (if (&gt; a b)\n        0\n        (+ (cube a) (sum-cubes (+ a 2) b))))\n  (sum-cubes 2 n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-of-cubes-of-evens n)\n    (if (= n 0)\n        0\n        (+ (cube (if (even? n) n 0))\n           (sum-of-cubes-of-evens (- n 1)))))\n  (sum-of-cubes-of-evens n))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x)\n    (* x x x))\n  (define (even? x)\n    (= (remainder x 2) 0))\n  (define (sum-of-cubes n)\n    (if (= n 1)\n        (cube 1)\n        (+ (cube n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-even-cubes n)\n    (if (= n 1)\n        (if (even? 1)\n            (cube 1)\n            0)\n        (+ (if (even? n)\n               (cube n)\n               0)\n           (sum-of-even-cubes (- n 1)))))\n  (sum-of-even-cubes n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_cubes x)\n    (if (= x 0)\n        0\n        (+ (cube x) (sum_cubes (- x 2)))))\n  (sum_cubes n))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 0 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-of-cubes x y) (+ (cube x) y))\n  (define (sum-of-cubes-of-evens x y)\n    (cond ((&gt; x n) y)\n          ((even? x) (sum-of-cubes-of-evens (+ x 1) (sum-of-cubes x y)))\n          (else (sum-of-cubes-of-evens (+ x 1) y))))\n  (sum-of-cubes-of-evens 1 0))\n</code>\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 0 0))\n",
    "  (sum (map (lambda (x) (* x x x))\n            (filter even? (range 1 n)))))\n",
    "  (define (cube_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cube_Sum_iter (- n 1) (+ sum (* n n n))))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (even? x) (= (remainder x 2) 0))\n  (define (sum-even-cubes n)\n    (if (= n 0)\n        0\n        (+ (cube (if (even? n) n 0))\n           (sum-even-cubes (- n 1)))))\n  (sum-even-cubes n))\n",
    "  (define (cube_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cube_Sum_iter (- n 1) (+ sum (* n n n))))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (+ n 1) 3) (cube_Sum (- n 1)))]))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes n)\n    (if (= n 1)\n        (cube 1)\n        (+ (cube n) (sum_of_cubes (- n 1)))))\n  (sum_of_cubes n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (expt (* 2 n) 3)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum x)\n    (if (= x n)\n        0\n        (+ (cube x) (sum (+ x 2)))))\n  (sum 0))\n",
    "  (define (cubeSum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 0) (cubeSum_iter (- n 1) (+ sum (expt n 3))))\n          (else (cubeSum_iter (- n 1) sum))))\n  (cubeSum_iter n 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ i 1) (+ sum (* i i i)))))\n  (cube_Sum_iter 1 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cubeSum_iter n acc)\n    (if (= n 0)\n        acc\n        (cubeSum_iter (- n 1) (+ acc (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cubeSum_iter i sum)\n    (if (= i n)\n        sum\n        (cubeSum_iter (+ i 1) (+ sum (* i i i)))))\n  (cubeSum_iter 0 0))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n"
  ]
}