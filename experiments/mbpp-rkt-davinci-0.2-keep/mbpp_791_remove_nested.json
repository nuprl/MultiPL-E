{
  "name": "mbpp_791_remove_nested",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove tuples from the given tuple.\n(define (remove_nested test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_nested))\n    (check-equal? (candidate (list 1 5 7 (list 4 6) 10)) (list 1 5 7 10))\n    (check-equal? (candidate (list 2 6 8 (list 5 7) 11)) (list 2 6 8 11))\n    (check-equal? (candidate (list 3 7 9 (list 6 8) 12)) (list 3 7 9 12))\n    (check-equal? (candidate (list 3 7 9 (list 6 8) (list 5 12) 12)) (list 3 7 9 12))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup)) (append (remove_nested (first test_tup)) (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup)) (remove_nested (rest test_tup))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup))\n     (append (remove_nested (first test_tup)) (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup)) (remove_nested (rest test_tup))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup))\n     (append (remove_nested (first test_tup))\n             (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup))\n     (append (remove_nested (first test_tup))\n             (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup)) (append (remove_nested (first test_tup)) (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond [(empty? test_tup) empty]\n        [(tuple? (first test_tup))\n         (append (remove_nested (first test_tup))\n                 (remove_nested (rest test_tup)))]\n        [else (cons (first test_tup)\n                    (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup)) (append (remove_nested (first test_tup)) (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond [(empty? test_tup) empty]\n        [(tuple? (first test_tup)) (remove_nested (rest test_tup))]\n        [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup))\n     (append (remove_nested (first test_tup))\n             (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup)) (append (remove_nested (first test_tup)) (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup))\n     (append (remove_nested (first test_tup))\n             (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(pair? (first test_tup))\n     (append (remove_nested (first test_tup))\n             (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup)\n                (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup)) (append (remove_nested (first test_tup)) (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup))\n     (append (remove_nested (first test_tup)) (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(pair? (first test_tup)) (append (remove_nested (first test_tup)) (remove_nested (rest test_tup)))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (cond\n       [(tuple? (first test_tup)) (remove_nested (rest test_tup))]\n       [else (cons (first test_tup) (remove_nested (rest test_tup)))]\n       )\n     ]\n    )\n  )\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cond [(tuple? (first test_tup)) (remove_nested (rest test_tup))]\n                   [else (cons (first test_tup) (remove_nested (rest test_tup)))]\n                   )]\n        ))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(tuple? (first test_tup)) (remove_nested (rest test_tup))]\n    [else (cons (first test_tup) (remove_nested (rest test_tup)))]))\n"
  ]
}