{
  "name": "mbpp_805_max_sum_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510067,
      "stdout": "",
      "stderr": "/tmp/tmpvuylh9gf.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpvuylh9gf.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (cond\n    [(empty? lists) empty]\n    [(empty? (rest lists)) (first lists)]\n    [else\n     (let ([max-list (max_sum_list (rest lists))])\n       (if (> (sum (first lists)) (sum max-list))\n           (first lists)\n           max-list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp8ppz9zg9.rkt:10:15: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmp8ppz9zg9.rkt:10:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map (lambda (l) (apply + l)) lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_uwtxpp.rkt:12:4\nactual:     33\nexpected:   '(10 11 12)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_uwtxpp.rkt:13:4\nactual:     33\nexpected:   '(12 11 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_uwtxpp.rkt:14:4\nactual:     6\nexpected:   '(2 3 1)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (cond [(empty? lists) empty]\n        [else (max_sum_list_helper lists (first lists))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmp4qtuk4al.rkt:6:15: max_sum_list_helper: unbound identifier\n  in: max_sum_list_helper\n  location...:\n   /tmp/tmp4qtuk4al.rkt:6:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (cond\n    [(empty? lists) empty]\n    [else\n     (let ([max-list (first lists)])\n       (for ([l (rest lists)])\n         (when (> (sum_list l) (sum_list max-list))\n           (set! max-list l)))\n       max-list)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpqwama2h3.rkt:10:19: sum_list: unbound identifier\n  in: sum_list\n  location...:\n   /tmp/tmpqwama2h3.rkt:10:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (foldl (lambda (l1 l2)\n           (if (> (sum l1) (sum l2))\n               l1\n               l2))\n         (first lists)\n         (rest lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpuyw5u_eb.rkt:6:19: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpuyw5u_eb.rkt:6:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (cond\n    [(empty? lists) empty]\n    [(null? (cdr lists)) (car lists)]\n    [else\n     (let* ([a (car lists)]\n            [b (cadr lists)]\n            [a-sum (apply + a)]\n            [b-sum (apply + b)])\n       (if (> a-sum b-sum)\n           a\n           b))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo1i7_ri_.rkt:22:4\nactual:     '(4 5 6)\nexpected:   '(10 11 12)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo1i7_ri_.rkt:23:4\nactual:     '(6 5 4)\nexpected:   '(12 11 10)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (max_sum_list_helper lists max-sum max-list)\n    (if (null? lists)\n        max-list\n        (let ([sum (sum (car lists))])\n          (if (&gt; sum max-sum)\n              (max_sum_list_helper (cdr lists) sum (car lists))\n              (max_sum_list_helper (cdr lists) max-sum max-list)))))\n  (max_sum_list_helper lists 0 '()))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "/tmp/tmpy76b4o6z.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map (lambda (l) (apply + l)) lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666122579,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_uwtxpp.rkt:12:4\nactual:     33\nexpected:   '(10 11 12)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_uwtxpp.rkt:13:4\nactual:     33\nexpected:   '(12 11 10)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk_uwtxpp.rkt:14:4\nactual:     6\nexpected:   '(2 3 1)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (apply max (map sum lists)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12))\n    (check-equal? (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10))\n    (check-equal? (candidate (list (list 2 3 1))) (list 2 3 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "/tmp/tmpmnenq7aj.rkt:5:18: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpmnenq7aj.rkt:5:18\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}