{
  "name": "mbpp_234_volume_cube",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the volume of a cube given its side length.\n(define (volume_cube l)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate volume_cube))\n    (check-equal? (candidate 3) 27)\n    (check-equal? (candidate 2) 8)\n    (check-equal? (candidate 5) 125)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n",
    "  (* l l l))\n"
  ]
}