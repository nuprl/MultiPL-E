{
  "name": "mbpp_439_multiple_to_single",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to join a list of multiple integers into a single integer.\n(define (multiple_to_single L)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiple_to_single))\n    (check-equal? (candidate (list 11 33 50)) 113350)\n    (check-equal? (candidate (list -1 2 3 4 5 6)) -123456)\n    (check-equal? (candidate (list 10 15 20 25)) 10152025)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (apply string-&gt;number (apply string-append (map number-&gt;string L))))\n",
    "  (apply string->number (string-join (map number->string L) \"\")))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (if (null? L)\n      0\n      (+ (car L) (* 10 (multiple_to_single (cdr L))))))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (apply string-&gt;number (apply string-append (map number-&gt;string L))))\n",
    "  (apply string-&gt;number (apply string-append (map number-&gt;string L))))\n",
    "  (apply string-append (map number->string L)))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (apply string->number (list->string L)))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (apply string-&gt;number (apply string-append (map number-&gt;string L))))\n",
    "  (apply string-&gt;number (apply string-append (map number-&gt;string L))))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n",
    "  (apply string->number (apply string-append (map number->string L))))\n"
  ]
}