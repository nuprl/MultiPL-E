{
  "name": "mbpp_472_check_Consecutive",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether the given list contains consecutive numbers or not.\n(define (check_Consecutive l)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_Consecutive))\n    (check-equal? (candidate (list 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 2 3 5 6)) #f)\n    (check-equal? (candidate (list 1 2 1)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (let loop ([l l] [prev (car l)] [res #t])\n    (cond [(empty? l) res]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l) res)]\n          [else (loop (cdr l) (car l) #f)])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) (if (= (first l) (second l)) #f #t)]\n    [else (if (= (- (first l) (second l)) (- (second l) (third l))) #f #t)]))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (= (car l) (cadr l))\n            #f\n            (check_Consecutive_helper (cdr l)))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond ((null? l) #t)\n          ((null? (cdr l)) #t)\n          ((= (car l) (cadr l)) #f)\n          ((= (abs (- (car l) (cadr l))) 1) (check_Consecutive_helper (cdr l)))\n          (else #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond ((null? l) #t)\n          ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n          (else #f))))\n",
    "  (let ((l (sort l <)))\n    (andmap (lambda (x y) (= (- y x) 1)) l (cdr l))))\n",
    "  (let ((l (sort l <)))\n    (and (= (length l) (length (remove-duplicates l)))\n         (= (length l) (- (car (last l)) (car l) 1)))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (first (rest l))) #f]\n      [else (check_Consecutive_helper (rest l))]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond ((null? l) #t)\n          ((null? (cdr l)) #t)\n          ((= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l)))\n          (else #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) prev) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond ((null? l) #t)\n          ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n          (else #f))))\n",
    "  (let loop ([l l])\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (first (rest l))) #f]\n      [else (loop (rest l))])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let ([l (sort l <)])\n    (for/and ([i (in-range (length l))])\n      (= (- (list-ref l (+ i 1)) (list-ref l i)) 1))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper l))\n",
    "  (let loop ([l l] [prev (car l)] [res #t])\n    (if (null? l)\n        res\n        (if (= (car l) (add1 prev))\n            (loop (cdr l) (car l) res)\n            (loop (cdr l) (car l) #f)))))\n",
    "  (let loop ([l l])\n    (cond [(empty? l) #t]\n          [(= (first l) (first (rest l))) #f]\n          [else (loop (rest l))])))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else (and (equal? (first l) (- (second l) 1))\n               (check_Consecutive (rest l)))]))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(and (number? (car l)) (= (car l) (+ prev 1))) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let ([lst (sort l &lt;)])\n    (and (= (length lst) (length (remove-duplicates lst)))\n         (= (- (car (last lst)) (car lst)) (- (length lst) 1)))))\n",
    "  (let loop ([l l] [previous (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ previous 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      ((null? l) #t)\n      ((null? (cdr l)) #t)\n      ((= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l)))\n      (else #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (car l) (+ (cadr l) 1))\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l])\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (first (rest l))) #f]\n      [else (loop (rest l))])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (let ([l (sort l <)])\n    (andmap (lambda (x y) (= (- y x) 1)) l (cdr l))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (= (car l) (cadr l))\n            #f\n            (check_Consecutive_helper (cdr l)))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (if (empty? l)\n        #t\n        (if (and (not (empty? (rest l)))\n                 (= (abs (- (first l) (second l))) 1))\n            (check_Consecutive_helper (rest l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (if (null? l)\n      #t\n      (let* ([first (car l)]\n             [second (cadr l)])\n        (if (= (- first second) 1)\n            (check_Consecutive (cdr l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (car l) (cadr l))\n                #f\n                (check_Consecutive_helper (cdr l))))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond\n      ((null? l) #t)\n      ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n      (else #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (abs (- (car l) (cadr l))) 1)\n                (check_Consecutive_helper (cdr l))\n                #f))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [last (car l)] [count 1])\n    (if (null? l)\n        (= count (length l))\n        (if (= (car l) (+ last 1))\n            (loop (cdr l) (car l) (+ count 1))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #t]\n    [else (and (equal? (first l) (sub1 (second l)))\n               (check_Consecutive (rest l)))]))\n",
    "  (let loop ([l l] [prev (car l)] [i 1])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev i)) (loop (cdr l) (car l) (+ i 1))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (and (= (abs (- (first l) (second l))) 1)\n          (check_Consecutive (rest l)))]))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (abs (- (car l) (cadr l))) 1)\n                (check_Consecutive_helper (cdr l))\n                #f))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (abs (- (car l) (cadr l))) 1)\n                (check_Consecutive_helper (cdr l))\n                #f))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)] [res #t])\n    (cond [(null? l) res]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l) res)]\n          [else (loop (cdr l) (car l) #f)])))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond ((null? l) #t)\n          ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n          (else #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (let loop ([l l] [last (car l)])\n    (cond\n      [(empty? l) #t]\n      [(= (car l) (+ last 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (let ([l (sort l <)])\n    (andmap (lambda (x y) (= (- y x) 1)) l (cdr l))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (car l) (+ (cadr l) 1))\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (first (rest l)) 1))\n     (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (let loop ([l l] [prev (car l)] [result #t])\n    (if (null? l)\n        result\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l) result)\n            (loop (cdr l) (car l) #f)))))\n",
    "  (let ([sorted (sort l <)])\n    (andmap (lambda (x y) (= (- x y) 1)) sorted (cdr sorted))))\n",
    "  (if (null? l)\n      #t\n      (let ([first (car l)]\n            [rest (cdr l)])\n        (if (null? rest)\n            #t\n            (if (= (car rest) (+ first 1))\n                (check_Consecutive rest)\n                #f)))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (= (car l) (+ (cadr l) 1))\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let ([l (sort l <)])\n    (for/and ([i (in-range (length l))])\n      (= (list-ref l i) (+ (list-ref l (- i 1)) 1)))))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (and\n      (= (car l) (- (cadr l) 1))\n      (check_Consecutive (cdr l)))]))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper l))\n",
    "  (let ([l (sort l <)])\n    (for/and ([i (in-range (length l))])\n      (= (list-ref l i) (+ (list-ref l (- i 1)) 1)))))\n",
    "  (define (check_Consecutive_helper l prev)\n    (cond\n      [(empty? l) #t]\n      [(= (first l) (+ prev 1)) (check_Consecutive_helper (rest l) (first l))]\n      [else #f]))\n  (check_Consecutive_helper (rest l) (first l)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (= (car l) (cadr l))\n            #f\n            (check_Consecutive_helper (cdr l)))))\n  (if (null? l)\n      #t\n      (check_Consecutive_helper l)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (- (first l) (second l)) 1) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (abs (- (car l) (cadr l))) 1)\n                (check_Consecutive_helper (cdr l))\n                #f))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)] [result #t])\n    (if (null? l)\n        result\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l) result)\n            (loop (cdr l) (car l) #f)))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(empty? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond ((null? l) #t)\n          ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n          (else #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond ((null? l) #t)\n          ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n          (else #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (= (car l) (+ (cadr l) 1))\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [i 0])\n    (cond [(empty? l) #t]\n          [(= i (car l)) (loop (cdr l) (+ i 1))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= prev (car l)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (let ([l (sort l <)])\n    (for/and ([i (in-range (length l))])\n      (= (+ 1 (list-ref l i)) (list-ref l (+ 1 i))))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let ([l (sort l <)])\n    (for/and ([i (in-range (length l))])\n      (and (not (zero? i))\n           (= (- (list-ref l i) (list-ref l (- i 1))) 1)))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)] [result #t])\n    (if (null? l)\n        result\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l) result)\n            (loop (cdr l) (car l) #f)))))\n",
    "  (let loop ([l l] [last (car l)] [flag #t])\n    (cond [(empty? l) flag]\n          [(= (car l) (+ last 1)) (loop (cdr l) (car l) flag)]\n          [else (loop (cdr l) (car l) #f)])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) true]\n      [(= (length l) 1) true]\n      [(= (length l) 2) true]\n      [(= (- (first l) (second l)) 1) (check_Consecutive_helper (rest l))]\n      [(= (- (first l) (second l)) -1) (check_Consecutive_helper (rest l))]\n      [else false]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else (and (= (- (first l) (second l)) 1) (check_Consecutive (rest l)))]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (- (car l) (cadr l)) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (if (null? l)\n      #t\n      (if (or (null? (cdr l)) (null? (cddr l)))\n          #t\n          (if (and (= (car l) (- (cadr l) 1)) (= (cadr l) (- (caddr l) 1)))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (- (first l) (second l)) 1) (check_Consecutive (rest l))]\n    [(= (- (first l) (second l)) -1) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (if (null? l)\n      #t\n      (let ([a (car l)]\n            [b (cadr l)])\n        (if (= (- a b) 1)\n            (check_Consecutive (cdr l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond\n      [(empty? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (let ([l (sort l <)])\n    (andmap (lambda (x y) (= (- y x) 1)) l (rest l))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (- (car l) (car (cdr l))) 1)\n                (check_Consecutive_helper (cdr l))\n                #f))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond ((null? l) #t)\n          ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n          (else #f))))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond ((null? l) #t)\n          ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n          (else #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (first (rest l))) #f]\n      [else (check_Consecutive_helper (rest l))]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)] [result #t])\n    (if (null? l)\n        result\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l) result)\n            (loop (cdr l) (car l) #f)))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (add1 (second l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(= (length l) 1) #t]\n      [else (and (= (first l) (- (second l) 1))\n                (check_Consecutive_helper (rest l)))]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l])\n    (cond [(empty? l) #t]\n          [(= (first l) (second l)) #f]\n          [else (loop (rest l))])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (- (car l) (car (cdr l))) 1)\n                (check_Consecutive_helper (cdr l))\n                #f))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(= (length l) 1) #t]\n      [(= (length l) 2) #t]\n      [else\n       (and\n        (= (abs (- (first l) (second l))) 1)\n        (check_Consecutive_helper (rest l)))]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= 1 (length l)) #t]\n    [else\n     (and (= (first l) (- (second l) 1))\n          (check_Consecutive (rest l)))]))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper l))\n",
    "  (let ([l (sort l <)])\n    (for/and ([i (in-range (length l))])\n      (= (list-ref l i) (+ (list-ref l (- i 1)) 1)))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) prev) #f]\n          [else (loop (cdr l) (car l))])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l prev)\n    (cond\n      [(empty? l) true]\n      [(= (first l) (+ prev 1)) (check_Consecutive_helper (rest l) (first l))]\n      [else false]))\n  (check_Consecutive_helper l (first l)))\n",
    "  (let loop ([l l] [prev (car l)] [result #t])\n    (if (null? l)\n        result\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l) result)\n            (loop (cdr l) (car l) #f)))))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond\n      ((null? l) #t)\n      ((= (car l) (add1 prev)) (loop (cdr l) (car l)))\n      (else #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (abs (- (car l) (cadr l))) 1) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) true]\n      [(empty? (rest l)) true]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else false]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (abs (- (car l) (cadr l))) 1)\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (let loop ([l l] [prev (car l)] [result #t])\n    (cond\n      [(empty? l) result]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l) result)]\n      [else (loop (cdr l) (car l) #f)])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (- (car l) (car (cdr l))) 1)\n                (check_Consecutive_helper (cdr l))\n                #f))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (car l) (+ (cadr l) 1))\n                (check_Consecutive_helper (cdr l))\n                #f))))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)] [res #t])\n    (if (null? l)\n        res\n        (if (not (= (car l) (+ prev 1)))\n            (set! res #f)\n            (set! prev (car l))\n            (loop (cdr l) prev res)))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) true]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else false])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond ((null? l) #t)\n          ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n          (else #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? l)\n        #t\n        (if (null? (cdr l))\n            #t\n            (if (= (abs (- (car l) (cadr l))) 1)\n                (check_Consecutive_helper (cdr l))\n                #f))))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= 1 (length l)) #t]\n    [else\n     (and (= (car l) (- (cadr l) 1))\n          (check_Consecutive (cdr l)))]))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [else (and (= (abs (- (first l) (second l))) 1)\n                 (check_Consecutive_helper (rest l)))]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let ([l (sort l <)])\n    (andmap (lambda (x y) (= (- y x) 1)) l (rest l))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= (car l) (+ prev 1))\n            (loop (cdr l) (car l))\n            #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (+ (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= prev (car l)) (loop (cdr l) prev)]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l))]\n      [else #f]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (let loop ([l l] [i 0])\n    (if (null? l)\n        #t\n        (if (equal? (car l) i)\n            (loop (cdr l) (+ i 1))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(= (first l) (first (rest l))) #f]\n      [else (check_Consecutive_helper (rest l))]))\n  (check_Consecutive_helper (sort l)))\n",
    "  (define (check_Consecutive_helper l prev)\n    (cond\n      [(empty? l) #t]\n      [(= (first l) prev) (check_Consecutive_helper (rest l) (first l))]\n      [else #f]))\n  (check_Consecutive_helper (rest l) (first l)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n"
  ]
}