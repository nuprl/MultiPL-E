{
  "name": "mbpp_440_find_adverb_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the first adverb and their positions in a given sentence.\n(define (find_adverb_position text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverb_position))\n    (check-equal? (candidate \"clearly!! we can see the sky\") (list 0 7 \"clearly\"))\n    (check-equal? (candidate \"seriously!! there are many roses\") (list 0 9 \"seriously\"))\n    (check-equal? (candidate \"unfortunately!! sita is going to home\") (list 0 13 \"unfortunately\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find-adverb-position-iter text pos)\n    (cond ((null? text) '())\n          ((equal? (first text) 'adverb) (list (first text) pos))\n          (else (find-adverb-position-iter (rest text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"loudly\" \"quietly\")])\n    (for/fold ([acc '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons (list word (string-index text word)) acc))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"calmly\" \"passionately\")])\n    (for/fold ([result '()])\n              ([word (in-list (string-split text))]\n               [adverb (in-list adverbs)])\n      (if (string=? word adverb)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (define (find-adverb-position-helper text word-list)\n    (if (null? word-list)\n        '()\n        (if (equal? (cadr (regexp-match #rx\"adverb\" (car word-list))) \"adverb\")\n            (cons (car word-list) (cons (string-length (car word-list)) '()))\n            (find-adverb-position-helper text (cdr word-list)))))\n  (find-adverb-position-helper text (string-split text #rx\"\\s+\")))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                #:when (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text))\n      (list adverb (regexp-match-positions (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text)))))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        (error \"No adverb found\")\n        (if (equal? (first text) 'adverb)\n            (list (first text) (second text))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper (posn-sentence-elements (posn-sentence-start (posn-at-point)))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string-contains (first text) \"ly\") (cons (cons (first text) pos) (find-adverb-position-iter (rest text) (+ pos 1)))]\n      [else (find-adverb-position-iter (rest text) (+ pos 1))]))\n  (find-adverb-position-iter (string-split text) 0))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((null? text) '())\n          ((equal? (car text) 'adverb) (list pos (car (cdr text))))\n          (else (find-adverb-position-iter (cdr text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (let ([pos (string-index word #\\.)])\n        (if (and pos (not (member (substring word (add1 pos)) '(\"\" \" \"))))\n            (cons (list (substring word 0 pos) (add1 pos)) result)\n            result)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (lambda (x) (equal? x adverb)) text)])\n      (list adverb pos))))\n",
    "  (define (find-adverb-position-helper text position)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \".\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \":\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \";\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\\'\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u201e\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ position",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")]\n        [positions (list)])\n    (for ([word (in-list (string-split text))]\n          [adverb (in-list adverbs)])\n      (when (equal? word adverb)\n        (set! positions (cons (string-index text word) positions))))\n    (reverse positions)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\" \"happily\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (lambda (x) (string=? x adverb)) text)])\n      (values adverb pos))))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"eagerly\" \"happily\" \"sadly\" \"angrily\" \"fearfully\" \"anxiously\" \"calmly\" \"carefully\" \"cautiously\" \"eagerly\" \"elegantly\" \"frantically\" \"gracefully\" \"lazily\" \"patiently\" \"quickly\" \"quietly\" \"rapidly\" \"smoothly\" \"softly\" \"swiftly\" \"vigorously\" \"wildly\" \"worriedly\" \"zealously\")))\n    (for/first ([adverb adverbs]\n                [position (in-naturals)])\n      (string-index text adverb position))))\n",
    "  (define (find-adverb text)\n    (cond\n      [(empty? text) empty]\n      [(equal? (first text) 'adverb) (first text)]\n      [else (find-adverb (rest text))]))\n  (define (find-position text)\n    (cond\n      [(empty? text) empty]\n      [(equal? (first text) (find-adverb text)) (first text)]\n      [else (find-position (rest text))]))\n  (find-position text))\n",
    "  (define adverbs\n    (list \"quickly\" \"slowly\" \"calmly\" \"passionately\" \"softly\" \"noisily\"))\n  (define (find-adverb-position-iter text adverbs)\n    (if (null? adverbs)\n        '()\n        (let ((position (string-index text (car adverbs))))\n          (if (eq? position #f)\n              (find-adverb-position-iter text (cdr adverbs))\n              (cons (list (car adverbs) position)\n                    (find-adverb-position-iter text (cdr adverbs)))))))\n  (find-adverb-position-iter text adverbs))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")]\n        [adverb-positions (list)])\n    (for ([word (in-list (string-split text))]\n          [adverb (in-list adverbs)])\n      (when (string=? word adverb)\n        (set! adverb-positions (append adverb-positions (list word)))))\n    adverb-positions))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (string-contains word \"ly\")\n          (cons (list word (string-index word \"ly\")) result)\n          result))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index text word)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define adverbs '(quickly slowly))\n  (define (find-adverb text)\n    (cond\n      [(empty? text) '()]\n      [(member (first text) adverbs) (cons (first text) (cons (position (first text) text) '()))]\n      [else (find-adverb (rest text))]))\n  (find-adverb (string-&gt;list text)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\")])\n    (for/fold ([result '()]) ([adverb adverbs])\n      (let ([positions (regexp-match* #rx adverb text)])\n        (if (empty? positions)\n            result\n            (append result (list (cons adverb positions))))))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/first ([adverb adverbs]\n                [positions (in-list (regexp-match* #rx adverb text))])\n      (list adverb positions))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"merrily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons word result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/first ([adverb adverbs]\n                [position (in-list (regexp-match* #rx\"\\\\b\" text))])\n      (if (regexp-match* (regexp-quote adverb) text)\n          (list adverb position)))))\n",
    "  (define (find_adverb_position_iter text pos)\n    (cond ((empty? text) '())\n          ((equal? (first text) 'adverb) (cons (cons (first text) pos) '()))\n          (else (find_adverb_position_iter (rest text) (+ pos 1)))))\n  (find_adverb_position_iter text 0))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (adverb) (list-index adverb words)) adverbs)])\n    (map (lambda (pos) (list (list-ref words pos) pos)) positions)))\n",
    "  (let* ([tokens (tokenize text)]\n         [adverbs (filter (lambda (token) (is_adverb? token)) tokens)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (position (first adverbs) tokens)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/first ([adverb adverbs]\n                [pos (in-indexes text)])\n      (and (string=? adverb (substring text pos (+ pos (string-length adverb))))\n           (list adverb pos)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [position (in-positions (lambda (x) (string=? x adverb)) text)])\n      (list adverb position))))\n",
    "  (let* ([words (string-split text)]\n         [positions (for/list ([word words]\n                               #:when (string-contains word \"ly\"))\n                      (list (string-index word \"ly\")\n                            (string-length word)))])\n    (list (map (lambda (x) (list-ref words x)) positions)\n          positions)))\n",
    "  (let ([adverbs (list-ref (pos-tag text) 1)])\n    (for/list ([adverb adverbs])\n      (list (car adverb) (cadr adverb)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"loudly\" \"quietly\"))) words)]\n         [positions (map (lambda (adverb) (member-position adverb words)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text index)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \"ly\") (cons (list (first text) index) (find-adverb-position-helper (rest text) (+ index 1)))]\n      [else (find-adverb-position-helper (rest text) (+ index 1))]))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (define (find-adverb-position-helper text adverb-list)\n    (cond ((null? text) adverb-list)\n          ((equal? (car text) 'ADV)\n           (find-adverb-position-helper (cdr text) (cons (list (car text) (cadr text)) adverb-list)))\n          (else (find-adverb-position-helper (cdr text) adverb-list))))\n  (find-adverb-position-helper text '()))\n",
    "  (let ((adverbs (list)))\n    (for/list ([word (in-list (string-split text))]\n               #:when (string-contains word \"ly\"))\n      (list word (string-index word \"ly\")))))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")))\n    (for/first ([adverb (in-list adverbs)]\n                [position (in-list (regexp-match* #rx\"\\w+\" text))])\n      (if (equal? adverb (list-ref text position))\n          (list adverb position)))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string-contains (first text) \"ly\") (cons (cons (first text) pos) (find-adverb-position-iter (rest text) (+ pos 1)))]\n      [else (find-adverb-position-iter (rest text) (+ pos 1))]))\n  (find-adverb-position-iter (string-split text) 0))\n",
    "  (define (find_adverb_position_helper text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) \"adverb\")\n            (cons pos (find_adverb_position_helper (rest text) (+ pos 1)))\n            (find_adverb_position_helper (rest text) (+ pos 1)))))\n  (find_adverb_position_helper (string-split text) 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [positions (in-positions (\u03bb (x) (equal? x adverb)) text)])\n      (list adverb positions))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list (regexp-match* #rx\"\\w+ly\" text)\n            (regexp-match* #rx\"\\w+ly\" text)))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs]\n               #:when (adverb-position text adverb))\n      adverb)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (define (find_adverb_position_helper text pos)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find_adverb_position_helper (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") empty]\n      [(string=? (first text) \",\") empty]\n      [(string=? (first text) \"!\") empty]\n      [(string=? (first text) \"?\") empty]\n      [(string=? (first text) \";\") empty]\n      [(string=? (first text) \":\") empty]\n      [(string=? (first text) \"\\\"\") empty]\n      [(string=? (first text) \"'\") empty]\n      [(string=? (first text) \"\u2019\") empty]\n      [(string=? (first text) \"\u201d\") empty]\n      [(string=? (first text) \"\u201c\") empty]\n      [(string=? (first text) \"\u2018\") empty]\n      [(string=? (first text) \"\u201e\") empty]\n      [(string=? (first text) \"\u201d\") empty]\n      [(string=? (first text) \"\u201c\") empty]\n      [(string=? (first text) \"\u2018\") empty]\n      [(string=? (first text) \"\u201e\") empty]\n      [(string=? (first text) \"\u201d\") empty]\n      [(string=? (first text) \"\u201c\") empty]\n      [(string=? (first text) \"\u2018\") empty]\n      [(string=? (first text) \"\u201e\") empty]\n      [(string=? (first text) \"\u201d\") empty]\n      [(string=? (first text) \"\u201c\") empty]\n      [(string=? (first text) \"\u2018\") empty]\n      [(string=? (first text) \"\u201e\") empty]\n      [(string=? (first text) \"\u201d\") empty]\n      [(string=? (first text) \"\u201c\") empty]\n      [(string=? (first text) \"\u2018\") empty]\n      [(string=? (first text) \"",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-first-adverb text adverb)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"elegantly\" \"noisily\")])\n    (for/first ([adverb adverbs]\n                [pos (in-list (regexp-match* #rx\"\\w+\" text))])\n      (when (string=? adverb (list-ref text pos))\n        (list adverb pos)))))\n",
    "  (define (find-adverb-position-iter text position)\n    (cond ((null? text) '())\n          ((equal? (car text) \"very\") (cons position (find-adverb-position-iter (cdr text) (+ position 1))))\n          (else (find-adverb-position-iter (cdr text) (+ position 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([adverbs (list 'quickly 'slowly 'elegantly 'noisily 'excitedly)])\n    (for/fold ([result '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons (list word (position word (string-split text))) result))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) empty]\n      [(equal? (first text) 'adverb) (list (first text) pos)]\n      [else (find-adverb-position-iter (rest text) (+ pos 1))]))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (let ([pos (find-pos word)])\n        (if (and pos (equal? (pos-tag pos) 'adverb))\n            (cons (list word pos) result)\n            result)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (let* ([words (string-split text #\\space)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [adverb-positions (map (lambda (adverb) (string-index text adverb)) adverbs)])\n    (map (lambda (position) (list (list-ref words position) position)) adverb-positions)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons word result)\n          result))))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'ADV)\n            (cons (first text) (cons (second text) '()))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper (pos-tag text)))\n",
    "  (define (find-adverb-position-helper text index)\n    (cond\n      [(empty? text) '()]\n      [(equal? (first text) 'adverb) (list index (first text))]\n      [else (find-adverb-position-helper (rest text) (+ index 1))]))\n  (find-adverb-position-helper text 0))\n",
    "  (define (find-adverb-position-helper text)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (cons (car text) (cons (car (cdr text)) '())))\n          ((equal? (car text) \"slowly\") (cons (car text) (cons (car (cdr text)) '())))\n          ((equal? (car text) \"happily\") (cons (car text) (cons (car (cdr text)) '())))\n          ((equal? (car text) \"angrily\") (cons (car text) (cons (car (cdr text)) '())))\n          (else (find-adverb-position-helper (cdr text)))))\n  (find-adverb-position-helper text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([adverbs '()]) ([word words])\n      (if (string-contains word \"ly\")\n          (cons (list word (string-index word \"ly\")) adverbs)\n          adverbs))))\n",
    "  (let* ([words (string-split text)]\n         [positions (for/list ([word words]\n                               #:when (string-contains word \"ly\"))\n                     (list-ref words (string-index word \"ly\")))]\n         [positions (map (lambda (x) (+ x 1)) positions)])\n    (if (null? positions)\n        (error \"No adverbs found\")\n        (list (list-ref words (car positions)) positions))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/list ([adverb adverbs]\n               [position (in-list (regexp-match* #rx\"\\w+\" text))])\n      (when (string=? adverb (list-ref text position))\n        (list adverb position)))))\n",
    "  (define (find-adverb-position-helper text)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (cons (car text) (cons (car (cdr text)) '())))\n          ((equal? (car text) \"slowly\") (cons (car text) (cons (car (cdr text)) '())))\n          ((equal? (car text) \"loudly\") (cons (car text) (cons (car (cdr text)) '())))\n          ((equal? (car text) \"quietly\") (cons (car text) (cons (car (cdr text)) '())))\n          (else (find-adverb-position-helper (cdr text)))))\n  (find-adverb-position-helper (positions text)))\n",
    "  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((equal? (car text) 'adverb) text)\n          (else (find-adverb (cdr text)))))\n  (find-adverb text))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) '()]\n      [(equal? (first text) 'adverb) (cons pos (find-adverb-position-helper (rest text) (+ pos 1)))]\n      [else (find-adverb-position-helper (rest text) (+ pos 1))]))\n  (find-adverb-position-helper text 0))\n",
    "  (let* ([words (string-split text)]\n         [adverb-positions (for/list ([word words]\n                                      #:when (string-contains word \"ly\"))\n                             (list (string-index word \"ly\") word))])\n    (if (null? adverb-positions)\n        \"No adverb found\"\n        (car adverb-positions))))\n",
    "  (let ([positions (list)]\n        [adverbs (list)])\n    (for/fold ([positions positions]\n               [adverbs adverbs])\n               ([word (in-list (string-split text))])\n      (if (string-contains word \"ly\")\n          (values (cons (string-index word \"ly\") positions)\n                  (cons word adverbs))\n          (values positions adverbs)))))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (string-contains word \"ly\")\n          (cons (list word (string-index word \"ly\")) result)\n          result))))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")))\n    (for/first ([adverb adverbs]\n                [position (in-naturals)])\n      (string-index text adverb position))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"loudly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (for/list ([word (in-list (string-split text))]\n             [position (in-list (range (string-length text)))])\n    (if (equal? (word-part-of-speech word) 'adv)\n        (list word position))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'adverb)\n            (cons (list (first text) pos) (find-adverb-position-helper (rest text) (+ pos 1)))\n            (find-adverb-position-helper (rest text) (+ pos 1)))))\n  (find-adverb-position-helper text 0))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\" \"angrily\" \"calmly\" \"carefully\" \"loudly\" \"quietly\")))\n    (for/first ([adverb adverbs]\n                [position (in-naturals)])\n      (if (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text)\n          (list adverb position)))))\n",
    "  (let ((adverbs (list)))\n    (for/list ((word (in-string text)))\n      (when (and (string-contains word \"ly\")\n                 (not (member word adverbs)))\n        (cons word (string-index text word))))))\n",
    "  (define (find_adverb_position_iter text pos)\n    (cond ((empty? text) '())\n          ((equal? (first text) 'adverb) (cons (list (first text) pos) '()))\n          (else (find_adverb_position_iter (rest text) (+ pos 1)))))\n  (find_adverb_position_iter text 0))\n",
    "  (define (find-adverb-position-helper text pos)\n    (if (empty? text)\n        '()\n        (if (string=? (first text) \"quickly\")\n            (cons (list (first text) pos) (find-adverb-position-helper (rest text) (+ pos 1)))\n            (find-adverb-position-helper (rest text) (+ pos 1)))))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"hastily\" \"calmly\" \"loudly\" \"quietly\")))\n    (for/first ([adverb adverbs]\n                #:when (string-index text adverb))\n      (list adverb (string-index text adverb)))))\n",
    "  (define (find-adverb-position-helper text index)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) \"adverb\")\n            (cons (list (first text) index) (find-adverb-position-helper (rest text) (+ index 1)))\n            (find-adverb-position-helper (rest text) (+ index 1)))))\n  (find-adverb-position-helper text 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (curry string=? adverb) text)])\n      (list adverb pos))))\n",
    "  (define (find-adverb-position-helper text)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \"\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \".\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"?\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"!\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \";\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \":\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"'\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-helper (rest text))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text))]\n     ",
    "  (define (find-adverb-position-helper text)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \"very\") (cons (first text) (cons (position (first text) text) empty))]\n      [(string=? (first text) \"much\") (cons (first text) (cons (position (first text) text) empty))]\n      [(string=? (first text) \"so\") (cons (first text) (cons (position (first text) text) empty))]\n      [(string=? (first text) \"too\") (cons (first text) (cons (position (first text) text) empty))]\n      [else (find-adverb-position-helper (rest text))]))\n  (find-adverb-position-helper (string-split text)))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        (list '() '())\n        (if (equal? (first text) \"adverb\")\n            (list (list (first text) (second text)) (rest text))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper (string-split text)))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\badverb\\b\" text)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (regexp-match-positions #rx\"\\badverb\\b\" text)))))\n",
    "  (let ([adverbs (list-ref (tokenize text) 1)])\n    (for/list ([adverb (in-list adverbs)])\n      (list adverb (string-index text adverb)))))\n",
    "  (define (find-adverb-position-helper text index)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (cons index (find-adverb-position-helper (cdr text) (+ index 1))))\n          (else (find-adverb-position-helper (cdr text) (+ index 1)))))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (let* ([words (string-split text)]\n         [positions (for/list ([word words]\n                               #:when (string-contains word \"ly\"))\n                     (list-ref words (position word words)))])\n    (list (first positions) (first (position (first positions) words)))))\n",
    "  (define (find-adverb-position-helper text)\n    (cond\n      [(empty? text) empty]\n      [(equal? (first text) 'adverb) (cons (first text) (cons (first (rest text)) empty))]\n      [else (find-adverb-position-helper (rest text))]))\n  (find-adverb-position-helper text))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list (string-index text adverb)\n            (string-length adverb)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [position (in-naturals)])\n      (string-index text adverb position))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/first ([adverb adverbs]\n                [position (in-positions (lambda (x) (equal? x adverb)) text)])\n      (list adverb position))))\n",
    "  (define (find-adverb-position-helper text position)\n    (cond ((empty? text) '())\n          ((equal? (first text) \"ly\") (cons (cons (first text) position) (find-adverb-position-helper (rest text) (+ position 1))))\n          (else (find-adverb-position-helper (rest text) (+ position 1)))))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) '()]\n      [(and (string=? (first text) \" \")\n            (string=? (second text) \"a\")\n            (string=? (third text) \"d\")\n            (string=? (fourth text) \"v\")\n            (string=? (fifth text) \"e\")\n            (string=? (sixth text) \"r\")\n            (string=? (seventh text) \"b\"))\n       (cons pos (cons (+ pos 7) '()))]\n      [else (find-adverb-position-helper (rest text) (+ pos 1))]))\n  (find-adverb-position-helper (string->list text) 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"calmly\" \"passionately\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/fold ([result '()])\n              ([word (in-list (string-split text))]\n               #:when (member word adverbs))\n      (cons (list word (string-index text word)) result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (lambda (x) (equal? x adverb)) text)])\n      (list adverb pos))))\n",
    "  (define (find-adverb text)\n    (cond\n      [(empty? text) '()]\n      [(equal? (first text) \"quickly\") (cons (first text) (cons (position (first text) text) '()))]\n      [(equal? (first text) \"slowly\") (cons (first text) (cons (position (first text) text) '()))]\n      [(equal? (first text) \"carefully\") (cons (first text) (cons (position (first text) text) '()))]\n      [(equal? (first text) \"happily\") (cons (first text) (cons (position (first text) text) '()))]\n      [(equal? (first text) \"sadly\") (cons (first text) (cons (position (first text) text) '()))]\n      [else (find-adverb (rest text))]))\n  (find-adverb text))\n",
    "  (define (find_adverb_position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string=? (first text) \" \") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string=? (first text) \" \") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201e\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d",
    "  (define adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\"))\n  (define (find-adverb-position-helper text adverbs)\n    (if (empty? adverbs)\n        '()\n        (if (string-contains text (first adverbs))\n            (list (first adverbs) (string-index text (first adverbs)))\n            (find-adverb-position-helper text (rest adverbs)))))\n  (find-adverb-position-helper text adverbs))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) pos]\n      [(string=? (first text) \"quickly\") pos]\n      [else (find-adverb-position-helper (rest text) (add1 pos))]))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")]\n        [positions (list)])\n    (for ([adverb adverbs])\n      (let ([position (string-index text adverb)])\n        (when (not (eq? position #f))\n          (set! positions (append positions (list position))))))\n    (list positions)))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (map (lambda (adverb)\n           (list adverb (find-first-match text adverb)))\n         adverbs)))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\badverb\\b\" text)])\n    (map (lambda (adverb)\n           (list (string-index text adverb)\n                 (string-length adverb)))\n         adverbs)))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-adverb-position text adverb)))))\n",
    "  (let* ([sentences (sentencify text)]\n         [first-sentence (first sentences)]\n         [words (wordify first-sentence)]\n         [adverbs (filter adverb? words)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (position (first adverbs) words)))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"(\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \")\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ pos 1))",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons word result))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (if (empty? adverbs)\n        '()\n        (cons (first adverbs)\n              (cons (regexp-index-positions (first adverbs) text)\n                    (find_adverb_position (substring text (add1 (string-length (first adverbs))))))))))\n",
    "  (regexp-match* #px\"\\\\b[a-zA-Z]+ly\\\\b\" text))\n",
    "  (define (find-adverb-position-helper text index)\n    (cond\n      [(empty? text) empty]\n      [(and (string=? (first text) \" \") (string=? (second text) \" \")) (find-adverb-position-helper (rest (rest text)) (+ index 2))]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) (+ index 1))]\n      [(string=? (first text) \"a\") (cons (list (first text) index) (find-adverb-position-helper (rest text) (+ index 1)))]\n      [else (find-adverb-position-helper (rest text) (+ index 1))]))\n  (find-adverb-position-helper text 0))\n",
    "  (let ([adverbs (list)])\n    (for ([word (in-list (string-split text #\\space))])\n      (if (equal? (part-of-speech word) 'adverb)\n          (set! adverbs (cons (list word (position word (string-split text #\\space))) adverbs))))\n    adverbs))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-adverb-position text adverb)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word)\n                            (and (string-contains word \"ly\")\n                                 (not (string-contains word \"ly.\"))))\n                          words)])\n    (map (lambda (adverb)\n           (list adverb (list-index adverb words)))\n         adverbs)))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words] #:when (string-contains word \"ly\"))\n      (cons (list word (string-index word \"ly\")) result))))\n",
    "  (let ([words (string-split text #\\space)])\n    (for/fold ([result '()]) ([word words])\n      (let ([pos (string-index word #\\r)])\n        (if (not (equal? pos #f))\n          (cons (list word pos) result)\n          result)))))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (map (lambda (adverb)\n           (list adverb (find-first-adverb-position text adverb)))\n         adverbs)))\n",
    "  (define (find-adverb-position-helper text)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (list (car text) (cadr text)))\n          ((equal? (car text) \"slowly\") (list (car text) (cadr text)))\n          (else (find-adverb-position-helper (cdr text)))))\n  (find-adverb-position-helper (sentence->word-position-list text)))\n",
    "  (define (find-adverb-position-iter text pos)\n    (if (empty? text)\n        '()\n        (if (string-contains (first text) \"ly\")\n            (cons (list (first text) pos) (find-adverb-position-iter (rest text) (+ pos 1)))\n            (find-adverb-position-iter (rest text) (+ pos 1)))))\n  (find-adverb-position-iter (string-split text #\\space) 0))\n",
    "  (let* ([positions (find-all-positions #\\space text)]\n         [words (split-string text #\\space)])\n    (for/fold ([result '()]) ([i (in-range (length words))])\n      (if (adverb? (list-ref words i))\n          (cons (list (list-ref words i) (list-ref positions i)) result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [position (in-list (regexp-match* #rx\"\\w+\" text))])\n      (when (string=? adverb (list-ref text position))\n        (list position adverb)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"carefully\"))) words)]\n         [positions (map (lambda (adverb) (list-index adverb words)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"happily\" \"sadly\"))) words)]\n         [positions (map (lambda (word) (list-ref words (position word words))) adverbs)])\n    (map (lambda (position) (list (list-ref words position) position)) positions)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons word result))))\n",
    "  (let* ([words (string-split text)]\n         [adverb-positions (for/list ([word words]\n                                      #:when (string-contains word \"ly\"))\n                             (list (string-index word \"ly\") word))])\n    adverb-positions))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (string-contains word \"ly\")\n          (cons (list word (string-index word \"ly\")) result)\n          result))))\n",
    "  (define (find_adverb_position_iter text pos)\n    (if (empty? text)\n        (list)\n        (if (and (string=? (first text) \"quickly\")\n                 (string=? (second text) \",\"))\n            (list pos (add1 pos))\n            (find_adverb_position_iter (rest text) (add1 pos)))))\n  (find_adverb_position_iter (string-split text) 0))\n",
    "  (let* ((adverbs (list \"quickly\" \"slowly\" \"carefully\" \"loudly\"))\n         (words (string-split text #\\space))\n         (positions (map (lambda (word) (if (member word adverbs) (list word (position word words)) '())) words)))\n    (filter (lambda (x) (not (null? x))) positions)))\n",
    "  (define (find-adverb-position-helper text position)\n    (cond ((null? text) '())\n          ((string=? (car text) \"very\") (list position))\n          ((string=? (car text) \"much\") (list position))\n          ((string=? (car text) \"so\") (list position))\n          ((string=? (car text) \"too\") (list position))\n          (else (find-adverb-position-helper (cdr text) (+ position 1)))))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (string-contains word \"ly\")\n          (cons (cons word (list (string-index word \"ly\"))) result)\n          result))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx(regexp adverb) text)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"carefully\" \"happily\"))) words)]\n         [positions (map (lambda (adverb) (member-position adverb words)) adverbs)])\n    (if (null? adverbs)\n        \"No adverbs found\"\n        (list adverbs positions))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (lambda (x) (string=? x adverb)) text)])\n      (list adverb pos))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'adverb)\n            (cons (list (first text) pos) '())\n            (find-adverb-position-helper (rest text) (+ pos 1)))))\n  (find-adverb-position-helper text 0))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (find-first-adverb-position text)))))\n",
    "  (let ((adverbs (list)))\n    (for ((word (in-list (string-split text))))\n      (when (adverb? word)\n        (set! adverbs (append adverbs (list word)))))\n    adverbs))\n",
    "  (let* ([tokens (tokenize text)]\n         [adverbs (filter (lambda (token) (is-adverb token)) tokens)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (position (first adverbs) tokens)))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) pos]\n      [(equal? (first text) \"quickly\") pos]\n      [else (find-adverb-position-helper (rest text) (+ 1 pos))]))\n  (find-adverb-position-helper (string-&gt;list text) 0))\n",
    "  (define (find-adverb text)\n    (define (find-adverb-helper text)\n      (cond\n        [(empty? text) empty]\n        [(equal? (first text) \" \") (find-adverb-helper (rest text))]\n        [(equal? (first text) \",\") (find-adverb-helper (rest text))]\n        [(equal? (first text) \".\") (find-adverb-helper (rest text))]\n        [(equal? (first text) \"!\") (find-adverb-helper (rest text))]\n        [(equal? (first text) \"?\") (find-adverb-helper (rest text))]\n        [else (cons (first text) (find-adverb-helper (rest text)))]))\n    (find-adverb-helper (string-&gt;list text)))\n  (define (find-adverb-position text)\n    (define (find-adverb-position-helper text)\n      (cond\n        [(empty? text) empty]\n        [(equal? (first text) \" \") (find-adverb-position-helper (rest text))]\n        [(equal? (first text) \",\") (find-adverb-position-helper (rest text))]\n        [(equal? (first text) \".\") (find-adverb-position-helper (rest text))]\n        [(equal? (first text) \"!\") (find-adverb-position-helper (rest text))]\n        [(equal? (first text) \"?\") (find-adverb-position-helper (rest text))]\n        [else (cons (first text) (find-adverb-position-helper (rest text)))]))\n    (find-adverb-position-helper (string-&gt;list text)))\n  (define (find-adverb-position-helper text)\n    (cond\n      [(empty? text) empty]\n      [(equal? (first text) \" \") (find-adverb-position-helper (rest text))]\n      [(equal? (first text) \",\") (find-adverb-position-helper (rest text))]\n",
    "  (let ([adverbs (regexp-match* #rx\"\\b[a-z]+ly\\b\" text)])\n    (for/list ([adverb adverbs])\n      (list (regexp-match* #rx\"\\b[a-z]+ly\\b\" text)\n            (regexp-match* #rx\"\\b[a-z]+ly\\b\" text)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (if (empty? adverbs)\n        '()\n        (cons (car adverbs)\n              (cons (regexp-match-positions #rx\"\\w+ly\" text)\n                    (find_adverb_position (substring text (cdr (regexp-match-positions #rx\"\\w+ly\" text)))))))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (regexp-index (first adverbs) text)))))\n",
    "  (define (find-adverb-position-helper text)\n    (cond\n      [(empty? text) empty]\n      [(equal? (first text) 'adverb) (cons (first text) (cons (second text) empty))]\n      [else (find-adverb-position-helper (rest text))]))\n  (find-adverb-position-helper (sentence->word-position-list text)))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-first-adverb text adverb)))))\n",
    "  (let* ([tagged-text (pos-tag text)]\n         [adverb-positions (for/list ([tagged-word tagged-text])\n                             (when (equal? 'RB (cadr tagged-word))\n                               (list (cadr tagged-word) (car tagged-word))))])\n    adverb-positions))\n",
    "  (define adverbs '(\"quickly\" \"slowly\" \"happily\" \"sadly\"))\n  (define (find-adverb-position-helper text adverbs)\n    (if (null? adverbs)\n        '()\n        (if (string-contains text (car adverbs))\n            (cons (car adverbs) (cons (string-index text (car adverbs)) (find-adverb-position-helper text (cdr adverbs))))\n            (find-adverb-position-helper text (cdr adverbs)))))\n  (find-adverb-position-helper text adverbs))\n",
    "  (define (find-adverb-position-iter text i)\n    (cond ((empty? text) '())\n          ((equal? (first text) \"quickly\") (cons i (find-adverb-position-iter (rest text) (+ i 1))))\n          ((equal? (first text) \"slowly\") (cons i (find-adverb-position-iter (rest text) (+ i 1))))\n          ((equal? (first text) \"loudly\") (cons i (find-adverb-position-iter (rest text) (+ i 1))))\n          ((equal? (first text) \"quietly\") (cons i (find-adverb-position-iter (rest text) (+ i 1))))\n          (else (find-adverb-position-iter (rest text) (+ i 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (define adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\"))\n  (define (find-adverb-position-helper text adverbs)\n    (if (null? adverbs)\n        '()\n        (if (string-contains text (car adverbs))\n            (cons (car adverbs) (cons (string-index text (car adverbs)) (find-adverb-position-helper text (cdr adverbs))))\n            (find-adverb-position-helper text (cdr adverbs)))))\n  (find-adverb-position-helper text adverbs))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond ((empty? text) '())\n          ((equal? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \".\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"!\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"?\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \";\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \":\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\\\"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"'\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u2019\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201d\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u2018\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u2019\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201e\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201d\") (find-adverb-position-helper (rest text) (+ pos 1",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-first-adverb text adverb)))))\n",
    "  (let ([adverbs (list->set (regexp-match* #rx\"\\w+ly\" text))])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-match* #rx(string-append \"\\\\b\" (regexp-quote adverb) \"\\\\b\") text)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"happily\" \"sadly\"))) words)]\n         [positions (map (lambda (word) (member-position word words)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/first ([adverb adverbs]\n                #:when (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text))\n      (list adverb (regexp-match-positions (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text)))))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")))\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (x) (string-contains x \"ly\")) words)]\n         [positions (map (lambda (x) (list-index x words)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let loop ([text text] [pos 0])\n    (cond\n      [(empty? text) '()]\n      [(string=? (first text) \"ly\") (list (list (first text) pos))]\n      [else (loop (rest text) (+ pos 1))])))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (if (empty? adverbs)\n        #f\n        (let ([adverb (first adverbs)])\n          (list adverb (find-first-adverb text adverb))))))\n",
    "  (define (find-adverb-position-helper text position)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'adverb)\n            (cons (list (first text) position) (find-adverb-position-helper (rest text) (+ position 1)))\n            (find-adverb-position-helper (rest text) (+ position 1)))))\n  (find-adverb-position-helper text 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/first ([adverb adverbs]\n                [position (in-positions (lambda (x) (equal? x adverb)) text)])\n      (list adverb position))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [position (in-positions (curry string=? adverb) text)])\n      (list adverb position))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons word result)\n          result))))\n",
    "  (let* ([words (string-split text)]\n         [positions (for/list ([word words]\n                               #:when (string-contains word \"ly\"))\n                     (list-index words word))])\n    (if (empty? positions)\n        (error \"No adverbs found\")\n        (list (list-ref words (car positions))\n              (car positions)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index word text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (let ([pos (string-index word #\\.)])\n        (if (and pos (string=? (substring word (add1 pos) (add1 pos)) \"ly\"))\n            (cons (list word pos) result)\n            result)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [position (in-naturals)])\n      (if (regexp-match (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text)\n          (list adverb position)))))\n",
    "  (define (find-adverb-helper text)\n    (cond ((empty? text) empty)\n          ((string=? (first text) \"adverb\") (cons (first text) (list (first (rest text)))))\n          (else (find-adverb-helper (rest (rest text))))))\n  (find-adverb-helper (string-split text)))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (let ([pos (string-index word #\\.)])\n        (if (and pos (equal? (substring word (- pos 1) pos) \"ly\"))\n            (cons (list word pos) result)\n            result)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\" \"angrily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        (list)\n        (if (equal? (first text) \"adverb\")\n            (cons (first text) (find-adverb-position-helper (rest text)))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper (string-split text)))\n",
    "  (let ((words (string-split text)))\n    (for/fold ([result '()])\n              ([word words]\n               [index (in-naturals)])\n      (if (and (string-contains word \"ly\")\n               (not (member word result)))\n          (cons (list word index) result)\n          result))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) (list '() '())]\n      [(and (string=? (first text) \"very\") (string=? (second text) \" \"))\n       (list (list pos (+ pos 4)) (list (first text) (second text)))]\n      [else (find-adverb-position-helper (rest text) (+ pos 1))]))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index word text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-first-adverb text adverb)))))\n",
    "  (let ([adverbs (list->set (regexp-match* #rx\"\\w+ly\" text))])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-match* #rx(regexp adverb) text)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (curry string-contains? adverb) (string-split text))])\n      (list adverb pos))))\n",
    "  (define (find-adverb text)\n    (define (find-adverb-helper text)\n      (if (empty? text)\n          (list '() '())\n          (let ([word (first text)]\n                [rest (rest text)])\n            (if (equal? (word-type word) 'adverb)\n                (list (list (word-string word) (word-position word))\n                      (find-adverb-helper rest))\n                (find-adverb-helper rest)))))\n    (find-adverb-helper (tokenize text)))\n  (first (find-adverb text)))\n",
    "  (let* ([tagged-text (pos-tag-text text)]\n         [adverb-positions (find-positions 'ADV tagged-text)])\n    (list (first adverb-positions)\n          (second adverb-positions))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons word result)\n          result))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word)\n                            (and (string-contains word \"ly\")\n                                 (not (string-contains word \"ly.\"))\n                                 (not (string-contains word \"ly,\"))))\n                          words)]\n         [adverb-positions (map (lambda (word)\n                                  (list-ref words (position word words)))\n                                adverbs)])\n    (list adverbs adverb-positions)))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\"))) words)]\n         [adverb-positions (map (lambda (word) (list-index word words)) adverbs)])\n    (list adverbs adverb-positions)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"calmly\" \"passionately\"))) words)]\n         [positions (map (lambda (adverb) (position adverb words)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((empty? text) '())\n          ((equal? (first text) \"\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"RB\") (cons (cons (first text) pos) (find-adverb-position-iter (rest text) (+ pos 1))))\n          (else (find-adverb-position-iter (rest text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([sentences (in-list (sentencize text))])\n    (for/list ([sentence sentences]\n               #:when (find-first-adverb sentence))\n      (list sentence (find-first-adverb sentence)))))\n",
    "  (let* ([tokens (tokenize text)]\n         [positions (find-positions (lambda (token) (is-adverb? token)) tokens)])\n    (list (first positions) (list-ref tokens (first positions)))))\n",
    "  (for/list ([word (in-list (string-split text))]\n             #:when (string-contains word \"ly\"))\n    (list word (string-index word \"ly\"))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/list ([adverb adverbs]\n               #:when (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text))\n      (list adverb (regexp-match-positions (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text)))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((null? text) '())\n          ((equal? (car text) \"\") (find-adverb-position-iter (cdr text) (+ pos 1)))\n          ((equal? (car text) \"ADV\") (cons pos (find-adverb-position-iter (cdr text) (+ pos 1))))\n          (else (find-adverb-position-iter (cdr text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((empty? text) '())\n          ((equal? (first text) \" \") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \".\") '())\n          ((equal? (first text) \",\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"!\") '())\n          ((equal? (first text) \"?\") '())\n          ((equal? (first text) \";\") '())\n          ((equal? (first text) \":\") '())\n          ((equal? (first text) \"\\\"\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"'\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201d\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"(\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \")\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"[\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"]\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"{\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"}\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u2018\") (find-adverb-position-iter (rest text) (+ pos 1)))\n          ((equal? (first text)",
    "  (for/list ([word (in-list (string-split text))]\n             [position (in-list (iota (length (string-split text))))])\n    (if (adverb? word)\n        (list word position))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'adverb)\n            (cons pos (find-adverb-position-iter (rest text) (+ pos 1)))\n            (find-adverb-position-iter (rest text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)])\n    (if (empty? adverbs)\n        (list \"No adverbs found\")\n        (list (car adverbs) (position (car adverbs) words)))))\n",
    "  (let ([adverbs (list->set (regexp-match* #rx\"\\w+ly\" text))])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-match* #rx\"\\w+ly\" text)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (position (first adverbs) words)))))\n",
    "  (define (find_adverb_position_helper text pos)\n    (cond ((empty? text) empty)\n          ((equal? (first text) \" \") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \",\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \".\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"!\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"?\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \";\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \":\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\\\"\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"'\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"(\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \")\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201c\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201d\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u2018\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u2019\") (find_adverb_position_helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201e\") (find_adverb_position_helper (rest text) (+ pos 1)))\n         ",
    "  (let ([adverbs (regexp-match* #rx\"\\b(?<adverb>\\w+ly)\\b\" text)])\n    (for/list ([adverb adverbs])\n      (list (regexp-match* #rx\"\\b(?<adverb>\\w+ly)\\b\" text)\n            (regexp-match* #rx\"\\b(?<adverb>\\w+ly)\\b\" text)))))\n",
    "  (define (find_adverb_position-iter text pos)\n    (cond\n      [(empty? text) empty]\n      [(adverb? (first text)) (cons (cons (first text) pos) (find_adverb_position-iter (rest text) (+ pos 1)))]\n      [else (find_adverb_position-iter (rest text) (+ pos 1))]))\n  (find_adverb_position-iter text 0))\n",
    "  (define (find-adverb-position-helper text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) \"adverb\")\n            (cons pos (find-adverb-position-helper (rest text) (+ pos 1)))\n            (find-adverb-position-helper (rest text) (+ pos 1)))))\n  (find-adverb-position-helper text 0))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index word text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text)\n    (cond ((null? text) '())\n          ((equal? (car text) \"very\") (list (car text) (cdr text)))\n          ((equal? (car text) \"much\") (list (car text) (cdr text)))\n          ((equal? (car text) \"so\") (list (car text) (cdr text)))\n          (else (find-adverb-position-helper (cdr text)))))\n  (find-adverb-position-helper (string-split text)))\n",
    "  (let ((adverbs (list)))\n    (for/list ([word (in-list (string-split text))]\n               [position (in-naturals)])\n      (when (string-contains word \"ly\")\n        (set! adverbs (cons (list word position) adverbs))))\n    adverbs))\n"
  ]
}