{
  "name": "mbpp_440_find_adverb_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the first adverb and their positions in a given sentence.\n(define (find_adverb_position text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverb_position))\n    (check-equal? (candidate \"clearly!! we can see the sky\") (list 0 7 \"clearly\"))\n    (check-equal? (candidate \"seriously!! there are many roses\") (list 0 9 \"seriously\"))\n    (check-equal? (candidate \"unfortunately!! sita is going to home\") (list 0 13 \"unfortunately\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find-adverb-position-iter text pos)\n    (cond ((null? text) '())\n          ((equal? (first text) 'adverb) (list (first text) pos))\n          (else (find-adverb-position-iter (rest text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"loudly\" \"quietly\")])\n    (for/fold ([acc '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons (list word (string-index text word)) acc))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"calmly\" \"passionately\")])\n    (for/fold ([result '()])\n              ([word (in-list (string-split text))]\n               [adverb (in-list adverbs)])\n      (if (string=? word adverb)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (define (find-adverb-position-helper text word-list)\n    (if (null? word-list)\n        '()\n        (if (equal? (cadr (regexp-match #rx\"adverb\" (car word-list))) \"adverb\")\n            (cons (car word-list) (cons (string-length (car word-list)) '()))\n            (find-adverb-position-helper text (cdr word-list)))))\n  (find-adverb-position-helper text (string-split text #rx\"\\s+\")))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                #:when (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text))\n      (list adverb (regexp-match-positions (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text)))))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        (error \"No adverb found\")\n        (if (equal? (first text) 'adverb)\n            (list (first text) (second text))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper (posn-sentence-elements (posn-sentence-start (posn-at-point)))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string-contains (first text) \"ly\") (cons (cons (first text) pos) (find-adverb-position-iter (rest text) (+ pos 1)))]\n      [else (find-adverb-position-iter (rest text) (+ pos 1))]))\n  (find-adverb-position-iter (string-split text) 0))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((null? text) '())\n          ((equal? (car text) 'adverb) (list pos (car (cdr text))))\n          (else (find-adverb-position-iter (cdr text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (let ([pos (string-index word #\\.)])\n        (if (and pos (not (member (substring word (add1 pos)) '(\"\" \" \"))))\n            (cons (list (substring word 0 pos) (add1 pos)) result)\n            result)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (lambda (x) (equal? x adverb)) text)])\n      (list adverb pos))))\n",
    "  (define (find-adverb-position-helper text position)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \".\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \":\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \";\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\\'\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u201e\") (find-adverb-position-helper (rest text) (+ position 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ position",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")]\n        [positions (list)])\n    (for ([word (in-list (string-split text))]\n          [adverb (in-list adverbs)])\n      (when (equal? word adverb)\n        (set! positions (cons (string-index text word) positions))))\n    (reverse positions)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\" \"happily\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (lambda (x) (string=? x adverb)) text)])\n      (values adverb pos))))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"eagerly\" \"happily\" \"sadly\" \"angrily\" \"fearfully\" \"anxiously\" \"calmly\" \"carefully\" \"cautiously\" \"eagerly\" \"elegantly\" \"frantically\" \"gracefully\" \"lazily\" \"patiently\" \"quickly\" \"quietly\" \"rapidly\" \"smoothly\" \"softly\" \"swiftly\" \"vigorously\" \"wildly\" \"worriedly\" \"zealously\")))\n    (for/first ([adverb adverbs]\n                [position (in-naturals)])\n      (string-index text adverb position))))\n",
    "  (define (find-adverb text)\n    (cond\n      [(empty? text) empty]\n      [(equal? (first text) 'adverb) (first text)]\n      [else (find-adverb (rest text))]))\n  (define (find-position text)\n    (cond\n      [(empty? text) empty]\n      [(equal? (first text) (find-adverb text)) (first text)]\n      [else (find-position (rest text))]))\n  (find-position text))\n",
    "  (define adverbs\n    (list \"quickly\" \"slowly\" \"calmly\" \"passionately\" \"softly\" \"noisily\"))\n  (define (find-adverb-position-iter text adverbs)\n    (if (null? adverbs)\n        '()\n        (let ((position (string-index text (car adverbs))))\n          (if (eq? position #f)\n              (find-adverb-position-iter text (cdr adverbs))\n              (cons (list (car adverbs) position)\n                    (find-adverb-position-iter text (cdr adverbs)))))))\n  (find-adverb-position-iter text adverbs))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")]\n        [adverb-positions (list)])\n    (for ([word (in-list (string-split text))]\n          [adverb (in-list adverbs)])\n      (when (string=? word adverb)\n        (set! adverb-positions (append adverb-positions (list word)))))\n    adverb-positions))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (string-contains word \"ly\")\n          (cons (list word (string-index word \"ly\")) result)\n          result))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index text word)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define adverbs '(quickly slowly))\n  (define (find-adverb text)\n    (cond\n      [(empty? text) '()]\n      [(member (first text) adverbs) (cons (first text) (cons (position (first text) text) '()))]\n      [else (find-adverb (rest text))]))\n  (find-adverb (string-&gt;list text)))\n"
  ]
}