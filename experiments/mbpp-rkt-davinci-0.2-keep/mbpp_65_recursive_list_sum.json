{
  "name": "mbpp_65_recursive_list_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to flatten a list and sum all of its elements.\n(define (recursive_list_sum data_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate recursive_list_sum))\n    (check-equal? (candidate (list 1 2 (list 3 4) (list 5 6))) 21)\n    (check-equal? (candidate (list 7 10 (list 15 14) (list 19 41))) 106)\n    (check-equal? (candidate (list 10 20 (list 30 40) (list 50 60))) 210)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else\n     (+ (first data_list)\n        (recursive_list_sum (rest data_list)))]))\n",
    "  (if (null? data_list)\n      0\n      (+ (car data_list)\n         (recursive_list_sum (cdr data_list)))))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else\n     (+ (first data_list)\n        (recursive_list_sum (rest data_list)))]))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else\n     (+ (first data_list)\n        (recursive_list_sum (rest data_list)))]))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else\n     (+ (first data_list)\n        (recursive_list_sum (rest data_list)))]))\n",
    "  (if (null? data_list)\n      0\n      (+ (car data_list) (recursive_list_sum (cdr data_list)))))\n",
    "  (if (null? data_list)\n      0\n      (+ (car data_list) (recursive_list_sum (cdr data_list)))))\n",
    "  (if (null? data_list)\n      0\n      (+ (car data_list)\n         (recursive_list_sum (cdr data_list)))))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else (+ (first data_list) (recursive_list_sum (rest data_list)))]))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else (+ (first data_list)\n             (recursive_list_sum (rest data_list)))]))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else\n     (+ (first data_list)\n        (recursive_list_sum (rest data_list)))]))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else\n     (+ (first data_list)\n        (recursive_list_sum (rest data_list)))]))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else (+ (first data_list)\n             (recursive_list_sum (rest data_list)))]))\n",
    "  (cond\n    [(null? data_list) 0]\n    [(list? (car data_list))\n     (+ (recursive_list_sum (car data_list))\n        (recursive_list_sum (cdr data_list)))]\n    [else\n     (+ (car data_list)\n        (recursive_list_sum (cdr data_list)))]))\n",
    "  (if (null? data_list)\n      0\n      (+ (car data_list)\n         (recursive_list_sum (cdr data_list)))))\n",
    "  (if (null? data_list)\n      0\n      (+ (car data_list) (recursive_list_sum (cdr data_list)))))\n",
    "  (cond [(empty? data_list) 0]\n        [(number? (first data_list))\n         (+ (first data_list) (recursive_list_sum (rest data_list)))]\n        [else (recursive_list_sum (append (first data_list) (rest data_list)))]))\n",
    "  (if (null? data_list)\n      0\n      (+ (car data_list)\n         (recursive_list_sum (cdr data_list)))))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else (+ (first data_list) (recursive_list_sum (rest data_list)))]))\n",
    "  (cond\n    [(empty? data_list) 0]\n    [(list? (first data_list))\n     (+ (recursive_list_sum (first data_list))\n        (recursive_list_sum (rest data_list)))]\n    [else (+ (first data_list) (recursive_list_sum (rest data_list)))]))\n"
  ]
}