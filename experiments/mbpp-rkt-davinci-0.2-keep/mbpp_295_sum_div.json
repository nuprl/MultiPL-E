{
  "name": "mbpp_295_sum_div",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to return the sum of all divisors of a number.\n(define (sum_div number)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_div))\n    (check-equal? (candidate 8) 7)\n    (check-equal? (candidate 12) 16)\n    (check-equal? (candidate 7) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (divisors number)\n    (for/list ([i (in-range 1 number)])\n      (if (zero? (modulo number i))\n          i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number divisor)\n    (cond ((= number divisor) 0)\n          ((= 0 (modulo number divisor)) (+ divisor (sum_div_iter number (+ divisor 1))))\n          (else (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= 0 (modulo number divisor))\n       (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum-div-iter number divisor sum)\n    (cond ((&gt; divisor number) sum)\n          ((= (modulo number divisor) 0)\n           (sum-div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum-div-iter number (+ divisor 1) sum))))\n  (sum-div-iter number 1 0))\n",
    "  (define (sum_div-iter number sum)\n    (if (= number 1)\n        sum\n        (if (= (remainder number (sum-div-iter (- number 1) sum)) 0)\n            (+ sum (- number 1))\n            (sum-div-iter (- number 1) sum))))\n  (sum-div-iter number 0))\n",
    "  (define (sum_div_iter n i sum)\n    (if (&gt; n i)\n        (if (= (modulo n i) 0)\n            (sum_div_iter n (+ i 1) (+ sum i))\n            (sum_div_iter n (+ i 1) sum))\n        sum))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond ((&gt; divisor number) sum)\n          ((zero? (modulo number divisor))\n           (sum_div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (for/sum ([i (in-range 1 (add1 (quotient number 2)))])\n    (if (zero? (modulo number i))\n        i\n        0)))\n",
    "  (define (sum_div_iter number divisor)\n    (if (&gt; number divisor)\n        (if (= (remainder number divisor) 0)\n            (+ divisor (sum_div_iter number (+ divisor 1)))\n            (sum_div_iter number (+ divisor 1)))\n        0))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (= (modulo number divisor) 0)\n               divisor\n               0)\n           (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum-div-iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum-div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum-div-iter number (+ divisor 1) sum))))\n  (sum-div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (zero? (modulo number divisor))\n               divisor\n               0)\n           (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= 0 (modulo number divisor))\n       (sum_div-iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div-iter number (+ divisor 1) sum)]))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (&gt; divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n"
  ]
}