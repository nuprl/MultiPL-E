{
  "name": "mbpp_583_catalan_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function which returns nth catalan number.\n(define (catalan_number num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate catalan_number))\n    (check-equal? (candidate 10) 16796)\n    (check-equal? (candidate 9) 4862)\n    (check-equal? (candidate 7) 429)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 n) 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (factorial num)\n    (if (= num 1)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial-coefficient n k)\n    (if (= k 0)\n        1\n        (/ (* n (- n 1))\n           (* k (- k 1)))))\n  (/ (factorial (+ num 1))\n     (* (factorial num)\n        (factorial (- num 1))\n        (binomial-coefficient (+ num 1) num))))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1)))\n                   (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial-coefficient (* 2 n) n))\n  (catalan num))\n",
    "  (cond [(= num 0) 1]\n        [else (+ (* (catalan_number (- num 1))\n                   (/ (+ (* 2 num) 1)\n                      (+ num 2)))\n                 (* (catalan_number (- num 2))\n                    (/ (+ (* 2 num) 1)\n                       (+ num 1))))]))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (if (= k 0)\n        1\n        (/ (* n (- n 1))\n           (* k (- k 1)))))\n  (define (catalan n)\n    (/ (factorial (* 2 n))\n       (* (factorial n)\n          (factorial (+ n 1)))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1))) (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 n) 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond\n      [(= n 0) 1]\n      [else\n       (+ (* n (catalan-helper (- n 1)))\n          (* (catalan-helper (- n 1)) (catalan-helper (- n 2))))]))\n  (catalan-helper num))\n"
  ]
}