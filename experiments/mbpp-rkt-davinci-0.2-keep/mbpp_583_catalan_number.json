{
  "name": "mbpp_583_catalan_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function which returns nth catalan number.\n(define (catalan_number num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate catalan_number))\n    (check-equal? (candidate 10) 16796)\n    (check-equal? (candidate 9) 4862)\n    (check-equal? (candidate 7) 429)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 n) 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (factorial num)\n    (if (= num 1)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial-coefficient n k)\n    (if (= k 0)\n        1\n        (/ (* n (- n 1))\n           (* k (- k 1)))))\n  (/ (factorial (+ num 1))\n     (* (factorial num)\n        (factorial (- num 1))\n        (binomial-coefficient (+ num 1) num))))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1)))\n                   (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial-coefficient (* 2 n) n))\n  (catalan num))\n",
    "  (cond [(= num 0) 1]\n        [else (+ (* (catalan_number (- num 1))\n                   (/ (+ (* 2 num) 1)\n                      (+ num 2)))\n                 (* (catalan_number (- num 2))\n                    (/ (+ (* 2 num) 1)\n                       (+ num 1))))]))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (if (= k 0)\n        1\n        (/ (* n (- n 1))\n           (* k (- k 1)))))\n  (define (catalan n)\n    (/ (factorial (* 2 n))\n       (* (factorial n)\n          (factorial (+ n 1)))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1))) (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 n) 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond\n      [(= n 0) 1]\n      [else\n       (+ (* n (catalan-helper (- n 1)))\n          (* (catalan-helper (- n 1)) (catalan-helper (- n 2))))]))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n           (* (catalan-helper (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1)))\n                   (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ n (* 2 (- num 1))) (1+ n)))\n           (* (catalan-helper (- n 2)) (/ (+ n (* 2 (- num 2))) (1+ n))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* num (catalan-helper (- num 1))) (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n           (* (catalan-helper (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1)))\n                   (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1)))\n     (factorial (+ num 1))))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* num (catalan-helper (- num 1)))\n           (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (+ (* 2 (* n 2)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 (* n 2)) 1)))))\n  (define (catalan n)\n    (/ (catalan-helper n) (factorial n)))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1)))\n       (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n           (* (catalan-helper (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1)))\n                   (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (catalan-helper num)\n    (define (factorial num)\n      (if (= num 0)\n          1\n          (* num (factorial (- num 1)))))\n    (define (binomial-coefficient n k)\n      (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n    (binomial-coefficient (* 2 num) num))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (binomial-coefficient (* 2 num) num))\n",
    "  (define (catalan_number_helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan_number_helper (- num 1))\n              (/ (+ (* 2 num) 1)\n                 (+ num 2)))\n           (* (catalan_number_helper (- num 2))\n              (/ (+ (* 2 (- num 1)) 1)\n                 (+ (- num 1) 2))))))\n  (catalan_number_helper num))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1))\n            (/ (+ (* 2 num) 1)\n               (+ num 2)))\n         (* (catalan_number (- num 2))\n            (/ (+ (* 2 num) 1)\n               (+ num 2))))))\n",
    "  (define (catalan-helper num)\n    (cond\n      [(= num 0) 1]\n      [(= num 1) 1]\n      [else (+ (* (catalan-helper (- num 1)) num)\n               (catalan-helper (- num 2)))]))\n  (catalan-helper num))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1)) (- (* 2 (+ num 1)) 1))\n         (* (catalan_number (- num 1)) (- (* 2 (+ num 1)) 2)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* num (catalan-helper (- num 1))) (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1)))\n       (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper num)\n    (cond\n      [(= num 0) 1]\n      [(= num 1) 1]\n      [else (+ (* num (catalan-helper (- num 1))) (catalan-helper (- num 1)))]))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan_helper n)\n    (if (= n 0)\n        1\n        (+ (* (factorial (- (* 2 n) 1)) (factorial n))\n           (* (factorial (- (* 2 n) 2)) (factorial (- n 1))))))\n  (catalan_helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 2)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 2)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (* (+ n 2) (+ n 1)) 2))\n           (* (catalan-helper (- n 2)) (/ (* (+ n 3) (+ n 2)) 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (catalan_helper num)\n    (if (= num 0)\n        1\n        (+ (/ (factorial (* 2 num))\n              (* (factorial num) (factorial (- num 1))))\n           (catalan_helper (- num 1)))))\n  (catalan_helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (/ (+ num (* 2 (- num 1))) (+ num 1)))\n           (* (catalan-helper (- num 2)) (/ (+ num (* 2 (- num 2))) (+ num 1))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond [(= n 0) 1]\n          [else (+ (* n (catalan-helper (- n 1)))\n                   (* (catalan-helper (- n 1))\n                      (catalan-helper (- n 2))))]))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper num)\n    (cond [(= num 0) 1]\n          [(= num 1) 1]\n          [else (+ (* (catalan-helper (- num 1)) num)\n                   (* (catalan-helper (- num 2)) (- num 1)))]))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 2) (- n 2)))\n           (* (catalan-helper (- n 3)) (/ (+ (* 2 n) 3) (- n 3)))\n           (* (catalan-helper (- n 4)) (/ (+ (* 2 n) 4) (- n 4)))\n           (* (catalan-helper (- n 5)) (/ (+ (* 2 n) 5) (- n 5)))\n           (* (catalan-helper (- n 6)) (/ (+ (* 2 n) 6) (- n 6)))\n           (* (catalan-helper (- n 7)) (/ (+ (* 2 n) 7) (- n 7)))\n           (* (catalan-helper (- n 8)) (/ (+ (* 2 n) 8) (- n 8)))\n           (* (catalan-helper (- n 9)) (/ (+ (* 2 n) 9) (- n 9)))\n           (* (catalan-helper (- n 10)) (/ (+ (* 2 n) 10) (- n 10)))\n           (* (catalan-helper (- n 11)) (/ (+ (* 2 n) 11) (- n 11)))\n           (* (catalan-helper (- n 12)) (/ (+ (* 2 n) 12) (- n 12)))\n           (* (catalan-helper (- n 13)) (/ (+ (* 2 n) 13) (- n 13)))\n           (* (catalan-helper (- n 14)) (/ (+ (* 2 n) 14) (- n 14)))\n           (* (catalan-helper (- n 15)) (/ (+ (* 2 n) 15) (- n 15)))\n           (* (catalan-helper (- n 16)) (/ (+ (* 2 n) 16) (- n 16)))\n           (* (catalan-helper (- n 17)) (/ (+ (* 2 n) 17) (- n 17)))\n           (* (catalan-helper (- n 18)) (/ (+ (* 2 n) 18) (- n 18)))\n           (* (catalan-helper (- n 19)) (/ (+ (* 2 n) 19) (- n 19)))\n           (* (catalan-helper (- n 20))",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (cond\n    [(= num 0) 1]\n    [else\n     (+ (* (catalan_number (- num 1))\n           (/ (+ (* 2 num) (- 1))\n              (+ num 2)))\n        (* (catalan_number (- num 2))\n           (/ (+ (* 2 num) (- 3))\n              (+ num 2))))]))\n",
    "  (define (catalan_number_helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan_number_helper (- n 1)))\n           (catalan_number_helper (- n 2)))))\n  (catalan_number_helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n         (* (catalan_number (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* num (catalan-helper (- num 1)))\n           (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (catalan_number_helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan_number_helper (- num 1)) (/ (* 2 (- num 1)) (- num 2)))\n           (* (catalan_number_helper (- num 2)) (/ (* 2 (- num 1)) (- num 2))))))\n  (catalan_number_helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (/ (factorial (* 2 num))\n     (* (factorial num) (factorial (- num 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n           (* (catalan-helper (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (cond\n      [(= n 0) 1]\n      [else\n       (+ (* n (catalan-helper (- n 1)))\n          (catalan-helper (- n 2)))]))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1)))\n       (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper num)\n    (cond ((= num 0) 1)\n          ((= num 1) 1)\n          (else (+ (* (catalan-helper (- num 1)) num)\n                   (catalan-helper (- num 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (* n (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ n (* 2 (- num n))) (+ n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (if (= num 0)\n      1\n      (let loop ((i 0) (sum 0))\n        (if (= i num)\n            sum\n            (loop (+ i 1) (+ sum (* (catalan_number (- num 1)) (catalan_number (- i 1)))))))))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (binomial (* 2 num) num))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1)))\n       (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n         (* (catalan_number (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* num (catalan-helper (- num 1)))\n           (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 2)))))\n  (catalan-helper num))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1))\n            (/ (+ (* 2 num) 1)\n               (+ num 2)))\n         (* (catalan_number (- num 2))\n            (/ (+ (* 2 (- num 1)) 1)\n               (+ (- num 1) 2))))))\n",
    "  (define (catalan-iter n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-iter (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-iter (- n 1)) (- (* 2 n) 1)))))\n  (catalan-iter num))\n",
    "  (define (catalan_number_helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan_number_helper (- num 1))\n              (/ (+ (* 2 num) 1)\n                 (+ num 2)))\n           (* (catalan_number_helper (- num 2))\n              (/ (- (* 2 num) 1)\n                 (+ num 2))))))\n  (catalan_number_helper num))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1))\n            (/ (+ (* 2 num) 1)\n               (+ num 2)))\n         (* (catalan_number (- num 2))\n            (/ (- (* 2 num) 1)\n               (+ num 2))))))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n         (* (catalan_number (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* num (catalan-helper (- num 1)))\n           (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond [(= n 0) 1]\n          [(= n 1) 1]\n          [else (+ (* n (catalan-helper (- n 1)))\n                   (catalan-helper (- n 2)))]))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2)))\n           (* (catalan-helper (- n 3)) (/ (+ (* 2 n) 1) (- n 3)))\n           (* (catalan-helper (- n 4)) (/ (+ (* 2 n) 1) (- n 4)))\n           (* (catalan-helper (- n 5)) (/ (+ (* 2 n) 1) (- n 5)))\n           (* (catalan-helper (- n 6)) (/ (+ (* 2 n) 1) (- n 6)))\n           (* (catalan-helper (- n 7)) (/ (+ (* 2 n) 1) (- n 7)))\n           (* (catalan-helper (- n 8)) (/ (+ (* 2 n) 1) (- n 8)))\n           (* (catalan-helper (- n 9)) (/ (+ (* 2 n) 1) (- n 9)))\n           (* (catalan-helper (- n 10)) (/ (+ (* 2 n) 1) (- n 10)))\n           (* (catalan-helper (- n 11)) (/ (+ (* 2 n) 1) (- n 11)))\n           (* (catalan-helper (- n 12)) (/ (+ (* 2 n) 1) (- n 12)))\n           (* (catalan-helper (- n 13)) (/ (+ (* 2 n) 1) (- n 13)))\n           (* (catalan-helper (- n 14)) (/ (+ (* 2 n) 1) (- n 14)))\n           (* (catalan-helper (- n 15)) (/ (+ (* 2 n) 1) (- n 15)))\n           (* (catalan-helper (- n 16)) (/ (+ (* 2 n) 1) (- n 16)))\n           (* (catalan-helper (- n 17)) (/ (+ (* 2 n) 1) (- n 17)))\n           (* (catalan-helper (- n 18)) (/ (+ (* 2 n) 1) (- n 18)))\n           (* (catalan-helper (- n 19)) (/ (+ (* 2 n) 1) (- n 19)))\n           (* (catalan-helper (- n 20))",
    "  (define (catalan_number_helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan_number_helper (- num 1))\n              (/ (+ (* 2 num) 1)\n                 (- num 1)))\n           0)))\n  (catalan_number_helper num))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1)))\n                   (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (/ (factorial (* 2 num))\n     (* (factorial num) (factorial (- num 1)))))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (* num (catalan-helper (- num 1)))))\n  (define (catalan-helper2 num)\n    (if (= num 0)\n        1\n        (* num (catalan-helper2 (- num 1)))))\n  (/ (catalan-helper (* 2 num))\n     (catalan-helper2 (+ 1 num))))\n",
    "  (define (catalan-helper n)\n    (cond\n      [(= n 0) 1]\n      [else\n       (+ (* (catalan-helper (- n 1)) (- (* 2 n) 1))\n          (* (catalan-helper (- n 2)) (- (* 2 n) 2)))]))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ n (* 2 (- num 1))) (1+ n)))\n           (* (catalan-helper (- num 1)) (/ (+ n (* 2 (- n 2))) (1+ (- n 1)))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ n (* 2 (- num 1))) n)))))\n  (catalan-helper num))\n",
    "  (cond\n    [(= num 0) 1]\n    [(= num 1) 1]\n    [else (+ (* (catalan_number (- num 1)) (/ (* 2 (- num 1)) (+ num 1)))\n             (* (catalan_number (- num 2)) (/ (* 2 (- num 2)) (+ num 2))))]))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (cond [(= num 0) 1]\n        [(= num 1) 1]\n        [else (+ (* (catalan_number (- num 1)) num)\n                 (catalan_number (- num 2)))]))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1))\n              (/ (+ (* 2 num) 1)\n                 (+ num 2)))\n           (* (catalan-helper (- num 2))\n              (/ (+ (* 2 num) 1)\n                 (+ num 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper num)\n    (cond ((= num 0) 1)\n          ((= num 1) 1)\n          (else (+ (* num (catalan-helper (- num 1)))\n                   (catalan-helper (- num 1))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1))) (catalan-helper (- n 2)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (cond ((= num 0) 1)\n          ((= num 1) 1)\n          (else (+ (* num (catalan-helper (- num 1)))\n                   (catalan-helper (- num 1))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* num (catalan-helper (- num 1)))\n           (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 2)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (cond\n      [(= num 0) 1]\n      [else\n       (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n          (* (catalan-helper (- num 2)) (- (* 2 num) 1)))]))\n  (catalan-helper num))\n",
    "  (define (catalan_number-iter num acc)\n    (if (= num 0)\n        acc\n        (catalan_number-iter (- num 1)\n                             (* acc (/ (+ num 1) num)))))\n  (catalan_number-iter num 1))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1)) (- (* 2 num) 1))\n         (* (catalan_number (- num 2)) (- (* 2 num) 2)))))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1)))\n                   (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (cond\n      [(= num 0) 1]\n      [(= num 1) 1]\n      [else\n       (+ (* (catalan-helper (- num 1))\n             (catalan-helper (- num 2)))\n          (* (catalan-helper (- num 2))\n             (catalan-helper (- num 3))))]))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (cond\n      [(= n 0) 1]\n      [else (+ (* (catalan-helper (- n 1)) (- (* 2 n) 1))\n               (* (catalan-helper (- n 2)) (- (* 2 n) 2)))]))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2))))))\n  (catalan-helper num))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1)) (- (* 2 num) 1))\n         (* (catalan_number (- num 2)) (- (* 2 num) 2)))))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (catalan_number_helper num)\n    (cond [(= num 0) 1]\n          [(= num 1) 1]\n          [else (+ (* (catalan_number_helper (- num 1))\n                     (catalan_number_helper (- num 2)))\n                   (* (catalan_number_helper (- num 2))\n                      (catalan_number_helper (- num 3))))]))\n  (catalan_number_helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ n (* 2 (- num 1))) (+ n 1)))\n           (catalan-helper (- n 2)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (cond ((= num 0) 1)\n          ((= num 1) 1)\n          (else (+ (* (catalan-helper (- num 1))\n                     (catalan-helper (- num 2)))\n                  (* (catalan-helper (- num 2))\n                     (catalan-helper (- num 3)))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 1))))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (factorial (- (* num 2) 1)) (factorial (- (* num 2) 2)))\n           (* (factorial (- (* num 2) 2)) (factorial (- (* num 2) 3))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond\n      [(= n 0) 1]\n      [else\n       (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n          (* (catalan-helper (- n 2)) (- (* 2 n) 1)))]))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (catalan_helper num)\n    (if (= num 0)\n        1\n        (+ (* (factorial (* 2 num)) (factorial (- num 1)))\n           (* (factorial (* 2 num)) (factorial (- num 1))))))\n  (catalan_helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (combination n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (combination (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (* num (catalan-helper (- num 1)))))\n  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (/ (catalan-helper (* 2 num)) (factorial num)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper num)\n    (cond\n      [(= num 0) 1]\n      [else (+ (* (catalan-helper (- num 1)) (/ (+ (* 2 num) (- num 1)) (1+ num)))\n              (* (catalan-helper (- num 2)) (/ (+ (* 2 num) (- num 2)) (1+ num))))]))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (binomial (* 2 num) num))\n",
    "  (define (catalan-helper n)\n    (cond\n      [(= n 0) 1]\n      [else\n       (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n          (* (catalan-helper (- n 2)) (- (* 2 n) 1)))]))\n  (catalan-helper num))\n",
    "  (cond\n    [(= num 0) 1]\n    [else\n     (+ (* (catalan_number (- num 1)) (/ num (+ num 1)))\n        (* (catalan_number (- num 2)) (/ (- num 1) (+ num 1))))]))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1)))\n       (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (* num (catalan-helper (- num 1)))))\n  (/ (catalan-helper (* 2 num)) (catalan-helper (+ num 1))))\n",
    "  (define (catalan-helper num)\n    (cond\n      [(= num 0) 1]\n      [(= num 1) 1]\n      [else (+ (* num (catalan-helper (- num 1))) (catalan-helper (- num 2)))]))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* num (catalan-helper (- num 1))) (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 n) 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ (* 2 n) 1) (- n 1)))\n           (* (catalan-helper (- n 2)) (/ (+ (* 2 n) 1) (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper n)\n    (define (factorial n)\n      (if (= n 0)\n          1\n          (* n (factorial (- n 1)))))\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n           (* (catalan-helper (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond\n      [(= n 0) 1]\n      [else\n       (+ (* (catalan-helper (- n 1)) (/ (+ n 1) n))\n          (* (catalan-helper (- n 2)) (/ (+ n 2) n)))]))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (define (factorial n)\n      (if (= n 0)\n          1\n          (* n (factorial (- n 1)))))\n    (define (binomial n k)\n      (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n    (binomial (* 2 n) n))\n  (catalan-helper num))\n",
    "  (define (catalan-helper n)\n    (cond ((= n 0) 1)\n          ((= n 1) 1)\n          (else (+ (* n (catalan-helper (- n 1)))\n                   (catalan-helper (- n 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 1)\n        1\n        (* num (factorial (- num 1)))))\n  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (/ (factorial (* 2 num))\n              (* (factorial num) (factorial (- num 1))))\n           (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (if (= num 0)\n      1\n      (+ (* (catalan_number (- num 1))\n            (/ (+ (* 2 num) 1)\n               (+ num 2)))\n         (* (catalan_number (- num 1))\n            (/ (- (* 2 num) 1)\n               (+ num 2))))))\n",
    "  (define (catalan-helper n)\n    (cond\n      [(= n 0) 1]\n      [else (+ (* (catalan-helper (- n 1)) (/ (+ n (* 2 (- num n))) (+ n 1)))\n              (catalan-helper (- n 1)))]))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (/ (+ (* 2 num) 1) (- num 1)))\n           (* (catalan-helper (- num 2)) (/ (+ (* 2 num) 1) (- num 2))))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (binomial (* 2 n) n))\n  (catalan num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (/ (+ n (* 2 (- num n))) (+ n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 1))\n           (* (catalan-helper (- num 1)) (- (* 2 (+ num 1)) 2)))))\n  (catalan-helper num))\n",
    "  (define (factorial num)\n    (if (= num 1)\n        1\n        (* num (factorial (- num 1)))))\n  (/ (factorial (* 2 num))\n     (* (factorial num) (factorial (- num 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* (factorial (- num 1)) (catalan-helper (- num 1)))\n           (* (factorial (- num 2)) (catalan-helper (- num 2))))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (if (= num 0)\n        1\n        (+ (* num (catalan-helper (- num 1)))\n           (catalan-helper (- num 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan_helper n)\n    (if (= n 0)\n        1\n        (+ (* (factorial (- n 1)) (catalan_helper (- n 1)))\n           (* (factorial (- n 2)) (catalan_helper (- n 2))))))\n  (catalan_helper num))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* n (catalan-helper (- n 1)))\n           (catalan-helper (- n 1)))))\n  (catalan-helper num))\n",
    "  (define (catalan-helper num)\n    (cond ((= num 0) 1)\n          ((= num 1) 1)\n          (else (+ (* num (catalan-helper (- num 1)))\n                   (catalan-helper (- num 1))))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan_helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan_helper (- n 1)) (+ (* 2 (- n 1)) 1))\n           (* (catalan_helper (- n 1)) (- n 1)))))\n  (/ (catalan_helper num) (factorial num)))\n",
    "  (if (zero? num)\n      1\n      (let loop ([i 0] [sum 0])\n        (if (= i num)\n            sum\n            (loop (+ i 1) (+ (* (* (catalan_number (- i 1)) (catalan_number (- num i))) 1.0) sum))))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (factorial num)\n    (if (= num 0)\n        1\n        (* num (factorial (- num 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n",
    "  (define (catalan-helper n)\n    (if (= n 0)\n        1\n        (+ (* (catalan-helper (- n 1)) (- (* 2 (+ n 1)) 1))\n           (* (catalan-helper (- n 1)) (- (* 2 n) 1)))))\n  (catalan-helper num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (catalan n)\n    (if (= n 0)\n        1\n        (+ (binomial (* 2 n) n) (catalan (- n 1)))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (catalan n)\n    (/ (* (factorial (* 2 n)) (factorial (- n 1))) (factorial (+ n 1))))\n  (catalan num))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (/ (* (factorial (* 2 num)) (factorial (- num 1))) (factorial (+ num 1))))\n"
  ]
}