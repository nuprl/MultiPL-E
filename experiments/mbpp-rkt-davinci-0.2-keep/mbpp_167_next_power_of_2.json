{
  "name": "mbpp_167_next_power_of_2",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the smallest power of 2 greater than or equal to n.\n(define (next_power_of_2 n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_power_of_2))\n    (check-equal? (candidate 0) 1)\n    (check-equal? (candidate 5) 8)\n    (check-equal? (candidate 17) 32)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (> n 0))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (not (even? n))\n                (loop (+ n 1))\n                (if (= n 1)\n                    2\n                    (* 2 (loop (/ n 2)))))))))\n",
    "  (if (= n 1)\n      2\n      (let loop ([n n])\n        (if (= (bitwise-and n 1) 0)\n            (loop (bitwise-and n (- n 1)))\n            (expt 2 (ceiling (log n 2)))))))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (quotient n 2))]))\n",
    "  (define (next_power_of_2_iter n p)\n    (if (&gt;= n p)\n        p\n        (next_power_of_2_iter n (* 2 p))))\n  (next_power_of_2_iter n 1))\n",
    "  (if (not (integer? n))\n      (error \"Argument must be an integer\")\n      (if (not (positive? n))\n          (error \"Argument must be positive\")\n          (let loop ((n n) (pow 2))\n            (if (&gt;= n pow)\n                (loop n (* pow 2))\n                pow)))))\n</code>\n",
    "  (let loop ([n n] [pow 2])\n    (if (&gt;= n pow)\n        (loop n (* pow 2))\n        pow)))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (&lt; n 1)\n          (error \"n must be greater than 0\")\n          (let loop ([n n])\n            (if (zero? (remainder n 2))\n                (loop (/ n 2))\n                (expt 2 (ceiling (log n 2))))))))\n</code>\n",
    "  (if (zero? n)\n      1\n      (let loop ([n n] [pow 2])\n        (if (&lt;= pow n)\n            (loop n (* pow 2))\n            pow))))\n</code>\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (if (= n 1)\n      2\n      (let loop ([n n] [pow 2])\n        (if (&lt;= pow n)\n            (loop n (* pow 2))\n            pow))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (= n 1)\n      2\n      (let ((next (next_power_of_2 (/ n 2))))\n        (if (= n next)\n            (* 2 next)\n            next))))\n",
    "  (if (not (integer? n))\n      (error \"Argument must be an integer\")\n      (if (not (> n 0))\n          (error \"Argument must be greater than 0\")\n          (let loop ([n n])\n            (if (not (even? n))\n                (loop (+ n 1))\n                (if (= n 1)\n                    2\n                    (* n 2)))))))\n",
    "  (if (zero? n)\n      1\n      (let loop ([n n])\n        (if (zero? (remainder n 2))\n            (loop (/ n 2))\n            (* 2 n)))))\n",
    "  (if (zero? n)\n      1\n      (let loop ([n n])\n        (if (zero? (remainder n 2))\n            (loop (/ n 2))\n            (* 2 n)))))\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt; n i)\n        (next_power_of_2_iter n (* i 2))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (if (= n 0)\n      1\n      (let loop ([n n] [pow 2])\n        (if (&lt;= pow n)\n            (loop n (* pow 2))\n            pow))))\n",
    "  (if (= (bitwise-and n (sub1 n)) 0)\n      n\n      (next_power_of_2 (bitwise-ior n (bitwise-and n (sub1 n))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (let loop ([n n] [pow 2])\n        (if (&gt;= n pow)\n            (loop n (* pow 2))\n            pow))))\n",
    "  (define (helper n)\n    (if (not (integer? n))\n        (error \"n must be an integer\")\n        (if (not (positive? n))\n            (error \"n must be positive\")\n            (if (= n 1)\n                1\n                (if (= (remainder n 2) 0)\n                    (helper (/ n 2))\n                    (expt 2 (ceiling (log n 2))))))))\n  (helper n))\n",
    "  (cond [(= n 0) 1]\n        [(= n 1) 2]\n        [(= n 2) 2]\n        [(= n 3) 4]\n        [(= n 4) 4]\n        [(= n 5) 8]\n        [(= n 6) 8]\n        [(= n 7) 8]\n        [(= n 8) 8]\n        [(= n 9) 16]\n        [(= n 10) 16]\n        [(= n 11) 16]\n        [(= n 12) 16]\n        [(= n 13) 16]\n        [(= n 14) 16]\n        [(= n 15) 16]\n        [(= n 16) 16]\n        [(= n 17) 32]\n        [(= n 18) 32]\n        [(= n 19) 32]\n        [(= n 20) 32]\n        [(= n 21) 32]\n        [(= n 22) 32]\n        [(= n 23) 32]\n        [(= n 24) 32]\n        [(= n 25) 32]\n        [(= n 26) 32]\n        [(= n 27) 32]\n        [(= n 28) 32]\n        [(= n 29) 32]\n        [(= n 30) 32]\n        [(= n 31) 32]\n        [(= n 32) 32]\n        [(= n 33) 64]\n        [(= n 34) 64]\n        [(= n 35) 64]\n        [(= n 36) 64]\n        [(= n 37) 64]\n        [(= n 38) 64]\n        [(= n 39) 64]\n        [(= n 40) 64]\n        [(= n 41) 64]\n        [(= n 42) 64]\n        [(= n 43) 64]\n        [(= n 44) 64]\n        [(= n 45) 64]\n        [(= n 46) 64]\n        [(= n 47) 64]\n        [(= n 48) 64]\n        [(= n 49) 64]\n        [(= n 50) 64]\n        [(= n 51) 64]\n        [(= n 52) 64]\n        [(= n 53) 64]\n        [(= n 54) 64]\n        [(= n 55) 64]\n        [(= n 56",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (= n 1)\n      1\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (cond\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (zero? (modulo n 2))\n                (loop (/ n 2))\n                (expt 2 (ceiling (log n 2))))))))\n",
    "  (let loop ((n n) (pow 2))\n    (if (&gt;= n pow)\n        (loop n (* pow 2))\n        pow)))\n",
    "  (if (= n 1)\n      1\n      (if (= n 0)\n          1\n          (if (&lt; n 0)\n              (error \"n must be positive\")\n              (if (even? n)\n                  (next_power_of_2 (/ n 2))\n                  (next_power_of_2 (* n 2)))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (&gt; n 0))\n          (error \"n must be greater than 0\")\n          (let loop ([n n])\n            (if (not (odd? n))\n                (loop (/ n 2))\n                (expt 2 (ceiling (log n 2))))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [else (next_power_of_2 (quotient n 2))]))\n",
    "  (define (next_power_of_2_iter n i)\n    (if (< n (* 2 i))\n        i\n        (next_power_of_2_iter n (* 2 i))))\n  (next_power_of_2_iter n 1))\n",
    "  (define (next_power_of_2_iter n power)\n    (if (&gt;= n power)\n        (next_power_of_2_iter n (* power 2))\n        power))\n  (next_power_of_2_iter n 1))\n",
    "  (if (zero? n)\n      1\n      (let loop ([n n] [i 1])\n        (if (&lt;= n i)\n            i\n            (loop n (* 2 i))))))\n</code>\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (let loop ([n n])\n        (if (and (even? n) (= n 2))\n            n\n            (loop (quotient n 2))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (not (positive? n))\n      (error \"n must be positive\"))\n  (let loop ([n n] [pow 2])\n    (if (&gt;= n pow)\n        (loop n (* pow 2))\n        pow)))\n</code>\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ((n n) (pow 2))\n            (if (&gt;= n pow)\n                (loop n (* pow 2))\n                (/ pow 2))))))\n</code>\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (= n 1)\n      1\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ 1 n)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (> n 0))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (not (even? n))\n                (loop (+ n 1))\n                (if (= n 1)\n                    2\n                    (* n 2)))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (quotient n 2))]))\n",
    "  (if (zero? n)\n      1\n      (let loop ((i 1))\n        (if (&lt; i n)\n            (loop (* 2 i))\n            i))))\n",
    "  (define (next_power_of_2_iter n p)\n    (if (&gt;= n p)\n        (next_power_of_2_iter n (* 2 p))\n        p))\n  (next_power_of_2_iter n 1))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          (next_power_of_2 (quotient n 2))\n          (next_power_of_2 (quotient n 2))\n          (* 2 (next_power_of_2 (quotient n 2))))))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (not (integer? n))\n      (error \"next_power_of_2: argument must be an integer\")\n      (if (not (positive? n))\n          (error \"next_power_of_2: argument must be positive\")\n          (let loop ((n n) (pow 2))\n            (if (>= n pow)\n                (loop n (* pow 2))\n                pow)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ((n n))\n            (if (power-of-2? n)\n                n\n                (loop (* n 2)))))))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)) ))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (positive? (bitwise-and n 1))\n                (loop (bitwise-shift-left n 1))\n                n)))))\n",
    "  (if (= n 1)\n      2\n      (let ((next (next_power_of_2 (/ n 2))))\n        (if (= n next)\n            (* next 2)\n            next))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (> n 0))\n          (error \"n must be positive\")\n          (if (= n 1)\n              1\n              (let loop ([n n] [pow 1])\n                (if (<= n pow)\n                    pow\n                    (loop n (* pow 2))))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 0) 1]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      2\n      (let loop ([n n])\n        (if (even? n)\n            (loop (/ n 2))\n            (expt 2 (ceiling (log n 2)))))\n  )\n)\n",
    "  (if (= n 1)\n      2\n      (let loop ([n n])\n        (if (= (bitwise-and n 1) 1)\n            (loop (bitwise-and n (bitwise-not 1)))\n            n))))\n",
    "  (define (helper n)\n    (if (= n 1)\n        1\n        (if (= (remainder n 2) 0)\n            (helper (/ n 2))\n            (* 2 (helper (/ n 2))))))\n  (helper n))\n",
    "  (define (iter n i)\n    (if (&gt;= n (* 2 i))\n        (iter n (* 2 i))\n        i))\n  (iter n 1))\n",
    "  (if (not (positive? n))\n      (error \"n must be positive\"))\n  (define (iter n power)\n    (if (&gt;= n power)\n        (iter n (* 2 power))\n        power))\n  (iter n 1))\n",
    "  (expt 2 (ceiling (log n 2))))\n",
    "  (let loop ([n n] [pow 1])\n    (if (&gt;= n pow)\n        (loop n (* 2 pow))\n        pow)))\n",
    "  (if (= n 0)\n      1\n      (let loop ([n n])\n        (if (= (bitwise-and n 1) 0)\n            n\n            (loop (bitwise-and n (bitwise-not 1)))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (let loop ((n n) (i 0))\n        (if (= n 1)\n            (expt 2 i)\n            (loop (/ n 2) (+ i 1))))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          n\n          (next_power_of_2 (add1 n)))))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          n\n          (next_power_of_2 (add1 n)))))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          1\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (= n 1)\n      2\n      (next_power_of_2 (bitwise-arithmetic-shift n -1))))\n",
    "  (cond [(= n 0) 1]\n        [(= n 1) 2]\n        [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          n\n          (next_power_of_2 (+ n 1)))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (even? n)\n                (loop (/ n 2))\n                (expt 2 (ceiling (log n 2))))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (modulo n 2) 0) (next_power_of_2 (/ n 2))]\n    [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (if (= n 1)\n      2\n      (let ([p (expt 2 (ceiling (log n 2)))]\n            [n (expt 2 (ceiling (log n 2)))])\n        (if (>= n n)\n            n\n            (next_power_of_2 (+ n 1))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (= n 1)\n                1\n                (if (even? n)\n                    (loop (/ n 2))\n                    (expt 2 (ceiling (log n 2)))))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (modulo n 2) 0) n]\n    [else (next_power_of_2 (add1 n))]))\n",
    "  (if (zero? n)\n      1\n      (let ([p (expt 2 (ceiling (/ (log n) (log 2))))])\n        (if (= p n)\n            p\n            (* 2 p)))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (if (not (integer? n))\n      (error \"n is not an integer\")\n      (if (not (positive? n))\n          (error \"n is not positive\")\n          (if (= n 1)\n              1\n              (let loop ([n n])\n                (if (= n 1)\n                    1\n                    (if (even? n)\n                        (loop (/ n 2))\n                        (expt 2 (ceiling (log n 2)))))))))\n",
    "  (if (= n 1)\n      2\n      (if (odd? n)\n          (next_power_of_2 (+ n 1))\n          (* 2 n))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (> n 0))\n          (error \"n must be greater than 0\")\n          (let loop ([n n])\n            (if (= n 1)\n                1\n                (if (even? n)\n                    (loop (/ n 2))\n                    (expt 2 (ceiling (log n 2)))))))))\n",
    "  (if (= n 1)\n      1\n      (let loop ((i 1))\n        (if (&gt; (* 2 i) n)\n            i\n            (loop (* 2 i))))))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (expt 2 (ceiling (log n 2))))\n",
    "  (if (= n 1)\n      2\n      (let loop ([n n])\n        (if (= (bitwise-and n 1) 0)\n            n\n            (loop (bitwise-and n (sub1 n)))))))\n",
    "  (define (next_power_of_2_iter x)\n    (if (&gt;= x n) x\n        (next_power_of_2_iter (* 2 x))))\n  (next_power_of_2_iter 1))\n</code>\n",
    "  (if (= n 1)\n      2\n      (next_power_of_2 (quotient n 2))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (not (positive? n))\n      0\n      (let loop ([n n])\n        (if (positive? (bitwise-and n 1))\n            (bitwise-arithmetic-shift n 1)\n            (loop (bitwise-arithmetic-shift n 1))))))\n",
    "  (expt 2 (ceiling (log n 2))))\n",
    "  (define (next_power_of_2_iter n p)\n    (if (&gt;= n p)\n        p\n        (next_power_of_2_iter n (* 2 p))))\n  (next_power_of_2_iter n 1))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n])\n            (if (even? n)\n                (loop (/ n 2))\n                (let loop ([i 1])\n                  (if (&lt; (* i 2) n)\n                      (loop (* i 2))\n                      i)))))))\n</code>\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ 1 n)))))\n",
    "  (if (= n 1)\n      2\n      (let loop ((n n) (pow 2))\n        (if (< n pow)\n            pow\n            (loop n (* pow 2))))))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (define (next_power_of_2-iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2-iter n (* 2 i))\n        i))\n  (next_power_of_2-iter n 1))\n",
    "  (if (= n 0)\n      1\n      (if (= n 1)\n          2\n          (let loop ([n n] [pow 2])\n            (if (&lt;= pow n)\n                (loop n (* pow 2))\n                pow)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* n 2)))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2))))))\n",
    "  (if (not (integer? n))\n      (error \"Argument must be an integer\")\n      (if (not (>= n 0))\n          (error \"Argument must be a positive integer\")\n          (if (= n 0)\n              1\n              (let loop ([n n] [pow 2])\n                (if (< n pow)\n                    pow\n                    (loop n (* pow 2))))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (let loop ((n n) (i 1))\n        (if (&gt;= n i)\n            (loop n (* i 2))\n            i))))\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (= n 1)\n      2\n      (if (= (modulo n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2))))))\n",
    "  (if (= n 0)\n      1\n      (let loop ((n n) (pow 2))\n        (if (<= n pow)\n            pow\n            (loop n (* pow 2))))))\n",
    "  (if (= n 1)\n      2\n      (let loop ((i 2) (pow 2))\n        (if (&gt;= pow n)\n            pow\n            (loop (+ i 1) (* i i))))))\n",
    "  (define (next_power_of_2_iter n p)\n    (if (&gt;= n p)\n        p\n        (next_power_of_2_iter n (* 2 p))))\n  (next_power_of_2_iter n 1))\n",
    "  (define (next_power_of_2_iter n acc)\n    (if (&gt;= n (* 2 acc))\n        (next_power_of_2_iter n (* 2 acc))\n        acc))\n  (next_power_of_2_iter n 1))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (* 3 n)))))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          (next_power_of_2 (quotient n 2))\n          (* 2 (next_power_of_2 (quotient n 2))))))\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n\n\nA:\n\nYou can use the <code>bitwise-&gt;integer</code> procedure to convert a bitstring to an integer.\n<code>(bitwise-&gt;integer #b10000000000000000000000000000000)\n=&gt; 2147483648\n</code>\nYou can then use <code>bitwise-arithmetic-shift</code> to shift the bits to the left.\n<code>(bitwise-arithmetic-shift #b10000000000000000000000000000000 1)\n=&gt; #b100000000000000000000000000000000\n</code>\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(= n 56) 64]\n    [(=",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [else (next_power_of_2 (bitwise-arithmetic-shift n -1))]))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (= n 1)\n      2\n      (let loop ([n n])\n        (if (= (modulo n 2) 0)\n            (loop (/ n 2))\n            (expt 2 (ceiling (log n 2)))))))\n",
    "  (if (= n 1)\n      2\n      (let loop ([n n] [i 1])\n        (if (&lt; n (* 2 i))\n            i\n            (loop n (* 2 i))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 4]\n        [(= n 4) 4]\n        [(= n 5) 8]\n        [(= n 6) 8]\n        [(= n 7) 8]\n        [(= n 8) 8]\n        [(= n 9) 16]\n        [(= n 10) 16]\n        [(= n 11) 16]\n        [(= n 12) 16]\n        [(= n 13) 16]\n        [(= n 14) 16]\n        [(= n 15) 16]\n        [(= n 16) 16]\n        [(= n 17) 32]\n        [(= n 18) 32]\n        [(= n 19) 32]\n        [(= n 20) 32]\n        [(= n 21) 32]\n        [(= n 22) 32]\n        [(= n 23) 32]\n        [(= n 24) 32]\n        [(= n 25) 32]\n        [(= n 26) 32]\n        [(= n 27) 32]\n        [(= n 28) 32]\n        [(= n 29) 32]\n        [(= n 30) 32]\n        [(= n 31) 32]\n        [(= n 32) 32]\n        [(= n 33) 64]\n        [(= n 34) 64]\n        [(= n 35) 64]\n        [(= n 36) 64]\n        [(= n 37) 64]\n        [(= n 38) 64]\n        [(= n 39) 64]\n        [(= n 40) 64]\n        [(= n 41) 64]\n        [(= n 42) 64]\n        [(= n 43) 64]\n        [(= n 44) 64]\n        [(= n 45) 64]\n        [(= n 46) 64]\n        [(= n 47) 64]\n        [(= n 48) 64]\n        [(= n 49) 64]\n        [(= n 50) 64]\n        [(= n 51) 64]\n        [(= n 52) 64]\n        [(= n 53) 64]\n        [(= n 54) 64]\n        [(= n 55) 64]\n        [(= n 56) 64]\n        [(= n 57",
    "  (if (= n 1)\n      2\n      (let loop ([n n])\n        (if (and (even? n) (= n 2))\n            n\n            (loop (/ n 2))))))\n",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (let loop ([n n] [i 0])\n            (if (&lt; n (expt 2 i))\n                i\n                (loop n (+ i 1)))))))\n",
    "  (cond\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (= n 1)\n      1\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)) ))))\n",
    "  (if (not (zero? n))\n      (let loop ((n n) (i 0))\n        (if (zero? (modulo n 2))\n            (loop (quotient n 2) (+ i 1))\n            (expt 2 i)))\n      0))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (if (= n 0)\n      1\n      (let ([x (expt 2 (ceiling (log n 2)))]\n            [y (expt 2 (floor (log n 2)))])\n        (if (= x n)\n            x\n            y))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          n\n          (* 2 (next_power_of_2 (quotient n 2))))))\n",
    "  (define (helper n)\n    (if (zero? n)\n        0\n        (if (even? n)\n            (helper (/ n 2))\n            (helper (- n 1)))))\n  (if (zero? n)\n      0\n      (if (even? n)\n          (expt 2 (helper n))\n          (expt 2 (helper (- n 1))))))\n",
    "  (define (next_power_of_2_iter n acc)\n    (if (&gt;= n acc)\n        acc\n        (next_power_of_2_iter n (* acc 2))))\n  (next_power_of_2_iter n 1))\n",
    "  (if (= n 1)\n      2\n      (let ((m (next_power_of_2 (/ n 2))))\n        (if (= n m)\n            (* 2 m)\n            m))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n\n\nA:\n\nThe most efficient way to do it is to use the bitwise operators:\n<code>(define (next-power-of-2 n)\n  (bitwise-ior 1 (bitwise-not (bitwise-and n (- n 1)))))\n</code>\nThis works by first clearing the lowest set bit, then adding 1.\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [(= n 2) 2]\n    [(= n 3) 4]\n    [(= n 4) 4]\n    [(= n 5) 8]\n    [(= n 6) 8]\n    [(= n 7) 8]\n    [(= n 8) 8]\n    [(= n 9) 16]\n    [(= n 10) 16]\n    [(= n 11) 16]\n    [(= n 12) 16]\n    [(= n 13) 16]\n    [(= n 14) 16]\n    [(= n 15) 16]\n    [(= n 16) 16]\n    [(= n 17) 32]\n    [(= n 18) 32]\n    [(= n 19) 32]\n    [(= n 20) 32]\n    [(= n 21) 32]\n    [(= n 22) 32]\n    [(= n 23) 32]\n    [(= n 24) 32]\n    [(= n 25) 32]\n    [(= n 26) 32]\n    [(= n 27) 32]\n    [(= n 28) 32]\n    [(= n 29) 32]\n    [(= n 30) 32]\n    [(= n 31) 32]\n    [(= n 32) 32]\n    [(= n 33) 64]\n    [(= n 34) 64]\n    [(= n 35) 64]\n    [(= n 36) 64]\n    [(= n 37) 64]\n    [(= n 38) 64]\n    [(= n 39) 64]\n    [(= n 40) 64]\n    [(= n 41) 64]\n    [(= n 42) 64]\n    [(= n 43) 64]\n    [(= n 44) 64]\n    [(= n 45) 64]\n    [(= n 46) 64]\n    [(= n 47) 64]\n    [(= n 48) 64]\n    [(= n 49) 64]\n    [(= n 50) 64]\n    [(= n 51) 64]\n    [(= n 52) 64]\n    [(= n 53) 64]\n    [(= n 54) 64]\n    [(= n 55) 64]\n    [(=",
    "  (if (= n 0)\n      1\n      (let loop ([n n] [i 1])\n        (if (< n i)\n            i\n            (loop n (* i 2))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (quotient n 2))]))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (let loop ([n n])\n        (if (not (positive? n))\n            (error \"n must be positive\")\n            (if (zero? (remainder n 2))\n                (loop (/ n 2))\n                (expt 2 (ceiling (log n 2))))))))\n",
    "  (cond [(= n 0) 1]\n        [(= n 1) 2]\n        [(= n 2) 2]\n        [(= n 3) 4]\n        [(= n 4) 4]\n        [(= n 5) 8]\n        [(= n 6) 8]\n        [(= n 7) 8]\n        [(= n 8) 8]\n        [(= n 9) 16]\n        [(= n 10) 16]\n        [(= n 11) 16]\n        [(= n 12) 16]\n        [(= n 13) 16]\n        [(= n 14) 16]\n        [(= n 15) 16]\n        [(= n 16) 16]\n        [(= n 17) 32]\n        [(= n 18) 32]\n        [(= n 19) 32]\n        [(= n 20) 32]\n        [(= n 21) 32]\n        [(= n 22) 32]\n        [(= n 23) 32]\n        [(= n 24) 32]\n        [(= n 25) 32]\n        [(= n 26) 32]\n        [(= n 27) 32]\n        [(= n 28) 32]\n        [(= n 29) 32]\n        [(= n 30) 32]\n        [(= n 31) 32]\n        [(= n 32) 32]\n        [(= n 33) 64]\n        [(= n 34) 64]\n        [(= n 35) 64]\n        [(= n 36) 64]\n        [(= n 37) 64]\n        [(= n 38) 64]\n        [(= n 39) 64]\n        [(= n 40) 64]\n        [(= n 41) 64]\n        [(= n 42) 64]\n        [(= n 43) 64]\n        [(= n 44) 64]\n        [(= n 45) 64]\n        [(= n 46) 64]\n        [(= n 47) 64]\n        [(= n 48) 64]\n        [(= n 49) 64]\n        [(= n 50) 64]\n        [(= n 51) 64]\n        [(= n 52) 64]\n        [(= n 53) 64]\n        [(= n 54) 64]\n        [(= n 55) 64]\n        [(= n 56",
    "  (if (= n 1)\n      2\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)))))\n  )\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (zero? n)\n      1\n      (let loop ((n n) (p 1))\n        (if (&lt;= n p)\n            p\n            (loop n (* p 2))))))\n",
    "  (if (not (positive? n))\n      (error \"n must be positive\"))\n  (if (= n 1)\n      1\n      (let loop ([n n])\n        (if (even? n)\n            (loop (/ n 2))\n            (expt 2 (ceiling (log n 2)))))))\n",
    "  (if (zero? n)\n      1\n      (if (even? n)\n          n\n          (next_power_of_2 (add1 n)))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= (modulo n 2) 1) (next_power_of_2 (+ n 1))]\n    [else (next_power_of_2 (/ n 2))]))\n",
    "  (if (zero? n)\n      1\n      (if (zero? (modulo n 2))\n          (next_power_of_2 (/ n 2))\n          (expt 2 (ceiling (log n 2)) ))))\n",
    "  (if (= n 1)\n      2\n      (if (= n 2)\n          2\n          (if (= (remainder n 2) 0)\n              (next_power_of_2 (/ n 2))\n              (expt 2 (ceiling (log n 2)))))))\n",
    "  (if (= n 1)\n      2\n      (let ([m (next_power_of_2 (/ n 2))])\n        (if (= n m)\n            (* 2 m)\n            m))))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ n 1)))))\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (if (zero? n)\n      1\n      (let loop ([n n])\n        (if (zero? (remainder n 2))\n            (loop (/ n 2))\n            (* 2 n)))))\n",
    "  (if (not (integer? n))\n      (error \"n must be an integer\")\n      (if (not (positive? n))\n          (error \"n must be positive\")\n          (if (= n 1)\n              1\n              (let loop ([n n])\n                (if (= (remainder n 2) 0)\n                    (loop (/ n 2))\n                    (* 2 (next_power_of_2 (/ n 2)))))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (quotient n 2))]))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ 1 n)))))\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt;= n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (expt 2 (ceiling (log n 2))))\n",
    "  (if (= n 1)\n      2\n      (let ([p (expt 2 (ceiling (/ (log n) (log 2))))])\n        (if (= p n)\n            p\n            (next_power_of_2 p)))))\n",
    "  (cond [(= n 0) 1]\n        [else (expt 2 (ceiling (/ (log n) (log 2))))]))\n",
    "  (cond\n    [(= n 1) 2]\n    [(even? n) (next_power_of_2 (/ n 2))]\n    [else (* 2 (next_power_of_2 (/ n 2)))]))\n",
    "  (if (= n 1)\n      2\n      (let ([p (expt 2 (ceiling (/ (log n) (log 2))))])\n        (if (= p n)\n            p\n            (next_power_of_2 p)))))\n",
    "  (define (next_power_of_2_iter n i)\n    (if (&gt; n (* 2 i))\n        (next_power_of_2_iter n (* 2 i))\n        i))\n  (next_power_of_2_iter n 1))\n",
    "  (if (= n 1)\n      2\n      (let loop ((i 2))\n        (if (&lt; n (* i i))\n            (* i i)\n            (loop (* i 2))))))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) 2]\n    [else (next_power_of_2 (quotient n 2))]))\n",
    "  (define (next_power_of_2_iter n power)\n    (if (&gt;= n power)\n        (next_power_of_2_iter n (* power 2))\n        power))\n  (next_power_of_2_iter n 1))\n",
    "  (if (= n 1)\n      2\n      (if (even? n)\n          (next_power_of_2 (/ n 2))\n          (next_power_of_2 (+ 1 n)))))\n",
    "  (if (= n 1)\n      1\n      (if (= (remainder n 2) 0)\n          (next_power_of_2 (/ n 2))\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (if (even? n)\n      (next_power_of_2 (/ n 2))\n      (if (= n 1)\n          2\n          (* 2 (next_power_of_2 (/ n 2))))))\n",
    "  (define (next_power_of_2-iter n i)\n    (if (&gt; (* 2 i) n)\n        i\n        (next_power_of_2-iter n (* 2 i))))\n  (next_power_of_2-iter n 1))\n",
    "  (define (next_power_of_2_iter n p)\n    (if (&gt;= n p)\n        p\n        (next_power_of_2_iter n (* p 2))))\n  (next_power_of_2_iter n 1))\n"
  ]
}