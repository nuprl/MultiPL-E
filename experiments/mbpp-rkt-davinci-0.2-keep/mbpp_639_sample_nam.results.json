{
  "name": "mbpp_639_sample_nam",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(symbol? (first sample_names))\n     (if (char-lower-case? (string-ref (symbol->string (first sample_names)) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (symbol->string (first sample_names))) (sample_nam (rest sample_names))))]\n    [else (+ (string-length (symbol->string (first sample_names))) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm4x3putu.rkt:18:4\n\nsymbol->string: contract violation\n  expected: symbol?\n  given: \"sally\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm4x3putu.rkt:19:4\n\nsymbol->string: contract violation\n  expected: symbol?\n  given: \"php\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm4x3putu.rkt:20:4\n\nsymbol->string: contract violation\n  expected: symbol?\n  given: \"abcd\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(null? sample_names) 0]\n    [(char-lower-case? (string-ref (car sample_names) 0))\n     (sample_nam (cdr sample_names))]\n    [else (+ (string-length (car sample_names))\n             (sample_nam (cdr sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0))\n        (sample_nam (rest sample_names))]\n       [else\n        (+ (string-length (first sample_names))\n           (sample_nam (rest sample_names)))])]))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;syntax:eval:7:0&gt;\n  arguments...:\n   #&lt;syntax:eval:7:0&gt;\n</code>\nI am not sure what is wrong with my code.\n\n\nA:\n\nYou're missing a pair of parentheses in the <code>else</code> clause of the first <code>cond</code>.\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "/tmp/tmp9vyvh7jt.rkt:14:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmp9vyvh7jt.rkt:14:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "/tmp/tmpxosdtsnl.rkt:11:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpxosdtsnl.rkt:11:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "/tmp/tmpxosdtsnl.rkt:11:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpxosdtsnl.rkt:11:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(symbol? (first sample_names)) (string-length (symbol->string (first sample_names))) + (sample_nam (rest sample_names))]\n    [else (sample_nam (rest sample_names))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprd5w8jvf.rkt:15:4\nactual:     0\nexpected:   16\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprd5w8jvf.rkt:16:4\nactual:     0\nexpected:   10\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprd5w8jvf.rkt:17:4\nactual:     0\nexpected:   6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0))\n        (sample_nam (rest sample_names))]\n       [else\n        (+ (string-length (first sample_names))\n           (sample_nam (rest sample_names)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else\n     (+ (string-length (first sample_names))\n        (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(symbol? (car sample_names))\n     (if (char-lower-case? (string-ref (symbol->string (car sample_names)) 0))\n         (sample_nam (cdr sample_names))\n         (+ (string-length (symbol->string (car sample_names)))\n            (sample_nam (cdr sample_names))))]\n    [else (sample_nam (cdr sample_names))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzckign3u.rkt:19:4\nactual:     0\nexpected:   16\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzckign3u.rkt:20:4\nactual:     0\nexpected:   10\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzckign3u.rkt:21:4\nactual:     0\nexpected:   6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names)) (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else\n     (+ (string-length (first sample_names))\n        (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n      (cond\n        [(char-lower-case? (string-ref (first sample_names) 0))\n          (sample_nam (rest sample_names))]\n        [else\n          (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))])]))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;syntax:eval:7:0&gt;\n  arguments...:\n   #&lt;syntax:eval:7:0&gt;\n</code>\nI am not sure what is wrong with my code.\n\n\nA:\n\nYou have a syntax error in your code. You're missing a closing parenthesis in the <code>else</code> clause of the <code>cond</code> expression.\n<code>(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n      (cond\n        [(char-lower-case? (string-ref (first sample_names) 0))\n          (sample_nam (rest sample_names))]\n        [else\n          (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))])]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "/tmp/tmpf1eds3xx.rkt:27:11: syntax: bad syntax\n  in: syntax\n  location...:\n   /tmp/tmpf1eds3xx.rkt:27:11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0))\n        (sample_nam (rest sample_names))]\n       [else\n        (+ (string-length (first sample_names))\n           (sample_nam (rest sample_names)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (define (sum_len sample_names)\n    (cond\n      [(empty? sample_names) 0]\n      [(char-lower-case? (string-ref (first sample_names) 0))\n       (sum_len (rest sample_names))]\n      [else (+ (string-length (first sample_names))\n               (sum_len (rest sample_names)))]))\n  (sum_len sample_names))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (apply + (map string-length (filter (lambda (x) (char-upcase? (string-ref x 0))) sample_names))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "/tmp/tmpwym25y_1.rkt:5:51: char-upcase?: unbound identifier\n  in: char-upcase?\n  location...:\n   /tmp/tmpwym25y_1.rkt:5:51\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond ((null? sample_names) 0)\n        ((char-lower-case? (string-ref (car sample_names) 0))\n         (sample_nam (cdr sample_names)))\n        (else (+ (string-length (car sample_names))\n                 (sample_nam (cdr sample_names))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else (if (char-lower-case? (string-ref (first sample_names) 0))\n             (sample_nam (rest sample_names))\n             (+ (string-length (first sample_names))\n                (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (if (null? sample_names)\n      0\n      (if (char-lower-case? (string-ref (car sample_names) 0))\n          (sample_nam (cdr sample_names))\n          (+ (string-length (car sample_names)) (sample_nam (cdr sample_names))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0))\n        (sample_nam (rest sample_names))]\n       [else\n        (+ (string-length (first sample_names))\n           (sample_nam (rest sample_names)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n</code>\nI am getting an error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;syntax:eval:1:0&gt;\n  arguments...:\n   #&lt;syntax:eval:1:0&gt;\n</code>\nI am not sure what is wrong.\n\n\nA:\n\nYou're missing the <code>lambda</code> keyword, and you're using the wrong syntax for the <code>cond</code> expression. Also, you're using <code>char-lower-case?</code> instead of <code>char-lower-case=?</code>, and you're using <code>string-ref</code> instead of <code>string-first</code>. Try this:\n<code>(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case=? (string-first (first sample_names)) #\\a)\n     (sample_nam (rest sample_names))]\n    [else\n     (+ (string-length (first sample_names))\n        (sample_nam (rest sample_names)))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "/tmp/tmp9ddt66a_.rkt:22:46: unquote: not in quasiquote\n  in: (unquote and)\n  location...:\n   /tmp/tmp9ddt66a_.rkt:22:46\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names))\n            (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0))\n        (sample_nam (rest sample_names))]\n       [else\n        (+ (string-length (first sample_names))\n           (sample_nam (rest sample_names)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n       [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]\n       )\n     ]\n    )\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names)) (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names)) (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(symbol? (car sample_names)) (+ (string-length (symbol->string (car sample_names))) (sample_nam (cdr sample_names)))]\n    [else (sample_nam (cdr sample_names))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzchkuaw1.rkt:15:4\nactual:     0\nexpected:   16\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzchkuaw1.rkt:16:4\nactual:     0\nexpected:   10\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzchkuaw1.rkt:17:4\nactual:     0\nexpected:   6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else\n     (+ (string-length (first sample_names))\n        (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else (if (char-lower-case? (string-ref (first sample_names) 0))\n             (sample_nam (rest sample_names))\n             (+ (string-length (first sample_names)) (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n       [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]\n       )]\n     )\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond [(empty? sample_names) 0]\n        [(char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))]\n        [else (+ (string-length (first sample_names))\n                 (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0))\n        (sample_nam (rest sample_names))]\n       [else\n        (+ (string-length (first sample_names))\n           (sample_nam (rest sample_names)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond ((null? sample_names) 0)\n        ((symbol? (car sample_names)) (+ (string-length (symbol->string (car sample_names))) (sample_nam (cdr sample_names))))\n        (else (sample_nam (cdr sample_names)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr5ju83mu.rkt:14:4\nactual:     0\nexpected:   16\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr5ju83mu.rkt:15:4\nactual:     0\nexpected:   10\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr5ju83mu.rkt:16:4\nactual:     0\nexpected:   6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names))\n            (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0))\n        (sample_nam (rest sample_names))]\n       [else\n        (+ (string-length (first sample_names))\n           (sample_nam (rest sample_names)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(symbol? (first sample_names)) (+ (string-length (symbol->string (first sample_names))) (sample_nam (rest sample_names)))]\n    [else (sample_nam (rest sample_names))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmlx33xeo.rkt:15:4\nactual:     0\nexpected:   16\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmlx33xeo.rkt:16:4\nactual:     0\nexpected:   10\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmlx33xeo.rkt:17:4\nactual:     0\nexpected:   6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names)) (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names)) (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0))\n        (sample_nam (rest sample_names))]\n       [else\n        (+ (string-length (first sample_names))\n           (sample_nam (rest sample_names)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(symbol? (car sample_names)) (+ (string-length (symbol->string (car sample_names))) (sample_nam (cdr sample_names)))]\n    [else (sample_nam (cdr sample_names))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzchkuaw1.rkt:15:4\nactual:     0\nexpected:   16\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzchkuaw1.rkt:16:4\nactual:     0\nexpected:   10\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzchkuaw1.rkt:17:4\nactual:     0\nexpected:   6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names))\n            (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names))\n            (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122851,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names)) (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else (+ (string-length (car sample_names))\n             (sample_nam (cdr sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplw6epduf.rkt:15:4\nactual:     33\nexpected:   16\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplw6epduf.rkt:16:4\nactual:     23\nexpected:   10\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplw6epduf.rkt:17:4\nactual:     17\nexpected:   6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names)) (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n  (cond\n    [(empty? sample_names) 0]\n    [else\n     (if (char-lower-case? (string-ref (first sample_names) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (first sample_names)) (sample_nam (rest sample_names))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
      "timestamp": 1665510120,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}