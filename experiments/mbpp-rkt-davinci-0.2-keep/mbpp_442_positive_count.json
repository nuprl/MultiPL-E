{
  "name": "mbpp_442_positive_count",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the ration of positive numbers in an array of integers.\n(define (positive_count nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate positive_count))\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8)) 0.54)\n    (check-equal? (candidate (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 0.69)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) 0.56)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (positive? num)))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums count)\n    (if (null? nums)\n        count\n        (if (positive? (car nums))\n            (count-positive (cdr nums) (+ count 1))\n            (count-positive (cdr nums) count))))\n  (/ (count-positive nums 0) (length nums)))\n",
    "  (define (positive? n)\n    (and (number? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n</code>\nI'm getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #t\n  arguments...:\n   #f\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nThe problem is that <code>positive?</code> returns a boolean, but you're trying to add it to an integer. You need to convert the boolean to an integer first.\n<code>(define (positive_count nums)\n  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n</code>\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (letrec ([count (for/sum ([n nums]) (if (> n 0) 1 0))])\n    (/ count (length nums))))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (> n 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum-of-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum-of-positive (cdr nums)))))\n  (/ (sum-of-positive nums) (length nums)))\n",
    "  (define (pos? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (/ (apply + (map pos? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (count-positive nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count-positive (cdr nums) (+ count 1))\n            (count-positive (cdr nums) count))))\n  (count-positive nums 0))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(> (first nums) 0) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n) 1 0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (if (null? nums)\n      0\n      (+ (if (&gt; (car nums) 0) 1 0)\n         (positive_count (cdr nums)))))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (loop (cdr nums) (if (positive? (car nums)) (+ count 1) count)))))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (helper nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(positive? (first nums)) (helper (rest nums) (+ count 1))]\n      [else (helper (rest nums) count)]))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (pos-count nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (pos-count (cdr nums)))))\n  (/ (pos-count nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (define (sum-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum-positive (cdr nums)))))\n  (/ (sum-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (positive-count-helper nums acc)\n    (if (null? nums)\n        (/ acc (length nums))\n        (positive-count-helper (cdr nums) (+ acc (positive? (car nums))))))\n  (positive-count-helper nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (sum-list nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum-list (cdr nums)))))\n  (/ (sum-list (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (sum (cdr nums)))))\n  (/ (sum nums)\n     (length nums)))\n",
    "  (define (count-positive nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n      [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n</code>\nI'm getting the error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   #&lt;syntax:eval:3:0&gt;\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're using <code>+</code> to add a number and a boolean. You probably want to use <code>if</code> instead:\n<code>(define (positive_count nums)\n  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0) (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n</code>\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (> num 0) #t))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (sum-positive nums)\n    (if (null? nums) 0\n        (+ (positive? (car nums)) (sum-positive (cdr nums)))))\n  (/ (sum-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? n)\n    (and (not (zero? n))\n         (not (< n 0))))\n  (/ (length (filter positive? nums))\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (positive? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (sum-positive nums)\n    (if (null? nums) 0\n        (+ (positive? (car nums)) (sum-positive (cdr nums)))))\n  (/ (sum-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive-count-iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (positive-count-iter (cdr nums) (+ count 1))\n            (positive-count-iter (cdr nums) count))))\n  (positive-count-iter nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (pos-count nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (pos-count (cdr nums) (+ count 1))\n            (pos-count (cdr nums) count))))\n  (pos-count nums 0))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(> (first nums) 0) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (positive-count-iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (positive-count-iter (cdr nums) (+ count 1))\n            (positive-count-iter (cdr nums) count))))\n  (positive-count-iter nums 0))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (/ (apply + (map positive? nums))\n     (length nums)))\n",
    "  (define (helper nums count)\n    (cond [(empty? nums) (/ count (length nums))]\n          [(positive? (first nums)) (helper (rest nums) (+ count 1))]\n          [else (helper (rest nums) count)]))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum (cdr nums)))))\n  (/ (sum (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (count-pos nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(positive? (first nums)) (count-pos (rest nums) (+ count 1))]\n      [else (count-pos (rest nums) count)]))\n  (count-pos nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (count-positives nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positives (rest nums)))]\n      [else (count-positives (rest nums))]))\n  (/ (count-positives nums) (length nums)))\n",
    "  (define (count-positives nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(positive? (first nums)) (count-positives (rest nums) (+ count 1))]\n      [else (count-positives (rest nums) count)]))\n  (count-positives nums 0))\n",
    "  (define (positive? num)\n    (if (&lt; num 0)\n        #f\n        #t))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (> n 0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (> num 0))\n  (define (count-positive nums)\n    (cond [(empty? nums) 0]\n          [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n          [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positives nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positives (cdr nums)))\n            (count-positives (cdr nums)))))\n  (/ (count-positives nums) (length nums)))\n",
    "  (define (count-positive nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count-positive (cdr nums) (+ count 1))\n            (count-positive (cdr nums) count))))\n  (count-positive nums 0))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ 1 count))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (let loop ((nums nums) (count 0))\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&lt; n 0)\n        #f\n        #t))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (count-positives nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count-positives (cdr nums) (+ count 1))\n            (count-positives (cdr nums) count))))\n  (count-positives nums 0))\n</code>\nI'm getting an error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   #&lt;procedure:+&gt;\n   1\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nThe problem is that you're trying to pass a number as the second argument to <code>count-positives</code>, but the function expects a procedure. You can fix it by changing the call to <code>count-positives</code> to this:\n<code>(count-positives (cdr nums) (add1 count))\n</code>\n",
    "  (define (positive? n)\n    (and (number? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (> n 0)))\n  (define (count-positive nums)\n    (cond [(empty? nums) 0]\n          [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n          [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (> n 0)))\n  (define (count-positive nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n      [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (positive? num)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0) 1 0))\n  (define (sum lst)\n    (if (null? lst) 0\n        (+ (positive? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&lt; n 0)\n        #f\n        #t))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (foldl (lambda (x y) (if (positive? x) (+ y 1) y)) 0 nums))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n      [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (count-positives nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((> (car nums) 0) (count-positives (cdr nums) (+ count 1)))\n          (else (count-positives (cdr nums) count))))\n  (count-positives nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (&gt; num 0)))\n  (define (positive-count-helper nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((positive? (car nums)) (positive-count-helper (cdr nums) (+ count 1)))\n          (else (positive-count-helper (cdr nums) count))))\n  (positive-count-helper nums 0))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (&gt; n 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (positive? num)))\n  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive-count-helper (cdr nums)\n                               (if (positive? (car nums))\n                                   (+ count 1)\n                                   count))))\n  (positive-count-helper nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (pos? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (pos? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (count-positives nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positives (cdr nums)))))\n  (/ (count-positives nums) (length nums)))\n",
    "  (define (count-positive nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count-positive (cdr nums) (+ count 1))\n            (count-positive (cdr nums) count))))\n  (count-positive nums 0))\n",
    "  (define (helper nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(> (first nums) 0) (helper (rest nums) (+ count 1))]\n      [else (helper (rest nums) count)]))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (count (cdr nums)))))\n  (/ (count nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (&gt; num 0) #t))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive-count-helper (cdr nums) (+ count (if (positive? (car nums)) 1 0)))))\n  (positive-count-helper nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (and (> num 0) #t))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (count-positives nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(positive? (first nums)) (count-positives (rest nums) (+ count 1))]\n      [else (count-positives (rest nums) count)]))\n  (count-positives nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (&gt; num 0)))\n  (define (count-positive nums)\n    (cond [(empty? nums) 0]\n          [(positive? (first nums))\n           (+ 1 (count-positive (rest nums)))]\n          [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0) 1 0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (cond [(empty? nums) 0]\n        [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n        [else (positive_count (rest nums))]))\n",
    "  (define (positive? n)\n    (if (positive? n) 1 0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (positive? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive-count-iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (positive-count-iter (cdr nums) (+ count 1))\n            (positive-count-iter (cdr nums) count))))\n  (positive-count-iter nums 0))\n",
    "  (define (count-positive nums)\n    (cond [(empty? nums) 0]\n          [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n          [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (pos? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map pos? nums)) (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (positive? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0) 1 0))\n  (define (sum-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum-positive (cdr nums)))))\n  (/ (sum-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (pos? n)\n    (if (positive? n)\n        1\n        0))\n  (/ (apply + (map pos? nums)) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0) 1 0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive-count-iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (positive-count-iter (cdr nums) (+ count 1))\n            (positive-count-iter (cdr nums) count))))\n  (positive-count-iter nums 0))\n",
    "  (define (pos? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map pos? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (sum nums)\n    (if (null? nums) 0\n        (+ (positive? (car nums)) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n) 1 0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (&gt; num 0)))\n  (/ (length (filter positive? nums))\n     (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? x)\n    (if (positive? x)\n        1\n        0))\n  (/ (apply + (map positive? nums))\n     (length nums)))\n",
    "  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (positive-count-helper (cdr nums) (+ count 1))\n            (positive-count-helper (cdr nums) count))))\n  (positive-count-helper nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (and (&gt; num 0) #t))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n</code>\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (define (sum-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum-positive (cdr nums)))))\n  (/ (sum-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (&gt; n 0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n</code>\nI'm getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   #&lt;procedure:+&gt;\n   1\n</code>\nI'm not sure what's wrong with the code.\n\n\nA:\n\nThe problem is that you're trying to add a number to a list.\n<code>(+ count 1)\n</code>\n<code>count</code> is a list, and you're trying to add 1 to it.\nYou probably want to use <code>length</code> instead of <code>+</code>.\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (loop (cdr nums)\n              (if (positive? (car nums))\n                  (+ count 1)\n                  count)))))\n",
    "  (define (helper nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((> (car nums) 0) (helper (cdr nums) (+ count 1)))\n          (else (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (> n 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (cond [(empty? nums) 0]\n        [else (+ (if (positive? (first nums)) 1 0)\n                 (positive_count (rest nums)))]))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive-count-helper (cdr nums) (+ (positive? (car nums)) count))))\n  (positive-count-helper nums 0))\n</code>\nI'm getting an error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   1\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nI think you want to use <code>+</code> instead of <code>/</code> in the <code>positive-count-helper</code> function.\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (helper nums acc)\n    (if (null? nums)\n        (/ acc (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ acc 1))\n            (helper (cdr nums) acc))))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (and (number? n)\n         (> n 0)))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (and (number? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (cond [(empty? nums) 0]\n          [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n          [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (positive-count-helper nums acc)\n    (if (null? nums)\n        acc\n        (positive-count-helper (cdr nums) (+ acc (positive? (car nums))))))\n  (/ (positive-count-helper nums 0) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (for/fold ([count 0]) ([n nums])\n    (if (&gt; n 0)\n        (add1 count)\n        count)))\n",
    "  (define (count-positives nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count-positives (cdr nums) (+ count 1))\n            (count-positives (cdr nums) count))))\n  (count-positives nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (/ (apply + (map positive? nums))\n     (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (and (&gt; num 0) #t))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (loop (cdr nums)\n              (if (&gt; (car nums) 0)\n                  (+ count 1)\n                  count)))))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum-positive (cdr nums)))))\n  (/ (sum-positive nums) (length nums)))\n",
    "  (define (pos? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (define (pos-count nums)\n    (if (null? nums)\n        0\n        (+ (pos? (car nums)) (pos-count (cdr nums)))))\n  (/ (pos-count nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (count-positives nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(positive? (first nums)) (count-positives (rest nums) (+ count 1))]\n      [else (count-positives (rest nums) count)]))\n  (count-positives nums 0))\n",
    "  (cond [(empty? nums) 0]\n        [else (+ (if (positive? (first nums)) 1 0)\n                 (positive_count (rest nums)))]))\n",
    "  (define (count-positive nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n      [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (> n 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (and (number? n)\n         (> n 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n"
  ]
}