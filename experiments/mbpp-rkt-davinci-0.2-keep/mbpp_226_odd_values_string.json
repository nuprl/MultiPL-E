{
  "name": "mbpp_226_odd_values_string",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to remove the characters which have odd index values of a given string.\n(define (odd_values_string str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_values_string))\n    (check-equal? (candidate \"abcdef\") \"ace\")\n    (check-equal? (candidate \"python\") \"pto\")\n    (check-equal? (candidate \"data\") \"dt\")\n    (check-equal? (candidate \"lambs\") \"lms\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-join\n   (filter\n    (lambda (x) (even? (string-index str x)))\n    (string->list str))))\n",
    "  (string-join (filter even? (string-&gt;list str))))\n",
    "  (string-join (filter even? (build-list (string-length str) (lambda (i) (string-ref str i)))) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter even? (map char-numeric? (string->list str))) \"\"))\n",
    "  (string-join (filter (lambda (x) (odd? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index str x))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join\n   (filter\n    (lambda (x) (even? (string-index str x)))\n    (string->list str))))\n",
    "  (string-join (filter (lambda (x) (even? (string-index str x))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter even? (string-&gt;list str)) \"\"))\n",
    "  (string-join\n   (filter\n    (lambda (x) (even? (string-index str x)))\n    (string->list str))))\n",
    "  (let loop ([str str] [result '()])\n    (cond [(empty? str) (list->string (reverse result))]\n          [(odd? (length str)) (loop (rest str) (cons (first str) result))]\n          [else (loop (rest str) result)])))\n",
    "  (define (odd-indexes lst)\n    (cond ((null? lst) '())\n          ((odd? (car lst)) (cons (car lst) (odd-indexes (cdr lst))))\n          (else (odd-indexes (cdr lst)))))\n  (list->string (odd-indexes (string->list str))))\n"
  ]
}