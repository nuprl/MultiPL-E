{
  "name": "mbpp_126_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of common divisors of two given numbers.\n(define (sum a b)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum))\n    (check-equal? (candidate 10 15) 6)\n    (check-equal? (candidate 100 150) 93)\n    (check-equal? (candidate 4 6) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (and (= (remainder (lcm a b) i) 0)\n               (= (remainder a i) 0)\n               (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (+ n 1))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n</code>\n",
    "  (define (divisors a)\n    (for/list ([i (in-range 1 (+ 1 a))])\n      (if (zero? (modulo a i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 (+ 1 a))])\n      (if (member i (divisors b)) i)))\n  (apply + (common a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          (list n)\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i)\n      (if (= i n)\n          i\n          (if (= (remainder n i) 0)\n              (+ i (sum-divisors-iter n (+ i 1)))\n              (sum-divisors-iter n (+ i 1)))))\n    (sum-divisors-iter n 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b i)\n      (if (= i (gcd a b))\n          (list i)\n          (if (= (remainder a i) 0)\n              (if (= (remainder b i) 0)\n                  (cons i (common-divisors-iter a b (+ i 1)))\n                  (common-divisors-iter a b (+ i 1)))\n              (common-divisors-iter a b (+ i 1)))))\n    (common-divisors-iter a b 1))\n  (sum-divisors (gcd a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))]\n               #:when (zero? (modulo n i)))\n      i))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))]\n               #:when (zero? (modulo (gcd a b) i)))\n      i))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (and (= (modulo a i) 0) (= (modulo b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (and (= (remainder (lcm a b) i) 0)\n               (= (remainder a i) 0)\n               (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (set-intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (= (remainder a i) 0)\n               (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i))\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (= (modulo a i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (for/list ([i (in-range (min a b) 1 -1)])\n              (if (member i (divisors a)) i))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (and (= (remainder (lcm a b) i) 0)\n               (member i (divisors a))\n               (member i (divisors b)))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors a)\n    (for/list ([i (in-range 1 (+ a 1))])\n      (if (zero? (modulo a i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 (+ a 1))])\n      (if (member i (divisors a)) i)))\n  (apply + (common a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (for/sum ([i (in-range 1 (min a b))])\n    (if (member i (divisors a))\n        (if (member i (divisors b)) i 0)\n        0)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n lst)\n      (if (null? lst)\n          0\n          (+ (car lst) (sum-divisors-iter n (cdr lst)))))\n    (sum-divisors-iter n (divisors n)))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (quotient a (gcd a b))) (sum-divisors (quotient b (gcd a b)))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (&gt; n i)\n          (if (zero? (modulo n i))\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))\n          '()))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i)\n      (if (&gt; n i)\n          (if (zero? (modulo n i))\n              (+ i (sum-divisors-iter n (+ i 1)))\n              (sum-divisors-iter n (+ i 1)))\n          0))\n    (sum-divisors-iter n 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b i)\n      (if (&gt; a i)\n          (if (zero? (modulo a i))\n              (if (zero? (modulo b i))\n                  (cons i (common-divisors-iter a b (+ i 1)))\n                  (common-divisors-iter a b (+ i 1)))\n              (common-divisors-iter a b (+ i 1)))\n          '()))\n    (common-divisors-iter a b 1))\n  (define (sum-common-divisors a b)\n    (define (sum-common-divisors-iter a b i)\n      (if (&gt; a i)\n          (if (zero? (modulo a i))\n              (if (zero? (modulo b i))\n                  (+ i (sum-common-divisors-iter a b (+ i 1)))\n                  (sum-common-divisors-iter a b (+ i 1)))\n              (sum-common-divisors-iter a b (+ i 1)))\n          0))\n    (sum-common-divisors-iter a b 1))\n  (sum-common-divis",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (intersection lst1 lst2)\n    (for/list ([i (in-lst1)])\n      (if (member i lst2) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i\n          #f)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i\n          #f)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (zero? (modulo (gcd a b) i))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (let loop ([a a] [b b] [sum 0])\n    (cond\n      [(= a 0) sum]\n      [(= b 0) sum]\n      [(= a b) (+ sum a)]\n      [(< a b) (loop a (- b a) sum)]\n      [(> a b) (loop (- a b) b sum)])))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (let loop ((a a) (b b) (sum 0))\n    (cond ((= a 0) sum)\n          ((= b 0) sum)\n          ((= a b) (+ sum a))\n          ((= (remainder a b) 0) (loop (quotient a b) b (+ sum b)))\n          ((= (remainder b a) 0) (loop a (quotient b a) (+ sum a)))\n          (else (loop (quotient a b) (quotient b a) sum)))))\n</code>\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (+ 1 n))])\n      (when (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (when (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (remainder a i)) (zero? (remainder b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)]\n               #:when (zero? (modulo n i)))\n      i))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))]\n               #:when (and (member i (divisors a))\n                           (member i (divisors b))))\n      i))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (quotient (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter i sum)\n      (if (= i n)\n          sum\n          (if (= (remainder n i) 0)\n              (sum-divisors-iter (+ i 1) (+ sum i))\n              (sum-divisors-iter (+ i 1) sum))))\n    (sum-divisors-iter 1 0))\n  (sum-divisors (lcm a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (= (modulo a i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (set-intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= n 1)\n          (list 1)\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter (/ n i) i))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 2))\n  (define (sum-list l)\n    (if (null? l)\n        0\n        (+ (car l) (sum-list (cdr l)))))\n  (sum-list (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (modulo n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b)\n      (if (null? a)\n          '()\n          (if (member (car a) b)\n              (cons (car a) (common-divisors-iter (cdr a) b))\n              (common-divisors-iter (cdr a) b))))\n    (common-divisors-iter a b))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i)\n      (if (= i n)\n          0\n          (if (= (modulo n i) 0)\n              (+ i (sum-divisors-iter n (+ i 1)))\n              (sum-divisors-iter n (+ i 1)))))\n    (sum-divisors-iter n 1))\n  (sum-divisors (gcd a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (= (modulo a i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i))\n               (zero? (modulo b i)))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (set-intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (+ 1 n))]\n               #:when (zero? (modulo n i)))\n      i))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (define (divisors-iter n d)\n      (if (= n 1)\n          (list 1)\n          (if (= (modulo n d) 0)\n              (cons d (divisors-iter (/ n d) d))\n              (divisors-iter n (+ d 1)))))\n    (divisors-iter n 2))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (+ (sum-divisors (gcd a b)) -1))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (= (remainder (lcm a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (set-intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i\n          0)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i sum)\n      (if (&gt; i n)\n          sum\n          (if (= (remainder n i) 0)\n              (sum-divisors-iter n (+ i 1) (+ sum i))\n              (sum-divisors-iter n (+ i 1) sum))))\n    (sum-divisors-iter n 1 0))\n  (sum-divisors (lcm a b)))\n</code>\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (sum-divisors a b 0))\n",
    "  (let loop ((a a) (b b) (sum 0))\n    (cond ((= a 0) sum)\n          ((= b 0) sum)\n          ((= a b) (+ sum a))\n          ((< a b) (loop (- b a) a sum))\n          ((> a b) (loop (- a b) b sum)))))\n",
    "  (define (gcd a b)\n    (if (= b 0) a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (modulo (gcd a b) i) 0) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (gcd a b)))])\n      (if (and (= (modulo a i) 0) (= (modulo b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (zero? (modulo (gcd a b) i))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (= (remainder (lcm a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (common-divisors a b)\n    (cond [(= a b) (list a)]\n          [(= a 1) (list 1)]\n          [(= b 1) (list 1)]\n          [else (cons (gcd a b) (common-divisors (- a 1) (- b 1)))]))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (set-intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (let loop ([a a] [b b] [sum 0])\n    (cond\n      [(= a 0) sum]\n      [(= b 0) sum]\n      [(= a 1) sum]\n      [(= b 1) sum]\n      [(= a b) (+ sum a)]\n      [(= (modulo a b) 0) (loop (quotient a b) b (+ sum b))]\n      [(= (modulo b a) 0) (loop a (quotient b a) (+ sum a))]\n      [(> a b) (loop (sub1 a) b sum)]\n      [(< a b) (loop a (sub1 b) sum)])))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (define (divisors-iter i)\n      (if (&gt; i n)\n          '()\n          (if (zero? (modulo n i))\n              (cons i (divisors-iter (+ i 1)))\n              (divisors-iter (+ i 1)))))\n    (divisors-iter 1))\n  (define (common-divisors a b)\n    (cond ((null? a) '())\n          ((member (car a) b) (cons (car a) (common-divisors (cdr a) b)))\n          (else (common-divisors (cdr a) b))))\n  (apply + (common-divisors (divisors a) (divisors b))))\n",
    "  (let loop ([a a] [b b] [sum 0])\n    (cond\n      [(= a 0) sum]\n      [(= b 0) sum]\n      [(= a b) (+ sum a)]\n      [(= (modulo a b) 0) (loop (quotient a b) b (+ sum b))]\n      [(= (modulo b a) 0) (loop a (quotient b a) (+ sum a))]\n      [(> a b) (loop (- a 1) b sum)]\n      [else (loop a (- b 1) sum)])))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors a)\n    (define (divisors-iter a b)\n      (if (= a b)\n          (list b)\n          (if (= (modulo a b) 0)\n              (cons b (divisors-iter a (+ b 1)))\n              (divisors-iter a (+ b 1)))))\n    (divisors-iter a 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b)\n      (if (null? a)\n          '()\n          (if (member (car a) b)\n              (cons (car a) (common-divisors-iter (cdr a) b))\n              (common-divisors-iter (cdr a) b))))\n    (common-divisors-iter a b))\n  (define (sum-iter a)\n    (if (null? a)\n        0\n        (+ (car a) (sum-iter (cdr a)))))\n  (sum-iter (common-divisors (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (let loop ((a a) (b b) (sum 0))\n    (cond ((= a 0) sum)\n          ((= b 0) sum)\n          ((= a 1) sum)\n          ((= b 1) sum)\n          ((= (remainder a b) 0) (loop (quotient a b) b (+ sum b)))\n          (else (loop a (quotient b 2) sum)))))\n</code>\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i\n          #f)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i sum)\n      (if (= i n)\n          sum\n          (if (zero? (remainder n i))\n              (sum-divisors-iter n (+ i 1) (+ sum i))\n              (sum-divisors-iter n (+ i 1) sum))))\n    (sum-divisors-iter n 1 0))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (gcd b a))))\n",
    "  (define (gcd a b)\n    (cond ((= b 0) a)\n          (else (gcd b (remainder a b)))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (+ 1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (+ 1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= 0 (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (= 0 (modulo a i)) (= 0 (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (for/sum ([i (in-range 1 (min a b))]\n            #:when (zero? (modulo a i))\n            #:when (zero? (modulo b i)))\n    i))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (when (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (= (remainder a i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (= (remainder a i) 0)\n               (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (sum (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (sum-divisors (gcd a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (and (= (remainder (lcm a b) i) 0)\n               (= (remainder a i) 0)\n               (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (define (divisors-iter n acc)\n      (if (= n 1)\n          acc\n          (if (zero? (modulo n (car acc)))\n              (divisors-iter (/ n (car acc)) (cons (car acc) acc))\n              (divisors-iter n (cdr acc)))))\n    (divisors-iter n (range 2 n)))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b acc)\n      (if (null? a)\n          acc\n          (if (member (car a) b)\n              (common-divisors-iter (cdr a) b (cons (car a) acc))\n              (common-divisors-iter (cdr a) b acc))))\n    (common-divisors-iter a b '()))\n  (apply + (common-divisors (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (common-divisors a b)\n    (filter (lambda (x) (= (modulo a x) 0) (= (modulo b x) 0)) (range 1 (min a b))))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (quotient (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (= (remainder (lcm a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (let loop ([a a] [b b] [sum 0])\n    (cond\n      [(= a 1) sum]\n      [(= b 1) sum]\n      [(= a b) (+ sum a)]\n      [(= (modulo a b) 0) (loop (quotient a b) b (+ sum b))]\n      [(= (modulo b a) 0) (loop a (quotient b a) (+ sum a))]\n      [else (loop (quotient a b) (quotient b a) sum)])))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter i sum)\n      (if (= i n)\n          sum\n          (if (= (remainder n i) 0)\n              (sum-divisors-iter (+ i 1) (+ sum i))\n              (sum-divisors-iter (+ i 1) sum))))\n    (sum-divisors-iter 1 0))\n  (+ (sum-divisors (lcm a b)) (sum-divisors (gcd a b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (&gt; i n)\n          '()\n          (if (zero? (modulo n i))\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n</code>\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (and (= (modulo a i) 0) (= (modulo b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (= (remainder (lcm a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i))\n              i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= 0 (remainder n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (and (= 0 (remainder (lcm a b) i))\n               (= 0 (remainder a i))\n               (= 0 (remainder b i)))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n"
  ]
}