{
  "name": "mbpp_126_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of common divisors of two given numbers.\n(define (sum a b)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum))\n    (check-equal? (candidate 10 15) 6)\n    (check-equal? (candidate 100 150) 93)\n    (check-equal? (candidate 4 6) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (lcm a b) 2)))])\n      (if (and (= (remainder (lcm a b) i) 0)\n               (= (remainder a i) 0)\n               (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (+ n 1))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n</code>\n",
    "  (define (divisors a)\n    (for/list ([i (in-range 1 (+ 1 a))])\n      (if (zero? (modulo a i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 (+ 1 a))])\n      (if (member i (divisors b)) i)))\n  (apply + (common a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          (list n)\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i)\n      (if (= i n)\n          i\n          (if (= (remainder n i) 0)\n              (+ i (sum-divisors-iter n (+ i 1)))\n              (sum-divisors-iter n (+ i 1)))))\n    (sum-divisors-iter n 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b i)\n      (if (= i (gcd a b))\n          (list i)\n          (if (= (remainder a i) 0)\n              (if (= (remainder b i) 0)\n                  (cons i (common-divisors-iter a b (+ i 1)))\n                  (common-divisors-iter a b (+ i 1)))\n              (common-divisors-iter a b (+ i 1)))))\n    (common-divisors-iter a b 1))\n  (sum-divisors (gcd a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))]\n               #:when (zero? (modulo n i)))\n      i))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))]\n               #:when (zero? (modulo (gcd a b) i)))\n      i))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (and (= (modulo a i) 0) (= (modulo b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n"
  ]
}