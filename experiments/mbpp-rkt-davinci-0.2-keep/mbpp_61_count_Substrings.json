{
  "name": "mbpp_61_count_Substrings",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count the number of substrings with the sum of digits equal to their length.\n(define (count_Substrings s)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Substrings))\n    (check-equal? (candidate \"112112\") 6)\n    (check-equal? (candidate \"111\") 6)\n    (check-equal? (candidate \"1101112\") 12)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string->number (substring s i j)) (- j i)) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (let ([substring (substring s i j)])\n         (cond\n           [(= (string-length substring) (sum_digits substring))\n            (+ 1 (count_Substrings_helper s i (+ j 1)))]\n           [else (count_Substrings_helper s i (+ j 1))]))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (define (sum_digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [else (if (= (string-length (substring s i j)) (sum_digits (substring s i j)))\n               (+ 1 (count_Substrings_helper s i (+ j 1)))\n               (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [else\n       (+ (if (= (sum_digits (substring s 0 i)) i) 1 0)\n          (count_Substrings_helper s (+ i 1)))]))\n  (count_Substrings_helper s 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length s) (+ i j)) 0]\n      [(= (string-length (substring s i j)) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(= (sum_digits (substring s i (+ i (sum_digits (substring s i))))) (sum_digits (substring s i))) (+ 1 (count_Substrings_helper s (+ i 1)))]\n      [else (count_Substrings_helper s (+ i 1))]))\n  (count_Substrings_helper s 0))\n",
    "  (let loop ((s s) (count 0))\n    (cond\n      [(empty? s) count]\n      [(= (string-length s) (sum-digits s)) (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s (+ i 1) (+ j 1)))]\n      [else (count_Substrings_helper s (+ i 1) (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) 1) 1]\n      [(= (string-length s) 2) 2]\n      [else\n       (let ([sum (string-&gt;number (substring s i j))])\n         (+ (if (= sum (- j i)) 1 0)\n            (count_Substrings_helper s i (+ j 1))\n            (count_Substrings_helper s (+ i 1) j)))]))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length s) (+ i j)) (count_Substrings_helper s (+ i 1) (+ i 1))]\n      [else (if (= (sum_digits (substring s i j)) (- j i))\n                (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) (+ i 1)))\n                (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) (+ i 1))))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j acc)\n    (if (= i j)\n        acc\n        (if (= (sum_digits (substring s i j)) (- j i))\n            (count_Substrings_helper s i (+ j 1) (+ acc 1))\n            (count_Substrings_helper s i (+ j 1) acc))))\n  (count_Substrings_helper s 0 (string-length s) 0))\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s n)\n    (if (= n (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s 0 n)) n)\n               1\n               0)\n           (count_Substrings_helper s (+ n 1)))))\n  (count_Substrings_helper s 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [else\n       (define (sum_digits s)\n         (define (sum_digits_helper s i j)\n           (cond\n             [(= i j) 0]\n             [else\n              (+ (char->integer (string-ref s i))\n                 (sum_digits_helper s (+ i 1) j))]))\n         (sum_digits_helper s 0 (string-length s)))\n       (+ (if (= (sum_digits (substring s i j)) (- j i)) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_of_digits s i j))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ j 1))]\n      [(= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (let loop ([s (string->list s)] [count 0])\n    (cond [(empty? s) count]\n          [(= (length s) (apply + (map string->number s)))\n           (loop (rest s) (+ count 1))]\n          [else (loop (rest s) count)])))\n",
    "  (define (sum_digits s)\n    (if (empty? s)\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (= i (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n                (sum_digits (substring s i)))\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [else\n           (let ([sum (for/sum ([c (in-string s)])\n                               (string-&gt;number (string c)))])\n             (loop (substring s 1)\n                   (if (= (string-length s) sum)\n                       (+ count 1)\n                       count)))])))\n"
  ]
}