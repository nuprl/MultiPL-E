{
  "name": "mbpp_61_count_Substrings",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count the number of substrings with the sum of digits equal to their length.\n(define (count_Substrings s)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Substrings))\n    (check-equal? (candidate \"112112\") 6)\n    (check-equal? (candidate \"111\") 6)\n    (check-equal? (candidate \"1101112\") 12)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string->number (substring s i j)) (- j i)) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (let ([substring (substring s i j)])\n         (cond\n           [(= (string-length substring) (sum_digits substring))\n            (+ 1 (count_Substrings_helper s i (+ j 1)))]\n           [else (count_Substrings_helper s i (+ j 1))]))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (define (sum_digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [else (if (= (string-length (substring s i j)) (sum_digits (substring s i j)))\n               (+ 1 (count_Substrings_helper s i (+ j 1)))\n               (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [else\n       (+ (if (= (sum_digits (substring s 0 i)) i) 1 0)\n          (count_Substrings_helper s (+ i 1)))]))\n  (count_Substrings_helper s 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length s) (+ i j)) 0]\n      [(= (string-length (substring s i j)) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(= (sum_digits (substring s i (+ i (sum_digits (substring s i))))) (sum_digits (substring s i))) (+ 1 (count_Substrings_helper s (+ i 1)))]\n      [else (count_Substrings_helper s (+ i 1))]))\n  (count_Substrings_helper s 0))\n",
    "  (let loop ((s s) (count 0))\n    (cond\n      [(empty? s) count]\n      [(= (string-length s) (sum-digits s)) (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s (+ i 1) (+ j 1)))]\n      [else (count_Substrings_helper s (+ i 1) (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) 1) 1]\n      [(= (string-length s) 2) 2]\n      [else\n       (let ([sum (string-&gt;number (substring s i j))])\n         (+ (if (= sum (- j i)) 1 0)\n            (count_Substrings_helper s i (+ j 1))\n            (count_Substrings_helper s (+ i 1) j)))]))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length s) (+ i j)) (count_Substrings_helper s (+ i 1) (+ i 1))]\n      [else (if (= (sum_digits (substring s i j)) (- j i))\n                (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) (+ i 1)))\n                (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) (+ i 1))))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j acc)\n    (if (= i j)\n        acc\n        (if (= (sum_digits (substring s i j)) (- j i))\n            (count_Substrings_helper s i (+ j 1) (+ acc 1))\n            (count_Substrings_helper s i (+ j 1) acc))))\n  (count_Substrings_helper s 0 (string-length s) 0))\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s n)\n    (if (= n (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s 0 n)) n)\n               1\n               0)\n           (count_Substrings_helper s (+ n 1)))))\n  (count_Substrings_helper s 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [else\n       (define (sum_digits s)\n         (define (sum_digits_helper s i j)\n           (cond\n             [(= i j) 0]\n             [else\n              (+ (char->integer (string-ref s i))\n                 (sum_digits_helper s (+ i 1) j))]))\n         (sum_digits_helper s 0 (string-length s)))\n       (+ (if (= (sum_digits (substring s i j)) (- j i)) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_of_digits s i j))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ j 1))]\n      [(= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (let loop ([s (string->list s)] [count 0])\n    (cond [(empty? s) count]\n          [(= (length s) (apply + (map string->number s)))\n           (loop (rest s) (+ count 1))]\n          [else (loop (rest s) count)])))\n",
    "  (define (sum_digits s)\n    (if (empty? s)\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (= i (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n                (sum_digits (substring s i)))\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [else\n           (let ([sum (for/sum ([c (in-string s)])\n                               (string-&gt;number (string c)))])\n             (loop (substring s 1)\n                   (if (= (string-length s) sum)\n                       (+ count 1)\n                       count)))])))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (sum_digits (substring s i j)) (- j i))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (sum_digits s)\n    (cond [(empty? s) 0]\n          [else (+ (string-&gt;number (substring s 0 1))\n                   (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond [(empty? s) 0]\n          [(= (sum_digits s) i) (+ 1 (count_Substrings_helper (substring s 1) i))]\n          [else (count_Substrings_helper (substring s 1) i)]))\n  (count_Substrings_helper s (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else (+ (count_Substrings_helper s i (+ j 1))\n               (if (= (string-length (substring s i j))\n                      (apply + (map string-&gt;number (string-&gt;list (substring s i j)))))\n                   1\n                   0))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (string-length s) (sum_digits (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond [(null? s) count]\n          [(= (string-length s) (sum-digits (string->number s)))\n           (loop (substring s 1) (+ count 1))]\n          [else (loop (substring s 1) count)])))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond [(= i j) 0]\n          [else\n           (define (sum_digits s)\n             (define (sum_digits_helper s i j)\n               (cond [(= i j) 0]\n                     [else (+ (string-&gt;number (substring s i (+ i 1)))\n                              (sum_digits_helper s (+ i 1) j))]))\n             (sum_digits_helper s 0 (string-length s)))\n           (+ (if (= (sum_digits (substring s i j)) (- j i)) 1 0)\n              (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (sum_digits s)\n    (cond ((null? s) 0)\n          ((char-numeric? (car s)) (+ (char-&gt;integer (car s)) (sum_digits (cdr s))))\n          (else (sum_digits (cdr s)))))\n  (define (count_Substrings_helper s i j)\n    (cond ((&gt;= i j) 0)\n          ((= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1))))\n          (else (count_Substrings_helper s i (+ j 1)))))\n  (count_Substrings_helper s 0 (string-length s)))\n</code>\n",
    "  (define (sum_digits s)\n    (cond [(empty? s) 0]\n          [else (+ (string-&gt;number (substring s 0 1))\n                   (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond [(&gt;= i (string-length s)) 0]\n          [(= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n              (sum_digits (substring s i)))\n           (+ 1 (count_Substrings_helper s (+ i 1)))]\n          [else (count_Substrings_helper s (+ i 1))]))\n  (count_Substrings_helper s 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length (substring s i j))\n               (apply + (map string-&gt;number (string-&gt;list (substring s i j)))))\n            (+ 1 (count_Substrings_helper s i (+ j 1))\n               (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1))\n               (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (char-&gt;integer (first s)) (sum_digits (rest s)))]))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(&gt;= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 (string-length s)))\n</code>\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (string-ref s 0)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n</code>\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) (+ i j)) 1]\n      [else (+ (count_Substrings_helper s i (+ j 1))\n               (count_Substrings_helper s (+ i 1) (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string-length (substring s i j)) (sum_digits (substring s i j))) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else (let ([substring (substring s i j)])\n              (+ (if (= (string->number (string-append (substring s i j))) (string-length substring)) 1 0)\n                 (count_Substrings_helper s i (+ j 1))\n                 (count_Substrings_helper s (+ i 1) (+ i 1))))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(&gt;= i (string-length s)) 0]\n      [(= (sum_digits (substring s i (+ i (sum_digits (substring s i))))) (sum_digits (substring s i))) (+ 1 (count_Substrings_helper s (+ i 1)))]\n      [else (count_Substrings_helper s (+ i 1))]))\n  (count_Substrings_helper s 0))\n</code>\nI am trying to write a function that counts the number of substrings with the sum of digits equal to their length. For example, the string \"123\" has two substrings with the sum of digits equal to their length: \"1\" and \"123\".\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;substring-start-end&gt;\n  arguments...:\n   #&lt;substring-start-end&gt;\n   1\n   #&lt;substring-start-end&gt;\n</code>\nI am not sure what I am doing wrong.\n\n\nA:\n\nThe problem is that you're using <code>substring</code> in the wrong way. The function expects three arguments: the string, the starting index and the ending index.\nIn your code you're passing the result of <code>substring</code> as the ending index, which is not a number.\nHere's a fixed version of your code:\n<code>(define (count_Substrings s)\n  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(&gt;= i (",
    "  (define (count_Substrings_helper s i j)\n    (cond [(>= i j) 0]\n          [(= (string-length s) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n          [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (define (sum_digits s)\n         (define (sum_digits_helper s i j)\n           (cond\n             [(= i j) 0]\n             [else\n              (+ (string-ref s i) (sum_digits_helper s (+ i 1) j))]))\n         (sum_digits_helper s 0 (string-length s)))\n       (+ (if (= (sum_digits (substring s i j)) (- j i)) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (cond [(empty? s) 0]\n          [else (+ (string-&gt;number (substring s 0 1))\n                   (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i j)\n    (cond [(&gt;= i j) 0]\n          [(= (sum_digits (substring s i j)) (- j i))\n           (+ 1 (count_Substrings_helper s i (+ j 1))\n              (count_Substrings_helper s (+ i 1) j))]\n          [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_Digits s i j))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (- (string-length s) 1)))\n",
    "  (define (sum_digits s)\n    (if (empty? s)\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&lt; i (string-length s))\n        (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n               (sum_digits (substring s i)))\n            (+ 1 (count_Substrings_helper s (+ i 1)))\n            (count_Substrings_helper s (+ i 1)))\n        0))\n  (count_Substrings_helper s 0))\n</code>\nI have a few questions about this code:\n\nIs there a way to make it more efficient?\nIs there a way to make it more readable?\nIs there a way to make it more functional?\nIs there a way to make it more idiomatic?\n\nI am new to Racket and I am trying to learn how to write better code.\n\n\nA:\n\nI think your code is pretty good.  I would just make a few small changes.\n\nI would use <code>string-&gt;number</code> instead of <code>string-&gt;number/locale</code>.  The latter is for parsing numbers in a locale-specific way, and I don't think that's what you want.\nI would use <code>string-&gt;list</code> instead of <code>substring</code> in <code>sum_digits</code>.  This is a bit more idiomatic.\nI would use <code>for/fold</code> instead of <code>for/sum</code> in <code>sum_digits</code>.  This is a bit more idiomatic.\nI would use <code>for/fold</code> instead of <code>for/sum</code> in <code>count_Substrings_helper</code>.  This is a bit more idiomatic.\nI would use <code>for/fold</code> instead of <code>for/sum</code> in <code>count_Substrings</code>.  This is",
    "  (define (count_Substrings_helper s i j)\n    (if (&lt; i (string-length s))\n        (if (&lt; j (string-length s))\n            (if (= (string-length (substring s i j))\n                   (apply + (map string-&gt;number (string-&gt;list (substring s i j)))))\n                (+ 1 (count_Substrings_helper s i (+ j 1)))\n                (count_Substrings_helper s i (+ j 1)))\n            (count_Substrings_helper s (+ i 1) (+ i 1)))\n        0))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond ((= i j) 0)\n          ((= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ i 1)))\n          ((= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1))))\n          (else (count_Substrings_helper s i (+ j 1)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond [(= i j) 0]\n          [(= (string-length s) j) 0]\n          [(= (string-length (substring s i j)) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n          [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond [(= i j) 0]\n          [(= (string-length s) j) 0]\n          [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n          [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (loop s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n      [(= (string-ref s i) #\\0) (loop s (+ i 1) acc)]\n      [(= (string-ref s i) #\\1) (loop s (+ i 1) acc)]\n      [(= (string-ref s i) #\\2) (loop s (+ i 1) acc)]\n      [(= (string-ref s i) #\\3) (loop s (+ i 1) acc)]\n      [(= (string-ref s i) #\\4) (loop s (+ i 1) acc)]\n      [(= (string-ref s i) #\\5) (loop s (+ i 1) acc)]\n      [(= (string-ref s i) #\\6) (loop s (+ i 1) acc)]\n      [(= (string-ref s i) #\\7) (loop s (+ i 1) acc)]\n      [(= (string-ref s i) #\\8) (loop s (+ i 1) acc)]\n      [(= (string-ref s i) #\\9) (loop s (+ i 1) acc)]\n      [else (loop s (+ i 1) (+ acc 1))]))\n  (loop s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) 1) 1]\n      [(= (string-length (substring s i j)) (apply + (map string->number (string-&gt;list (substring s i j)))))\n       (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (string-length s) (sum_digits s i j))\n            (+ 1 (count_Substrings_helper s i (+ j 1)))\n            (count_Substrings_helper s i (+ j 1)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length (substring s i j)) (string-sum (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(&gt; i (sub1 (string-length s))) 0]\n      [(= (sum_digits (substring s 0 i)) i) (+ 1 (count_Substrings_helper s (add1 i)))]\n      [else (count_Substrings_helper s (add1 i))]))\n  (count_Substrings_helper s 0))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (string-ref s 0)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(= (sum_digits (substring s i (+ i (sum_digits (substring s i))))) (sum_digits (substring s i))) (+ 1 (count_Substrings_helper s (+ i 1)))]\n      [else (count_Substrings_helper s (+ i 1))]))\n  (count_Substrings_helper s 0))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nI think you are overcomplicating things.\n<code>(define (count-substrings s)\n  (define (sum-digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (string-ref s 0)) (sum-digits (substring s 1)))]))\n  (define (count-substrings-helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(= (sum-digits (substring s i (+ i (sum-digits (substring s i))))) (sum-digits (substring s i))) (+ 1 (count-substrings-helper s (+ i 1)))]\n      [else (count-substrings-helper s (+ i 1))]))\n  (count-substrings-helper s 0))\n</code>\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (sum_Digits (string->number (substring s i j)))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (define (sum_Digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum_Digits (quotient n 10)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&lt; i (string-length s))\n        (if (= (sum_digits (substring s 0 i)) i)\n            (+ 1 (count_Substrings_helper s (+ i 1)))\n            (count_Substrings_helper s (+ i 1)))\n        0))\n  (count_Substrings_helper s 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length (substring s i j)) (sum_digits (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) (+ i j)) 1]\n      [else (+ (count_Substrings_helper s (+ i 1) (+ j 1)) (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) 1) 1]\n      [(= (string-length s) 0) 0]\n      [(= (string-length s) 2) 1]\n      [else\n       (+ (count_Substrings_helper s (+ i 1) j)\n          (count_Substrings_helper s i (- j 1)))]))\n  (count_Substrings_helper s 0 (- (string-length s) 1)))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (char-&gt;integer (first s)) (sum_digits (rest s)))]))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(&lt; i j) (if (= (sum_digits (substring s i j)) (- j i))\n                   (+ 1 (count_Substrings_helper s i (+ j 1))\n                                                 (count_Substrings_helper s (+ i 1) (+ j 1)))\n                   (count_Substrings_helper s i (+ j 1)))]\n      [else 0]))\n  (count_Substrings_helper s 0 0))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n</code>\n",
    "  (define (sum_digits n)\n    (if (= n 0)\n        0\n        (+ (modulo n 10) (sum_digits (quotient n 10)))))\n  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (sum_digits (string->number (substring s i (+ i 1)))) (+ i 1))\n            (+ 1 (count_Substrings_helper s (+ i 1) j))\n            (count_Substrings_helper s (+ i 1) j))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [else\n       (let ([sub (substring s 0 (length s))])\n         (loop (substring s 1 (length s))\n               (+ count (if (= (sum_digits sub) (length sub)) 1 0))))])))\n",
    "  (define (count_Substrings_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [else\n       (let ([substring (substring s i (+ i (sum_digits (string->number (substring s i (+ i 1))))))])\n         (if (= (sum_digits (string->number substring)) (string-length substring))\n             (+ 1 (count_Substrings_helper s (+ i 1)))\n             (count_Substrings_helper s (+ i 1))))]))\n  (count_Substrings_helper s 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ i 1))]\n      [(= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(= (string-length s) (sum-digits s)) (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ i 1))]\n      [else (if (= (string-length (substring s i j)) (sum_digits (string->number (substring s i j))))\n               (+ 1 (count_Substrings_helper s i (+ j 1)))\n               (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length s) (+ i j)) 0]\n      [else\n       (cond\n         [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n         [else (count_Substrings_helper s i (+ j 1))])]))\n  (count_Substrings_helper s 0 0))\n",
    "  (letrec ([substrings (lambda (s)\n                        (cond [(empty? s) empty]\n                              [else (append (substrings (rest s))\n                                            (map (lambda (x) (cons (first s) x))\n                                                 (substrings (rest s))))]))]\n           [sum-digits (lambda (s)\n                         (cond [(empty? s) 0]\n                               [else (+ (first s) (sum-digits (rest s)))]))])\n    (length (filter (lambda (x) (= (sum-digits x) (length x)))\n                    (substrings s)))))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(= (sum_digits (substring s i (+ i (sum_digits (substring s i))))) (sum_digits (substring s i))) (+ 1 (count_Substrings_helper s (+ i 1)))]\n      [else (count_Substrings_helper s (+ i 1))]))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [(= (string-length (substring s i j)) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(= (string-length s) (sum-digits s))\n       (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n",
    "  (define (count_Substrings_helper s i j sum)\n    (cond\n      [(= i j) 0]\n      [(= sum (string-length (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1) (+ sum (string->number (substring s j (+ j 1))))))]\n      [else (count_Substrings_helper s i (+ j 1) (+ sum (string->number (substring s j (+ j 1)))))]))\n  (count_Substrings_helper s 0 1 (string->number (substring s 0 1))))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [else\n       (+ (if (= (string-length (substring s i j))\n                (apply + (map string->number (string-&gt;list (substring s i j)))))\n             1\n             0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n</code>\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_digits s i j))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j sum)\n    (cond\n      [(= i j) (if (= sum (string-length s)) 1 0)]\n      [(= i (string-length s)) 0]\n      [else (+ (count_Substrings_helper s i (+ j 1) (+ sum (string->number (substring s j (+ j 1)))))]))\n  (count_Substrings_helper s 0 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (string-length s) (sum_of_digits (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (apply + (map string-&gt;number (string-&gt;list s))))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [else\n       (+ (if (= (sum_digits (substring s i j)) (- j i)) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) (string-foldl + 0 s)) 1]\n      [else (count_Substrings_helper s (+ i 1) j)]))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string-length (substring s i j))\n                (apply + (map string->number (string-&gt;list (substring s i j)))))\n              1\n              0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (define (count_Substrings_helper_2 s i)\n    (cond\n      [(= (string-length s) i) 0]\n      [else\n       (+ (count_Substrings_helper s i (+ i 1))\n          (count_Substrings_helper_2 s (+ i 1)))]))\n  (count_Substrings_helper_2 s 0))\n",
    "  (define (sum_digits s)\n    (if (string-empty? s)\n        0\n        (+ (string-&gt;number (string-take s 1))\n           (sum_digits (string-drop s 1)))))\n  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (+ (if (= (sum_digits (substring s i j)) (- j i))\n               1\n               0)\n           (count_Substrings_helper s i (+ j 1)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (let ([substring (substring s i j)])\n         (cond\n           [(= (string-length substring) (sum_digits substring))\n            (+ 1 (count_Substrings_helper s i (+ j 1)))]\n           [else\n            (count_Substrings_helper s i (+ j 1))]))]))\n  (count_Substrings_helper s 0 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [(= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else (+ (if (= (string-length (substring s i j)) (sum_digits (substring s i j))) 1 0)\n               (count_Substrings_helper s i (+ j 1)))]))\n  (define (sum_digits s)\n    (cond\n      [(= (string-length s) 0) 0]\n      [else (+ (string->number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (sum_digits (substring s i j)) (- j i))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j sum)\n    (cond\n      [(>= i j) sum]\n      [(= (string-length s) j) (+ sum (count_Substrings_helper s i (+ j 1) 0))]\n      [(= (string-length s) i) (+ sum (count_Substrings_helper s (+ i 1) (+ j 1) 0))]\n      [else (count_Substrings_helper s i (+ j 1) (+ sum (if (= (string->number (substring s i j)) (string-length (substring s i j))) 1 0)))]))\n  (count_Substrings_helper s 0 1 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) 1) 1]\n      [(= (string-length s) 2) 2]\n      [(= (string-length s) 3) 3]\n      [else (+ (count_Substrings_helper s i (+ j 1))\n               (count_Substrings_helper s (+ i 1) (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (let ([l (string-length s)])\n    (for/sum ([i (in-range l)])\n      (for/sum ([j (in-range (+ i 1) l)])\n        (let ([sub (substring s i j)])\n          (if (= (string-length sub)\n                 (apply + (map string-&gt;number (string-&gt;list sub))))\n              1\n              0))))))\n</code>\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (let ([substring (substring s i j)])\n         (+ (if (= (sum_digits substring) (string-length substring)) 1 0)\n            (count_Substrings_helper s i (+ j 1))\n            (count_Substrings_helper s (+ i 1) (+ j 1))))]))\n  (count_Substrings_helper s 0 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond [(= i j) 0]\n          [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n          [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) 1) 1]\n      [(= (string-length s) 2) 2]\n      [(= (string-length s) 3) 3]\n      [(= (string-length s) 4) 4]\n      [(= (string-length s) 5) 5]\n      [(= (string-length s) 6) 6]\n      [(= (string-length s) 7) 7]\n      [(= (string-length s) 8) 8]\n      [(= (string-length s) 9) 9]\n      [(= (string-length s) 10) 10]\n      [(= (string-length s) 11) 11]\n      [(= (string-length s) 12) 12]\n      [(= (string-length s) 13) 13]\n      [(= (string-length s) 14) 14]\n      [(= (string-length s) 15) 15]\n      [(= (string-length s) 16) 16]\n      [(= (string-length s) 17) 17]\n      [(= (string-length s) 18) 18]\n      [(= (string-length s) 19) 19]\n      [(= (string-length s) 20) 20]\n      [(= (string-length s) 21) 21]\n      [(= (string-length s) 22) 22]\n      [(= (string-length s) 23) 23]\n      [(= (string-length s) 24) 24]\n      [(= (string-length s) 25) 25]\n      [(= (string-length s) 26) 26]\n      [(= (string-length s) 27) 27]\n      [(= (string-length s) 28) 28]\n      [(= (string-length s) 29) 29]\n      [(= (string-length s) 30) 30]\n      [(= (string-length s) 31) 31]\n      [(= (string-length s) 32) 32]\n      [(= (string-length s) 33) 33]\n      [(= (string-length s) 34) 34]\n      [(= (string",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (sum_of_digits s i j) (- j i))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (sum_digits s)\n    (apply + (map string-&gt;number (string-&gt;list s))))\n  (define (count_Substrings_helper s)\n    (cond\n      [(empty? s) 0]\n      [(= (sum_digits s) (string-length s)) (+ 1 (count_Substrings_helper (rest s)))]\n      [else (count_Substrings_helper (rest s))]))\n  (count_Substrings_helper s))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) (apply + (string->list (substring s i j))))\n       (+ 1 (count_Substrings_helper s i (+ j 1))\n          (count_Substrings_helper s (+ i 1) (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length (substring s i j)) (sum_digits (substring s i j)))\n       (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (string-take s 1)) (sum_digits (string-drop s 1)))]))\n  (define (count_Substrings_helper s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (if (= (sum_digits s) (string-length s)) 1 0) (count_Substrings_helper (string-drop s 1)))]))\n  (count_Substrings_helper s))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond ((= i j) 0)\n          ((= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ i 1)))\n          ((= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1))))\n          (else (count_Substrings_helper s i (+ j 1)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_of_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [else\n       (+ (if (= (sum_digits (substring s i j)) (- j i)) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (if (string-empty? s)\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n               (sum_digits (substring s i)))\n            (+ 1 (count_Substrings_helper s (+ i 1)))\n            (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (+ (if (= (string-length s) (sum_digits (substring s i j))) 1 0)\n           (count_Substrings_helper s i (+ j 1)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (if (empty? s)\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n                (sum_digits (substring s i)))\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n",
    "  (define (sum_digits s)\n    (if (empty? s)\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (= i (string-length s))\n        0\n        (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n               (sum_digits (substring s i)))\n            (+ 1 (count_Substrings_helper s (+ i 1)))\n            (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(= (length s) (sum_digits s)) (loop (rest s) (+ count 1))]\n          [else (loop (rest s) count)])))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (sum_digits (substring s i j)) (- j i))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_digits (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (define (sum_digits s)\n         (define (sum_digits_helper s i j)\n           (cond\n             [(= i j) 0]\n             [else\n              (+ (string-ref s i) (sum_digits_helper s (+ i 1) j))]))\n         (sum_digits_helper s 0 (string-length s)))\n       (+ (if (= (sum_digits (substring s i j)) (- j i)) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond [(= i j) 0]\n          [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n          [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_digits s i j))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j sum)\n    (cond\n      [(= i j) 0]\n      [(= sum (string-length (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1) (+ sum (string->number (string (substring s j j))))))]\n      [else (count_Substrings_helper s i (+ j 1) (+ sum (string->number (string (substring s j j)))))]))\n  (count_Substrings_helper s 0 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length (substring s i j)) (string-sum (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (apply + (map string-&gt;number (string-&gt;list s))))\n  (define (count_Substrings_helper s)\n    (cond\n      [(empty? s) 0]\n      [(= (sum_digits s) (string-length s))\n       (+ 1 (count_Substrings_helper (substring s 1)))]\n      [else (count_Substrings_helper (substring s 1))]))\n  (count_Substrings_helper s))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) (string-length (number->string (string->number (substring s i j)))))\n       (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (sum_digits (substring s i j)) (- j i))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n                 (sum_digits (substring s i)))\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (define (sum_digits s)\n    (cond ((null? s) 0)\n          ((<= (string-&gt;number (string-ref s 0)) 9)\n           (+ (string-&gt;number (string-ref s 0))\n              (sum_digits (substring s 1))))\n          (else (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (cond ((&lt; i (string-length s))\n           (+ (if (= (sum_digits (substring s 0 i)) i) 1 0)\n              (count_Substrings_helper s (+ i 1))))\n          (else 0)))\n  (count_Substrings_helper s 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ i 1))]\n      [else (+ (count_Substrings_helper s i (+ j 1))\n               (if (= (sum_of_digits (substring s i j)) (- j i)) 1 0))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else (let ([substring (substring s i j)])\n              (+ (if (= (sum_digits substring) (string-length substring)) 1 0)\n                 (count_Substrings_helper s i (+ j 1))\n                 (count_Substrings_helper s (+ i 1) (+ j 1))))]))\n  (count_Substrings_helper s 0 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (+ (if (= (string->number (substring s i j)) (- j i)) 1 0)\n          (helper s i (+ j 1)))]))\n  (helper s 0 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s (+ i 1) (+ j 1)))]\n      [else (count_Substrings_helper s (+ i 1) (+ j 1))]))\n  (count_Substrings_helper s 0 1))\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(= (string-length s) (sum-of-digits s))\n       (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (sum_digits (substring s i j)) (- j i))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (sum_digits s)\n    (if (empty? s)\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&lt; i (string-length s))\n        (+ (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n                 (sum_digits (substring s i)))\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))\n        0))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n                (sum_digits (substring s i)))\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nI think your code is a bit too complicated. I would do something like this:\n<code>(define (count-substrings s)\n  (define (sum-digits s)\n    (apply + (map string-&gt;number (string-&gt;list s))))\n  (define (count-substrings-helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (+ (if (= (sum-digits (substring s i (+ i (sum-digits (substring s i)))))\n                (sum-digits (substring s i)))\n               1\n               0)\n           (count-substrings-helper s (+ i 1)))))\n  (count-substrings-helper s 0))\n</code>\nThe main difference is that I'm using <code>string-&gt;list</code> to convert the string to a list of characters, and then <code>map</code> to convert each character to a number. This is more idiomatic than using <code>substring</code> to extract each character.\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n                (sum_digits (substring s i)))\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [else (+ (if (= (string-length (substring s i j)) (sum_digits (substring s i j))) 1 0)\n               (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_digits (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (if (string-empty? s)\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n               (sum_digits (substring s i)))\n            (+ 1 (count_Substrings_helper s (+ i 1)))\n            (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\nI am trying to write a function that counts the number of substrings with the sum of digits equal to their length. For example, if the input is \"123\", the output should be 2, because \"1\" and \"23\" are the substrings that have the sum of digits equal to their length.\nI am getting the correct output, but I am not sure if this is the best way to do it. I am also not sure if I am using the best data structure for this problem.\nI would appreciate any feedback on how to improve this code.\n\n\nA:\n\nThe code is pretty good. I would just make a few minor changes.\n\n<code>sum_digits</code> can be written more concisely using <code>string-&gt;number</code> and <code>string-&gt;list</code>:\n<code>(define (sum_digits s)\n  (apply + (map string-&gt;number (string-&gt;list s))))\n</code>\n<code>count_Substrings_helper</code> can be written more concisely using <code>for/fold</code>:\n<code>(define (count_Substrings s)\n  (define (sum_digits s)\n    (apply + (map string-&gt;number (string-&gt;list s))))\n  (for/fold ([count 0]) ([i (in-range (string-length s))])\n    (if (= (sum_digits (substring",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n                (sum_digits (substring s i)))\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\nI am getting the following error:\n<code>count_Substrings.rkt:14:0: loop: undefined;\n cannot reference an identifier before its definition\n  in module: top-level\n</code>\nI am not sure what is wrong with my code.\n\n\nA:\n\nYou are calling <code>count_Substrings_helper</code> before it is defined.\nChange the order of the definitions:\n<code>(define (count_Substrings s)\n  (define (count_Substrings_helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (+ (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n                (sum_digits (substring s i)))\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))))\n  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [else\n       (+ (if (= (string-length (substring s i j)) (sum_digits (substring s i j))) 1 0)\n          (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (char->integer (car s)) (sum_digits (cdr s)))]))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (if (string=? s \"\")\n        0\n        (+ (string-&gt;number (substring s 0 1))\n           (sum_digits (substring s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&gt;= i (string-length s))\n        0\n        (if (= (sum_digits (substring s i (+ i (sum_digits (substring s i)))))\n               (sum_digits (substring s i)))\n            (+ 1 (count_Substrings_helper s (+ i 1)))\n            (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (define (sum_digits s)\n    (if (string-empty? s)\n        0\n        (+ (string-&gt;number (string-take s 1))\n           (sum_digits (string-drop s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (= i (string-length s))\n        0\n        (+ (if (= (sum_digits (string-take s i)) i)\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))))\n  (count_Substrings_helper s 1))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (string-ref s 0)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(&gt;= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 (string-length s)))\n</code>\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [else (loop (rest s)\n                  (if (= (string-length s)\n                         (apply + (map string->number (string-split s))))\n                      (+ count 1)\n                      count))])))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length s) (+ i j)) 0]\n      [(= (string-length (substring s i j)) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s sum)\n    (if (string-empty? s)\n        sum\n        (count_Substrings_helper (substring s 1) (+ sum (string->number (substring s 0 1))))))\n  (count_Substrings_helper s 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (sum_digits s)\n    (cond\n      [(empty? s) 0]\n      [else (+ (string-&gt;number (substring s 0 1)) (sum_digits (substring s 1)))]))\n  (define (count_Substrings_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(= (sum_digits (substring s i (+ i (sum_digits (substring s i))))) (sum_digits (substring s i))) (+ 1 (count_Substrings_helper s (+ i 1)))]\n      [else (count_Substrings_helper s (+ i 1))]))\n  (count_Substrings_helper s 0))\n</code>\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (string-&gt;number (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   1\n</code>\nI am not sure what is going wrong.\n\n\nA:\n\nThe problem is that you're using <code>+</code> instead of <code>*</code> in the recursive call.\n<code>(+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n</code>\nshould be\n<code>(* 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n</code>\n",
    "  (let loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(= (string-length s) (sum_digits s)) (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n",
    "  (define (sum_digits s)\n    (if (string-empty? s)\n        0\n        (+ (string-&gt;number (string-take s 1))\n           (sum_digits (string-drop s 1)))))\n  (define (count_Substrings_helper s i)\n    (if (&lt; i (string-length s))\n        (+ (if (= (sum_digits (string-take s i)) i)\n               1\n               0)\n           (count_Substrings_helper s (+ i 1)))\n        0))\n  (count_Substrings_helper s 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ i 1))]\n      [else (+ (count_Substrings_helper s i (+ j 1))\n               (if (= (string->number (substring s i j)) (- j i)) 1 0))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (sum_Digits (string->number (substring s i j)))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (define (sum_Digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_Digits (quotient n 10)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else (+ (string-length (substring s i j)) (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ i 1))]\n      [else (add1 (count_Substrings_helper s i (+ j 1)))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(= (length s) (sum (string->list s))) (loop (rest s) (+ count 1))]\n          [else (loop (rest s) count)])))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) (string-foldl + 0 (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&lt; i (string-length s))\n        (if (&lt; j (string-length s))\n            (+ (if (= (string-length (substring s i j))\n                      (apply + (map string-&gt;number (string-&gt;list (substring s i j)))))\n                   1\n                   0)\n               (count_Substrings_helper s i (+ j 1)))\n            (count_Substrings_helper s (+ i 1) (+ i 1)))\n        0))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(= (string-length s) (sum_digits (substring s i (+ i (string-length s))))) (+ 1 (count_Substrings_helper s (+ i 1)))]\n      [else (count_Substrings_helper s (+ i 1))]))\n  (count_Substrings_helper s 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length (substring s i j)) (sum_digits (string-&gt;number (substring s i j))))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (sum_digits (substring s i j)) (- j i))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond [(= i j) 0]\n          [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n          [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (let ([sum (for/sum ([k i] [l j])\n                      (string-&gt;number (string-ref s k)))])\n          (+ (if (= sum (- j i)) 1 0)\n             (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) 1) 1]\n      [(= (string-length s) 2) (if (= (string-ref s 0) (string-ref s 1)) 2 1)]\n      [else\n       (if (= (string-ref s i) (string-ref s j))\n           (+ (count_Substrings_helper s (+ i 1) (- j 1))\n              (count_Substrings_helper s (+ i 1) j)\n              (count_Substrings_helper s i (- j 1)))\n           (count_Substrings_helper s (+ i 1) (- j 1)))]))\n  (count_Substrings_helper s 0 (- (string-length s) 1)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else (add1 (count_Substrings_helper s i (add1 j)))]))\n  (define (sum_of_digits s)\n    (define (sum_of_digits_helper s i)\n      (cond\n        [(= i (string-length s)) 0]\n        [else (add1 (string->number (string-ref s i)) (sum_of_digits_helper s (add1 i)))]))\n  (sum_of_digits_helper s 0))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else (add1 (count_Substrings_helper s i (add1 j)))]))\n  (define (sum_of_digits s)\n    (define (sum_of_digits_helper s i)\n      (cond\n        [(= i (string-length s)) 0]\n        [else (add1 (string->number (string-ref s i)) (sum_of_digits_helper s (add1 i)))]))\n  (sum_of_digits_helper s 0))\n  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else (add1 (count_Substrings_helper s i (add1 j)))]))\n  (define (sum_of_digits s)\n    (define (sum_of_digits_helper s i)\n      (cond\n        [(= i (string-length s)) 0]\n        [else (add1 (string->number (string-ref s i)) (sum_of_digits_helper s (add1 i)))]))\n  (sum_of_digits_helper s 0))\n  (define (count_Substrings_helper s i j)\n",
    "  (define (count_Substrings_helper s i j)\n    (if (= i j)\n        0\n        (if (= (string-length s) (sum_digits (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&lt; i j)\n        (if (= (string-length s) (sum_of_digits s i j))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) (+ j 1)))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) (+ j 1))))\n        0))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else (+ (count_Substrings_helper s i (+ j 1))\n               (if (= (string-length (substring s i j))\n                      (apply + (map string->number (string-&gt;list (substring s i j)))))\n                   1\n                   0))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_digits (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond [(= i j) 0]\n          [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n          [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (let ([substring (substring s i j)])\n         (+ (if (= (sum_digits substring) (string-length substring)) 1 0)\n            (count_Substrings_helper s i (+ j 1))\n            (count_Substrings_helper s (+ i 1) (+ j 1))))]))\n  (count_Substrings_helper s 0 1))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string-length (substring s i j)) (sum_digits (substring s i j)))\n       (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond ((= i j) 0)\n          ((= (string-length s) j) (count_Substrings_helper s (+ i 1) (+ i 1)))\n          ((= (string-length (substring s i j)) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1))))\n          (else (count_Substrings_helper s i (+ j 1)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_digits (substring s i j)))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond ((= i j) 0)\n          ((= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))\n          (else (count_Substrings_helper s i (+ j 1)))))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [(= (string-length (substring s i j)) (string->number (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&lt; i j)\n        (if (= (string-length s) (sum_digits s i j))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) (+ j 1)))\n            (count_Substrings_helper s i (+ j 1)))\n        0))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (sum_digits (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [(= (string-length (substring s i j)) (sum_digits (string->number (substring s i j)))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [(= (string-length (substring s i j)) (sum_digits (substring s i j))) (+ 1 (count_Substrings_helper s i (+ j 1)))]\n      [else (count_Substrings_helper s i (+ j 1))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) (count_Substrings_helper s i (+ j 1))]\n      [else\n       (let ([substring (substring s i j)])\n         (if (= (sum_digits substring) (string-length substring))\n             (+ 1 (count_Substrings_helper s i (+ j 1)))\n             (count_Substrings_helper s i (+ j 1))))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length s) (sum_digits s i j))\n            (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [else\n       (let ([substring (substring s i j)])\n         (+ (if (= (sum_of_digits substring) (string-length substring)) 1 0)\n            (count_Substrings_helper s i (+ j 1))\n            (count_Substrings_helper s (+ i 1) (+ j 1))))]))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i acc)\n    (if (= i (string-length s))\n        acc\n        (count_Substrings_helper s (+ i 1) (+ acc (count_Substrings_helper_2 s i)))))\n  (count_Substrings_helper s 0 0))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(>= i j) 0]\n      [(= (string-length s) 1) 1]\n      [(= (sum_digits (string->number (substring s i j))) (- j i)) (+ 1 (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))]\n      [else (+ (count_Substrings_helper s i (+ j 1)) (count_Substrings_helper s (+ i 1) j))]))\n  (count_Substrings_helper s 0 (string-length s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-length s) j) 0]\n      [(= (string->number (substring s i j)) (- j i)) (+ 1 (count_Substrings_helper s (+ i 1) (+ j 1)))]\n      [else (count_Substrings_helper s (+ i 1) (+ j 1))]))\n  (count_Substrings_helper s 0 1))\n",
    "  (letrec ([sum-digits (lambda (n)\n                         (if (zero? n)\n                             0\n                             (+ (modulo n 10)\n                                (sum-digits (quotient n 10)))))]\n          [count-substrings (lambda (s)\n                              (let ([len (string-length s)])\n                                (if (zero? len)\n                                    0\n                                    (+ (if (= (sum-digits (string->number (substring s 0 1))) 1)\n                                           1\n                                           0)\n                                       (count-substrings (substring s 1 len))))))])\n    (count-substrings s)))\n",
    "  (define (count_Substrings_helper s i j)\n    (if (&gt;= i j)\n        0\n        (if (= (string-length (substring s i j))\n               (apply + (map string-&gt;number (string-&gt;list (substring s i j)))))\n            (+ 1 (count_Substrings_helper s i (+ j 1))\n               (count_Substrings_helper s (+ i 1) j))\n            (+ (count_Substrings_helper s i (+ j 1))\n               (count_Substrings_helper s (+ i 1) j)))))\n  (count_Substrings_helper s 0 (string-length s)))\n"
  ]
}