{
  "name": "mbpp_283_validate",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n(define (validate n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate validate))\n    (check-equal? (candidate 1234) #t)\n    (check-equal? (candidate 51241) #f)\n    (check-equal? (candidate 321) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([d (in-list digits)])\n      (<= (count d digits) (string->number (number->string d))))))\n",
    "  (define (validate-helper n)\n    (if (zero? n)\n        '()\n        (cons (remainder n 10) (validate-helper (quotient n 10)))))\n  (define (count-helper lst)\n    (if (null? lst)\n        '()\n        (cons (length (filter (lambda (x) (= x (car lst))) lst)) (count-helper (cdr lst)))))\n  (define (check-helper lst1 lst2)\n    (if (null? lst1)\n        #t\n        (if (&lt;= (car lst1) (car lst2))\n            (check-helper (cdr lst1) (cdr lst2))\n            #f)))\n  (check-helper (validate-helper n) (count-helper (validate-helper n))))\n</code>\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([d (in-list digits)])\n      (<= (count d digits) (string->number (number->string d))))))\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([digit (in-list digits)]\n              [count (in-list (map (\u03bb (d) (count d digits)) digits))])\n      (<= count digit))))\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([d (in-list digits)])\n      (<= (count d digits) (string->number (number->string d))))))\n",
    "  (define (count-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ 1 (count-digits (quotient n 10)))]))\n  (define (count-digit-freq n d)\n    (cond\n      [(zero? n) 0]\n      [(= (remainder n 10) d) (+ 1 (count-digit-freq (quotient n 10) d))]\n      [else (count-digit-freq (quotient n 10) d)]))\n  (define (validate-helper n)\n    (cond\n      [(zero? n) #t]\n      [(>= (count-digit-freq n (remainder n 10)) (remainder n 10)) (validate-helper (quotient n 10))]\n      [else #f]))\n  (validate-helper n))\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([d (in-list digits)])\n      (<= (count d digits) (string->number (number->string d))))))\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([digit (in-list digits)]\n              [count (in-list (map (\u03bb (d) (count d digits)) digits))])\n      (<= count digit))))\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([digit (in-list digits)]\n              [count (in-list (map (\u03bb (d) (count d digits)) digits))])\n      (<= count digit))))\n",
    "  (define (validate-helper n)\n    (if (zero? n)\n        (list 0 0 0 0 0 0 0 0 0 0)\n        (let ([d (modulo n 10)])\n          (cons d (validate-helper (quotient n 10))))))\n  (let ([l (validate-helper n)])\n    (for/and ([i (in-range 10)])\n      (<= (list-ref l i) i))))\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([digit (in-list digits)]\n              [count (in-list (map (\u03bb (d) (count d digits)) digits))])\n      (<= count digit))))\n",
    "  (define (count-digit n d)\n    (if (= n 0)\n        0\n        (+ (if (= (remainder n 10) d) 1 0)\n           (count-digit (quotient n 10) d))))\n  (define (helper n)\n    (if (= n 0)\n        #t\n        (and (<= (count-digit n (remainder n 10)) (remainder n 10))\n             (helper (quotient n 10)))))\n  (helper n))\n",
    "  (let loop ([n n] [digits '()])\n    (if (zero? n)\n        (let loop ([digits digits] [freq '()])\n          (if (null? digits)\n              (let loop ([freq freq] [valid #t])\n                (if (null? freq)\n                    valid\n                    (if (<= (car freq) (cadr freq))\n                        (loop (cddr freq) valid)\n                        (loop (cddr freq) #f))))\n              (loop (cdr digits) (cons (length (filter (lambda (x) (= x (car digits))) digits)) freq))))\n        (loop (quotient n 10) (cons (remainder n 10) digits))))))\n",
    "  (define (validate-helper n)\n    (cond [(zero? n) '()]\n          [else (cons (remainder n 10) (validate-helper (quotient n 10)))]))\n  (define (count-digit lst digit)\n    (cond [(empty? lst) 0]\n          [(= (first lst) digit) (+ 1 (count-digit (rest lst) digit))]\n          [else (count-digit (rest lst) digit)]))\n  (define (validate-all lst)\n    (cond [(empty? lst) #t]\n          [(<= (count-digit lst (first lst)) (first lst)) (validate-all (rest lst))]\n          [else #f]))\n  (validate-all (validate-helper n)))\n",
    "  (define (count-digit n d)\n    (cond [(zero? n) 0]\n          [(= (remainder n 10) d) (+ 1 (count-digit (quotient n 10) d))]\n          [else (count-digit (quotient n 10) d)]))\n  (define (helper n)\n    (cond [(zero? n) #t]\n          [(>= (count-digit n (remainder n 10)) (remainder n 10)) #f]\n          [else (helper (quotient n 10))]))\n  (helper n))\n",
    "  (let loop ([n n] [digits '()])\n    (cond [(zero? n) (for/and ([d (in-list digits)])\n                              (<= (count d digits) d))]\n          [else (loop (quotient n 10) (cons (remainder n 10) digits))])))\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([d (in-list digits)])\n      (<= (count d digits) (string->number (number->string d))))))\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([d (in-list digits)]\n              [f (in-list (map (\u03bb (d) (count d digits)) digits))])\n      (<= f d))))\n",
    "  (let ([digits (string->list (number->string n))])\n    (for/and ([d (in-list digits)])\n      (<= (count d digits) (string->number (number->string d))))))\n",
    "  (define (count-digit n d)\n    (cond\n      [(zero? n) 0]\n      [(= (remainder n 10) d) (+ 1 (count-digit (quotient n 10) d))]\n      [else (count-digit (quotient n 10) d)]))\n  (define (validate-helper n)\n    (cond\n      [(zero? n) #t]\n      [(<= (count-digit n (remainder n 10)) (remainder n 10)) (validate-helper (quotient n 10))]\n      [else #f]))\n  (validate-helper n))\n"
  ]
}