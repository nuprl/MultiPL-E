{
  "name": "mbpp_59_is_octagonal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth octagonal number.\n(define (is_octagonal n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_octagonal))\n    (check-equal? (candidate 5) 65)\n    (check-equal? (candidate 10) 280)\n    (check-equal? (candidate 15) 645)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (round n-sqrt)])\n    (and (= n-sqrt n-sqrt-int)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i i (* 3 i -2)))\n        #t\n        (if (&lt; n (* i i (* 3 i -2)))\n            #f\n            (loop n (+ i 1))))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1))))\n    (and (integer? x) (= x (floor x)))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (= (sqr n-sqrt-int) n)\n         (= (modulo n-sqrt-int 3) 1))))\n",
    "  (let ([x (isqrt (+ (* 2 n) 1))])\n    (and (= (square x) (+ (* 2 n) 1))\n         (= (modulo x 2) 1))))\n",
    "  (let ([n-sqrt (sqrt n)])\n    (and (integer? n-sqrt)\n         (= (floor n-sqrt) n-sqrt)\n         (= (modulo n-sqrt 3) 1))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 0.25))))\n    (and (integer? m)\n         (= m (truncate m))\n         (= n (+ (* m m) (* m 1))))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (= n-sqrt-int n-sqrt)\n         (= 1 (modulo n-sqrt-int 3)))))\n",
    "  (let ([d (- (* 8 n) 1)])\n    (and (integer? (sqrt d))\n         (= (sqrt d) (floor (sqrt d)))\n         (= (sqrt d) (quotient (+ 1 (sqrt d)) 2)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x) (integer? (* 2 x -1)))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* n-sqrt n-sqrt n-sqrt))))))\n",
    "  (let ((x (sqrt (+ (* 2 n) (* 2 (sqrt 2)) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (let ((sqrt (sqrt n)))\n    (and (integer? sqrt)\n         (= n (* (1+ sqrt) (1+ (* 2 sqrt)))))))\n",
    "  (let* ([n-sqrt (sqrt n)]\n         [n-sqrt-int (inexact->exact (floor n-sqrt))])\n    (and (integer? n-sqrt)\n         (= n-sqrt-int (sqrt (expt n-sqrt-int 3))))))\n",
    "  (let ([m (sqrt (+ (* 2 n) 1))])\n    (and (integer? m)\n         (= (modulo m 2) 1))))\n",
    "  (let ((n-sqrt (sqrt n)))\n    (and (integer? n-sqrt)\n         (= n (+ (* n-sqrt n-sqrt) (* 2 n-sqrt) 1)))))\n",
    "  (let ((m (sqrt (+ (* 2 n) 1))))\n    (and (integer? m)\n         (integer? (+ (* -1 m) 1)))))\n",
    "  (let ((x (sqrt (+ (* 2 n) 1))))\n    (and (integer? x)\n         (= (truncate x) x))))\n",
    "  (let ((m (sqrt (+ (* 8 n) 1))))\n    (and (integer? m)\n         (= (modulo m 2) 1)\n         (= n (* (/ (- m 1) 2) (- m 2))))))\n",
    "  (let ([d (- (/ (* 8 n) 3) 1)])\n    (and (integer? d)\n         (exact? d)\n         (= n (* 3 (+ 1 d) d)))))\n"
  ]
}