{
  "name": "mbpp_160_find_solution",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n(define (find_solution a b n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_solution))\n    (check-equal? (candidate 2 3 7) (list 2 1))\n    (check-equal? (candidate 4 2 7) #f)\n    (check-equal? (candidate 1 13 17) (list 4 1))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (cons x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter x (+ y 1)))))\n  (iter 0 0))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (cons x y))\n          ((&lt; n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          ((&gt; n (+ (* a x) (* b y))) (iter (+ x 1) y))))\n  (iter 0 0))\n",
    "  (define (iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter a b n x (+ y 1)))))\n  (iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= a (* x n)) (list x y))\n          ((= b (* y n)) (list x y))\n          ((&gt; x n) #f)\n          (else (iter (+ x 1) (+ y 1)))))\n  (iter 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (modulo n a) 0) (cons x y))\n          ((= (modulo n b) 0) (cons x y))\n          ((= x 0) (iter (+ a 1) (- y 1)))\n          ((= y 0) (iter (- x 1) (+ b 1)))\n          (else (iter (- x 1) (+ b 1)))))\n  (iter 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (cons x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter (/ n a) 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= a (* x n)) (list x y))\n          ((= b (* y n)) (list x y))\n          ((&lt; x n) (iter (+ x 1) y))\n          ((&lt; y n) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (iter x y)\n    (cond ((= a (* x n)) (cons x y))\n          ((= b (* y n)) (cons x y))\n          ((&lt; x n) (iter (+ x 1) y))\n          ((&lt; y n) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (cons x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((< n (+ (* a x) (* b y))) (find-solution-iter a b n x (- y 1)))\n          ((> n (+ (* a x) (* b y))) (find-solution-iter a b n (- x 1) y))))\n  (find-solution-iter a b n 1 1))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (cons x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a)))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (cons x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (iter x y)\n    (cond ((= a (* x b)) (list x y))\n          ((&gt; x n) #f)\n          (else (iter (+ x 1) (- n (* a x))))))\n  (iter 0 n))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; x n) #f)\n          (else (iter (+ x 1) (- n (* a x))))))\n  (iter 0 n))\n",
    "  (define (iter x y)\n    (cond ((= (modulo n a) 0) (cons x y))\n          ((= (modulo n b) 0) (cons x y))\n          ((&lt; x 0) #f)\n          (else (iter (- x 1) (+ y 1)))))\n  (iter (- n 1) 1))\n",
    "  (define (iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (cons x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter a b n x (+ y 1)))\n          (else #f)))\n  (iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (cons x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= x 0) (if (= y n) (cons x y) #f))\n          ((= y 0) (if (= x n) (cons x y) #f))\n          ((&lt; x 0) (iter (+ x b) (- y a)))\n          ((&lt; y 0) (iter (- x a) (+ y b)))\n          (else (iter (- x a) (- y b)))))\n  (iter 0 n))\n"
  ]
}