{
  "name": "mbpp_803_is_perfect_square",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n(define (is_perfect_square n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_perfect_square))\n    (check-equal? (candidate 10) #f)\n    (check-equal? (candidate 36) #t)\n    (check-equal? (candidate 14) #f)\n    (check-equal? (candidate 196) #t)\n    (check-equal? (candidate 125) #f)\n    (check-equal? (candidate 15625) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (iter (+ i i))]))\n  (iter 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (= n (* i i))\n        #t\n        (if (&lt; n (* i i))\n            #f\n            (is_perfect_square_iter n (+ i 1)))))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square_iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((> i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= i (* i i)) #t]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square-iter n (+ i i))]))\n  (is_perfect_square-iter n 1))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= sum n)\n        #t\n        (if (&lt; sum n)\n            (loop (+ i 2) (+ sum i))\n            #f))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ((i 1))\n    (cond ((> (* i i) n) #f)\n          ((= (* i i) n) #t)\n          (else (loop (+ i 1))))))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square-iter n (+ i i)))))\n  (is_perfect_square-iter n 1))\n",
    "  (define (helper n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (helper n (+ i i))]))\n  (helper n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= (* i i) n) #t]\n      [else (is_perfect_square-iter n (+ i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (let loop ([i 1])\n    (cond [(= i n) #t]\n          [(> i n) #f]\n          [(= n (* i i)) #t]\n          [else (loop (+ i 1))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square-iter n (+ i i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> (* i i) n) #f]\n      [else (is_perfect_square_iter n (+ i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> (* i i) n) #f]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (iter i)\n    (if (&gt; i n)\n        #f\n        (if (= (* i i) n)\n            #t\n            (iter (+ i 1)))))\n  (iter 0))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square-iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&lt; i n) (is_perfect_square_iter n (+ i i)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond [(= i n) #t]\n          [(> i n) #f]\n          [else (is_perfect_square-iter n (+ i i))]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(&gt; i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square_iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ([i 1])\n    (if (&gt; (* i i) n)\n        #f\n        (if (= (* i i) n)\n            #t\n            (loop (+ i 1))))))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (&lt; i n)\n        (if (= (remainder n i) 0)\n            (if (= (remainder i i) 0)\n                #t\n                #f)\n            (is_perfect_square_iter n (+ i 1)))\n        #f))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (&gt; (* i i) n)\n        #f\n        (if (= (* i i) n)\n            #t\n            (is_perfect_square_iter n (+ i 1)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (= i n)\n        #t\n        (if (&lt; i n)\n            (is_perfect_square_iter n (+ i 1))\n            #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond [(= i n) #t]\n          [(> i n) #f]\n          [else (is_perfect_square-iter n (+ i i))]))\n  (is_perfect_square-iter n 1))\n",
    "  (if (= n 1)\n      #t\n      (let loop ([i 1])\n        (if (= i n)\n            #f\n            (if (= (remainder n i) 0)\n                (if (= (remainder i i) 0)\n                    #t\n                    (loop (+ i 1)))\n                (loop (+ i 1)))))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else\n       (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (= n (* i i))\n        #t\n        (if (&gt; n (* i i))\n            (is_perfect_square_iter n (+ i 1))\n            #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square_iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (= (* i i) n)\n        #t\n        (if (&lt; (* i i) n)\n            (is_perfect_square_iter n (+ i 1))\n            #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= (* i i) n) #t]\n      [else (is_perfect_square-iter n (+ i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (if (zero? n)\n      #f\n      (let loop ([i 1])\n        (if (&gt; (* i i) n)\n            #f\n            (if (= (* i i) n)\n                #t\n                (loop (+ i 1)))))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((> i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((> i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square_iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond [(= i n) #t]\n          [(> i n) #f]\n          [else (is_perfect_square-iter n (+ i i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (if (= n 1)\n      #t\n      (let loop ([i 1])\n        (if (= i n)\n            #f\n            (if (= (sqr i) n)\n                #t\n                (loop (+ i 1)))))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond ((= i n) #t)\n          ((&lt; i n) (is_perfect_square-iter n (+ i i 1)))\n          (else #f)))\n  (is_perfect_square-iter n 1))\n",
    "  (let loop ((i 1))\n    (if (&gt; (* i i) n)\n        #f\n        (if (= (* i i) n)\n            #t\n            (loop (+ i 1))))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= i (* i i)) (loop (+ i 1))]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (= n (* i i))\n        #t\n        (if (&lt; n (* i i))\n            #f\n            (is_perfect_square_iter n (+ i 1)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square-iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square_iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square-iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond [(= i n) true]\n          [(= i (* i i)) (is_perfect_square-iter n (+ i 1))]\n          [else false]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (iter x)\n    (if (= x n)\n        #t\n        (if (&gt; x n)\n            #f\n            (iter (+ x x)))))\n  (iter 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (= i n)\n        #t\n        (if (&lt; i n)\n            (is_perfect_square_iter n (+ i 1))\n            #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square_iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (&gt; i n)\n        #f\n        (if (= i (* i i))\n            #t\n            (is_perfect_square_iter n (+ i 1)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ((i 1))\n    (if (&gt; (* i i) n)\n        #f\n        (if (= (* i i) n)\n            #t\n            (loop (+ i 1))))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond [(= i n) #t]\n          [(> (* i i) n) #f]\n          [else (is_perfect_square_iter n (+ i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ((i 1))\n    (if (&lt; i n)\n        (if (= (expt i 2) n)\n            #t\n            (loop (+ i 1)))\n        #f)))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= (* i i) n) #t]\n      [else (is_perfect_square_iter n (+ i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((&gt; i n) #f)\n          ((= (* i i) n) #t)\n          (else (is_perfect_square_iter n (+ i 1)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) true]\n      [(&gt; i n) false]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&lt; i n) (is_perfect_square_iter n (+ i i)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (isqrt n)\n    (define (isqrt-iter n guess)\n      (if (good-enough? guess n)\n          guess\n          (isqrt-iter n (improve guess n))))\n    (isqrt-iter n 1))\n  (= (isqrt n) n))\n",
    "  (cond\n    [(= n 1) true]\n    [(< n 1) false]\n    [else\n     (let loop ([i 1] [j n])\n       (cond\n         [(= i j) true]\n         [(> i j) false]\n         [(= (* i i) n) true]\n         [else (loop (+ i 1) j)]))]))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> (* i i) n) #f]\n      [else (is_perfect_square_iter n (+ i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (= n (* i i))\n        #t\n        (if (&gt; n (* i i))\n            (is_perfect_square_iter n (+ i 1))\n            #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square-iter n (+ i i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square-iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square-iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= (* i i) n) #t]\n      [else (is_perfect_square_iter n (+ i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond [(= i n) #t]\n          [(> i n) #f]\n          [else (is_perfect_square-iter n (+ i i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= (* i i) n) #t]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond [(= i n) #t]\n          [(> i n) #f]\n          [(= (* i i) n) #t]\n          [else (is_perfect_square_iter n (+ i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= (* i i) n) #t]\n      [(> (* i i) n) #f]\n      [else (loop (+ i 1))])))\n",
    "  (define (iter i)\n    (if (= i n)\n        #t\n        (if (&lt; i n)\n            (iter (+ i i))\n            #f)))\n  (iter 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square_iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square_iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((> i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= i (* i i)) #t]\n      [else (is_perfect_square_iter n (+ i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((> i n) #f)\n          ((= (sqr i) n) #t)\n          (else (is_perfect_square_iter n (+ i 1)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond [(= i n) #t]\n          [(> i n) #f]\n          [else (is_perfect_square-iter n (+ i i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= n (* i i)) #t]\n      [else (is_perfect_square_iter n (+ i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) true]\n      [(> i n) false]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (if (= n 1)\n      #t\n      (let loop ([i 1])\n        (if (&lt; i n)\n            (if (= (modulo n i) 0)\n                (if (= (modulo n (* i i)) 0)\n                    #t\n                    (loop (+ i 1)))\n                (loop (+ i 1)))\n            #f))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= (* i i) n) #t]\n      [else (is_perfect_square_iter n (+ i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= (* i i) n) #t]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ((i 1))\n    (if (&gt; (* i i) n)\n        #f\n        (if (= (* i i) n)\n            #t\n            (loop (+ i 1))))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(= i (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((&gt; i n) #f)\n          ((= i n) #t)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(> (* i i) n) #f]\n      [else (iter (+ i 1))]))\n  (iter 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (cond ((= n 1) #t)\n        ((< n 1) #f)\n        ((= (remainder n 2) 0) (is_perfect_square (/ n 2)))\n        (else (is_perfect_square (- n 1)))))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square-iter n (+ i i)))))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (if (= n (* i i))\n        #t\n        (if (&lt; n (* i i))\n            #f\n            (is_perfect_square-iter n (+ i 1)))))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square-iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square-iter n (+ i i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square-iter guess)\n    (if (and (not (negative? guess))\n             (not (negative? (- n (* guess guess)))))\n        (if (= guess (* guess guess))\n            #t\n            (is_perfect_square-iter (+ guess 1)))\n        #f))\n  (is_perfect_square-iter 0))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond [(= i n) #t]\n          [(> (* i i) n) #f]\n          [else (loop (+ i 1))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) true]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else false]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ((i 1))\n    (if (&gt; (* i i) n)\n        #f\n        (if (= (* i i) n)\n            #t\n            (loop (+ i 1))))))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond ((= i n) #t)\n          ((&lt; i n) (is_perfect_square-iter n (+ i i)))\n          (else #f)))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square-iter n (+ i i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((> i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(&gt; i n) #f]\n      [else (is_perfect_square-iter n (+ i i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= i (* i i)) (loop (+ i 1))]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&lt; i n) (is_perfect_square_iter n (+ i i)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (= n (* i i))\n        #t\n        (if (&lt; n (* i i))\n            #f\n            (is_perfect_square_iter n (+ i 1)))))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ((i 1))\n    (if (= i n)\n        #t\n        (if (&gt; (* i i) n)\n            #f\n            (loop (+ i 1))))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square-iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square-iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (if (zero? n)\n      #f\n      (let loop ([i 1])\n        (if (= i n)\n            #t\n            (if (&gt; i n)\n                #f\n                (loop (+ i 2)))))))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n"
  ]
}