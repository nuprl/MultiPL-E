{
  "name": "mbpp_803_is_perfect_square",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n(define (is_perfect_square n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_perfect_square))\n    (check-equal? (candidate 10) #f)\n    (check-equal? (candidate 36) #t)\n    (check-equal? (candidate 14) #f)\n    (check-equal? (candidate 196) #t)\n    (check-equal? (candidate 125) #f)\n    (check-equal? (candidate 15625) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (iter i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (iter (+ i i))]))\n  (iter 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i 1))]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (if (= n (* i i))\n        #t\n        (if (&lt; n (* i i))\n            #f\n            (is_perfect_square_iter n (+ i 1)))))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (loop (+ i 2))])))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= n (* i i)) #t)\n          ((&gt; n (* i i)) (is_perfect_square_iter n (+ i 1)))\n          (else #f)))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= n (* i i)) #t]\n      [(> n (* i i)) (is_perfect_square_iter n (+ i 1))]\n      [else #f]))\n  (is_perfect_square_iter n 1))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond ((= i n) #t)\n          ((> i n) #f)\n          (else (is_perfect_square_iter n (+ i i)))))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= i (* i i)) #t]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square-iter n (+ i i))]))\n  (is_perfect_square-iter n 1))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= sum n)\n        #t\n        (if (&lt; sum n)\n            (loop (+ i 2) (+ sum i))\n            #f))))\n",
    "  (define (is_perfect_square_iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (is_perfect_square_iter n (+ i i))]))\n  (is_perfect_square_iter n 1))\n",
    "  (let loop ((i 1))\n    (cond ((> (* i i) n) #f)\n          ((= (* i i) n) #t)\n          (else (loop (+ i 1))))))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (is_perfect_square-iter n (+ i i)))))\n  (is_perfect_square-iter n 1))\n",
    "  (define (helper n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (helper n (+ i i))]))\n  (helper n 1))\n",
    "  (define (is_perfect_square-iter n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [(= (* i i) n) #t]\n      [else (is_perfect_square-iter n (+ i 1))]))\n  (is_perfect_square-iter n 1))\n",
    "  (let loop ([i 1])\n    (cond [(= i n) #t]\n          [(> i n) #f]\n          [(= n (* i i)) #t]\n          [else (loop (+ i 1))])))\n"
  ]
}