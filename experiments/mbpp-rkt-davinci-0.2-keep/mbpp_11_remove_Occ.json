{
  "name": "mbpp_11_remove_Occ",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to remove first and last occurrence of a given character from the string.\n(define (remove_Occ s ch)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_Occ))\n    (check-equal? (candidate \"hello\" \"l\") \"heo\")\n    (check-equal? (candidate \"abcda\" \"a\") \"bcd\")\n    (check-equal? (candidate \"PHP\" \"P\") \"H\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-join (filter (lambda (x) (not (equal? x ch))) (string-&gt;list s)) \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-index (reverse s) ch))\n                 (substring (reverse s) (+ 1 (string-index (reverse s) ch)))))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) acc]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (append acc (list (first s))))]))\n  (remove_Occ_helper s ch empty))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (if (empty? s)\n        acc\n        (cond\n         ((equal? (first s) ch)\n          (remove_Occ_helper (rest s) ch acc))\n         (else\n          (remove_Occ_helper (rest s) ch (append acc (list (first s))))))))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond [(empty? s) empty]\n          [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n          [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond [(empty? s) empty]\n          [(equal? (first s) ch) (rest s)]\n          [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper (reverse s) ch) ch))\n",
    "  (string-append\n   (substring s 0 (string-index s ch))\n   (substring s (+ 1 (string-index s ch)) (string-index s ch (- (string-length s) 1)))\n   (substring s (- (string-length s) 1))))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)))))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ (string-index s ch) 1) (string-length s))))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond ((null? s) (reverse acc))\n          ((equal? (car s) ch) (remove_Occ_helper (cdr s) ch acc))\n          (else (remove_Occ_helper (cdr s) ch (cons (car s) acc)))))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-join (filter (lambda (x) (not (equal? x ch))) (string->list s)) \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (string-replace s ch \"\"))\n",
    "  (let ([len (string-length s)])\n    (string-append\n     (substring s 0 (string-index s ch))\n     (substring s (+ 1 (string-index s ch)) (- len 1))\n     (substring s (- len 1) len))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch i)\n    (cond\n      [(empty? s) empty]\n      [(char=? (string-ref s i) ch) (remove_Occ_helper (substring s 0 i) ch (- i 1))]\n      [else (remove_Occ_helper s ch (+ i 1))]))\n  (remove_Occ_helper s ch 0))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_iter s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_iter (rest s) ch acc)]\n      [else (remove_Occ_iter (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_iter s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ-helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ-helper (rest s) ch acc)]\n      [else (remove_Occ-helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ-helper s ch '()))\n",
    "  (string-replace s ch \"\"))\n",
    "  (cond\n    [(empty? s) empty]\n    [(equal? (first s) ch) (remove_Occ (rest s) ch)]\n    [else (cons (first s) (remove_Occ (rest s) ch))]))\n",
    "  (string-replace s (string ch) \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-append\n   (substring s 0 (string-index s ch))\n   (substring s (+ 1 (string-index s ch)) (string-index (reverse s) ch))\n   (substring s (+ 1 (string-index (reverse s) ch)) (string-length s))))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (add1 (string-index s ch)) (sub1 (string-index s ch (add1 (string-index s ch)))))))\n",
    "  (if (string=? (substring s 0 1) ch)\n      (remove_Occ (substring s 1 (string-length s)) ch)\n      (if (string=? (substring s (- (string-length s) 1) (string-length s)) ch)\n          (remove_Occ (substring s 0 (- (string-length s) 1)) ch)\n          s)))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_iter s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_iter (rest s) ch acc)]\n      [else (remove_Occ_iter (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_iter s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (if (empty? s)\n        '()\n        (if (equal? (first s) ch)\n            (remove_Occ_helper (rest s) ch)\n            (cons (first s) (remove_Occ_helper (rest s) ch)))))\n  (define (remove_Occ_helper2 s ch)\n    (if (empty? s)\n        '()\n        (if (equal? (last s) ch)\n            (remove_Occ_helper2 (butlast s) ch)\n            (append s (list (last s))))))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch i)\n    (cond\n      [(= i (string-length s)) s]\n      [(char=? (string-ref s i) ch) (remove_Occ_helper (string-append (substring s 0 i) (substring s (+ i 1) (string-length s))) ch (+ i 1))]\n      [else (remove_Occ_helper s ch (+ i 1))]))\n  (remove_Occ_helper s ch 0))\n",
    "  (define (remove_Occ_helper s ch)\n    (if (empty? s)\n        empty\n        (if (char=? (first s) ch)\n            (remove_Occ_helper (rest s) ch)\n            (cons (first s) (remove_Occ_helper (rest s) ch)))))\n  (define (remove_Occ_helper2 s ch)\n    (if (empty? s)\n        empty\n        (if (char=? (last s) ch)\n            (remove_Occ_helper2 (butlast s) ch)\n            (append s (list (last s))))))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (last s) ch) (remove_Occ_helper2 (butlast s) ch)]\n      [else (cons (last s) (remove_Occ_helper2 (butlast s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) acc]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (append acc (list (first s))))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (last s) ch) (butlast s)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)))))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (add1 (string-index s ch)) (sub1 (string-index s ch (add1 (string-index s ch)))))\n                 (substring s (add1 (string-index s ch (add1 (string-index s ch)))))))\n",
    "  (define (helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (helper (rest s) ch acc)]\n      [else (helper (rest s) ch (cons (first s) acc))]))\n  (helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(char=? (last s) ch) (remove_Occ_helper2 (butlast s) ch)]\n      [else (cons (last s) (remove_Occ_helper2 (butlast s) ch))]))\n  (list->string (remove_Occ_helper2 (remove_Occ_helper s ch) ch)))\n",
    "  (define (remove_Occ_iter s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_iter (rest s) ch acc)]\n      [else (remove_Occ_iter (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_iter s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace s (string ch) \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-append\n   (substring s 0 (string-index s ch))\n   (substring s (+ 1 (string-index s ch)) (string-index (reverse s) ch))\n   (substring s (+ 1 (string-index (reverse s) ch)) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper2 (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace s (string ch) \"\"))\n",
    "  (define (helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (helper (rest s) ch)]\n      [else (cons (first s) (helper (rest s) ch))]))\n  (define (helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (helper2 (rest s) ch)]\n      [else (cons (first s) (helper2 (rest s) ch))]))\n  (define (helper3 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (helper3 (rest s) ch)]\n      [else (cons (first s) (helper3 (rest s) ch))]))\n  (define (helper4 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (helper4 (rest s) ch)]\n      [else (cons (first s) (helper4 (rest s) ch))]))\n  (define (helper5 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (helper5 (rest s) ch)]\n      [else (cons (first s) (helper5 (rest s) ch))]))\n  (define (helper6 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (helper6 (rest s) ch)]\n      [else (cons (first s) (helper6 (rest s) ch))]))\n  (define (helper7 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (helper7 (rest s) ch)]\n      [else (cons (first s) (helper7 (rest s) ch))]))\n  (define (helper8 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (helper8 (rest s) ch)]\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ (string-index s ch) 1) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch))\n                            (substring-index s ch (- (string-length s) 1)))))\n",
    "  (string-join\n   (filter (lambda (x) (not (equal? x ch)))\n           (string-split s))\n   \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond ((empty? s) (reverse acc))\n          ((equal? (first s) ch) (remove_Occ_helper (rest s) ch acc))\n          (else (remove_Occ_helper (rest s) ch (cons (first s) acc)))))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (if (empty? s)\n        empty\n        (if (equal? (first s) ch)\n            (remove_Occ_helper (rest s) ch)\n            (cons (first s) (remove_Occ_helper (rest s) ch)))))\n  (define (remove_Occ_helper2 s ch)\n    (if (empty? s)\n        empty\n        (if (equal? (last s) ch)\n            (remove_Occ_helper2 (butlast s) ch)\n            (append s (list (last s))))))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace s (string ch) \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper2 (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (if (string=? (string-ref s 0) ch)\n        (remove_Occ_helper (substring s 1) ch)\n        (string-append (string (string-ref s 0))\n                       (remove_Occ_helper (substring s 1) ch))))\n  (define (remove_Occ_helper2 s ch)\n    (if (string=? (string-ref s (sub1 (string-length s))) ch)\n        (remove_Occ_helper2 (substring s 0 (sub1 (string-length s))) ch)\n        (string-append (remove_Occ_helper2 (substring s 0 (sub1 (string-length s))) ch)\n                       (string (string-ref s (sub1 (string-length s)))))))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (helper (rest s) ch acc)]\n      [else (helper (rest s) ch (cons (first s) acc))]))\n  (helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_iter s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_iter (rest s) ch acc)]\n      [else (remove_Occ_iter (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_iter s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ (string-index s ch) 1) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (if (empty? s)\n        acc\n        (if (equal? (first s) ch)\n            (remove_Occ_helper (rest s) ch acc)\n            (remove_Occ_helper (rest s) ch (append acc (list (first s)))))))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-index (reverse s) ch))\n                 (substring (reverse s) (+ 1 (string-index (reverse s) ch)))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_iter s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_iter (rest s) ch acc)]\n      [else (remove_Occ_iter (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_iter s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ (string-index s ch) 1) (string-length s))))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ (string-index s ch) 1) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch result)\n    (cond\n      [(empty? s) result]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch result)]\n      [else (remove_Occ_helper (rest s) ch (append result (list (first s))))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-index (reverse s) ch))\n                 (substring s (+ 1 (string-index (reverse s) ch)))))\n",
    "  (define (remove_Occ_iter s ch r)\n    (cond\n      [(empty? s) r]\n      [(equal? (first s) ch) (remove_Occ_iter (rest s) ch r)]\n      [else (remove_Occ_iter (rest s) ch (append r (list (first s))))]))\n  (remove_Occ_iter s ch '()))\n",
    "  (define (helper s ch)\n    (cond [(empty? s) empty]\n          [(equal? (first s) ch) (rest s)]\n          [else (cons (first s) (helper (rest s) ch))]))\n  (define (helper2 s ch)\n    (cond [(empty? s) empty]\n          [(equal? (first s) ch) (helper2 (rest s) ch)]\n          [else (cons (first s) (helper2 (rest s) ch))]))\n  (helper2 (helper s ch) ch))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_h s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_h (rest s) ch acc)]\n      [else (remove_Occ_h (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_h s ch '()))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-append\n   (substring s 0 (string-index s ch))\n   (substring s (+ 1 (string-index s ch)) (string-index (string-reverse s) ch))\n   (substring s (+ 1 (string-index (string-reverse s) ch)))))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (cond\n    [(empty? s) empty]\n    [(equal? (first s) ch) (remove_Occ (rest s) ch)]\n    [else (cons (first s) (remove_Occ (rest s) ch))]))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ (string-index s ch) 1) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace s (string ch) \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-index s ch (- (string-length s) 1)))\n                 (substring s (- (string-length s) 1))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ (string-index s ch) 1) (string-length s))))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)))))\n",
    "  (string-append\n   (substring s 0 (string-index s ch))\n   (substring s (+ (string-index s ch) 1) (string-length s))))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (if (string=? s \"\")\n      \"\"\n      (if (string=? (substring s 0 1) ch)\n          (remove_Occ (substring s 1) ch)\n          (string-append (substring s 0 1) (remove_Occ (substring s 1) ch)))))\n",
    "  (string-append\n   (substring s 0 (string-index s ch))\n   (substring s (+ 1 (string-index s ch)) (string-index (reverse s) ch))\n   (substring s (+ 1 (string-index (reverse s) ch)) (string-length s))))\n",
    "  (define (helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (helper (rest s) ch acc)]\n      [else (helper (rest s) ch (cons (first s) acc))]))\n  (helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (helper (rest s) ch acc)]\n      [else (helper (rest s) ch (cons (first s) acc))]))\n  (helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)))))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ (string-index s ch) 1) (string-length s))))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper_rev s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper_rev (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper_rev (rest s) ch))]))\n  (define (remove_Occ_helper_rev_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper_rev_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper_rev_helper (rest s) ch))]))\n  (remove_Occ_helper_rev_helper (remove_Occ_helper_rev (remove_Occ_helper s ch) ch) ch))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (cond\n    [(empty? s) empty]\n    [(equal? (first s) ch) (remove_Occ (rest s) ch)]\n    [else (cons (first s) (remove_Occ (rest s) ch))]))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (if (empty? s)\n        empty\n        (if (char=? (first s) ch)\n            (remove_Occ_helper (rest s) ch)\n            (cons (first s) (remove_Occ_helper (rest s) ch)))))\n  (define (remove_Occ_helper2 s ch)\n    (if (empty? s)\n        empty\n        (if (char=? (last s) ch)\n            (remove_Occ_helper2 (butlast s) ch)\n            (cons (first s) (remove_Occ_helper2 (rest s) ch)))))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (define (helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (helper (rest s) ch))]))\n  (define (helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (helper2 (rest s) ch)]\n      [else (cons (first s) (helper2 (rest s) ch))]))\n  (helper2 (helper s ch) ch))\n",
    "  (define (remove_Occ_iter s ch acc)\n    (cond ((empty? s) (reverse acc))\n          ((char=? (first s) ch) (remove_Occ_iter (rest s) ch acc))\n          (else (remove_Occ_iter (rest s) ch (cons (first s) acc)))))\n  (remove_Occ_iter s ch '()))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (cond\n    [(empty? s) empty]\n    [(equal? (first s) ch) (remove_Occ (rest s) ch)]\n    [else (cons (first s) (remove_Occ (rest s) ch))]))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(char=? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-join\n   (remove ch (string-split s #\\,))\n   #\\,))\n",
    "  (define (helper s ch acc)\n    (cond ((null? s) (reverse acc))\n          ((equal? (car s) ch) (helper (cdr s) ch acc))\n          (else (helper (cdr s) ch (cons (car s) acc)))))\n  (helper s ch '()))\n",
    "  (string-replace s (string ch) \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (regexp-replace* #rx (string-append \"^\" ch \"|\" ch \"$\") s \"\"))\n"
  ]
}