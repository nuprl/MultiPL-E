{
  "name": "mbpp_11_remove_Occ",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to remove first and last occurrence of a given character from the string.\n(define (remove_Occ s ch)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_Occ))\n    (check-equal? (candidate \"hello\" \"l\") \"heo\")\n    (check-equal? (candidate \"abcda\" \"a\") \"bcd\")\n    (check-equal? (candidate \"PHP\" \"P\") \"H\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (string-join (filter (lambda (x) (not (equal? x ch))) (string-&gt;list s)) \"\"))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-length s))))\n",
    "  (string-append (substring s 0 (string-index s ch))\n                 (substring s (+ 1 (string-index s ch)) (string-index (reverse s) ch))\n                 (substring (reverse s) (+ 1 (string-index (reverse s) ch)))))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) acc]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (append acc (list (first s))))]))\n  (remove_Occ_helper s ch empty))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch acc)]\n      [else (remove_Occ_helper (rest s) ch (cons (first s) acc))]))\n  (remove_Occ_helper s ch '()))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch acc)\n    (if (empty? s)\n        acc\n        (cond\n         ((equal? (first s) ch)\n          (remove_Occ_helper (rest s) ch acc))\n         (else\n          (remove_Occ_helper (rest s) ch (append acc (list (first s))))))))\n  (remove_Occ_helper s ch '()))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (string-replace s ch \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond [(empty? s) empty]\n          [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n          [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond [(empty? s) empty]\n          [(equal? (first s) ch) (rest s)]\n          [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper (reverse s) ch) ch))\n",
    "  (string-append\n   (substring s 0 (string-index s ch))\n   (substring s (+ 1 (string-index s ch)) (string-index s ch (- (string-length s) 1)))\n   (substring s (- (string-length s) 1))))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n",
    "  (define (remove_Occ_helper s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (remove_Occ_helper (rest s) ch)]\n      [else (cons (first s) (remove_Occ_helper (rest s) ch))]))\n  (define (remove_Occ_helper2 s ch)\n    (cond\n      [(empty? s) empty]\n      [(equal? (first s) ch) (rest s)]\n      [else (cons (first s) (remove_Occ_helper2 (rest s) ch))]))\n  (remove_Occ_helper2 (remove_Occ_helper s ch) ch))\n",
    "  (string-replace (string-replace s ch \"\") ch \"\"))\n"
  ]
}