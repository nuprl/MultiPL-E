{
  "name": "mbpp_764_number_ctr",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count number of digits in a given string.\n(define (number_ctr str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate number_ctr))\n    (check-equal? (candidate \"program2bedone\") 1)\n    (check-equal? (candidate \"3wonders\") 1)\n    (check-equal? (candidate \"123\") 3)\n    (check-equal? (candidate \"3wond-1ers2\") 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1) (+ ctr 1)))))\n",
    "  (if (string=? str \"\")\n      0\n      (if (char-numeric? (string-ref str 0))\n          (+ 1 (number_ctr (substring str 1)))\n          (number_ctr (substring str 1)))))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (empty? str)\n        count\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ count 1))\n            (helper (rest str) count))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-numeric? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (number_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (number_ctr_iter (rest str) (+ ctr 1))]\n      [else (number_ctr_iter (rest str) ctr)]))\n  (number_ctr_iter str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (loop (rest str)\n              (if (char-numeric? (first str))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str counter)\n    (cond\n      [(empty? str) counter]\n      [(char-numeric? (first str)) (helper (rest str) (+ counter 1))]\n      [else (helper (rest str) counter)]))\n  (helper str 0))\n"
  ]
}