{
  "name": "mbpp_764_number_ctr",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count number of digits in a given string.\n(define (number_ctr str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate number_ctr))\n    (check-equal? (candidate \"program2bedone\") 1)\n    (check-equal? (candidate \"3wonders\") 1)\n    (check-equal? (candidate \"123\") 3)\n    (check-equal? (candidate \"3wond-1ers2\") 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1) (+ ctr 1)))))\n",
    "  (if (string=? str \"\")\n      0\n      (if (char-numeric? (string-ref str 0))\n          (+ 1 (number_ctr (substring str 1)))\n          (number_ctr (substring str 1)))))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (empty? str)\n        count\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ count 1))\n            (helper (rest str) count))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-numeric? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (number_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (number_ctr_iter (rest str) (+ ctr 1))]\n      [else (number_ctr_iter (rest str) ctr)]))\n  (number_ctr_iter str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (loop (rest str)\n              (if (char-numeric? (first str))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str counter)\n    (cond\n      [(empty? str) counter]\n      [(char-numeric? (first str)) (helper (rest str) (+ counter 1))]\n      [else (helper (rest str) counter)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond [(empty? str) acc]\n          [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n          [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-numeric? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (char-&gt;num c)\n    (string-&gt;number (string c)))\n  (define (is-digit? c)\n    (and (&gt;= c #\\0) (&lt;= c #\\9)))\n  (define (is-digit-string? str)\n    (and (not (null? str))\n         (is-digit? (car str))\n         (is-digit-string? (cdr str))))\n  (define (digit-string-&gt;number str)\n    (if (null? str)\n        0\n        (+ (* (char-&gt;num (car str)) (expt 10 (- (string-length str) 1)))\n           (digit-string-&gt;number (cdr str)))))\n  (define (number-&gt;digit-string n)\n    (if (zero? n)\n        \"\"\n        (string (integer-&gt;char (+ #\\0 (remainder n 10)))\n                (number-&gt;digit-string (quotient n 10)))))\n  (define (number-ctr str)\n    (if (null? str)\n        0\n        (if (is-digit? (car str))\n            (+ (number-ctr (cdr str)) 1)\n            (number-ctr (cdr str)))))\n  (define (string-&gt;number-string str)\n    (if (null? str)\n        \"\"\n        (if (is-digit? (car str))\n            (string (car str) (string-&gt;number-string (cdr str)))\n            (string-&gt;number-string (cdr str)))))\n  (define (number-string-&gt;number str)\n    (digit-string-&gt;number (string-&gt;number-string str)))\n  (number-string-&gt;number (string-&gt;number-string str)))\n</code>\n",
    "  (define (helper str i)\n    (if (empty? str)\n        i\n        (if (char-numeric? (car str))\n            (helper (cdr str) (+ i 1))\n            (helper (cdr str) i))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond [(empty? str) acc]\n          [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n          [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (if (char-numeric? (first str))\n         (+ 1 (number_ctr (rest str)))\n         (number_ctr (rest str)))]))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-numeric? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (define (number? c)\n    (and (char-numeric? c)\n         (not (char-whitespace? c))))\n  (define (count-number str)\n    (if (string-empty? str)\n        0\n        (if (number? (string-ref str 0))\n            (+ 1 (count-number (substring str 1)))\n            (count-number (substring str 1)))))\n  (count-number str))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str count)\n    (if (string-empty? str)\n        count\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ count 1))\n            (helper (substring str 1) count))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (cond\n       [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n       [else (number_ctr (rest str))])]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str n)\n    (cond\n      [(empty? str) n]\n      [(char-numeric? (first str)) (helper (rest str) (+ n 1))]\n      [else (helper (rest str) n)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (number? c)\n    (and (char-numeric? c) (not (char=? c #\\.))))\n  (define (number-ctr-iter str ctr)\n    (cond ((null? str) ctr)\n          ((number? (car str)) (number-ctr-iter (cdr str) (+ ctr 1)))\n          (else (number-ctr-iter (cdr str) ctr))))\n  (number-ctr-iter str 0))\n",
    "  (if (empty? str)\n      0\n      (+ (if (char-numeric? (first str)) 1 0)\n         (number_ctr (rest str)))))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (length (regexp-match #rx\"[0-9]\" str)))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond ((null? str) acc)\n          ((char-numeric? (car str)) (helper (cdr str) (+ acc 1)))\n          (else (helper (cdr str) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (number? c)\n    (and (&gt;= c #\\0) (&lt;= c #\\9)))\n  (define (number-ctr-iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(number? (first str)) (number-ctr-iter (rest str) (+ ctr 1))]\n      [else (number-ctr-iter (rest str) ctr)]))\n  (number-ctr-iter str 0))\n",
    "  (let loop ((str (string->list str))\n             (ctr 0))\n    (cond ((null? str) ctr)\n          ((char-numeric? (car str))\n           (loop (cdr str) (+ ctr 1)))\n          (else (loop (cdr str) ctr)))))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (string-empty? str)\n        acc\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ acc 1))\n            (helper (substring str 1) acc))))\n  (helper str 0))\n",
    "  (length (regexp-match #rx\"[0-9]\" str)))\n",
    "  (define (helper str n)\n    (cond\n      [(empty? str) n]\n      [(char-numeric? (first str)) (helper (rest str) (+ n 1))]\n      [else (helper (rest str) n)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond [(empty? str) acc]\n          [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n          [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (loop (rest str) (if (char-numeric? (first str))\n                             (+ ctr 1)\n                             ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-numeric? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (cond [(= i (string-length str)) ctr]\n          [(char-numeric? (string-ref str i)) (loop (+ i 1) (+ ctr 1))]\n          [else (loop (+ i 1) ctr)])))\n",
    "  (define (helper str ctr)\n    (cond ((string-empty? str) ctr)\n          ((char-numeric? (string-ref str 0)) (helper (substring str 1) (+ ctr 1)))\n          (else (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (cond [(empty? str) 0]\n        [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n        [else (number_ctr (rest str))]))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-numeric? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ 1 acc))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str n)\n    (cond\n      [(empty? str) n]\n      [(char-numeric? (first str)) (helper (rest str) (+ n 1))]\n      [else (helper (rest str) n)]))\n  (helper str 0))\n",
    "  (define (number_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (number_ctr_iter (rest str) (+ ctr 1))]\n      [else (number_ctr_iter (rest str) ctr)]))\n  (number_ctr_iter str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (cond\n      [(= i (string-length str)) ctr]\n      [(char-numeric? (string-ref str i)) (loop (+ i 1) (+ ctr 1))]\n      [else (loop (+ i 1) ctr)])))\n",
    "  (if (string=? str \"\")\n      0\n      (if (char-numeric? (string-ref str 0))\n          (+ 1 (number_ctr (substring str 1)))\n          (number_ctr (substring str 1)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1) (+ ctr 1)))))\n",
    "  (define (is_digit? c)\n    (and (char-numeric? c)\n         (not (char-whitespace? c))))\n  (define (loop str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(is_digit? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)]))\n  (loop str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1) (+ ctr 1)))))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (loop (rest str) (+ ctr (if (char-numeric? (first str)) 1 0))))))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (for/fold ([ctr 0]) ([ch (in-string str)])\n    (if (char-numeric? ch)\n        (+ ctr 1)\n        ctr)))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (string-empty? str)\n        count\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ count 1))\n            (helper (substring str 1) count))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str i)\n    (if (string=? str \"\")\n        i\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ i 1))\n            (helper (substring str 1) i))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [else (loop (rest str) (+ ctr (if (char-numeric? (first str)) 1 0)))])))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (length (filter char-numeric? str)))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1) (+ ctr 1)))))\n",
    "  (define (helper str acc)\n    (cond [(empty? str) acc]\n          [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n          [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str)\n    (cond\n      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (helper (rest str)))]\n      [else (helper (rest str))]))\n  (helper str))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (length (regexp-match #rx\"[0-9]\" str)))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (is_digit? c)\n    (and (char-numeric? c) (not (char=? c #\\.))))\n  (define (loop str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(is_digit? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)]))\n  (loop str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-numeric? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (for/fold ([ctr 0]) ([c (in-string str)])\n    (if (char-numeric? c)\n        (add1 ctr)\n        ctr)))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str i)\n    (cond\n      ((= i (string-length str)) 0)\n      ((char-numeric? (string-ref str i)) (+ 1 (helper str (+ i 1))))\n      (else (helper str (+ i 1)))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (empty? str)\n        count\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ count 1))\n            (helper (rest str) count))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1) (+ ctr 1)))))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (number_ctr_helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (number_ctr_helper (rest str) (+ ctr 1))\n            (number_ctr_helper (rest str) ctr))))\n  (number_ctr_helper str 0))\n",
    "  (length (regexp-match #rx\"[0-9]\" str)))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n"
  ]
}