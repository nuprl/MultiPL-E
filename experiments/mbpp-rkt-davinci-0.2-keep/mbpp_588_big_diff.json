{
  "name": "mbpp_588_big_diff",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the difference between largest and smallest value in a given list.\n(define (big_diff nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate big_diff))\n    (check-equal? (candidate (list 1 2 3 4)) 3)\n    (check-equal? (candidate (list 4 5 12)) 8)\n    (check-equal? (candidate (list 9 2 3)) 7)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let* ([max (apply max nums)]\n         [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [else (- (apply max nums) (apply min nums))]))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [else\n     (let ([max (apply max nums)]\n           [min (apply min nums)])\n       (- max min))]))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ((min (apply min nums))\n        (max (apply max nums)))\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (define (big_diff_iter nums biggest smallest)\n    (cond ((null? nums) (- biggest smallest))\n          ((&gt; (car nums) biggest) (big_diff_iter (cdr nums) (car nums) smallest))\n          ((&lt; (car nums) smallest) (big_diff_iter (cdr nums) biggest (car nums)))\n          (else (big_diff_iter (cdr nums) biggest smallest))))\n  (big_diff_iter nums (car nums) (car nums)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ((max (apply max nums))\n        (min (apply min nums)))\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (define (max nums)\n    (if (null? (cdr nums))\n        (car nums)\n        (if (&gt; (car nums) (max (cdr nums)))\n            (car nums)\n            (max (cdr nums)))))\n  (define (min nums)\n    (if (null? (cdr nums))\n        (car nums)\n        (if (&lt; (car nums) (min (cdr nums)))\n            (car nums)\n            (min (cdr nums)))))\n  (- (max nums) (min nums)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ((max (apply max nums))\n        (min (apply min nums)))\n    (- max min)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [else\n     (let ([big (apply max nums)]\n           [small (apply min nums)])\n       (- big small))]))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (apply - (apply max nums) (apply min nums)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [else (- (apply max nums) (apply min nums))]))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (apply - (apply max nums) (apply min nums)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ((max (apply max nums))\n        (min (apply min nums)))\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (if (null? nums)\n      0\n      (- (apply max nums) (apply min nums))))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let* ([min (apply min nums)]\n         [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([big (apply max nums)]\n        [small (apply min nums)])\n    (- big small)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (apply - (apply max nums) (apply min nums)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (apply - (apply max nums) (apply min nums)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([biggest (apply max nums)]\n        [smallest (apply min nums)])\n    (- biggest smallest)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([min (apply min nums)]\n        [max (apply max nums)])\n    (- max min)))\n",
    "  (let* ([min (apply min nums)]\n         [max (apply max nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (apply - (apply max nums) (apply min nums)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n",
    "  (let ([max (apply max nums)]\n        [min (apply min nums)])\n    (- max min)))\n"
  ]
}