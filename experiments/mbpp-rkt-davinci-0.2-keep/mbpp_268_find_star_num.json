{
  "name": "mbpp_268_find_star_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the n'th star number.\n(define (find_star_num n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_star_num))\n    (check-equal? (candidate 3) 37)\n    (check-equal? (candidate 4) 73)\n    (check-equal? (candidate 5) 121)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (if (= n 1)\n      5\n      (if (= (remainder n 2) 0)\n          (+ 1 (find_star_num (/ n 2)))\n          (+ 2 (find_star_num (/ n 2))))))\n",
    "  (if (= n 1)\n      5\n      (+ (* 2 (find_star_num (- n 1))) 3)))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        i\n        (if (and (integer? (/ (+ i 1) 3)) (integer? (/ (+ i 2) 5)))\n            (find_star_num_iter n (+ i 1))\n            (find_star_num_iter n (+ i 1)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find-star-num-iter n star-num)\n    (if (= n 0)\n        star-num\n        (find-star-num-iter (- n 1) (+ star-num (* 2 star-num)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        i\n        (if (= (modulo i 2) 0)\n            (find_star_num_iter n (+ i 1))\n            (find_star_num_iter n (+ i 2)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (* 5 (find_star_num (- n 1)))\n         (* -1 (find_star_num (- n 2))))))\n",
    "  (define (find_star_num_iter n counter star-num)\n    (cond ((= n counter) star-num)\n          (else (find_star_num_iter n (+ counter 1) (+ star-num (* counter 2))))))\n  (find_star_num_iter n 1 1))\n",
    "  (let loop ([n n] [i 1] [star-num 1])\n    (if (= n 1)\n        star-num\n        (loop (- n 1) (+ i 1) (+ star-num (* i 2))))))\n",
    "  (define (find-star-num-iter n curr-num)\n    (if (= n 1)\n        curr-num\n        (find-star-num-iter (- n 1) (+ curr-num (* 2 (sqrt curr-num))))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n count)\n    (if (= n count)\n        (expt 2 count)\n        (find_star_num_iter n (+ count 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n i)\n    (cond\n      [(= n i) i]\n      [(= (modulo i 5) 0) (find_star_num_iter n (+ i 1))]\n      [(= (modulo i 3) 0) (find_star_num_iter n (+ i 1))]\n      [else (+ i 1)]))\n  (find_star_num_iter n 1))\n",
    "  (define (find-star-num-iter n acc)\n    (if (= n 0)\n        acc\n        (find-star-num-iter (- n 1) (+ acc (* 2 acc)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 i)\n           (find_star_num-iter n (+ i 1)))))\n  (find_star-num-iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* 2 n))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n"
  ]
}