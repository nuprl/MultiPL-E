{
  "name": "mbpp_268_find_star_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the n'th star number.\n(define (find_star_num n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_star_num))\n    (check-equal? (candidate 3) 37)\n    (check-equal? (candidate 4) 73)\n    (check-equal? (candidate 5) 121)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (if (= n 1)\n      5\n      (if (= (remainder n 2) 0)\n          (+ 1 (find_star_num (/ n 2)))\n          (+ 2 (find_star_num (/ n 2))))))\n",
    "  (if (= n 1)\n      5\n      (+ (* 2 (find_star_num (- n 1))) 3)))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        i\n        (if (and (integer? (/ (+ i 1) 3)) (integer? (/ (+ i 2) 5)))\n            (find_star_num_iter n (+ i 1))\n            (find_star_num_iter n (+ i 1)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find-star-num-iter n star-num)\n    (if (= n 0)\n        star-num\n        (find-star-num-iter (- n 1) (+ star-num (* 2 star-num)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        i\n        (if (= (modulo i 2) 0)\n            (find_star_num_iter n (+ i 1))\n            (find_star_num_iter n (+ i 2)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (* 5 (find_star_num (- n 1)))\n         (* -1 (find_star_num (- n 2))))))\n",
    "  (define (find_star_num_iter n counter star-num)\n    (cond ((= n counter) star-num)\n          (else (find_star_num_iter n (+ counter 1) (+ star-num (* counter 2))))))\n  (find_star_num_iter n 1 1))\n",
    "  (let loop ([n n] [i 1] [star-num 1])\n    (if (= n 1)\n        star-num\n        (loop (- n 1) (+ i 1) (+ star-num (* i 2))))))\n",
    "  (define (find-star-num-iter n curr-num)\n    (if (= n 1)\n        curr-num\n        (find-star-num-iter (- n 1) (+ curr-num (* 2 (sqrt curr-num))))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n count)\n    (if (= n count)\n        (expt 2 count)\n        (find_star_num_iter n (+ count 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n i)\n    (cond\n      [(= n i) i]\n      [(= (modulo i 5) 0) (find_star_num_iter n (+ i 1))]\n      [(= (modulo i 3) 0) (find_star_num_iter n (+ i 1))]\n      [else (+ i 1)]))\n  (find_star_num_iter n 1))\n",
    "  (define (find-star-num-iter n acc)\n    (if (= n 0)\n        acc\n        (find-star-num-iter (- n 1) (+ acc (* 2 acc)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 i)\n           (find_star_num-iter n (+ i 1)))))\n  (find_star-num-iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* 2 n))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (cond\n    [(= n 1) 5]\n    [else (+ (* 5 (find_star_num (- n 1))) 2)]))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find-star-num-iter n acc)\n    (if (= n 1)\n        acc\n        (find-star-num-iter (- n 1) (+ acc (* 2 acc)))))\n  (find-star-num-iter n 1))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 1))\n",
    "  (define (find-star-num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find-star-num-iter n (+ i 1))))\n  (find-star-num-iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* 2 n))]))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 0)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 0)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num-iter n (+ i 1))))\n  (find_star_num-iter n 1))\n",
    "  (define (find-star-num-iter n acc)\n    (if (= n 1)\n        acc\n        (find-star-num-iter (- n 1) (+ acc (* 2 acc)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n",
    "  (define (helper n)\n    (cond [(= n 1) 5]\n          [(= n 2) 13]\n          [else (+ (* 2 (helper (- n 1))) (helper (- n 2)))]))\n  (helper n))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 (- i 1))\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n curr)\n    (if (= n 1)\n        curr\n        (find_star_num_iter (- n 1) (+ curr (* 2 curr)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find-star-num-iter n star-num)\n    (if (= n 0)\n        star-num\n        (find-star-num-iter (- n 1) (+ star-num (* 2 n)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (* 5 (find_star_num (- n 1)))\n         (* 2 (find_star_num (- n 2))))))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        i\n        (if (= (modulo i 5) 0)\n            (find_star_num_iter n (+ i 1))\n            (find_star_num_iter n (+ i 1)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        1\n        (+ (expt i 2) (find_star_num-iter n (+ i 1)))))\n  (find_star_num-iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n 2) (find_star_num (- n 1)))]))\n",
    "  (if (= n 1)\n      5\n      (+ (find_star_num (- n 1)) (* 2 (find_star_num (- n 1))))))\n",
    "  (define (find-star-num-iter n star-num)\n    (cond\n      [(= n 1) star-num]\n      [else (find-star-num-iter (- n 1) (+ star-num (* 2 (expt 3 (- n 2)))))]))\n  (find-star-num-iter n 1))\n",
    "  (define (find-star-num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find-star-num-iter n (+ i 1))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n count)\n    (if (= n count)\n        (expt 2 count)\n        (find_star_num_iter n (+ count 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (define (find_star_num_iter n i)\n    (if (= i n)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (* 2 (find_star_num (- n 1))) 3)))\n",
    "  (define (find-star-num-iter n i)\n    (if (= n i)\n        i\n        (find-star-num-iter n (+ i 1))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= i n)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n curr-num curr-star-num)\n    (cond\n      [(= n curr-num) curr-star-num]\n      [else (find_star_num_iter n (+ curr-num 1) (+ curr-star-num (* curr-num curr-num)))]))\n  (find_star_num_iter n 1 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num-iter n (+ i 1))))\n  (find_star_num-iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (* 5 n) (find_star_num (- n 1)))))\n",
    "  (define (find-star-num-iter n i)\n    (if (= n i)\n        1\n        (+ (expt 2 i) (find-star-num-iter n (+ i 1)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num-iter n acc)\n    (cond\n      [(= n 1) acc]\n      [else (find_star_num-iter (- n 1) (+ acc (* 2 n)))]))\n  (find_star_num-iter n 1))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num-iter n (+ i 1))))\n  (find_star_num-iter n 0))\n",
    "  (if (= n 1)\n      5\n      (+ (* n 2) (find_star_num (- n 1)))))\n",
    "  (define (helper n)\n    (cond\n      [(= n 1) 5]\n      [(= n 2) 13]\n      [else (+ (helper (- n 1)) (* 2 (helper (- n 2))))]))\n  (helper n))\n",
    "  (if (= n 1)\n      5\n      (+ (* 5 (find_star_num (- n 1)))\n         (* 2 (find_star_num (- n 2))))))\n",
    "  (define (find_star_num-iter count star)\n    (cond ((= count n) star)\n          (else (find_star_num-iter (+ count 1) (+ star (* 2 (expt 3 (- count 1))))))))\n  (find_star_num-iter 1 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* 2 n))]))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 i)\n           (find_star_num_iter n (+ i 1)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (let loop ([n n] [i 1] [j 1])\n    (cond\n      [(zero? n) i]\n      [(zero? (modulo j 5)) (loop (- n 1) (+ i 1) 1)]\n      [else (loop n i (+ j 1))])))\n",
    "  (define (find_star_num_iter n count)\n    (cond\n      [(= n count) count]\n      [else (find_star_num_iter n (+ count 1))]))\n  (find_star_num_iter n 1))\n",
    "  (define (star-num n)\n    (if (= n 1)\n        5\n        (+ (star-num (- n 1)) (* 2 n))))\n  (star-num n))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n n))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n n) (find_star_num (- n 1)))]))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 (find_star_num_iter n (- i 1)))\n           (* 3 (find_star_num_iter n (- i 2))))))\n  (find_star_num_iter n n))\n",
    "  (if (= n 1)\n      5\n      (+ (find_star_num (- n 1)) (* 2 (find_star_num (- n 1))))))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (if (= n 1)\n      5\n      (+ (* 5 (find_star_num (- n 1)))\n         (* -1 (find_star_num (- n 2))))))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 0)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num-iter n (+ i 1))))\n  (find_star_num-iter n 0))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 (find_star_num-iter n (+ i 1)))\n           (* 3 (find_star_num-iter n (+ i 2))))))\n  (find_star_num-iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter i star)\n    (if (= i n)\n        star\n        (find_star_num_iter (+ i 1) (+ star (* 2 i)))))\n  (find_star_num_iter 1 1))\n",
    "  (define (find-star-num-iter n star-num)\n    (cond ((= n 0) star-num)\n          (else (find-star-num-iter (- n 1) (+ star-num (* 2 (expt 3 (- n 1))))))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (find_star_num (- n 1))\n         (* 2 (find_star_num (- n 1)))\n         1)))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n star)\n    (if (= n 1)\n        star\n        (find_star_num_iter (- n 1) (+ star (* 2 star)))))\n  (find_star_num_iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n n) (find_star_num (- n 1)))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n 2) (find_star_num (- n 1)))]))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        1\n        (+ (* i 2)\n           (find_star_num_iter n (+ i 1)))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (* 2 (find_star_num (- n 1))) 3)))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n (find_star_num (- n 1))) 1)]))\n",
    "  (define (find_star_num_iter n star_num)\n    (if (= n 1)\n        star_num\n        (find_star_num_iter (- n 1) (+ star_num (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n 2) (find_star_num (- n 1)))]))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find-star-num-iter n star-num)\n    (if (= n 1)\n        star-num\n        (find-star-num-iter (- n 1) (+ star-num (* 2 star-num)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find-star-num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find-star-num-iter n (+ i 1))))\n  (find-star-num-iter n 0))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* 2 n))]))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (+ acc (* 2 acc)))))\n  (helper n 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num-iter n (+ i 1))))\n  (find_star_num-iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (define (helper i acc)\n    (if (= i n)\n        acc\n        (helper (+ i 1) (+ acc (* 2 i)))))\n  (helper 1 5))\n",
    "  (define (find_star_num_iter n star-num)\n    (cond [(= n 1) star-num]\n          [else (find_star_num_iter (- n 1) (+ star-num (* 2 star-num)))]))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find-star-num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find-star-num-iter n (+ i 1))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        0\n        (+ (expt 2 i) (find_star_num_iter n (+ i 1)))))\n  (find_star_num_iter n 0))\n",
    "  (if (= n 1)\n      5\n      (+ (* 2 (find_star_num (- n 1))) 3)))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        i\n        (find_star_num_iter n (+ i 1))))\n  (define (is_star_num n)\n    (define (is_star_num_iter n i)\n      (if (= n (* i i))\n          #t\n          (if (&lt; n (* i i))\n              #f\n              (is_star_num_iter n (+ i 1)))))\n    (is_star_num_iter n 1))\n  (define (find_star_num_iter n i)\n    (if (is_star_num i)\n        (if (= n 1)\n            i\n            (find_star_num_iter (- n 1) (+ i 1)))\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        1\n        (+ (* i 2) (find_star_num-iter n (+ i 1)))))\n  (find_star_num-iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* n 2)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 i)\n           (find_star_num_iter n (+ i 1)))))\n  (find_star_num_iter n 1))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 0))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n count)\n    (cond\n      [(= n count) count]\n      [else (find_star_num_iter n (+ count 1))]))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (helper n)\n    (if (= n 1)\n        5\n        (+ (helper (- n 1)) (* 2 (expt 3 (- n 1))))))\n  (helper n))\n",
    "  (define (find-star-num-iter n i)\n    (if (= n i)\n        1\n        (+ (expt 2 i) (find-star-num-iter n (+ i 1)))))\n  (find-star-num-iter n 1))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 1))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n 2) (find_star_num (- n 1)))]))\n",
    "  (define (find-star-num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find-star-num-iter n (+ i 1))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (cond\n      [(= i n) i]\n      [else (find_star_num_iter n (+ i 1))]))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n curr-num)\n    (if (= n 1)\n        curr-num\n        (find_star_num_iter (- n 1) (+ curr-num (* 2 curr-num)))))\n  (find_star_num_iter n 1))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 1))\n",
    "  (define (find_star_num_iter n i)\n    (cond\n      [(= i n) i]\n      [(= (modulo i 2) 0) (find_star_num_iter (+ n i) (+ i 1))]\n      [else (find_star_num_iter n (+ i 1))]))\n  (find_star_num_iter n 1))\n",
    "  (let loop ([n n] [i 1] [acc 1])\n    (if (= n 1)\n        acc\n        (loop (- n 1) (+ i 2) (+ acc (* i i))))))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 (find_star_num-iter n (- i 1)))\n           (* 3 (find_star_num-iter n (- i 2))))))\n  (find_star_num-iter n n))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 1))\n",
    "  (define (find-star-num-iter n acc)\n    (if (= n 1)\n        acc\n        (find-star-num-iter (- n 1) (+ acc (* 2 n)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n star-num)\n    (cond\n      [(= n 1) star-num]\n      [else (find_star_num_iter (- n 1) (+ star-num (* 2 (expt 3 (- n 2)))))]))\n  (find_star_num_iter n 1))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (+ acc (* 2 n)))))\n  (helper n 0))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 i) (find_star_num_iter n (+ i 1)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n i)\n    (if (= i n)\n        (expt 2 n)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n 2) (find_star_num (- n 1)))]))\n",
    "  (define (iter i)\n    (if (= i n)\n        (expt 2 i)\n        (iter (+ i 1))))\n  (iter 0))\n",
    "  (define (find-star-num-iter n i)\n    (if (= i n)\n        (expt 2 i)\n        (find-star-num-iter n (+ i 1))))\n  (find-star-num-iter n 0))\n",
    "  (define (find-star-num-iter n star-num)\n    (if (= n 1)\n        star-num\n        (find-star-num-iter (- n 1) (+ star-num (* 2 (expt 3 (- n 2)))))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* n 2)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num-iter n sum)\n    (if (= n 1)\n        sum\n        (find_star_num-iter (- n 1) (+ sum (* n n)))))\n  (find_star_num-iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n n) (find_star_num (- n 1)))]))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (find_star_num (- n 1)) (* 2 (find_star_num (- n 1))))))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (* 2 (find_star_num (- n 1)))\n         3)))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n 2) (find_star_num (- n 1)))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* 2 n))]))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num-iter n current)\n    (if (= n 1)\n        current\n        (find_star_num-iter (- n 1) (+ current (* 2 current)))))\n  (find_star_num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (cond ((= n 1) 5)\n        ((= n 2) 13)\n        (else (+ (find_star_num (- n 1))\n                 (find_star_num (- n 2))\n                 4))))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (* n 2) (find_star_num (- n 1)))]))\n",
    "  (define (find_star_num-iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num-iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num-iter n 1))\n",
    "  (define (find_star_num-iter n i)\n    (if (= i n)\n        (expt 2 n)\n        (find_star_num-iter n (+ i 1))))\n  (find_star_num-iter n 1))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= i n)\n        j\n        (loop (+ i 1) (+ j (* 2 i))))))\n",
    "  (if (= n 1)\n      5\n      (+ (find_star_num (- n 1))\n         (* 2 (find_star_num (- n 1)))\n         1)))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (* 5 (find_star_num (- n 1)))\n         (* -1 (find_star_num (- n 2))))))\n",
    "  (define (find-star-num-iter n i)\n    (if (= n 0)\n        i\n        (find-star-num-iter (- n 1) (+ i (* i 2)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 0)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find-star-num-iter n acc)\n    (if (= n 1)\n        acc\n        (find-star-num-iter (- n 1) (+ acc (* 2 n)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 (find_star_num_iter n (- i 1)))\n           (* 3 (find_star_num_iter n (- i 2))))))\n  (find_star_num_iter n n))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (cond ((= n 1) i)\n          ((= (modulo i n) 0) (find_star_num_iter (+ n 1) (+ i n)))\n          (else (find_star_num_iter (+ n 1) i))))\n  (find_star_num_iter 1 1))\n",
    "  (define (find_star_num_iter n star_num)\n    (if (= n 0)\n        star_num\n        (find_star_num_iter (- n 1) (+ star_num (* 2 n)))))\n  (find_star_num_iter n 0))\n",
    "  (if (= n 1)\n      5\n      (+ (* n 2) (find_star_num (- n 1)))))\n",
    "  (define (helper n acc)\n    (if (= n 1)\n        acc\n        (helper (- n 1) (+ acc (* 2 acc)))))\n  (helper n 1))\n"
  ]
}