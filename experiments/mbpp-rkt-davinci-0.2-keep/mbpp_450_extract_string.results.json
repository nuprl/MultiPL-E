{
  "name": "mbpp_450_extract_string",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(equal? (string-length (car l)) str) (cons (car l) (extract_string str (cdr l)))]\n        [else (extract_string str (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg46a4fy.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg46a4fy.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg46a4fy.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (car l) str) (cons (car l) (extract_string str (cdr l)))]\n    [else (extract_string str (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjorer8bl.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjorer8bl.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjorer8bl.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n        [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx7j562fl.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx7j562fl.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx7j562fl.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons str (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6dyffwjm.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6dyffwjm.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6dyffwjm.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n        [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx7j562fl.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx7j562fl.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx7j562fl.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (car l) str) (cons (car l) (extract_string str (cdr l)))]\n    [else (extract_string str (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjorer8bl.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjorer8bl.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjorer8bl.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (empty? l)\n      '()\n      (if (= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7bpfo85.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7bpfo85.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7bpfo85.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n        [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx7j562fl.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx7j562fl.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx7j562fl.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [else\n     (cond\n       [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n       [else (extract_string str (rest l))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3_vt3qi3.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3_vt3qi3.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3_vt3qi3.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n        [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4jtdf_q.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4jtdf_q.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4jtdf_q.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (null? l)\n      '()\n      (if (= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (null? l)\n      '()\n      (if (>= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqvijje9.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqvijje9.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxqvijje9.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (empty? l)\n      '()\n      (if (= (string-length (first l)) str)\n          (cons (first l) (extract_string str (rest l)))\n          (extract_string str (rest l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu85yff73.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu85yff73.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu85yff73.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond ((null? l) '())\n        ((string=? str (car l)) (cons (car l) (extract_string str (cdr l))))\n        (else (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptvbkmmbo.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptvbkmmbo.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptvbkmmbo.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (empty? l)\n      '()\n      (if (= (string-length (first l)) str)\n          (cons (first l) (extract_string str (rest l)))\n          (extract_string str (rest l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu85yff73.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu85yff73.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu85yff73.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond ((null? l) '())\n        ((string=? str (car l)) (cons (car l) (extract_string str (cdr l))))\n        (else (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptvbkmmbo.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptvbkmmbo.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptvbkmmbo.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(>= (string-length (car l)) str) (cons (car l) (extract_string str (cdr l)))]\n    [else (extract_string str (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplfexh438.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplfexh438.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplfexh438.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (empty? l)\n      '()\n      (if (= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7bpfo85.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7bpfo85.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7bpfo85.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) l)) str))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [else\n     (cond\n       [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n       [else (extract_string str (rest l))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [else\n     (cond\n       [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n       [else (extract_string str (rest l))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(string=? str (car l)) (cons (car l) (extract_string str (cdr l)))]\n        [else (extract_string str (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2zvdcztr.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2zvdcztr.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2zvdcztr.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n        [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "/tmp/tmpp424m88g.rkt:6:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpp424m88g.rkt:6:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [else\n     (cond\n       [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n       [else (extract_string str (rest l))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (car l)) str) (cons (car l) (extract_string str (cdr l)))]\n    [else (extract_string str (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gi2ybdh.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gi2ybdh.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gi2ybdh.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n        [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [else\n     (if (equal? (string-length (first l)) str)\n         (cons (first l) (extract_string str (rest l)))\n         (extract_string str (rest l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbvfu5th_.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbvfu5th_.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbvfu5th_.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n        [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (null? l)\n      '()\n      (if (= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond ((null? l) '())\n        ((= (string-length (car l)) str) (cons (car l) (extract_string str (cdr l))))\n        (else (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjw39wwp.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjw39wwp.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjw39wwp.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (null? l)\n      '()\n      (if (= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (null? l)\n      '()\n      (if (= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond ((null? l) '())\n        ((= (string-length (car l)) str) (cons (car l) (extract_string str (cdr l))))\n        (else (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjw39wwp.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjw39wwp.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprjw39wwp.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [else\n     (cond\n       [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n       [else (extract_string str (rest l))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6njxdtfs.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [else\n     (cond\n       [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n       [else (extract_string str (rest l))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3_vt3qi3.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3_vt3qi3.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3_vt3qi3.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (empty? l)\n      '()\n      (if (= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7bpfo85.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7bpfo85.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy7bpfo85.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (first l) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wgodo9c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (null? l)\n      '()\n      (if (= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? str (first l)) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma__f6gc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n        [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8b9ae20g.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (if (null? l)\n      '()\n      (if (= (string-length (car l)) str)\n          (cons (car l) (extract_string str (cdr l)))\n          (extract_string str (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzciqkzwg.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(equal? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx470jlkc.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(string=? (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9oyl7ktd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond\n    [(empty? l) empty]\n    [(= (string-length (first l)) str) (cons (first l) (extract_string str (rest l)))]\n    [else (extract_string str (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplhm0h3pj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (cond [(empty? l) empty]\n        [(equal? (string-length (car l)) str) (cons (car l) (extract_string str (cdr l)))]\n        [else (extract_string str (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509733,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg46a4fy.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg46a4fy.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg46a4fy.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n  (filter (lambda (x) (= (string-length x) str)) l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\"))\n    (check-equal? (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665509732,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:12:4\n\nfilter: contract violation\n  expected: list?\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:13:4\n\nfilter: contract violation\n  expected: list?\n  given: 6\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18kjqd7d.rkt:14:4\n\nfilter: contract violation\n  expected: list?\n  given: 9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}