{
  "name": "mbpp_618_div_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to divide two lists element wise.\n(define (div_list nums1 nums2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate div_list))\n    (check-equal? (candidate (list 4 5 6) (list 1 2 3)) (list 4.0 2.5 2.0))\n    (check-equal? (candidate (list 3 2) (list 1 4)) (list 3.0 0.5))\n    (check-equal? (candidate (list 90 120) (list 50 70)) (list 1.8 1.7142857142857142))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (map (lambda (x y) (/ x y)) nums1 nums2))\n",
    "  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (map (lambda (x y) (/ x y)) nums1 nums2))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (map (lambda (x y) (/ x y)) nums1 nums2))\n",
    "  (cond\n    [(empty? nums1) empty]\n    [(empty? nums2) empty]\n    [else (cons (/ (first nums1) (first nums2))\n                (div_list (rest nums1) (rest nums2)))]))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (map (lambda (x y) (/ x y)) nums1 nums2))\n",
    "  (if (or (null? nums1) (null? nums2))\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n",
    "  (if (null? nums1)\n      '()\n      (cons (/ (car nums1) (car nums2))\n            (div_list (cdr nums1) (cdr nums2)))))\n"
  ]
}