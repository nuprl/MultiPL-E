{
  "name": "mbpp_392_get_max_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n(define (get_max_sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_sum))\n    (check-equal? (candidate 60) 106)\n    (check-equal? (candidate 10) 12)\n    (check-equal? (candidate 2) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (max (+ (get_max_sum-iter (/ n 2))\n               (get_max_sum-iter (/ n 3))\n               (get_max_sum-iter (/ n 4))\n               (get_max_sum-iter (/ n 5)))\n            n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n (+ sum (max (+ (get_max_sum_iter n1 0)\n                                            (get_max_sum_iter n2 0)\n                                            (get_max_sum_iter n3 0)\n                                            (get_max_sum_iter n4 0))\n                                           n))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (quotient n 2)]\n             [n3 (quotient n 3)]\n             [n4 (quotient n 4)]\n             [n5 (quotient n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n</code>\nI am using a helper function to avoid the repeated calculations.\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (get_max_sum_iter (- n 5) (+ sum (get_max_sum_iter (/ n 5) 0)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get-max-sum-iter n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          ((= n 2) 2)\n          ((= n 3) 3)\n          ((= n 4) 4)\n          ((= n 5) 5)\n          (else (max (+ (get-max-sum-iter (/ n 2))\n                       (get-max-sum-iter (/ n 3))\n                       (get-max-sum-iter (/ n 4))\n                       (get-max-sum-iter (/ n 5)))\n                    n))))\n  (get-max-sum-iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [else (max (+ (get_max_sum-iter (/ n 2))\n                        (get_max_sum-iter (/ n 3))\n                        (get_max_sum-iter (/ n 4))\n                        (get-max-sum-iter (/ n 5)))\n                      n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum-iter (/ n 2))]\n             [n3 (get_max_sum-iter (/ n 3))]\n             [n4 (get_max_sum-iter (/ n 4))]\n             [n5 (get_max_sum-iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_helper (/ n 2))\n                        (get_max_sum_helper (/ n 3))\n                        (get_max_sum_helper (/ n 4))\n                        (get_max_sum_helper (/ n 5)))\n                     n)]))\n  (get_max_sum_helper n))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n    [else (max (+ (get_max_sum (/ n 2))\n                  (get_max_sum (/ n 3))\n                  (get_max_sum (/ n 4))\n                  (get_max_sum (/ n 5)))\n                n)]))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (max (+ (get_max_sum_iter (/ n 2))\n               (get_max_sum_iter (/ n 3))\n               (get_max_sum_iter (/ n 4))\n               (get_max_sum_iter (/ n 5)))\n            n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum-iter (/ n 2))]\n             [n3 (get_max_sum-iter (/ n 3))]\n             [n4 (get_max_sum-iter (/ n 4))]\n             [n5 (get_max_sum-iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (/ n 2)]\n             [b (/ n 3)]\n             [c (/ n 4)]\n             [d (/ n 5)])\n         (max (+ (get_max_sum_iter a)\n                 (get_max_sum_iter b)\n                 (get_max_sum_iter c)\n                 (get_max_sum_iter d))\n              n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (if (&lt; n 5)\n      n\n      (let ([n2 (quotient n 2)]\n            [n3 (quotient n 3)]\n            [n4 (quotient n 4)]\n            [n5 (quotient n 5)])\n        (let ([s2 (get_max_sum n2)]\n              [s3 (get_max_sum n3)]\n              [s4 (get_max_sum n4)]\n              [s5 (get_max_sum n5)])\n          (max (+ s2 s3 s4 s5) n)))))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n (+ sum (max (+ (get_max_sum_iter n1 0)\n                                            (get_max_sum_iter n2 0)\n                                            (get_max_sum_iter n3 0)\n                                            (get_max_sum_iter n4 0))\n                                           n))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n (+ sum (max (+ (get_max_sum_iter n1 0)\n                                            (get_max_sum_iter n2 0)\n                                            (get_max_sum_iter n3 0)\n                                            (get_max_sum_iter n4 0))\n                                           n))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let* ([n1 (quotient n 2)]\n              [n2 (quotient n 3)]\n              [n3 (quotient n 4)]\n              [n4 (quotient n 5)]\n              [s1 (get_max_sum_iter n1 0)]\n              [s2 (get_max_sum_iter n2 0)]\n              [s3 (get_max_sum_iter n3 0)]\n              [s4 (get_max_sum_iter n4 0)])\n         (max (+ sum n) (+ s1 s2 s3 s4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (get_max_sum-iter (/ n 2))]\n             [b (get_max_sum-iter (/ n 3))]\n             [c (get_max_sum-iter (/ n 4))]\n             [d (get_max_sum-iter (/ n 5))])\n         (max (+ a b c d) n))]))\n  (get_max-sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (let ([max-sum (max (+ (get_max_sum_helper n2)\n                                (get_max_sum_helper n3)\n                                (get_max_sum_helper n4)\n                                (get_max_sum_helper n5))\n                             n)])\n           max-sum))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(> n 0) (get_max_sum_iter (- n 1) (max (+ (get_max_sum_iter (/ n 2) 0)\n                                                (get_max_sum_iter (/ n 3) 0)\n                                                (get_max_sum_iter (/ n 4) 0)\n                                                (get_max_sum_iter (/ n 5) 0)\n                                                n)\n                                          acc))]\n      [else acc]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (/ n 2)])\n         (let ([n2 (/ n 3)])\n           (let ([n3 (/ n 4)])\n             (let ([n4 (/ n 5)])\n               (let ([s1 (get_max_sum-iter n1 0)])\n                 (let ([s2 (get_max_sum-iter n2 0)])\n                   (let ([s3 (get_max_sum-iter n3 0)])\n                     (let ([s4 (get_max_sum-iter n4 0)])\n                       (let ([s (+ s1 s2 s3 s4)])\n                         (if (&gt; s n)\n                             (get_max_sum-iter n s)\n                             (get_max_sum-iter n n))))))))))))))\n  (get_max_sum-iter n 0))\n</code>\nI am getting the following error:\n<code>get_max_sum.rkt:24:0: get_max_sum-iter: unbound identifier in module in: get-max-sum-iter\n</code>\nI am not sure what is wrong with the code.\n\n\nA:\n\nThe problem is that you're using <code>let</code> instead of <code>let*</code>.\n<code>let</code> is a parallel binding form, which means that all the bindings are made at the same time.  So, when you write\n<code>(let ([n1 (/ n 2)])\n  (let ([n2 (/ n 3)])\n    (let ([n3 (/ n 4)])\n      (let ([n4 (/ n 5)])\n        (let ([s1 (get_max_sum-iter n1 0)])\n          (let ([s2 (get_max_sum-iter n2 0)])\n            (let ([s3 (get_max_sum-iter n3 0",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond [(= n 0) 0]\n          [(< n 5) n]\n          [else (max (+ (get_max_sum_iter (/ n 2))\n                       (get_max_sum_iter (/ n 3))\n                       (get_max_sum_iter (/ n 4))\n                       (get_max_sum_iter (/ n 5)))\n                     n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          ((= n 2) 2)\n          ((= n 3) 3)\n          ((= n 4) 4)\n          ((= n 5) 5)\n          (else (max (+ (get_max_sum_iter (/ n 2))\n                       (get_max_sum_iter (/ n 3))\n                       (get_max_sum_iter (/ n 4))\n                       (get_max_sum_iter (/ n 5)))\n                    n))))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum-iter n2)\n                 (get_max_sum-iter n3)\n                 (get_max_sum-iter n4)\n                 (get_max_sum-iter n5))\n              n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum-iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(> n 0) (get_max_sum-iter (- n 1) (max max-sum (+ (get_max_sum (/ n 2)) (get_max_sum (/ n 3)) (get_max_sum (/ n 4)) (get_max_sum (/ n 5)))))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let* ([n1 (get_max_sum_iter (/ n 2))]\n              [n2 (get_max_sum_iter (/ n 3))]\n              [n3 (get_max_sum_iter (/ n 4))]\n              [n4 (get_max_sum_iter (/ n 5))]\n              [sum (+ n1 n2 n3 n4)])\n         (if (&gt; sum n) sum n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_helper n1 (+ sum n1))\n         (get_max_sum_helper n2 (+ sum n2))\n         (get_max_sum_helper n3 (+ sum n3))\n         (get_max_sum_helper n4 (+ sum n4)))]))\n  (get_max_sum_helper n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (get_max_sum_iter (/ n 2))]\n             [b (get_max_sum_iter (/ n 3))]\n             [c (get_max_sum_iter (/ n 4))]\n             [d (get_max_sum_iter (/ n 5))])\n         (max (+ a b c d) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum_iter n2) (get_max_sum_iter n3) (get_max_sum_iter n4) (get_max_sum_iter n5)) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter (/ n 2) 0) (get_max_sum_iter (/ n 3) 0) (get_max_sum_iter (/ n 4) 0) (get_max_sum_iter (/ n 5) 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((&lt; n 0) sum)\n          (else (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter (/ n 2) 0) (get_max_sum_iter (/ n 3) 0) (get_max_sum_iter (/ n 4) 0) (get_max_sum_iter (/ n 5) 0))))))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let* ([n2 (/ n 2)]\n              [n3 (/ n 3)]\n              [n4 (/ n 4)]\n              [n5 (/ n 5)]\n              [n2-sum (get_max_sum-iter n2)]\n              [n3-sum (get_max_sum-iter n3)]\n              [n4-sum (get_max_sum-iter n4)]\n              [n5-sum (get_max_sum-iter n5)]\n              [sum (+ n2-sum n3-sum n4-sum n5-sum)])\n         (if (&gt; sum n) sum n))]))\n  (get_max-sum-iter n))\n</code>\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([sum1 (get_max_sum_iter (/ n 2) 0)]\n             [sum2 (get_max_sum_iter (/ n 3) 0)]\n             [sum3 (get_max_sum_iter (/ n 4) 0)]\n             [sum4 (get_max_sum_iter (/ n 5) 0)])\n         (max sum1 sum2 sum3 sum4))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (max\n        (+ (get_max_sum_helper (/ n 2))\n           (get_max_sum_helper (/ n 3))\n           (get_max_sum_helper (/ n 4))\n           (get_max_sum_helper (/ n 5)))\n        n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2)) (get_max_sum_helper (/ n 3)) (get_max_sum_helper (/ n 4)) (get_max_sum_helper (/ n 5))) n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (add1 acc)]\n      [(= n 2) (add1 (add1 acc))]\n      [(= n 3) (add1 (add1 (add1 acc)))]\n      [(= n 4) (add1 (add1 (add1 (add1 acc))))]\n      [(= n 5) (add1 (add1 (add1 (add1 (add1 acc)))))]\n      [else (get_max_sum-iter n (add1 acc))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let* ([n1 (/ n 2)]\n              [n2 (/ n 3)]\n              [n3 (/ n 4)]\n              [n4 (/ n 5)]\n              [sum1 (+ sum n1)]\n              [sum2 (+ sum n2)]\n              [sum3 (+ sum n3)]\n              [sum4 (+ sum n4)])\n         (max (get_max_sum_iter n1 sum1)\n              (get_max_sum_iter n2 sum2)\n              (get_max_sum_iter n3 sum3)\n              (get_max_sum_iter n4 sum4)\n              n))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (let ([max-sum (+ (get_max_sum_iter n2)\n                           (get_max_sum_iter n3)\n                           (get_max_sum_iter n4)\n                           (get_max_sum_iter n5))])\n           (if (&gt; max-sum n)\n               max-sum\n               n)))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let* ([n1 (quotient n 2)]\n              [n2 (quotient n 3)]\n              [n3 (quotient n 4)]\n              [n4 (quotient n 5)]\n              [sum1 (get_max_sum_iter n1 0)]\n              [sum2 (get_max_sum_iter n2 0)]\n              [sum3 (get_max_sum_iter n3 0)]\n              [sum4 (get_max_sum_iter n4 0)])\n         (max (+ sum sum1 sum2 sum3 sum4) n))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (max (+ (get_max_sum_helper (/ n 2))\n               (get_max_sum_helper (/ n 3))\n               (get_max_sum_helper (/ n 4))\n               (get_max_sum_helper (/ n 5)))\n            n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (max (+ (get_max_sum_helper n1)\n                 (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (define n2 (get_max_sum_helper (/ n 2)))\n       (define n3 (get_max_sum_helper (/ n 3)))\n       (define n4 (get_max_sum_helper (/ n 4)))\n       (define n5 (get_max_sum_helper (/ n 5)))\n       (define max_sum (+ n2 n3 n4 n5))\n       (if (&gt; max_sum n) max_sum n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum-iter (/ n 2))]\n             [n3 (get_max_sum-iter (/ n 3))]\n             [n4 (get_max_sum-iter (/ n 4))]\n             [n5 (get_max_sum-iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get-max-sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get-max-sum-iter (/ n 2))\n                    (get-max-sum-iter (/ n 3))\n                    (get-max-sum-iter (/ n 4))\n                    (get-max-sum-iter (/ n 5)))\n                  n)]))\n  (get-max-sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (max (+ (get_max_sum_helper (/ n 2))\n               (get_max_sum_helper (/ n 3))\n               (get_max_sum_helper (/ n 4))\n               (get_max_sum_helper (/ n 5)))\n            n)]))\n  (get_max_sum_helper n))\n</code>\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let* ([n1 (/ n 2)]\n              [n2 (/ n 3)]\n              [n3 (/ n 4)]\n              [n4 (/ n 5)]\n              [sum1 (+ sum n1)]\n              [sum2 (+ sum n2)]\n              [sum3 (+ sum n3)]\n              [sum4 (+ sum n4)]\n              [sum5 (+ sum n)])\n         (max (get_max_sum_iter n1 sum1)\n              (get_max_sum_iter n2 sum2)\n              (get_max_sum_iter n3 sum3)\n              (get_max_sum_iter n4 sum4)\n              sum5))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else\n           (let ([n1 (get_max_sum_helper (/ n 2))]\n                 [n2 (get_max_sum_helper (/ n 3))]\n                 [n3 (get_max_sum_helper (/ n 4))]\n                 [n4 (get_max_sum_helper (/ n 5))])\n             (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n1 (+ sum (get_max_sum n1)))\n         (get_max_sum_iter n2 (+ sum (get_max_sum n2)))\n         (get_max_sum_iter n3 (+ sum (get_max_sum n3)))\n         (get_max_sum_iter n4 (+ sum (get_max_sum n4))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((&lt; n 0) 0)\n          (else (let ((sum1 (+ sum (get_max_sum_iter (/ n 2) 0)))\n                      (sum2 (+ sum (get_max_sum_iter (/ n 3) 0)))\n                      (sum3 (+ sum (get_max_sum_iter (/ n 4) 0)))\n                      (sum4 (+ sum (get_max_sum_iter (/ n 5) 0))))\n                 (max sum1 sum2 sum3 sum4)))))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2)) (get_max_sum_helper (/ n 3)) (get_max_sum_helper (/ n 4)) (get_max_sum_helper (/ n 5))) n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get-max-sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get-max-sum-iter (/ n 2))\n                    (get-max-sum-iter (/ n 3))\n                    (get-max-sum-iter (/ n 4))\n                    (get-max-sum-iter (/ n 5)))\n                  n)]))\n  (get-max-sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let* ([n2 (/ n 2)]\n              [n3 (/ n 3)]\n              [n4 (/ n 4)]\n              [n5 (/ n 5)]\n              [f2 (get_max_sum_helper n2)]\n              [f3 (get_max_sum_helper n3)]\n              [f4 (get_max_sum_helper n4)]\n              [f5 (get_max_sum_helper n5)])\n         (max (+ f2 f3 f4 f5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n result)\n    (cond\n      [(= n 0) result]\n      [(= n 1) (+ result 1)]\n      [else\n       (let* ([n2 (/ n 2)]\n              [n3 (/ n 3)]\n              [n4 (/ n 4)]\n              [n5 (/ n 5)]\n              [max-sum (max (+ (get_max_sum_iter n2 0)\n                               (get_max_sum_iter n3 0)\n                               (get_max_sum_iter n4 0)\n                               (get_max_sum_iter n5 0))\n                           n)])\n         (get_max_sum_iter (- n 1) (+ result max-sum)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (add1 acc)]\n      [(= n 2) (add1 (add1 acc))]\n      [(= n 3) (add1 (add1 (add1 acc)))]\n      [(= n 4) (add1 (add1 (add1 (add1 acc))))]\n      [else\n       (let* ([n1 (quotient n 2)]\n              [n2 (quotient n 3)]\n              [n3 (quotient n 4)]\n              [n4 (quotient n 5)])\n         (get_max_sum_iter (+ n1 n2 n3 n4) (add1 acc)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(> n 0)\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max-sum-iter (- n 1)\n                           (max sum\n                                (+ (get_max_sum-iter n1 0)\n                                   (get_max_sum-iter n2 0)\n                                   (get_max_sum-iter n3 0)\n                                   (get_max_sum-iter n4 0))))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n1 (+ sum (get_max_sum_iter n1 0)))\n         (get_max_sum_iter n2 (+ sum (get_max_sum_iter n2 0)))\n         (get_max_sum_iter n3 (+ sum (get_max_sum_iter n3 0)))\n         (get_max_sum_iter n4 (+ sum (get_max_sum_iter n4 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond [(= n 0) sum]\n          [(= n 1) (+ sum 1)]\n          [(= n 2) (+ sum 2)]\n          [(= n 3) (+ sum 3)]\n          [(= n 4) (+ sum 4)]\n          [(&gt; n 4) (get_max_sum_iter (- n 1) (+ sum n))]))\n  (get_max_sum_iter n 0))\n</code>\nI am trying to implement the above function using tail recursion. But I am not able to do so. Can someone please help me with this?\n\n\nA:\n\nYour function is not tail recursive because the recursive call is not the last thing that happens. \n<code>(get_max_sum_iter (- n 1) (+ sum n))\n</code>\nThe <code>+</code> call is not tail recursive.\nYou can rewrite it like this:\n<code>(define (get_max_sum n)\n  (define (get_max_sum_iter n sum)\n    (cond [(= n 0) sum]\n          [(= n 1) (+ sum 1)]\n          [(= n 2) (+ sum 2)]\n          [(= n 3) (+ sum 3)]\n          [(= n 4) (+ sum 4)]\n          [(&gt; n 4) (get_max_sum_iter (- n 1) (+ sum n))]))\n  (get_max_sum_iter n 0))\n</code>\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n acc)\n    (cond [(= n 0) acc]\n          [(= n 1) (+ acc 1)]\n          [(= n 2) (+ acc 2)]\n          [(= n 3) (+ acc 3)]\n          [(= n 4) (+ acc 4)]\n          [(= n 5) (+ acc 5)]\n          [else (get_max_sum_iter (- n 1) (+ acc (get_max_sum_iter (/ n 2) 0) (get_max_sum_iter (/ n 3) 0) (get_max_sum_iter (/ n 4) 0) (get_max_sum_iter (/ n 5) 0)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n sum)\n    (if (&lt;= n 0)\n        sum\n        (get_max_sum-iter (- n 1) (+ sum (max (get_max_sum-iter (/ n 2) 0)\n                                             (get_max_sum-iter (/ n 3) 0)\n                                             (get_max_sum-iter (/ n 4) 0)\n                                             (get_max_sum-iter (/ n 5) 0)\n                                             n)))))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (let ([s1 (+ (get_max_sum_helper n1)\n                      (get_max_sum_helper n2)\n                      (get_max_sum_helper n3)\n                      (get_max_sum_helper n4))])\n           (if (> s1 n)\n               s1\n               n)))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get-max-sum-helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get-max-sum-helper (/ n 2))\n                    (get-max-sum-helper (/ n 3))\n                    (get-max-sum-helper (/ n 4))\n                    (get-max-sum-helper (/ n 5)))\n                  n)]))\n  (get-max-sum-helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (define n2 (/ n 2))\n       (define n3 (/ n 3))\n       (define n4 (/ n 4))\n       (define n5 (/ n 5))\n       (define sum (+ (get_max_sum_helper n2)\n                      (get_max_sum_helper n3)\n                      (get_max_sum_helper n4)\n                      (get_max_sum_helper n5)))\n       (if (&gt; sum n) sum n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (/ n 2)]\n             [b (/ n 3)]\n             [c (/ n 4)]\n             [d (/ n 5)])\n         (max (+ (get_max_sum_iter a) (get_max_sum_iter b) (get_max_sum_iter c) (get_max_sum_iter d)) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (define v1 (/ n 2))\n       (define v2 (/ n 3))\n       (define v3 (/ n 4))\n       (define v4 (/ n 5))\n       (define v5 n)\n       (define s1 (+ (get_max_sum-iter v1) (get_max_sum-iter v2) (get_max_sum-iter v3) (get_max_sum-iter v4)))\n       (if (&gt; s1 v5) s1 v5)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (/ n 2)]\n             [b (/ n 3)]\n             [c (/ n 4)]\n             [d (/ n 5)])\n         (+ (get_max_sum_helper a)\n            (get_max_sum_helper b)\n            (get_max_sum_helper c)\n            (get_max_sum_helper d)))]))\n  (let ([a (/ n 2)]\n        [b (/ n 3)]\n        [c (/ n 4)]\n        [d (/ n 5)])\n    (max (+ (get_max_sum_helper a)\n            (get_max_sum_helper b)\n            (get_max_sum_helper c)\n            (get_max_sum_helper d))\n         n)))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (get_max_sum_helper (/ n 2))]\n             [b (get_max_sum_helper (/ n 3))]\n             [c (get_max_sum_helper (/ n 4))]\n             [d (get_max_sum_helper (/ n 5))])\n         (max (+ a b c d) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [(< n 0) sum]\n      [else\n       (get_max_sum_helper (- n 1) (+ sum (get_max_sum_helper (/ n 2) 0) (get_max_sum_helper (/ n 3) 0) (get_max_sum_helper (/ n 4) 0) (get_max_sum_helper (/ n 5) 0)))]))\n  (get_max_sum_helper n 0))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (helper (/ n 2)) (helper (/ n 3)) (helper (/ n 4)) (helper (/ n 5))) n)]))\n  (helper n))\n",
    "  (define (get_max_sum_iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(= n 1) (max max-sum 1)]\n      [(= n 2) (max max-sum 2)]\n      [(= n 3) (max max-sum 3)]\n      [(= n 4) (max max-sum 4)]\n      [(= n 5) (max max-sum 5)]\n      [else\n       (get_max_sum_iter (- n 1)\n                          (max max-sum\n                               (+ (get_max_sum_iter (/ n 2) 0)\n                                  (get_max_sum_iter (/ n 3) 0)\n                                  (get_max_sum_iter (/ n 4) 0)\n                                  (get_max_sum_iter (/ n 5) 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get-max-sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get-max-sum-iter n2)\n                 (get-max-sum-iter n3)\n                 (get-max-sum-iter n4)\n                 (get-max-sum-iter n5))\n              n))]))\n  (get-max-sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (if (&lt; n 1)\n        sum\n        (get_max_sum_iter (- n 1) (+ sum (max (get_max_sum_iter (/ n 2) 0)\n                                             (get_max_sum_iter (/ n 3) 0)\n                                             (get_max_sum_iter (/ n 4) 0)\n                                             (get_max_sum_iter (/ n 5) 0)\n                                             n)))))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2)) (get_max_sum_iter (/ n 3)) (get_max_sum_iter (/ n 4)) (get_max_sum_iter (/ n 5))) n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (max (+ (get_max_sum_iter n1)\n                 (get_max_sum_iter n2)\n                 (get_max_sum_iter n3)\n                 (get_max_sum_iter n4))\n              n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (let ([max-sum (+ (get_max_sum_helper n2)\n                           (get_max_sum_helper n3)\n                           (get_max_sum_helper n4)\n                           (get_max_sum_helper n5))])\n           (if (&gt; max-sum n)\n               max-sum\n               n)))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (max (+ (get_max_sum_helper n1)\n                 (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          ((= n 2) 2)\n          ((= n 3) 3)\n          ((= n 4) 4)\n          ((= n 5) 5)\n          (else (max (+ (get_max_sum_helper (/ n 2))\n                       (get_max_sum_helper (/ n 3))\n                       (get_max_sum_helper (/ n 4))\n                       (get_max_sum_helper (/ n 5)))\n                     n))))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (define n2 (/ n 2))\n       (define n3 (/ n 3))\n       (define n4 (/ n 4))\n       (define n5 (/ n 5))\n       (define sum (+ (get_max_sum_helper n2)\n                      (get_max_sum_helper n3)\n                      (get_max_sum_helper n4)\n                      (get_max_sum_helper n5)))\n       (if (&gt; sum n) sum n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(> n 0) (get_max_sum_iter (- n 1) (+ max-sum (get_max_sum_iter (quotient n 2) 0) (get_max_sum_iter (quotient n 3) 0) (get_max_sum_iter (quotient n 4) 0) (get_max_sum_iter (quotient n 5) 0)))]\n      [else max-sum]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get-max-sum-helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get-max-sum-helper (/ n 2))\n                    (get-max-sum-helper (/ n 3))\n                    (get-max-sum-helper (/ n 4))\n                    (get-max-sum-helper (/ n 5)))\n                  n)]))\n  (get-max-sum-helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(> n 0)\n       (let* ([n2 (quotient n 2)]\n              [n3 (quotient n 3)]\n              [n4 (quotient n 4)]\n              [n5 (quotient n 5)]\n              [sum2 (+ sum (get_max_sum_iter n2 0))]\n              [sum3 (+ sum (get_max_sum_iter n3 0))]\n              [sum4 (+ sum (get_max_sum_iter n4 0))]\n              [sum5 (+ sum (get_max_sum_iter n5 0))])\n         (if (> (max sum2 sum3 sum4 sum5) n)\n             (max sum2 sum3 sum4 sum5)\n             n))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (add1 sum)]\n      [(= n 2) (add1 (add1 sum))]\n      [(= n 3) (add1 (add1 (add1 sum)))]\n      [(= n 4) (add1 (add1 (add1 (add1 sum))))]\n      [else\n       (let ([a (get_max_sum-iter (quotient n 2) sum)]\n             [b (get_max_sum-iter (quotient n 3) sum)]\n             [c (get_max_sum-iter (quotient n 4) sum)]\n             [d (get_max_sum-iter (quotient n 5) sum)])\n         (max (max (max a b) c) d))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond [(= n 0) 0]\n          [(< n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_helper (/ n 2))\n                        (get_max_sum_helper (/ n 3))\n                        (get_max_sum_helper (/ n 4))\n                        (get_max_sum_helper (/ n 5)))\n                      n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_iter (/ n 2))\n                        (get_max_sum_iter (/ n 3))\n                        (get_max_sum_iter (/ n 4))\n                        (get_max_sum_iter (/ n 5)))\n                     n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max-sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([a (get_max_sum_helper (/ n 2))]\n             [b (get_max_sum_helper (/ n 3))]\n             [c (get_max_sum_helper (/ n 4))]\n             [d (get_max_sum_helper (/ n 5))])\n         (max (+ a b c d) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum-iter n2)\n                 (get_max_sum-iter n3)\n                 (get_max_sum-iter n4)\n                 (get_max_sum-iter n5))\n              n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(> n 0)\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter (- n 1)\n                           (max sum\n                                (+ (get_max_sum_iter n1 0)\n                                   (get_max_sum_iter n2 0)\n                                   (get_max_sum_iter n3 0)\n                                   (get_max_sum_iter n4 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (let ([s1 (+ (get_max_sum_helper n1) (get_max_sum_helper n2) (get_max_sum_helper n3) (get_max_sum_helper n4))])\n           (if (&gt; s1 n)\n               s1\n               n)))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let* ([n1 (quotient n 2)]\n              [n2 (quotient n 3)]\n              [n3 (quotient n 4)]\n              [n4 (quotient n 5)]\n              [sum1 (+ sum (get_max_sum_iter n1 0))]\n              [sum2 (+ sum (get_max_sum_iter n2 0))]\n              [sum3 (+ sum (get_max_sum_iter n3 0))]\n              [sum4 (+ sum (get_max_sum_iter n4 0))])\n         (max sum1 sum2 sum3 sum4))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (max (+ (get_max_sum_helper (/ n 2))\n               (get_max_sum_helper (/ n 3))\n               (get_max_sum_helper (/ n 4))\n               (get_max_sum_helper (/ n 5)))\n            n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let*\n           ([n1 (get_max_sum-iter (/ n 2))]\n            [n2 (get_max_sum-iter (/ n 3))]\n            [n3 (get_max_sum-iter (/ n 4))]\n            [n4 (get_max_sum-iter (/ n 5))]\n            [max-sum (+ n1 n2 n3 n4)])\n         (if (&gt; max-sum n)\n             max-sum\n             n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get-max-sum-helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get-max-sum-helper (/ n 2))\n                    (get-max-sum-helper (/ n 3))\n                    (get-max-sum-helper (/ n 4))\n                    (get-max-sum-helper (/ n 5)))\n                  n)]))\n  (get-max-sum-helper n))\n",
    "  (define (get_max_sum_iter n)\n    (if (&lt; n 0)\n        0\n        (let ((n2 (/ n 2))\n              (n3 (/ n 3))\n              (n4 (/ n 4))\n              (n5 (/ n 5)))\n          (max n\n               (+ (get_max_sum_iter n2)\n                  (get_max_sum_iter n3)\n                  (get_max_sum_iter n4)\n                  (get_max_sum_iter n5))))))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_iter (/ n 2))]\n             [n3 (get_max_sum_iter (/ n 3))]\n             [n4 (get_max_sum_iter (/ n 4))]\n             [n5 (get_max_sum_iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(= n 1) (+ acc 1)]\n      [(= n 2) (+ acc 2)]\n      [(= n 3) (+ acc 3)]\n      [(= n 4) (+ acc 4)]\n      [else\n       (let*\n           ([n1 (/ n 2)]\n            [n2 (/ n 3)]\n            [n3 (/ n 4)]\n            [n4 (/ n 5)])\n         (get_max_sum_iter n1 (+ acc (get_max_sum_iter n1 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (if (&lt; n 0)\n      0\n      (let ([n2 (/ n 2)]\n            [n3 (/ n 3)]\n            [n4 (/ n 4)]\n            [n5 (/ n 5)])\n        (let ([max-sum (max (+ (get_max_sum n2)\n                               (get_max_sum n3)\n                               (get_max_sum n4)\n                               (get_max_sum n5))\n                           n)])\n          max-sum))))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([a (/ n 2)]\n             [b (/ n 3)]\n             [c (/ n 4)]\n             [d (/ n 5)])\n         (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter a 0) (get_max_sum_iter b 0) (get_max_sum_iter c 0) (get_max_sum_iter d 0))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (quotient n 2)]\n             [n2 (quotient n 3)]\n             [n3 (quotient n 4)]\n             [n4 (quotient n 5)])\n         (let ([s1 (get_max_sum_iter n1 sum)]\n               [s2 (get_max_sum_iter n2 sum)]\n               [s3 (get_max_sum_iter n3 sum)]\n               [s4 (get_max_sum_iter n4 sum)])\n           (let ([max-sum (max s1 (max s2 (max s3 s4)))])\n             (if (&gt; max-sum n)\n                 max-sum\n                 n)))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get-max-sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let* ([n2 (/ n 2)]\n              [n3 (/ n 3)]\n              [n4 (/ n 4)]\n              [n5 (/ n 5)])\n         (max (+ (get-max-sum-iter n2) (get-max-sum-iter n3) (get-max-sum-iter n4) (get-max-sum-iter n5)) n))]))\n  (get-max-sum-iter n))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n    [else (max (+ (get_max_sum (/ n 2)) (get_max_sum (/ n 3)) (get_max_sum (/ n 4)) (get_max_sum (/ n 5))) n)]))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else (get_max_sum_iter (- n 5) (+ sum (get_max_sum_iter (/ n 2) 0) (get_max_sum_iter (/ n 3) 0) (get_max_sum_iter (/ n 4) 0) (get_max_sum_iter (/ n 5) 0)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let* ([n2 (quotient n 2)]\n              [n3 (quotient n 3)]\n              [n4 (quotient n 4)]\n              [n5 (quotient n 5)]\n              [sum1 (+ (get_max_sum-iter n2)\n                       (get_max_sum-iter n3)\n                       (get_max_sum-iter n4)\n                       (get_max_sum-iter n5))]\n              [sum2 n])\n         (if (> sum1 sum2) sum1 sum2))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum-iter (/ n 2))]\n             [n2 (get_max_sum-iter (/ n 3))]\n             [n3 (get_max_sum-iter (/ n 4))]\n             [n4 (get_max_sum-iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max-sum-iter n))\n",
    "  (define (get_max_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([sum1 (+ sum (/ n 2))]\n             [sum2 (+ sum (/ n 3))]\n             [sum3 (+ sum (/ n 4))]\n             [sum4 (+ sum (/ n 5))])\n         (max (get_max_sum-iter (/ n 2) sum1)\n              (get_max_sum-iter (/ n 3) sum2)\n              (get_max_sum-iter (/ n 4) sum3)\n              (get_max_sum-iter (/ n 5) sum4)\n              n))]))\n  (get_max_sum-iter n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((&lt; n 0) sum)\n          (else (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter (/ n 2) 0) (get_max_sum_iter (/ n 3) 0) (get_max_sum_iter (/ n 4) 0) (get_max_sum_iter (/ n 5) 0))))))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let* ([n2 (quotient n 2)]\n              [n3 (quotient n 3)]\n              [n4 (quotient n 4)]\n              [n5 (quotient n 5)]\n              [sum2 (get_max_sum_helper n2)]\n              [sum3 (get_max_sum_helper n3)]\n              [sum4 (get_max_sum_helper n4)]\n              [sum5 (get_max_sum_helper n5)])\n         (max (+ sum2 sum3 sum4 sum5) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum-iter n2)\n                 (get_max_sum-iter n3)\n                 (get_max_sum-iter n4)\n                 (get_max_sum-iter n5))\n              n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((&lt; n 0) 0)\n          (else (get_max_sum_iter (- n 1) (+ sum (get_max_sum_iter (/ n 2) 0) (get_max_sum_iter (/ n 3) 0) (get_max_sum_iter (/ n 4) 0) (get_max_sum_iter (/ n 5) 0)))))\n    (get_max_sum_iter n 0))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n  arguments...:\n   0\n</code>\nI am not sure what is wrong with the code.\n\n\nA:\n\nThe problem is that you're trying to add the result of calling <code>get_max_sum_iter</code> to 0, which is not a procedure. You need to call <code>get_max_sum_iter</code> with the correct arguments, like this:\n<code>(+ sum\n   (get_max_sum_iter (/ n 2) 0)\n   (get_max_sum_iter (/ n 3) 0)\n   (get_max_sum_iter (/ n 4) 0)\n   (get_max_sum_iter (/ n 5) 0))\n</code>\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (/ n 2)]\n             [n3 (/ n 3)]\n             [n4 (/ n 4)]\n             [n5 (/ n 5)])\n         (max (+ (get_max_sum-iter n2)\n                 (get_max_sum-iter n3)\n                 (get_max_sum-iter n4)\n                 (get_max_sum-iter n5))\n              n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(zero? n) 0]\n      [(< n 5) n]\n      [else (max (get_max_sum-iter (/ n 2))\n                 (get_max_sum-iter (/ n 3))\n                 (get_max_sum-iter (/ n 4))\n                 (get_max_sum-iter (/ n 5))\n                 n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum_helper (/ n 2))]\n             [n3 (get_max_sum_helper (/ n 3))]\n             [n4 (get_max_sum_helper (/ n 4))]\n             [n5 (get_max_sum_helper (/ n 5))])\n         (max (max (max n2 n3) n4) n5))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (define n2 (/ n 2))\n       (define n3 (/ n 3))\n       (define n4 (/ n 4))\n       (define n5 (/ n 5))\n       (define sum (+ (get_max_sum_helper n2)\n                      (get_max_sum_helper n3)\n                      (get_max_sum_helper n4)\n                      (get_max_sum_helper n5)))\n       (if (&gt; sum n) sum n)]))\n  (get_max_sum_helper n))\n</code>\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (max (+ (get_max_sum_iter n1)\n                 (get_max_sum_iter n2)\n                 (get_max_sum_iter n3)\n                 (get_max_sum_iter n4))\n              n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let* ([n1 (quotient n 2)]\n              [n2 (quotient n 3)]\n              [n3 (quotient n 4)]\n              [n4 (quotient n 5)]\n              [sum1 (get_max_sum_iter n1 0)]\n              [sum2 (get_max_sum_iter n2 0)]\n              [sum3 (get_max_sum_iter n3 0)]\n              [sum4 (get_max_sum_iter n4 0)])\n         (max (+ sum sum1 sum2 sum3 sum4) n))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (max (+ (get_max_sum-iter n1)\n                 (get_max_sum-iter n2)\n                 (get_max_sum-iter n3)\n                 (get_max_sum-iter n4))\n              n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond ((= n 0) 0)\n          ((&lt; n 5) n)\n          ((&lt; n 10) (+ (get_max_sum_iter (/ n 2)) (get_max_sum_iter (/ n 3)) (get_max_sum_iter (/ n 4)) (get_max_sum_iter (/ n 5))))\n          (else n)))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_iter n max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(= n 1) (max max-sum 1)]\n      [(= n 2) (max max-sum 2)]\n      [(= n 3) (max max-sum 3)]\n      [(= n 4) (max max-sum 4)]\n      [(= n 5) (max max-sum 5)]\n      [else\n       (get_max_sum_iter (- n 1) (max max-sum (+ (get_max_sum (/ n 2)) (get_max_sum (/ n 3)) (get_max_sum (/ n 4)) (get_max_sum (/ n 5)))))\n       ]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n1 (+ sum n1))\n         (get_max_sum_iter n2 (+ sum n2))\n         (get_max_sum_iter n3 (+ sum n3))\n         (get_max_sum_iter n4 (+ sum n4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2) 0)]\n             [n2 (get_max_sum_iter (/ n 3) 0)]\n             [n3 (get_max_sum_iter (/ n 4) 0)]\n             [n4 (get_max_sum_iter (/ n 5) 0)])\n         (max (+ sum n) (+ sum n1 n2 n3 n4)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum-iter (/ n 2))\n                    (get_max_sum-iter (/ n 3))\n                    (get_max_sum-iter (/ n 4))\n                    (get_max_sum-iter (/ n 5)))\n                  n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n"
  ]
}