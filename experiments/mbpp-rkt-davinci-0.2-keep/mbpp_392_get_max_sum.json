{
  "name": "mbpp_392_get_max_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n(define (get_max_sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_sum))\n    (check-equal? (candidate 60) 106)\n    (check-equal? (candidate 10) 12)\n    (check-equal? (candidate 2) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (max (+ (get_max_sum-iter (/ n 2))\n               (get_max_sum-iter (/ n 3))\n               (get_max_sum-iter (/ n 4))\n               (get_max_sum-iter (/ n 5)))\n            n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (let ([n1 (/ n 2)]\n             [n2 (/ n 3)]\n             [n3 (/ n 4)]\n             [n4 (/ n 5)])\n         (get_max_sum_iter n (+ sum (max (+ (get_max_sum_iter n1 0)\n                                            (get_max_sum_iter n2 0)\n                                            (get_max_sum_iter n3 0)\n                                            (get_max_sum_iter n4 0))\n                                           n))))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (quotient n 2)]\n             [n3 (quotient n 3)]\n             [n4 (quotient n 4)]\n             [n5 (quotient n 5)])\n         (max (+ (get_max_sum_helper n2)\n                 (get_max_sum_helper n3)\n                 (get_max_sum_helper n4)\n                 (get_max_sum_helper n5))\n              n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [else\n       (let ([n1 (get_max_sum_iter (/ n 2))]\n             [n2 (get_max_sum_iter (/ n 3))]\n             [n3 (get_max_sum_iter (/ n 4))]\n             [n4 (get_max_sum_iter (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n</code>\nI am using a helper function to avoid the repeated calculations.\n",
    "  (define (get_max_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [(= n 1) (+ sum 1)]\n      [(= n 2) (+ sum 2)]\n      [(= n 3) (+ sum 3)]\n      [(= n 4) (+ sum 4)]\n      [(= n 5) (+ sum 5)]\n      [else\n       (get_max_sum_iter (- n 5) (+ sum (get_max_sum_iter (/ n 5) 0)))]))\n  (get_max_sum_iter n 0))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get-max-sum-iter n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          ((= n 2) 2)\n          ((= n 3) 3)\n          ((= n 4) 4)\n          ((= n 5) 5)\n          (else (max (+ (get-max-sum-iter (/ n 2))\n                       (get-max-sum-iter (/ n 3))\n                       (get-max-sum-iter (/ n 4))\n                       (get-max-sum-iter (/ n 5)))\n                    n))))\n  (get-max-sum-iter n))\n",
    "  (define (get_max_sum-iter n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [else (max (+ (get_max_sum-iter (/ n 2))\n                        (get_max_sum-iter (/ n 3))\n                        (get_max_sum-iter (/ n 4))\n                        (get-max-sum-iter (/ n 5)))\n                      n)]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n1 (get_max_sum_helper (/ n 2))]\n             [n2 (get_max_sum_helper (/ n 3))]\n             [n3 (get_max_sum_helper (/ n 4))]\n             [n4 (get_max_sum_helper (/ n 5))])\n         (max (+ n1 n2 n3 n4) n))]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum-iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else\n       (let ([n2 (get_max_sum-iter (/ n 2))]\n             [n3 (get_max_sum-iter (/ n 3))]\n             [n4 (get_max_sum-iter (/ n 4))]\n             [n5 (get_max_sum-iter (/ n 5))])\n         (max (+ n2 n3 n4 n5) n))]))\n  (get_max_sum-iter n))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_helper n)\n    (cond [(= n 0) 0]\n          [(= n 1) 1]\n          [(= n 2) 2]\n          [(= n 3) 3]\n          [(= n 4) 4]\n          [(= n 5) 5]\n          [else (max (+ (get_max_sum_helper (/ n 2))\n                        (get_max_sum_helper (/ n 3))\n                        (get_max_sum_helper (/ n 4))\n                        (get_max_sum_helper (/ n 5)))\n                     n)]))\n  (get_max_sum_helper n))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n    [else (max (+ (get_max_sum (/ n 2))\n                  (get_max_sum (/ n 3))\n                  (get_max_sum (/ n 4))\n                  (get_max_sum (/ n 5)))\n                n)]))\n",
    "  (define (get_max_sum_helper n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [(= n 5) 5]\n      [else (max (+ (get_max_sum_helper (/ n 2))\n                    (get_max_sum_helper (/ n 3))\n                    (get_max_sum_helper (/ n 4))\n                    (get_max_sum_helper (/ n 5)))\n                  n)]))\n  (get_max_sum_helper n))\n",
    "  (define (get_max_sum_iter n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) 1]\n      [(= n 2) 2]\n      [(= n 3) 3]\n      [(= n 4) 4]\n      [else (max (+ (get_max_sum_iter (/ n 2))\n                    (get_max_sum_iter (/ n 3))\n                    (get_max_sum_iter (/ n 4))\n                    (get_max_sum_iter (/ n 5)))\n                  n)]))\n  (get_max_sum_iter n))\n"
  ]
}