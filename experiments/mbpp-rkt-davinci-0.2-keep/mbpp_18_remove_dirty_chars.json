{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove characters from the first string which are present in the second string.\n(define (remove_dirty_chars string second_string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_dirty_chars))\n    (check-equal? (candidate \"probasscurve\" \"pros\") \"bacuve\")\n    (check-equal? (candidate \"digitalindia\" \"talent\") \"digiidi\")\n    (check-equal? (candidate \"exoticmiles\" \"toxic\") \"emles\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (empty? string)\n        \"\"\n        (if (member (first string) second_string)\n            (remove_dirty_chars_iter (rest string) second_string)\n            (string-append (list (first string)) (remove_dirty_chars_iter (rest string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond ((null? string) '())\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string))\n          (else (cons (car string) (remove_dirty_chars_iter (cdr string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (empty? string)\n        '()\n        (if (member (first string) second_string)\n            (remove_dirty_chars_iter (rest string) second_string)\n            (cons (first string) (remove_dirty_chars_iter (rest string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))) #t)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string)\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string)\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (for/list ([char (in-string string)])\n    (unless (string-contains second_string char)\n      char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove-char string char)\n    (cond\n      [(empty? string) empty]\n      [(equal? (first string) char) (remove-char (rest string) char)]\n      [else (cons (first string) (remove-char (rest string) char))]))\n  (define (remove-chars string second_string)\n    (cond\n      [(empty? second_string) string]\n      [else (remove-chars (remove-char string (first second_string)) (rest second_string))]))\n  (remove-chars string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (char-set second_string) (char-set (string (first string))) #t)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (string-filter (lambda (char) (not (string-contains second_string char))) string))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n"
  ]
}