{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove characters from the first string which are present in the second string.\n(define (remove_dirty_chars string second_string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_dirty_chars))\n    (check-equal? (candidate \"probasscurve\" \"pros\") \"bacuve\")\n    (check-equal? (candidate \"digitalindia\" \"talent\") \"digiidi\")\n    (check-equal? (candidate \"exoticmiles\" \"toxic\") \"emles\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (empty? string)\n        \"\"\n        (if (member (first string) second_string)\n            (remove_dirty_chars_iter (rest string) second_string)\n            (string-append (list (first string)) (remove_dirty_chars_iter (rest string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond ((null? string) '())\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string))\n          (else (cons (car string) (remove_dirty_chars_iter (cdr string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (empty? string)\n        '()\n        (if (member (first string) second_string)\n            (remove_dirty_chars_iter (rest string) second_string)\n            (cons (first string) (remove_dirty_chars_iter (rest string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))) #t)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string)\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string)\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (for/list ([char (in-string string)])\n    (unless (string-contains second_string char)\n      char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove-char string char)\n    (cond\n      [(empty? string) empty]\n      [(equal? (first string) char) (remove-char (rest string) char)]\n      [else (cons (first string) (remove-char (rest string) char))]))\n  (define (remove-chars string second_string)\n    (cond\n      [(empty? second_string) string]\n      [else (remove-chars (remove-char string (first second_string)) (rest second_string))]))\n  (remove-chars string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (char-set second_string) (char-set (string (first string))) #t)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (string-filter (lambda (char) (not (string-contains second_string char))) string))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond [(empty? string) result]\n          [(member (first string) second_string)\n           (remove_dirty_chars_iter (rest string) second_string result)]\n          [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (for/list ([char (in-string string)])\n    (unless (string-contains second_string char)\n      char)))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond ((null? string) '())\n          ((member (car string) second_string)\n           (remove_dirty_chars_iter (cdr string) second_string))\n          (else (cons (car string) (remove_dirty_chars_iter (cdr string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (for/list ([c (in-string string)])\n    (if (string-contains second_string c)\n        (void)\n        c)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (append result (list (car string)))))))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (set (first string))) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))) #t)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string)\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (string-append (filter (lambda (x) (not (member x second_string))) string)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(contains? second_string (first string))\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove-helper string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove-helper (rest string) second_string)]\n      [else (cons (first string) (remove-helper (rest string) second_string))]))\n  (remove-helper string second_string))\n",
    "  (for/list ([char (in-string string)])\n    (unless (char-set-contains? (string->char-set second_string) char)\n      char)))\n",
    "  (for/list ([char (in-string string)])\n    (if (not (string-contains second_string char))\n        char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (if (empty? string)\n        result\n        (if (member (first string) second_string)\n            (remove_dirty_chars_iter (rest string) second_string result)\n            (remove_dirty_chars_iter (rest string) second_string (append result (list (first string)))))))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (for/list ([char (in-string string)])\n    (unless (string-contains second_string char)\n      char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) (reverse result)]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (cons (first string) result))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))) #t)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      ((null? string) '())\n      ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string))\n      (else (cons (car string) (remove_dirty_chars_iter (cdr string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string)\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (for/list ([char (in-string string)])\n    (unless (string-contains second_string char)\n      char)))\n",
    "  (for/list ([char (in-string string)])\n    (if (string-contains second_string char)\n        #f\n        char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((char-set-contains? second_string (car string))\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (string-append result (list (car string)))))))\n  (remove_dirty_chars_iter string (string->char-set second_string) \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string->set second_string) (string->set (string (first string))))\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (for/list ([char (string-&gt;list string)])\n    (if (member char (string-&gt;list second_string))\n        (void)\n        char)))\n",
    "  (for/list ([char (in-string string)])\n    (if (member char second_string)\n        #f\n        char)))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (empty? string)\n        string\n        (if (member (first string) second_string)\n            (remove_dirty_chars_iter (rest string) second_string)\n            (cons (first string) (remove_dirty_chars_iter (rest string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_char string char)\n    (cond\n      [(empty? string) empty]\n      [(char=? (first string) char) (remove_char (rest string) char)]\n      [else (cons (first string) (remove_char (rest string) char))]))\n  (cond\n    [(empty? second_string) string]\n    [else (remove_dirty_chars (remove_char string (first second_string)) (rest second_string))]))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_char c str)\n    (string-append (substring str 0 (string-index str c))\n                   (substring str (+ 1 (string-index str c)))))\n  (define (remove_dirty_chars_iter str second_str)\n    (cond ((string=? second_str \"\") str)\n          ((string-contains? str (string-ref second_str 0))\n           (remove_dirty_chars_iter (remove_char (string-ref second_str 0) str)\n                                    (substring second_str 1)))\n          (else (remove_dirty_chars_iter str (substring second_str 1)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))))\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))) #t)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((char-set-contains? second_string (car string))\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (string-append result (list (car string)))))))\n  (remove_dirty_chars_iter string (string->char-set second_string) \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-ci=? (first string) (first second_string)) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-in-string? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(contains? second_string (first string))\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (for/list ([char (in-string string)])\n    (if (string-contains second_string char)\n        #f\n        char)))\n",
    "  (string-join\n   (for/list ([char (in-string string)])\n     (if (string-contains second_string char)\n         \"\"\n         char))\n   \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string acc)\n    (cond\n      [(empty? string) (reverse acc)]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string acc)]\n      [else (remove_dirty_chars_iter (rest string) second_string (cons (first string) acc))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond [(empty? string) result]\n          [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n          [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (for/list ([c (in-string string)])\n    (unless (string-contains second_string c)\n      c)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))) #t)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-ci=? (first string) (first second_string)) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (string-empty? string)\n        string\n        (if (string-contains second_string (string-ref string 0))\n            (remove_dirty_chars_iter (substring string 1) second_string)\n            (string-append (string (string-ref string 0)) (remove_dirty_chars_iter (substring string 1) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))))\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond [(empty? string) empty]\n          [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n          [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (if (string-empty? string)\n        result\n        (if (string-contains second_string (string-ref string 0))\n            (remove_dirty_chars_iter (substring string 1) second_string result)\n            (remove_dirty_chars_iter (substring string 1) second_string (string-append result (string (string-ref string 0)))))))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (for/list ([char (in-string string)])\n    (unless (member char second_string) char)))\n",
    "  (string-join (filter (lambda (char) (not (member char second_string))) (string-&gt;list string)) \"\"))\n",
    "  (string-join\n   (filter (lambda (char) (not (string-contains second_string char)))\n           (string->list string))\n   \"\"))\n",
    "  (for/list ([char (in-string string)])\n    (if (string-contains second_string char)\n        \"\"\n        char)))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond [(empty? string) empty]\n          [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n          [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (for/list ([char (in-string string)])\n    (unless (char-set-contains? (string->char-set second_string) char)\n      char)))\n",
    "  (for/list ([char (in-string string)])\n    (if (member char second_string)\n        #f\n        char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (string-append\n   (filter (lambda (x) (not (string-contains second_string x))) string)))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond ((null? string) '())\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string))\n          (else (cons (car string) (remove_dirty_chars_iter (cdr string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (for/list ([char (in-string string)])\n    (if (member char second_string)\n        #f\n        char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-in-string? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (empty? string)\n        \"\"\n        (if (member (first string) second_string)\n            (remove_dirty_chars_iter (rest string) second_string)\n            (string-append (string (first string)) (remove_dirty_chars_iter (rest string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (for/list ([char (in-string string)])\n    (unless (member char second_string)\n      char)))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (for/list ([char (in-string string)])\n    (if (string-contains second_string char)\n        #f\n        char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond [(empty? string) result]\n          [(member (first string) second_string)\n           (remove_dirty_chars_iter (rest string) second_string result)]\n          [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (string-append (filter (lambda (x) (not (string-contains second_string x))) string)))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond [(empty? string) empty]\n          [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n          [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) (reverse result))\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (for/list ([c (in-string string)])\n    (if (not (string-contains second_string c))\n        c)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))) #t)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n</code>\nI am not sure if this is the best way to do it, but it works.\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (for/list ([char (in-string string)])\n    (if (not (char-set-contains? (string->char-set second_string) char))\n        char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string)\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else\n       (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (helper string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (helper (rest string) second_string)]\n      [else (cons (first string) (helper (rest string) second_string))]))\n  (helper string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (string-append (filter (lambda (char) (not (member char second_string))) string)))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (string-append\n   (filter (lambda (char) (not (string-contains second_string char))) string)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (string-append (filter (lambda (x) (not (member x second_string))) string)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-member? (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((char-set-contains? (string->char-set second_string) (car string))\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (string-append result (list (car string)))))))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (for/list ([c (in-string string)])\n    (if (string-contains second_string c)\n        #f\n        c)))\n",
    "  (for/list ([c (in-string string)])\n    (if (not (string-contains second_string c))\n        c)))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (null? string)\n        '()\n        (if (member (car string) second_string)\n            (remove_dirty_chars_iter (cdr string) second_string)\n            (cons (car string) (remove_dirty_chars_iter (cdr string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_char string char)\n    (cond\n      [(empty? string) empty]\n      [(equal? (first string) char) (remove_char (rest string) char)]\n      [else (cons (first string) (remove_char (rest string) char))]))\n  (cond\n    [(empty? second_string) string]\n    [else (remove_dirty_chars (remove_char string (first second_string)) (rest second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (char-set string)) result]\n      [(char-set=? (char-set (string-&gt;list (string-append result (string (car string))))) (char-set string))\n       (remove_dirty_chars_iter (cdr string) second_string (string-append result (string (car string))))]\n      [else (remove_dirty_chars_iter (cdr string) second_string result)]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (for/list ([char (in-string string)])\n    (unless (member char second_string)\n      char)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))) )\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (for/list ([char (in-string string)])\n    (unless (char-set-contains? (string->char-set second_string) char)\n      char)))\n",
    "  (string-append (filter (lambda (char) (not (string-contains? second_string char))) string)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (if (empty? string)\n        '()\n        (if (member (first string) second_string)\n            (remove_dirty_chars_iter (rest string) second_string)\n            (cons (first string) (remove_dirty_chars_iter (rest string) second_string)))))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond [(empty? string) result]\n          [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n          [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove-dirty-chars-iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove-dirty-chars-iter (rest string) second_string result)]\n      [else (remove-dirty-chars-iter (rest string) second_string (append result (list (first string))))]))\n  (remove-dirty-chars-iter string second_string '()))\n",
    "  (define (helper string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (helper (rest string) second_string result)]\n      [else (helper (rest string) second_string (append result (list (first string))))]))\n  (helper string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (let loop ([string string]\n             [second_string second_string]\n             [result '()])\n    (cond [(empty? string) (reverse result)]\n          [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))))\n           (loop (rest string) second_string result)]\n          [else (loop (rest string) second_string (cons (first string) result))])))\n",
    "  (define (remove_dirty_chars_iter string second_string)\n    (cond\n      [(empty? string) empty]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string)]\n      [else (cons (first string) (remove_dirty_chars_iter (rest string) second_string))]))\n  (remove_dirty_chars_iter string second_string))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string acc)\n    (cond\n      [(empty? string) (reverse acc)]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string acc)]\n      [else (remove_dirty_chars_iter (rest string) second_string (cons (first string) acc))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))))\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string) (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (string-filter (lambda (c) (not (string-contains second_string c))) string))\n",
    "  (let loop ([string string]\n             [second_string second_string])\n    (cond [(empty? string) empty]\n          [(member (first string) second_string) (loop (rest string) second_string)]\n          [else (cons (first string) (loop (rest string) second_string))])))\n",
    "  (cond\n    [(empty? string) empty]\n    [(member (first string) second_string) (remove_dirty_chars (rest string) second_string)]\n    [else (cons (first string) (remove_dirty_chars (rest string) second_string))]))\n",
    "  (define (remove_dirty_chars_iter str sec_str result)\n    (cond\n      [(empty? str) result]\n      [(member (first str) sec_str) (remove_dirty_chars_iter (rest str) sec_str result)]\n      [else (remove_dirty_chars_iter (rest str) sec_str (append result (list (first str))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))) #t) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string acc)\n    (cond\n      [(empty? string) (reverse acc)]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string acc)]\n      [else (remove_dirty_chars_iter (rest string) second_string (cons (first string) acc))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_char c s)\n    (cond\n      [(empty? s) empty]\n      [(char=? (first s) c) (remove_char c (rest s))]\n      [else (cons (first s) (remove_char c (rest s)))]))\n  (cond\n    [(empty? second_string) string]\n    [else (remove_dirty_chars (remove_char (first second_string) string) (rest second_string))]))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(char-set=? (string-&gt;set second_string) (string-&gt;set (string (first string))))\n       (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (string-append result (string (first string))))]))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond\n      [(empty? string) result]\n      [(member (first string) second_string) (remove_dirty_chars_iter (rest string) second_string result)]\n      [else (remove_dirty_chars_iter (rest string) second_string (append result (list (first string))))]))\n  (remove_dirty_chars_iter string second_string '()))\n",
    "  (string-append (filter (lambda (char) (not (string-contains second_string char))) string)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((member (car string) second_string)\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (cons (car string) result)))))\n  (reverse (remove_dirty_chars_iter string second_string '())))\n",
    "  (string-join\n   (filter (lambda (char) (not (string-contains? second_string char))) (string->list string))\n   \"\"))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((char-set-contains? (string->char-set second_string) (car string))\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (string-append result (string (car string)))))))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (for/list ([c (in-string string)])\n    (unless (string-contains second_string c)\n      c)))\n",
    "  (define (remove_dirty_chars_iter string second_string result)\n    (cond ((null? string) result)\n          ((char-set-contains? (string->char-set second_string) (car string))\n           (remove_dirty_chars_iter (cdr string) second_string result))\n          (else (remove_dirty_chars_iter (cdr string) second_string (string-append result (list (car string)))))))\n  (remove_dirty_chars_iter string second_string \"\"))\n",
    "  (string-join (remove (lambda (x) (member x second_string)) (string->list string)) \"\"))\n"
  ]
}