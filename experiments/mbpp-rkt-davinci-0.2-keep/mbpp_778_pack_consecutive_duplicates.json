{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (let* ([first (first list1)]\n            [rest (rest list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates (remove first first-rest))))]))\n",
    "  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (append (car result) (list (car list1))) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (cons\n      (list (first list1))\n      (pack_consecutive_duplicates (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (let ([first (first list1)]\n           [rest (rest list1)])\n       (if (equal? first (first rest))\n           (cons (cons first (pack_consecutive_duplicates rest))\n                 (pack_consecutive_duplicates rest))\n           (cons (list first)\n                 (pack_consecutive_duplicates rest))))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else\n     (let ([first (car list1)] [rest (cdr list1)])\n       (if (equal? first (car rest))\n           (cons (cons first (car (pack_consecutive_duplicates rest)))\n                 (pack_consecutive_duplicates (cdr (pack_consecutive_duplicates rest))))\n           (cons (list first) (pack_consecutive_duplicates rest))))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1))\n                (pack_consecutive_duplicates (cdr list1)))]))\n",
    "  (define (pack_consecutive_duplicates_iter list1 list2)\n    (cond ((null? list1) list2)\n          ((null? list2) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar list2) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (append (car list2) (list (car list1))) (cdr list2))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) list2)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (cdr list1)) (list (list (car list1)))]\n    [(equal? (car list1) (cadr list1))\n     (cons (cons (car list1) (pack_consecutive_duplicates (cdr list1)))\n           (pack_consecutive_duplicates (cdr list1)))]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [else\n     (let* ([first (car list1)]\n            [rest (cdr list1)]\n            [first-rest (cons first rest)]\n            [first-rest-duplicates (filter (lambda (x) (equal? x first)) first-rest)]\n            [rest-duplicates (filter (lambda (x) (not (equal? x first))) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates rest-duplicates)))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n",
    "  (if (null? list1)\n      '()\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (equal? (car list1) (cadr list1))\n                (append (pack_consecutive_duplicates (cons (car list1) (cdr list1))) '())\n                (cons sublist (pack_consecutive_duplicates (cdr list1))))))))\n",
    "  (let loop ((list1 list1)\n             (list2 '()))\n    (if (null? list1)\n        list2\n        (let ((sublist (list (car list1))))\n          (loop (cdr list1)\n                (if (equal? (car list1) (cadr list1))\n                    (append list2 (list (append sublist (list (cadr list1)))))\n                    (append list2 (list sublist))))))))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (let*\n         ([first (first list1)]\n          [rest (rest list1)]\n          [first-rest (cons first rest)]\n          [first-rest-duplicates (filter (lambda (x) (equal? first x)) first-rest)])\n       (cons first-rest-duplicates (pack_consecutive_duplicates (remove first first-rest))))]))\n",
    "  (if (null? list1)\n      '()\n      (let ((sublist (list (car list1))))\n        (if (null? (cdr list1))\n            (list sublist)\n            (if (= (car list1) (cadr list1))\n                (append (pack_consecutive_duplicates (cons (car list1) (cdr list1))) '())\n                (cons sublist (pack_consecutive_duplicates (cdr list1))))))))\n",
    "  (define (pack_consecutive_duplicates_helper list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_helper (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_helper (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_helper (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_helper list1 '())))\n",
    "  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else (cons (list (car list1)) (pack_consecutive_duplicates (cdr list1)))]))\n",
    "  (let loop ((list1 list1)\n             (result '()))\n    (cond ((null? list1) result)\n          ((null? (cdr list1)) (cons (list (car list1)) result))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (loop (cdr list1) (cons (list (car list1)) result))))))\n",
    "  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond ((null? list1) result)\n          ((null? result) (pack_consecutive_duplicates_iter (cdr list1) (list (list (car list1)))))\n          ((equal? (caar result) (car list1)) (pack_consecutive_duplicates_iter (cdr list1) (cons (cons (car list1) (car result)) (cdr result))))\n          (else (pack_consecutive_duplicates_iter (cdr list1) (cons (list (car list1)) result)))))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n",
    "  (cond [(empty? list1) empty]\n        [else (cons (list (first list1))\n                    (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [(null? (cdr list1)) (list list1)]\n    [else\n     (let* ([first (car list1)]\n            [rest (cdr list1)]\n            [first-rest (car rest)]\n            [rest-rest (cdr rest)])\n       (if (equal? first first-rest)\n           (cons (cons first (pack_consecutive_duplicates rest))\n                 (pack_consecutive_duplicates rest-rest))\n           (cons (list first)\n                 (pack_consecutive_duplicates rest))))]))\n"
  ]
}