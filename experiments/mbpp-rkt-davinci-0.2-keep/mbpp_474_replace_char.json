{
  "name": "mbpp_474_replace_char",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to replace characters in a string.\n(define (replace_char str1 ch newch)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_char))\n    (check-equal? (candidate \"polygon\" \"y\" \"l\") \"pollgon\")\n    (check-equal? (candidate \"character\" \"c\" \"a\") \"aharaater\")\n    (check-equal? (candidate \"python\" \"l\" \"a\") \"python\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-append (string-take str1 (string-index str1 ch))\n                 (string newch)\n                 (string-drop str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append (string-take str1 (string-index str1 ch))\n                 newch\n                 (string-drop str1 (add1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ (string-index str1 ch) 1) (string-length str1))))\n",
    "  (string-append (string-take str1 (string-index str1 ch))\n                 (string newch)\n                 (string-drop str1 (add1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append (string-take str1 (string-index str1 ch))\n                 (string newch)\n                 (string-drop str1 (add1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ (string-index str1 ch) 1) (string-length str1))))\n",
    "  (if (string=? str1 \"\")\n      \"\"\n      (if (string=? (substring str1 0 1) ch)\n          (string-append newch (replace_char (substring str1 1) ch newch))\n          (string-append (substring str1 0 1) (replace_char (substring str1 1) ch newch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ (string-index str1 ch) 1) (string-length str1))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (add1 (string-index str1 ch)))))\n",
    "  (string-append (substring str1 0 (string-index str1 ch))\n                 newch\n                 (substring str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   (string newch)\n   (substring str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append\n   (substring str1 0 (string-index str1 ch))\n   newch\n   (substring str1 (+ 1 (string-index str1 ch)))))\n",
    "  (string-append (string-take str1 (string-index str1 ch))\n                 (string newch)\n                 (string-drop str1 (add1 (string-index str1 ch)))))\n",
    "  (string-append (string-take str1 (string-index str1 ch))\n                 (string newch)\n                 (string-drop str1 (add1 (string-index str1 ch)))))\n"
  ]
}