{
  "name": "mbpp_394_check_distinct",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if given tuple contains no duplicates.\n(define (check_distinct test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_distinct))\n    (check-equal? (candidate (list 1 4 5 6 1 4)) #f)\n    (check-equal? (candidate (list 1 4 5 6)) #t)\n    (check-equal? (candidate (list 2 3 4 5 6)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(null? test_tup) #t]\n    [(member (car test_tup) (cdr test_tup)) #f]\n    [else (check_distinct (cdr test_tup))]))\n",
    "  (cond\n    [(empty? test_tup) true]\n    [(member (first test_tup) (rest test_tup)) false]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (let ([tup_set (set test_tup)])\n    (if (= (length test_tup) (length tup_set))\n        #t\n        #f)))\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (let loop ([test_tup test_tup]\n             [seen '()])\n    (cond [(empty? test_tup) #t]\n          [(member (first test_tup) seen) #f]\n          [else (loop (rest test_tup) (cons (first test_tup) seen))])))\n",
    "  (let ([test_tup (sort test_tup <)])\n    (if (null? (cdr test_tup))\n        #t\n        (if (equal? (car test_tup) (cadr test_tup))\n            #f\n            (check_distinct (cdr test_tup))))))\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (if (null? test_tup)\n      #t\n      (if (member (car test_tup) (cdr test_tup))\n          #f\n          (check_distinct (cdr test_tup)))))\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (let ([test_tup (sort test_tup <)])\n    (if (null? (cdr test_tup))\n        #t\n        (if (equal? (car test_tup) (cadr test_tup))\n            #f\n            (check_distinct (cdr test_tup))))))\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (cond\n    [(null? test_tup) #t]\n    [(member (car test_tup) (cdr test_tup)) #f]\n    [else (check_distinct (cdr test_tup))]))\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n</code>\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (let ([tup (sort test_tup <)])\n    (define (check_distinct_iter tup)\n      (if (null? (cdr tup)) #t\n          (if (equal? (car tup) (cadr tup)) #f\n              (check_distinct_iter (cdr tup)))))\n    (check_distinct_iter tup)))\n",
    "  (cond\n    [(null? test_tup) #t]\n    [(member (car test_tup) (cdr test_tup)) #f]\n    [else (check_distinct (cdr test_tup))]))\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (cond\n    [(null? test_tup) #t]\n    [(member (car test_tup) (cdr test_tup)) #f]\n    [else (check_distinct (cdr test_tup))]))\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n",
    "  (cond\n    [(empty? test_tup) #t]\n    [(member (first test_tup) (rest test_tup)) #f]\n    [else (check_distinct (rest test_tup))]))\n"
  ]
}