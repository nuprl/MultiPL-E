{
  "name": "mbpp_74_is_samepatterns",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether it follows the sequence given in the patterns array.\n(define (is_samepatterns colors patterns)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_samepatterns))\n    (check-equal? (candidate (list \"red\" \"green\" \"green\") (list \"a\" \"b\" \"b\")) #t)\n    (check-equal? (candidate (list \"red\" \"green\" \"greenn\") (list \"a\" \"b\" \"b\")) #f)\n    (check-equal? (candidate (list \"red\" \"green\" \"greenn\") (list \"a\" \"b\")) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_samepatterns-iter colors patterns)\n    (cond\n      [(empty? patterns) #t]\n      [(empty? colors) #f]\n      [(equal? (first patterns) (first colors))\n       (is_samepatterns-iter (rest colors) (rest patterns))]\n      [else (is_samepatterns-iter (rest colors) patterns)]))\n  (is_samepatterns-iter colors patterns))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [(equal? (first patterns) (first colors))\n     (is_samepatterns (rest colors) (rest patterns))]\n    [else #f]))\n",
    "  (cond\n    [(empty? patterns) true]\n    [(empty? colors) false]\n    [else\n     (and\n      (equal? (first patterns) (first colors))\n      (is_samepatterns (rest colors) (rest patterns)))]))\n",
    "  (define (is_samepatterns_iter colors patterns)\n    (cond\n      [(empty? colors) (empty? patterns)]\n      [(empty? patterns) #f]\n      [else\n       (and (equal? (first colors) (first patterns))\n            (is_samepatterns_iter (rest colors) (rest patterns)))]))\n  (is_samepatterns_iter colors patterns))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [(equal? (first colors) (first patterns)) (is_samepatterns (rest colors) (rest patterns))]\n    [else #f]))\n",
    "  (define (helper colors patterns)\n    (cond\n      [(empty? colors) (empty? patterns)]\n      [(empty? patterns) #f]\n      [(equal? (first colors) (first patterns)) (helper (rest colors) (rest patterns))]\n      [else (helper (rest colors) patterns)]))\n  (helper colors patterns))\n",
    "  (cond\n    [(empty? colors) (empty? patterns)]\n    [(empty? patterns) #f]\n    [else\n     (and\n      (equal? (first patterns) (first colors))\n      (is_samepatterns (rest colors) (rest patterns)))]))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [(equal? (first colors) (first patterns)) (is_samepatterns (rest colors) (rest patterns))]\n    [else #f]))\n",
    "  (cond\n    [(empty? colors) #t]\n    [(empty? patterns) #f]\n    [else\n     (and\n      (equal? (first colors) (first patterns))\n      (is_samepatterns (rest colors) (rest patterns)))]))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [(equal? (first patterns) (first colors)) (is_samepatterns (rest colors) (rest patterns))]\n    [else #f]))\n",
    "  (define (is_samepatterns-iter colors patterns)\n    (cond [(empty? colors) (empty? patterns)]\n          [(empty? patterns) #f]\n          [(equal? (first colors) (first patterns)) (is_samepatterns-iter (rest colors) (rest patterns))]\n          [else #f]))\n  (is_samepatterns-iter colors patterns))\n",
    "  (cond [(empty? patterns) #t]\n        [(empty? colors) #f]\n        [(equal? (first patterns) (first colors)) (is_samepatterns (rest colors) (rest patterns))]\n        [else #f]))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [(equal? (first colors) (first patterns)) (is_samepatterns (rest colors) (rest patterns))]\n    [(equal? (first patterns) 'any) (is_samepatterns (rest colors) (rest patterns))]\n    [else #f]))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [else\n     (cond\n       [(equal? (first patterns) (first colors)) (is_samepatterns (rest colors) (rest patterns))]\n       [else #f])]))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [(equal? (first patterns) (first colors))\n     (is_samepatterns (rest colors) (rest patterns))]\n    [else #f]))\n",
    "  (define (is_samepatterns-iter colors patterns)\n    (cond [(empty? colors) (empty? patterns)]\n          [(empty? patterns) #f]\n          [(equal? (first colors) (first patterns)) (is_samepatterns-iter (rest colors) (rest patterns))]\n          [else (is_samepatterns-iter (rest colors) patterns)]))\n  (is_samepatterns-iter colors patterns))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [else (and (equal? (first patterns) (first colors))\n               (is_samepatterns (rest colors) (rest patterns)))]))\n",
    "  (cond\n    [(empty? colors) #t]\n    [(empty? patterns) #t]\n    [(equal? (first colors) (first patterns)) (is_samepatterns (rest colors) (rest patterns))]\n    [else #f]))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [(equal? (first colors) (first patterns)) (is_samepatterns (rest colors) (rest patterns))]\n    [else #f]))\n",
    "  (cond\n    [(empty? patterns) #t]\n    [(empty? colors) #f]\n    [(equal? (first patterns) (first colors)) (is_samepatterns (rest colors) (rest patterns))]\n    [else #f]))\n"
  ]
}