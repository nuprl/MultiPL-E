{
  "name": "mbpp_430_parabola_directrix",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (* -1 b) (* 2 a))])\n    (let ([y (+ (* a (sqr x)) (* b x) c)])\n      (let ([d (- y (/ b (* 2 a)))])\n        d))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd445qp8.rkt:15:4\nactual:     5/4\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd445qp8.rkt:16:4\nactual:     16/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd445qp8.rkt:17:4\nactual:     3\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (* a x) b))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprq9ez_uk.rkt:14:4\nactual:     3\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprq9ez_uk.rkt:15:4\nactual:     8\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprq9ez_uk.rkt:16:4\nactual:     4\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper x)\n    (sqrt (+ (* a x) b)))\n  (parabola_directrix_helper (- c)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfws5rv7n.rkt:14:4\nactual:     0.0+2.6457513110645907i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfws5rv7n.rkt:15:4\nactual:     0.0+5.291502622129181i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfws5rv7n.rkt:16:4\nactual:     0.0+2.8284271247461903i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (/ (- c (* a x)) b))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3s4xgx.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3s4xgx.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3s4xgx.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (if (negative? a)\n        (list x (parabola_y a b c x))\n        (list x (parabola_y a b c x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "/tmp/tmph39ww76f.rkt:7:17: parabola_y: unbound identifier\n  in: parabola_y\n  location...:\n   /tmp/tmph39ww76f.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola-directrix-helper x)\n    (sqrt (- (* a x) b)))\n  (parabola-directrix-helper c))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1n8bwwu.rkt:14:4\nactual:     2.6457513110645907\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1n8bwwu.rkt:15:4\nactual:     5.291502622129181\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl1n8bwwu.rkt:16:4\nactual:     2.8284271247461903\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (let ([y (- (/ b (* 2 a)) (* x x))])\n      (list x y))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpouj302zf.rkt:14:4\nactual:     '(-3/10 21/100)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpouj302zf.rkt:15:4\nactual:     '(-4/9 20/81)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpouj302zf.rkt:16:4\nactual:     '(-1 0)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (/ (+ (* -1 a) (* -1 c)) (* 2 b)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprqy2c_nv.rkt:12:4\nactual:     -7/6\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprqy2c_nv.rkt:13:4\nactual:     -13/16\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprqy2c_nv.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (* a x)))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7sdibnn.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7sdibnn.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7sdibnn.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x) (/ (* -1 b) (* 2 a)))\n  (define (y) (+ (/ (* b b) (* 4 a)) (/ c)))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0lu49_6.rkt:14:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0lu49_6.rkt:15:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0lu49_6.rkt:16:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyybg3su1.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.3-0.5567764362830021i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyybg3su1.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.4444444444444444-0.4969039949999533i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyybg3su1.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.0-1.4142135623730951i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x-value (/ (* -1 b) (* 2 a))))\n    (let ((y-value (+ (* a (sqr x-value)) (* b x-value) c)))\n      (cons x-value y-value))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplov49w21.rkt:14:4\nactual:     '(-3/10 . 31/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplov49w21.rkt:15:4\nactual:     '(-4/9 . 20/9)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplov49w21.rkt:16:4\nactual:     '(-1 . 4)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (- (/ c (+ (* a (sqr x)) (* b x) c)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3uqsb7i0.rkt:13:4\nactual:     -40/31\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3uqsb7i0.rkt:14:4\nactual:     -9/5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3uqsb7i0.rkt:15:4\nactual:     -3/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* x x) (* b x) c) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (+ (* a x) b)))\n  (directrix))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d2s6z5c.rkt:14:4\n\ndirectrix: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d2s6z5c.rkt:15:4\n\ndirectrix: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2d2s6z5c.rkt:16:4\n\ndirectrix: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (/ (- b) (* 2 a))))\n    (if (zero? a)\n        (error \"Not a parabola\")\n        (- (/ c (* 2 a)) (* x x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7eiv8brb.rkt:15:4\nactual:     11/100\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7eiv8brb.rkt:16:4\nactual:     2/81\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7eiv8brb.rkt:17:4\nactual:     1/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg4qbcm6.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg4qbcm6.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg4qbcm6.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (if (positive? a)\n        (- (/ c a) (* x x))\n        (+ (/ c a) (* x x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1rqbt_im.rkt:15:4\nactual:     31/100\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1rqbt_im.rkt:16:4\nactual:     20/81\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1rqbt_im.rkt:17:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (define (parabola y)\n      (+ (* a y) (* b y) c))\n    (define (derivative y)\n      (* a 2))\n    (define (newton_raphson y)\n      (define (newton_raphson_iter guess)\n        (if (close-enough? guess (newton_raphson_next guess))\n            guess\n            (newton_raphson_iter (newton_raphson_next guess))))\n      (define (newton_raphson_next guess)\n        (- guess (/ (parabola guess) (derivative guess))))\n      (newton_raphson_iter y))\n    (newton_raphson x))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmpxhu8csig.rkt:12:13: close-enough?: unbound identifier\n  in: close-enough?\n  location...:\n   /tmp/tmpxhu8csig.rkt:12:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* a 1) (* b 2 x)))\n  (define (newton x)\n    (newton-help x (f x) (df x)))\n  (define (newton-help x fx dfx)\n    (let ((x1 (- x (/ fx dfx))))\n      (if (close-enough? x x1)\n          x\n          (newton-help x1 (f x1) (df x1)))))\n  (define (close-enough? x1 x2)\n    (< (abs (- x1 x2)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123532,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiadyxwiw.rkt:25:4\nactual:     -28632278/42981185\nexpected:   -198\n--------------------\n",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (* a x) (* b x x) c))\n  (define (h x)\n    (f x))\n  (define (k x)\n    (g x))\n  (define (df dx)\n    (/ (- (f (+ x dx)) (f x))\n       dx))\n  (define (dg dx)\n    (/ (- (g (+ x dx)) (g x))\n       dx))\n  (define (dh dx)\n    (/ (- (h (+ x dx)) (h x))\n       dx))\n  (define (dk dx)\n    (/ (- (k (+ x dx)) (k x))\n       dx))\n  (define (newton transform guess)\n    (define tolerance 0.00001)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) tolerance))\n    (define (try guess)\n      (let ((next (transform guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (try guess))\n  (define (transform guess)\n    (- guess (/ (transform guess) (dtransform guess))))\n  (newton transform 1.0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmppib5al3_.rkt:14:16: x: unbound identifier\n  in: x\n  location...:\n   /tmp/tmppib5al3_.rkt:14:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x-vertex (/ (- b) (* 2 a))]\n         [y-vertex (+ (* a (sqr x-vertex)) (* b x-vertex) c)])\n    (- y-vertex (/ (sqr b) (* 4 a)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28hi0gdl.rkt:14:4\nactual:     11/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28hi0gdl.rkt:15:4\nactual:     4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28hi0gdl.rkt:16:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (/ b (* 2 a)) x))\n  (define (h x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (i x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (j x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (k x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (l x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (m x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (n x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (o x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (p x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (q x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (r x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (s x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (t x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (u x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (v x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (w x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (x x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (y x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (z x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (aa x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (bb x)\n    (-\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "/tmp/tmp1jclui1h.rkt:50:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 51\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (complex? x)))\n        x\n        (error \"No directrix\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu86p0jlq.rkt:15:4\n\nNo directrix\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu86p0jlq.rkt:16:4\n\nNo directrix\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu86p0jlq.rkt:17:4\n\nNo directrix\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (define (parabola y)\n      (+ (* a y) (* b y y) c))\n  (define (derivative y)\n    (+ (* b y) (* b 2)))\n  (define (newton-transform g)\n    (lambda (x)\n      (- x (/ (g x) ((derivative x))))))\n  (define (fixed-point f x)\n    (if (close-enough? (f x) x)\n        x\n        (fixed-point f (f x))))\n  (define (close-enough? x y)\n    (< (abs (- x y)) 0.0001))\n  (define (derivative x)\n    (/ (- (parabola (+ x 0.0001)) (parabola x)) 0.0001))\n  (define (newton-transform g)\n    (lambda (x)\n      (- x (/ (g x) ((derivative x))))))\n  (define (fixed-point f x)\n    (if (close-enough? (f x) x)\n        x\n        (fixed-point f (f x))))\n  (define (close-enough? x y)\n    (< (abs (- x y)) 0.0001))\n  (define (derivative x)\n    (/ (- (parabola (+ x 0.0001)) (parabola x)) 0.0001))\n  (define (newton-transform g)\n    (lambda (x)\n      (- x (/ (g x) ((derivative x))))))\n  (define (fixed-point f x)\n    (if (close-enough? (f x) x)\n        x\n        (fixed-point f (f x))))\n  (define (close-enough? x y)\n    (< (abs (- x y)) 0.0001))\n  (define (derivative x)\n    (/ (- (parabola (+ x 0.0001)) (parabola x)) 0.0001))\n  (define (newton-transform g)\n    (lambda (x)\n      (- x (/ (g x) ((derivative x))))))\n  (define (fixed-point f x)\n    (if (close-enough? (f x) x\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "/tmp/tmped10f1wb.rkt:47:8: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 48\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (define (parabola y)\n      (+ (* a y y) (* b y) c))\n  (define (derivative y)\n    (* 2 a y))\n  (define (newton-transform g)\n    (lambda (x)\n      (- x (/ (g x) ((derivative x))))))\n  (define (fixed-point f x)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.00001))\n    (define (try guess)\n      (let ((next (f guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (try x))\n  (define (find-zero f)\n    (fixed-point (newton-transform f) 1.0))\n  (define (find-y x)\n    (find-zero (lambda (y) (- (parabola y) x))))\n  (- (find-y x) (/ b 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmp_3ozrdlg.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 28\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (sqrt (+ (sqr (- (/ b (* 2 a))))\n                   (* 4 a c)))\n          (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4t3iogwm.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4t3iogwm.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4t3iogwm.rkt:19:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (- (* b b) (* 4 a c))))\n    (if (&lt; d 0)\n        (error \"No real solution\")\n        (let ((x1 (/ (+ b (sqrt d)) (* 2 a)))\n              (x2 (/ (- b (sqrt d)) (* 2 a))))\n          (if (&lt; x1 x2)\n              x1\n              x2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "/tmp/tmpqws527yq.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b 2) (* a x) (/ (- (sqr x)) (4 c))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphcaemzpa.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphcaemzpa.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphcaemzpa.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (/ (- b) (* 2 a)))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe489j9i8.rkt:14:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe489j9i8.rkt:15:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe489j9i8.rkt:16:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:14:4\nactual:     '(-3/10 -2/3)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:15:4\nactual:     '(-4/9 -1/2)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:16:4\nactual:     '(-1 -3/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (* b b) (* 4 a c))])\n    (if (&lt; x 0)\n        (error \"No real solution\")\n        (let ([y (/ (- b) (* 2 a))])\n          (if (&lt; y 0)\n              (error \"No real solution\")\n              (sqrt y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmpaxa4lm5i.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* -2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl2lzd7wc.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl2lzd7wc.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl2lzd7wc.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([d (/ (* -1 b) (* 2 a))])\n    (if (negative? a)\n        (+ d)\n        (- d))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp13l8r20a.rkt:15:4\nactual:     3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp13l8r20a.rkt:16:4\nactual:     4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp13l8r20a.rkt:17:4\nactual:     1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b 2) (/ (* a b) (sqrt (* 4 a c))))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No directrix\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp59a6bw04.rkt:15:4\nactual:     -0.8717082451262845\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp59a6bw04.rkt:16:4\nactual:     -2\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp59a6bw04.rkt:17:4\nactual:     0.8452994616207483\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (/ c x) (/ b x)))\n  (define (h x)\n    (- (/ c x) (/ b x)))\n  (define (i x)\n    (- (/ c x) (/ b x)))\n  (define (j x)\n    (- (/ c x) (/ b x)))\n  (define (k x)\n    (- (/ c x) (/ b x)))\n  (define (l x)\n    (- (/ c x) (/ b x)))\n  (define (m x)\n    (- (/ c x) (/ b x)))\n  (define (n x)\n    (- (/ c x) (/ b x)))\n  (define (o x)\n    (- (/ c x) (/ b x)))\n  (define (p x)\n    (- (/ c x) (/ b x)))\n  (define (q x)\n    (- (/ c x) (/ b x)))\n  (define (r x)\n    (- (/ c x) (/ b x)))\n  (define (s x)\n    (- (/ c x) (/ b x)))\n  (define (t x)\n    (- (/ c x) (/ b x)))\n  (define (u x)\n    (- (/ c x) (/ b x)))\n  (define (v x)\n    (- (/ c x) (/ b x)))\n  (define (w x)\n    (- (/ c x) (/ b x)))\n  (define (x x)\n    (- (/ c x) (/ b x)))\n  (define (y x)\n    (- (/ c x) (/ b x)))\n  (define (z x)\n    (- (/ c x) (/ b x)))\n  (define (aa x)\n    (- (/ c x) (/ b x)))\n  (define (bb x)\n    (- (/ c x) (/ b x)))\n  (define (cc x)\n    (- (/ c x) (/ b x)))\n  (define (dd x)\n    (- (/ c x) (/ b x)))\n  (define (ee x)\n    (- (/ c x) (/ b x)))\n  (define (ff x)\n    (- (/ c x)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmpmmgrsasq.rkt:58:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 59\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (/ (- c (f 0)) b))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63j0vw97.rkt:14:4\nactual:     0\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63j0vw97.rkt:15:4\nactual:     0\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63j0vw97.rkt:16:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (sqrt (- (* b b) (* 4 a c)))))\n    (/ (- b d) (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3040fjk.rkt:13:4\nactual:     0.3-0.5567764362830021i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3040fjk.rkt:14:4\nactual:     0.4444444444444444-0.4969039949999533i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3040fjk.rkt:15:4\nactual:     1.0-1.4142135623730951i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ (- b) (* 2 a))\n       (sqrt (- (sqr (- b)) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8sf4ntlo.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8sf4ntlo.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8sf4ntlo.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (* -1 b) (* 2 a))])\n    (let ([y (- (/ b (* 2 a)) (* a (sqr x)))])\n      (list x y))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy62vblqd.rkt:14:4\nactual:     '(-3/10 -3/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy62vblqd.rkt:15:4\nactual:     '(-4/9 -4/3)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy62vblqd.rkt:16:4\nactual:     '(-1 -1)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x0 (/ (* -1 b) (* 2 a))))\n    (let ((y0 (+ (* a (sqr x0)) (* b x0) c)))\n      (let ((m (/ (* -1 a) b)))\n        (let ((b (+ y0 (* m x0))))\n          (list m b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdrez49kz.rkt:16:4\nactual:     '(-5/3 41/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdrez49kz.rkt:17:4\nactual:     '(-9/8 49/18)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdrez49kz.rkt:18:4\nactual:     '(-1/2 9/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_2 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_3 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_4 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_5 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_6 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_7 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_8 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_9 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_10 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_11 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_12 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_13 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_14 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_15 a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_16 a b c x)\n    (- (/ b 2) (* a x)))\n \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmpf7cjt1xz.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 38\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (f x) (* 2 a x)))\n  (define (h x)\n    (- (g x) b))\n  (define (i x)\n    (/ (h x) (* 2 a)))\n  (i 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdcqhqev7.rkt:20:4\nactual:     -1/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdcqhqev7.rkt:21:4\nactual:     -2/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdcqhqev7.rkt:22:4\nactual:     1/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyybg3su1.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.3-0.5567764362830021i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyybg3su1.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.4444444444444444-0.4969039949999533i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyybg3su1.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.0-1.4142135623730951i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (- (* 4 a c) (sqr b))))\n    (if (negative? d)\n        (error \"The parabola has no directrix.\")\n        (let ((x (/ (- b) (* 2 a))))\n          (cons x (- (/ d (* 4 a)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmpdscajn2h.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b 2) (/ (sqrt (- (* b b) (* 4 a c))) 2))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"no directrix\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppo8dqr3j.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.5-2.7838821814150108i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppo8dqr3j.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 4.0-4.47213595499958i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppo8dqr3j.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 2.0-2.8284271247461903i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyybg3su1.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.3-0.5567764362830021i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyybg3su1.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.4444444444444444-0.4969039949999533i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyybg3su1.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.0-1.4142135623730951i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([d (/ b (* 2 a))])\n    (if (zero? a)\n        (error \"Not a parabola\")\n        (- (/ c a) (* d d)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmkzr7d5f.rkt:15:4\nactual:     31/100\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmkzr7d5f.rkt:16:4\nactual:     20/81\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmkzr7d5f.rkt:17:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (if (zero? a)\n        (error \"a cannot be zero\")\n        (+ c (* a (square x))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmp4evgj5zv.rkt:8:19: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmp4evgj5zv.rkt:8:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* (* 2 a) x) b))\n  (define (newton f df guess)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.001))\n    (define (try guess)\n      (let ((next (newton-transform guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (define (newton-transform x)\n      (- x (/ (f x) (df x))))\n    (try guess))\n  (newton f df 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123533,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe7r33lxj.rkt:27:4\nactual:     -2/3\nexpected:   -198\n--------------------\n",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No directrix\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7_4s51a.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.3-0.5567764362830021i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7_4s51a.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.4444444444444444-0.4969039949999533i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7_4s51a.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.0-1.4142135623730951i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (let ((y (- (/ (+ (* a (expt x 2)) (* b x) c) a))))\n      (list x y))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp__noh3y3.rkt:14:4\nactual:     '(-3/10 -31/100)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp__noh3y3.rkt:15:4\nactual:     '(-4/9 -20/81)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp__noh3y3.rkt:16:4\nactual:     '(-1 -2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x-vertex (/ (- b) (* 2 a))]\n         [y-vertex (- (/ (+ (* a (expt x-vertex 2)) (* b x-vertex) c) a))])\n    (cons x-vertex y-vertex)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihcwwrxo.rkt:14:4\nactual:     '(-3/10 . -31/100)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihcwwrxo.rkt:15:4\nactual:     '(-4/9 . -20/81)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihcwwrxo.rkt:16:4\nactual:     '(-1 . -2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x0 (/ (- b) (* 2 a))))\n    (let ((y0 (+ c (* a (expt x0 2)) (* b x0))))\n      (let ((m (/ (- c) (- y0))))\n        (let ((x1 (+ x0 (/ 1 m))))\n          (let ((y1 (+ y0 (/ 1 m))))\n            (list x1 y1)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmperl_3a_l.rkt:17:4\nactual:     '(19/40 93/40)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmperl_3a_l.rkt:18:4\nactual:     '(1/9 25/9)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmperl_3a_l.rkt:19:4\nactual:     '(-1/3 14/3)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (sqrt (+ (* b b) (* 4 a c) (* 4 a x))) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvuiqywv.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvuiqywv.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvuiqywv.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper x)\n    (sqrt (+ (* a x) b)))\n  (parabola_directrix_helper c))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3d35qw4w.rkt:14:4\nactual:     3.605551275463989\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3d35qw4w.rkt:15:4\nactual:     6.6332495807108\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3d35qw4w.rkt:16:4\nactual:     4\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b 2) (/ (* a b) (2 c))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8e4q3wup.rkt:12:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8e4q3wup.rkt:13:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8e4q3wup.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x-axis-intercept (/ (- b) (* 2 a))))\n    (let ((y-axis-intercept (+ c (* a (expt x-axis-intercept 2)) (* b x-axis-intercept))))\n      (list x-axis-intercept y-axis-intercept))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vhc1vkn.rkt:14:4\nactual:     '(-3/10 31/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vhc1vkn.rkt:15:4\nactual:     '(-4/9 20/9)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vhc1vkn.rkt:16:4\nactual:     '(-1 4)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (newton-transform g)\n    (lambda (x)\n      (- x (/ (g x) (df x)))))\n  (define (fixed-point f x)\n    (if (close-enough? (f x) x)\n        x\n        (fixed-point f (f x))))\n  (define (close-enough? v1 v2)\n    (< (abs (- v1 v2)) tolerance))\n  (define tolerance 0.00001)\n  (define (try guess)\n    (fixed-point (newton-transform f) guess))\n  (try 1.0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123533,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pux5dxe.rkt:28:4\nactual:     -0.6666666666666667\nexpected:   -198\n--------------------\n",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (- (/ b (* 2 a)) (* a (x) (x)) b (x)))\n  (list (x) (y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvtu13ojp.rkt:16:4\nactual:     '(-3/10 -57/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvtu13ojp.rkt:17:4\nactual:     '(-4/9 -80/9)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvtu13ojp.rkt:18:4\nactual:     '(-1 -4)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (sqrt (+ (* b b) (* 4 a c)))))\n    (/ (- b d) (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp50yek722.rkt:13:4\nactual:     -2/5\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp50yek722.rkt:14:4\nactual:     -0.3567891723253309\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp50yek722.rkt:15:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (newton x)\n    (newton-help x (df x) 0.000001))\n  (define (newton-help x dx epsilon)\n    (if (&lt; (abs (- x (newton-next x dx))) epsilon)\n        x\n        (newton-help (newton-next x dx) dx epsilon)))\n  (define (newton-next x dx)\n    (/ (- (f x) 0) dx))\n  (newton 0))\n</code>\nI'm not sure why this is not working. I've tried to debug it, but I'm not sure what's going on.\nI'm trying to find the directrix of a parabola with the equation <code>y = x^2 + 2x + 3</code>.\nI'm trying to use Newton's method to find the root of the derivative of the function, which is <code>y' = 2x + 2</code>.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x + 2</code> using Newton's method.\nI'm trying to find the root of <code>2x +\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmpmsnyw_76.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 18\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (f x) (* a x)))\n  (define (h x)\n    (- (g x) (* b x)))\n  (define (i x)\n    (- (h x) c))\n  (define (j x)\n    (/ (i x) (* 2 b)))\n  (define (k x)\n    (- (j x) (/ a (* 2 b))))\n  (define (l x)\n    (- (k x) (/ c (* 2 b))))\n  (define (m x)\n    (/ (l x) 2))\n  (define (n x)\n    (- (m x) (/ a 2)))\n  (define (o x)\n    (- (n x) (/ c 2)))\n  (define (p x)\n    (/ (o x) 2))\n  (define (q x)\n    (- (p x) (/ a 2)))\n  (define (r x)\n    (- (q x) (/ c 2)))\n  (define (s x)\n    (/ (r x) 2))\n  (define (t x)\n    (- (s x) (/ a 2)))\n  (define (u x)\n    (- (t x) (/ c 2)))\n  (define (v x)\n    (/ (u x) 2))\n  (define (w x)\n    (- (v x) (/ a 2)))\n  (define (x x)\n    (- (w x) (/ c 2)))\n  (define (y x)\n    (/ (x x) 2))\n  (define (z x)\n    (- (y x) (/ a 2)))\n  (define (aa x)\n    (- (z x) (/ c 2)))\n  (define (bb x)\n    (/ (aa x) 2))\n  (define (cc x)\n    (- (bb x) (/ a 2)))\n  (define (dd x)\n    (- (cc x) (/ c 2)))\n  (define (ee x)\n    (/ (dd x) 2))\n  (define (ff x)\n    (- (ee x) (/ a 2)))\n  (define (gg x)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmpp3w5xhgn.rkt:59:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 60\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (* (/ (* -1 a) (* 2 a))\n          (* x x))))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb7ew3lto.rkt:16:4\nactual:     3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb7ew3lto.rkt:17:4\nactual:     4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb7ew3lto.rkt:18:4\nactual:     1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- b (/ (* b b) (4*a)))])\n    (if (negative? a)\n        (list x)\n        (list (add1 x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmpcvwk7ud9.rkt:5:28: 4*a: unbound identifier\n  in: 4*a\n  location...:\n   /tmp/tmpcvwk7ud9.rkt:5:28\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (define (parabola y)\n      (+ (* a y) (* b y) c))\n    (define (derivative y)\n      (+ (* a 2) b))\n    (define (newton-transform g)\n      (lambda (x)\n        (- x (/ (g x) (derivative x)))))\n    (define (try guess)\n      (let ((next (newton-transform parabola guess)))\n        (if (close-enough? guess (next guess))\n            guess\n            (try (next guess)))))\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.001))\n    (try x))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu46unks9.rkt:28:4\n\nnewton-transform: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu46unks9.rkt:29:4\n\nnewton-transform: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu46unks9.rkt:30:4\n\nnewton-transform: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (+ (/ (* b b) (* 4 a)) (/ c a))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55v2swtd.rkt:14:4\nactual:     '(-3/10 17/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55v2swtd.rkt:15:4\nactual:     '(-4/9 20/9)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55v2swtd.rkt:16:4\nactual:     '(-1 5)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (* a x) b))\n  (directrix (/ (- 0 c) (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgjvzkeul.rkt:14:4\nactual:     2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgjvzkeul.rkt:15:4\nactual:     6\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgjvzkeul.rkt:16:4\nactual:     1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (if (zero? a)\n        (error \"Not a parabola\")\n        (if (positive? a)\n            (- (/ c (+ (* 2 a) (* b x))))\n            (- (/ c (+ (* 2 a) (* b x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj64lugxk.rkt:17:4\nactual:     -20/91\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj64lugxk.rkt:18:4\nactual:     -18/65\nexpected:   -2336\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj64lugxk.rkt:19:4\n\n/: division by zero\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b 2) (* a x) (* b x) c))\n  (define (directrix-helper x)\n    (define (f x)\n      (- (directrix x) x))\n    (define (f-prime x)\n      (- (* a 2) b))\n    (define (f-prime-prime x)\n      0)\n    (define (newton-helper x)\n      (newton-method f f-prime f-prime-prime x))\n    (newton-helper x))\n  (directrix-helper (/ b 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmplzsfldh1.rkt:15:7: newton-method: unbound identifier\n  in: newton-method\n  location...:\n   /tmp/tmplzsfldh1.rkt:15:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x) (+ (* a x) (* b x x) c))\n  (define (df x) (+ (* a 1) (* b 2 x)))\n  (define (newton x)\n    (if (close-enough? (f x) 0)\n        x\n        (newton (average x (- x (/ (f x) (df x)))))))\n  (define (average x y) (/ (+ x y) 2))\n  (define (close-enough? x y) (< (abs (- x y)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123533,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzng5udys.rkt:20:4\nactual:\n  -3788267678718265286463805862111635723296674775558500373104834155422692766077649702887155044421679846272576865032145909687868767873875300742760646432429926924274611683228738838741767467721732453662989949339320423608176703298618184104613697699900614150389294697002819057581832777249253623406545204299156734504150260460791775084751350837295254811490417558378624034323584558115669233427459498193262886672471877227967585492023549370327868640374030359206351233596451560962177068857030070918180544284626897369643295393541023494754201184272123705458181214733854076240336222604886462977879259722431027242652763035638708626561511236857647238346926580527065139662328671381962759041939743189157587853489242425767116357717072220859698660308658824997011372564473081315666962107178665189180834786877334650008588854143414087837004885525154030853773941686022804253748028242770497989597702483373578202385082146414312985541331548804177191502456642969481181169399157797745498585409836694490579169116029595357429818079453708747688783302057731311908519448108425638571188994516983913272477342440588696786503405017765919347414193161809016998962332212576108858546819513604116376492994390019862285484328963961989905129916656599694538394281289198778552897684998045757366460063984395273447274984111583403916790138685112189152839802534345713292185692194651410560989438833696593796159959592733519771471053856359671334907164164128317409205236581162198022400841365330947109028406799393147784992994758629548869284918490109962292781200700378954098658468062753257991597499618520217987165944915535508109768098583423852268895239774971890280705821263682179282783025864986503520556555140467492720795637858597361870052198571160512993211806416021826210890322620734130351236648261694261205673350719643515090151741433624979498821107402665103532819550803304378521103578106425044165867892303422708361394728318146726201582637275457360127736586828490892834109257477770075689173123847866088897",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (- (/ c a) (* x x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:13:4\nactual:     31/100\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:14:4\nactual:     20/81\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:15:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) x))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (if (positive? a)\n        (parabola_directrix_positive a b c x)\n        (parabola_directrix_negative a b c x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmp6bvmzh10.rkt:7:9: parabola_directrix_positive: unbound identifier\n  in: parabola_directrix_positive\n  location...:\n   /tmp/tmp6bvmzh10.rkt:7:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x0 (/ (- b) (* 2 a))]\n         [y0 (+ (* a (sqr x0)) (* b x0) c)])\n    (line x0 y0 (angle (point x0 y0) (point 0 y0)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmpx0_as02j.rkt:7:5: line: unbound identifier\n  in: line\n  location...:\n   /tmp/tmpx0_as02j.rkt:7:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([d (/ (* -2 a) b)])\n    (if (zero? b)\n        (error \"The parabola is vertical.\")\n        (if (zero? a)\n            (error \"The parabola is horizontal.\")\n            (if (zero? c)\n                (error \"The parabola is a line.\")\n                (if (zero? d)\n                    (error \"The parabola is a point.\")\n                    (if (zero? (- (* a d) c))\n                        (error \"The parabola is a point.\")\n                        (if (zero? (- (* a d) c))\n                            (error \"The parabola is a point.\")\n                            (if (zero? (- (* a d) c))\n                                (error \"The parabola is a point.\")\n                                (if (zero? (- (* a d) c))\n                                    (error \"The parabola is a point.\")\n                                    (if (zero? (- (* a d) c))\n                                        (error \"The parabola is a point.\")\n                                        (if (zero? (- (* a d) c))\n                                            (error \"The parabola is a point.\")\n                                            (if (zero? (- (* a d) c))\n                                                (error \"The parabola is a point.\")\n                                                (if (zero? (- (* a d) c))\n                                                    (error \"The parabola is a point.\")\n                                                    (if (zero? (- (* a d) c))\n                                                        (error \"The parabola is a point.\")\n                                                        (if (zero? (- (* a d) c))\n                                                            (error \"The parabola is a point.\")\n                                                            (if (zero? (- (* a d) c))\n                                                                (error \"The parabola is a point.\")\n                                                                (if (zero? (- (* a d) c))\n                                                                    (error \"The parabola is a point.\")\n                                                                    (if (zero? (- (* a d) c))\n                                                                        (error \"The parabola is a point.\")\n                                                                        (if (zero? (- (* a d)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmpearq9446.rkt:40:83: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 41\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:14:4\nactual:     '(-3/10 -2/3)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:15:4\nactual:     '(-4/9 -1/2)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:16:4\nactual:     '(-1 -3/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- b (/ (sqrt (* (- (* b b) (* 4 a c)))) (* 2 a)))))\n    (if (negative? a)\n        (if (negative? c)\n            (+ x)\n            (- x))\n        (if (negative? c)\n            (- x)\n            (+ x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpffa5che_.rkt:19:4\nactual:     3.0-0.5567764362830021i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpffa5che_.rkt:20:4\nactual:     8.0-0.4969039949999533i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpffa5che_.rkt:21:4\nactual:     4.0-1.4142135623730951i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (if (zero? a)\n        (error \"a is zero\")\n        (if (zero? b)\n            (error \"b is zero\")\n            (if (zero? c)\n                (error \"c is zero\")\n                (if (zero? x)\n                    (error \"x is zero\")\n                    (if (zero? y)\n                        (error \"y is zero\")\n                        (if (zero? (- y))\n                            (error \"y is zero\")\n                            (if (zero? (- x))\n                                (error \"x is zero\")\n                                (if (zero? (- y x))\n                                    (error \"y - x is zero\")\n                                    (if (zero? (- y x))\n                                        (error \"y - x is zero\")\n                                        (if (zero? (- y x))\n                                            (error \"y - x is zero\")\n                                            (if (zero? (- y x))\n                                                (error \"y - x is zero\")\n                                                (if (zero? (- y x))\n                                                    (error \"y - x is zero\")\n                                                    (if (zero? (- y x))\n                                                        (error \"y - x is zero\")\n                                                        (if (zero? (- y x))\n                                                            (error \"y - x is zero\")\n                                                            (if (zero? (- y x))\n                                                                (error \"y - x is zero\")\n                                                                (if (zero? (- y x))\n                                                                    (error \"y - x is zero\")\n                                                                    (if (zero? (- y x))\n                                                                        (error \"y - x is zero\")\n                                                                        (if (zero? (- y x))\n                                                                            (error \"y - x is zero\")\n                                                                            (if (zero? (- y x))\n                                                                                (error \"y - x is zero\")\n                                                                                (if (zero? (- y x))\n                                                                                    (error \"y - x is zero\")\n                                                                                   \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmp0ypfgnaz.rkt:45:80: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 48\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg4qbcm6.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg4qbcm6.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg4qbcm6.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper_derivative x)\n    (+ (* 2 a) (* 4 b x)))\n  (define (newton_raphson_helper x)\n    (- x (/ (parabola_directrix_helper x) (parabola_directrix_helper_derivative x))))\n  (define (newton_raphson_helper_iter x)\n    (newton_raphson_helper (newton_raphson_helper x)))\n  (define (newton_raphson_helper_iter_iter x)\n    (newton_raphson_helper_iter (newton_raphson_helper_iter x)))\n  (define (newton_raphson_helper_iter_iter_iter x)\n    (newton_raphson_helper_iter_iter (newton_raphson_helper_iter_iter x)))\n  (define (newton_raphson_helper_iter_iter_iter_iter x)\n    (newton_raphson_helper_iter_iter_iter (newton_raphson_helper_iter_iter_iter x)))\n  (define (newton_raphson_helper_iter_iter_iter_iter_iter x)\n    (newton_raphson_helper_iter_iter_iter_iter (newton_raphson_helper_iter_iter_iter_iter x)))\n  (define (newton_raphson_helper_iter_iter_iter_iter_iter_iter x)\n    (newton_raphson_helper_iter_iter_iter_iter_iter (newton_raphson_helper_iter_iter_iter_iter_iter x)))\n  (define (newton_raphson_helper_iter_iter_iter_iter_iter_iter_iter x)\n    (newton_raphson_helper_iter_iter_iter_iter_iter_iter (newton_raphson_helper_iter_iter_iter_iter_iter_iter x)))\n  (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmpcws1ozib.rkt:25:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 26\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (* a x) b))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphlu1ju03.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphlu1ju03.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphlu1ju03.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- b (/ (sqrt (* b b (- 4 (* 4 a c)))) (* 2 a)))))\n    (if (and (number? x) (not (complex? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp49pzte07.rkt:15:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp49pzte07.rkt:16:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp49pzte07.rkt:17:4\n\nNo real solution\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnvd5sp68.rkt:12:4\nactual:     0.3-5.5677643628300215i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnvd5sp68.rkt:13:4\nactual:     0.4444444444444444-8.94427190999916i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnvd5sp68.rkt:14:4\nactual:     1.0-5.656854249492381i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (* b b) (* 4 a c))))\n    (if (&lt; x 0)\n        (error \"No real solution\")\n        (/ (- b) (* 2 a)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmpzi6h2ad3.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x) (+ (* a x) (* b x x) c))\n  (define (g x) (- (f x) (* a x)))\n  (define (h x) (- (g x) (* b x)))\n  (define (i x) (- (h x) c))\n  (define (j x) (- (i x) b))\n  (define (k x) (- (j x) a))\n  (define (l x) (/ (k x) (* -2 a)))\n  (l 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83xkcazc.rkt:19:4\nactual:     4/5\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83xkcazc.rkt:20:4\nactual:     17/18\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83xkcazc.rkt:21:4\nactual:     3/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (- (/ b (* 2 a))))\n  (define (y)\n    (+ (/ (* b b) (* 4 a)) c))\n  (cons x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkpigcydk.rkt:16:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkpigcydk.rkt:17:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkpigcydk.rkt:18:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (complex? x)))\n        (let ([y (- (/ (+ (* a x) b) (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n          (if (and (number? y) (not (complex? y)))\n              (list x y)\n              (error \"The directrix is not a real number\")))\n        (error \"The directrix is not a real number\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4iylh_qh.rkt:18:4\n\nThe directrix is not a real number\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4iylh_qh.rkt:19:4\n\nThe directrix is not a real number\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4iylh_qh.rkt:20:4\n\nThe directrix is not a real number\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (ddf x)\n    b)\n  (define (newton-raphson f df x)\n    (define (iter x)\n      (let ((x1 (- x (/ (f x) (df x)))))\n        (if (close-enough? x x1)\n            x1\n            (iter x1))))\n    (iter x))\n  (define (close-enough? x y)\n    (< (abs (- x y)) 0.00001))\n  (define (derivative f)\n    (lambda (x)\n      (/ (- (f (+ x 0.00001)) (f x)) 0.00001)))\n  (define (ddf x)\n    (define (f x)\n      (+ (* a x) (* b x x) c))\n    ((derivative (derivative f)) x))\n  (define (dddf x)\n    (define (f x)\n      (+ (* a x) (* b x x) c))\n    ((derivative (derivative (derivative f))) x))\n  (define (ddddf x)\n    (define (f x)\n      (+ (* a x) (* b x x) c))\n    ((derivative (derivative (derivative (derivative f)))) x))\n  (define (dddddf x)\n    (define (f x)\n      (+ (* a x) (* b x x) c))\n    ((derivative (derivative (derivative (derivative (derivative f))))) x))\n  (define (ddddddf x)\n    (define (f x)\n      (+ (* a x) (* b x x) c))\n    ((derivative (derivative (derivative (derivative (derivative (derivative f)))))) x))\n  (define (dddddddf x)\n    (define (f x)\n      (+ (* a x) (* b x x) c))\n    ((derivative (derivative (derivative (derivative (der\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmp73puq9f3.rkt:46:53: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 47\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (newton-transform g)\n    (lambda (x)\n      (- x (/ (g x) (df x)))))\n  (define (fixed-point f x)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.00001))\n    (define (try guess)\n      (let ((next (f guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (try x))\n  (define (find-zero f)\n    (fixed-point (newton-transform f) 1.0))\n  (define (find-y f x)\n    (f x))\n  (- (/ 1 a) (find-y f (find-zero f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123534,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9h0h_xmi.rkt:32:4\nactual:     0.19999999999999934\nexpected:   -198\n--------------------\n",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ b (* -2 a))])\n    (let ([y (- c (* a (sqr x)))])\n      (list x y))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvjxbri3.rkt:14:4\nactual:     '(-3/10 31/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvjxbri3.rkt:15:4\nactual:     '(-4/9 20/9)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvjxbri3.rkt:16:4\nactual:     '(-1 4)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x) (/ (- b) (* 2 a)))\n  (define (y) (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_lie6ui8.rkt:14:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_lie6ui8.rkt:15:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_lie6ui8.rkt:16:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (ddf x)\n    b)\n  (define (newton-raphson f df x)\n    (define (iter x)\n      (let ((x1 (- x (/ (f x) (df x)))))\n        (if (close-enough? x x1)\n            x1\n            (iter x1))))\n    (iter x))\n  (define (close-enough? x y)\n    (< (abs (- x y)) 0.001))\n  (define (derivative f)\n    (lambda (x)\n      (/ (- (f (+ x 0.001)) (f x)) 0.001)))\n  (define (newton-raphson f df x)\n    (define (iter x)\n      (let ((x1 (- x (/ (f x) (df x)))))\n        (if (close-enough? x x1)\n            x1\n            (iter x1))))\n    (iter x))\n  (define (newton-raphson f x)\n    (newton-raphson f (derivative f) x))\n  (define (newton-raphson f x)\n    (define (iter x)\n      (let ((x1 (- x (/ (f x) (df x)))))\n        (if (close-enough? x x1)\n            x1\n            (iter x1))))\n    (iter x))\n  (define (newton-raphson f x)\n    (define (iter x)\n      (let ((x1 (- x (/ (f x) (df x)))))\n        (if (close-enough? x x1)\n            x1\n            (iter x1))))\n    (iter x))\n  (define (newton-raphson f x)\n    (define (iter x)\n      (let ((x1 (- x (/ (f x) (df x)))))\n        (if (close-enough? x x1)\n            x1\n            (iter x1))))\n    (iter x))\n  (define (newton-raphson f x)\n    (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123519,
      "stdout": "",
      "stderr": "/tmp/tmp6ogrl3h8.rkt:54:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 55\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x-vertex (/ (- b) (* 2 a))])\n    (- (/ c) (* a (sqr x-vertex)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp74e7hayk.rkt:13:4\nactual:     1/20\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp74e7hayk.rkt:14:4\nactual:     -55/36\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp74e7hayk.rkt:15:4\nactual:     -11/6\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (complex? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:15:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:16:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:17:4\n\nNo real solution\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (- (/ b (* 2 a))\n       (* a (square (/ b (* 2 a))))\n       c))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "/tmp/tmpqkutw33z.rkt:9:13: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpqkutw33z.rkt:9:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (* -1 a) b))\n  (define (y)\n    (+ (* -1 c) (* (x) (x))))\n  (list (x) (y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn3mocsok.rkt:16:4\nactual:     '(-5/3 7/9)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn3mocsok.rkt:17:4\nactual:     '(-9/8 -175/64)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn3mocsok.rkt:18:4\nactual:     '(-1/2 -23/4)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x-vertex (/ (* -1 b) (* 2 a))]\n         [y-vertex (+ (* a (sqr x-vertex)) (* b x-vertex) c)])\n    (- y-vertex (/ (sqr b) (* 4 a)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjjka7ak.rkt:14:4\nactual:     11/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjjka7ak.rkt:15:4\nactual:     4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjjka7ak.rkt:16:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (let ([y (- (/ (+ (* a (sqr x)) (* b x) c) b))])\n      (list x y))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_fkj6lp.rkt:14:4\nactual:     '(-3/10 -31/60)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_fkj6lp.rkt:15:4\nactual:     '(-4/9 -5/18)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_fkj6lp.rkt:16:4\nactual:     '(-1 -1)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* a (sqr x)) (* b x) c)\n          (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr (- (/ b (* 2 a)) x))\n                (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxbinxt2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxbinxt2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxbinxt2.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (/ (- b) (* 2 a))))\n    (if (negative? a)\n        (+ d)\n        (- d))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8tkzhiiq.rkt:15:4\nactual:     3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8tkzhiiq.rkt:16:4\nactual:     4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8tkzhiiq.rkt:17:4\nactual:     1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (/ (- b) (* 2 a)))\n  (directrix))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx9ugtska.rkt:14:4\n\ndirectrix: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx9ugtska.rkt:15:4\n\ndirectrix: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx9ugtska.rkt:16:4\n\ndirectrix: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No directrix exists for this parabola.\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp449ustu1.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.3-0.5567764362830021i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp449ustu1.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.4444444444444444-0.4969039949999533i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp449ustu1.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.0-1.4142135623730951i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([d (/ b (* 2 a))])\n    (- d (/ (sqrt (+ (sqr d) (* 4 a c))) (* 2 a)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1p7cw_f1.rkt:13:4\nactual:     -0.3331666447310692\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1p7cw_f1.rkt:14:4\nactual:     -0.22267931289413812\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1p7cw_f1.rkt:15:4\nactual:     -3/4\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (if (positive? a)\n        (line_from_points (make-point x 0) (make-point x 1))\n        (line_from_points (make-point x 0) (make-point x -1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "/tmp/tmp4ek9b5t2.rkt:7:9: line_from_points: unbound identifier\n  in: line_from_points\n  location...:\n   /tmp/tmp4ek9b5t2.rkt:7:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b 2) (/ (* a b) (sqrt (* 4 a c))))])\n    (- (/ c x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8bw9v6b2.rkt:13:4\nactual:     2.2943456267415017\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8bw9v6b2.rkt:14:4\nactual:     2\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8bw9v6b2.rkt:15:4\nactual:     -7.098076211353317\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (* b b) (* 4 a c))])\n    (cond\n      [(> x 0) (/ (- b) (* 2 a))]\n      [(= x 0) (/ (- b) (* 2 a))]\n      [(< x 0) (/ (- b) (* 2 a))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7d_so3j5.rkt:16:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7d_so3j5.rkt:17:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7d_so3j5.rkt:18:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (* a x) (* b x x) c))\n  (define (h x)\n    (- (* a x) (* b x x) c))\n  (define (i x)\n    (+ (* a x) (* b x x) c))\n  (define (j x)\n    (- (* a x) (* b x x) c))\n  (define (k x)\n    (- (* a x) (* b x x) c))\n  (define (l x)\n    (+ (* a x) (* b x x) c))\n  (define (m x)\n    (- (* a x) (* b x x) c))\n  (define (n x)\n    (- (* a x) (* b x x) c))\n  (define (o x)\n    (+ (* a x) (* b x x) c))\n  (define (p x)\n    (- (* a x) (* b x x) c))\n  (define (q x)\n    (- (* a x) (* b x x) c))\n  (define (r x)\n    (+ (* a x) (* b x x) c))\n  (define (s x)\n    (- (* a x) (* b x x) c))\n  (define (t x)\n    (- (* a x) (* b x x) c))\n  (define (u x)\n    (+ (* a x) (* b x x) c))\n  (define (v x)\n    (- (* a x) (* b x x) c))\n  (define (w x)\n    (- (* a x) (* b x x) c))\n  (define (x x)\n    (+ (* a x) (* b x x) c))\n  (define (y x)\n    (- (* a x) (* b x x) c))\n  (define (z x)\n    (- (* a x) (* b x x) c))\n  (define (aa x)\n    (+ (* a x) (* b x x) c))\n  (define (bb x)\n    (- (* a x) (* b x x) c))\n  (define (cc\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "/tmp/tmpcuil2y1k.rkt:51:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 52\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (/ (+ (* x x) (* b x) c) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp745nwx6.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp745nwx6.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp745nwx6.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (- (/ c x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoa2z45.rkt:13:4\nactual:     -1.5000000000000002-2.783882181415011i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoa2z45.rkt:14:4\nactual:     -4.0-4.47213595499958i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoa2z45.rkt:15:4\nactual:     -1.9999999999999998-2.82842712474619i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No directrix\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7_4s51a.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.3-0.5567764362830021i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7_4s51a.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.4444444444444444-0.4969039949999533i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7_4s51a.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.0-1.4142135623730951i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (sqrt (/ (sqr b) (* 4 a c)))])\n    (cond [(> a 0) (+ x (/ b (* 2 a)))]\n          [(< a 0) (- x (/ b (* 2 a))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "/tmp/tmpkd027rk1.rkt:7:38: read-syntax: missing `]` to close preceding `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (* -1 b) (* 2 a))])\n    (let ([y (+ (* a (sqr x)) (* b x) c)])\n      (let ([d (/ (* -1 y) a)])\n        (list x d)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp99ezcbjg.rkt:15:4\nactual:     '(-3/10 -31/100)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp99ezcbjg.rkt:16:4\nactual:     '(-4/9 -20/81)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp99ezcbjg.rkt:17:4\nactual:     '(-1 -2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (- (/ c a)))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphphu37aq.rkt:16:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphphu37aq.rkt:17:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphphu37aq.rkt:18:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* a (square x)) (* b x) c)\n          (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "/tmp/tmpvainw3ta.rkt:7:19: square: unbound identifier\n  in: square\n  location...:\n   /tmp/tmpvainw3ta.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (- (sqr (+ (sqr x) (* a x))) (* b x))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5nrsps6m.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5nrsps6m.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5nrsps6m.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (/ c x) (/ b x)))\n  (define (h x)\n    (- (/ c x) (/ b x)))\n  (define (i x)\n    (- (/ c x) (/ b x)))\n  (define (j x)\n    (- (/ c x) (/ b x)))\n  (define (k x)\n    (- (/ c x) (/ b x)))\n  (define (l x)\n    (- (/ c x) (/ b x)))\n  (define (m x)\n    (- (/ c x) (/ b x)))\n  (define (n x)\n    (- (/ c x) (/ b x)))\n  (define (o x)\n    (- (/ c x) (/ b x)))\n  (define (p x)\n    (- (/ c x) (/ b x)))\n  (define (q x)\n    (- (/ c x) (/ b x)))\n  (define (r x)\n    (- (/ c x) (/ b x)))\n  (define (s x)\n    (- (/ c x) (/ b x)))\n  (define (t x)\n    (- (/ c x) (/ b x)))\n  (define (u x)\n    (- (/ c x) (/ b x)))\n  (define (v x)\n    (- (/ c x) (/ b x)))\n  (define (w x)\n    (- (/ c x) (/ b x)))\n  (define (x x)\n    (- (/ c x) (/ b x)))\n  (define (y x)\n    (- (/ c x) (/ b x)))\n  (define (z x)\n    (- (/ c x) (/ b x)))\n  (define (aa x)\n    (- (/ c x) (/ b x)))\n  (define (bb x)\n    (- (/ c x) (/ b x)))\n  (define (cc x)\n    (- (/ c x) (/ b x)))\n  (define (dd x)\n    (- (/ c x) (/ b x)))\n  (define (ee x)\n    (- (/ c x) (/ b x)))\n  (define (ff x)\n    (- (/ c x)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123518,
      "stdout": "",
      "stderr": "/tmp/tmpmmgrsasq.rkt:58:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 59\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b 2) (* a x)))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuzp_wrxh.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuzp_wrxh.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuzp_wrxh.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (- (* 4 a c) (* b b))))\n    (if (negative? d)\n        (error \"No real solution\")\n        (let ((x (/ (- (* -2 a) b) (* 2 a))))\n          (if (positive? a)\n              (list x)\n              (list x (list x)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkqplmxc_.rkt:18:4\nactual:     '(-13/10)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkqplmxc_.rkt:19:4\nactual:     '(-13/9)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkqplmxc_.rkt:20:4\nactual:     '(-2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (- (sqr (- x a)) (* b c))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7x4lb9td.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7x4lb9td.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7x4lb9td.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* a (sqr x)) (* b x) c)\n          (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper x)\n    (- (/ b (* 2 a))\n       (/ (+ (* b x) (* c x x)) (* 2 a))))\n  (parabola_directrix_helper 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ivdauqk.rkt:15:4\nactual:     3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ivdauqk.rkt:16:4\nactual:     4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ivdauqk.rkt:17:4\nactual:     1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (* a x) (* b x x) c))\n  (define (h x)\n    (- (* a x) (* b x x) c))\n  (define (i x)\n    (- (* a x) (* b x x) c))\n  (define (j x)\n    (- (* a x) (* b x x) c))\n  (define (k x)\n    (- (* a x) (* b x x) c))\n  (define (l x)\n    (- (* a x) (* b x x) c))\n  (define (m x)\n    (- (* a x) (* b x x) c))\n  (define (n x)\n    (- (* a x) (* b x x) c))\n  (define (o x)\n    (- (* a x) (* b x x) c))\n  (define (p x)\n    (- (* a x) (* b x x) c))\n  (define (q x)\n    (- (* a x) (* b x x) c))\n  (define (r x)\n    (- (* a x) (* b x x) c))\n  (define (s x)\n    (- (* a x) (* b x x) c))\n  (define (t x)\n    (- (* a x) (* b x x) c))\n  (define (u x)\n    (- (* a x) (* b x x) c))\n  (define (v x)\n    (- (* a x) (* b x x) c))\n  (define (w x)\n    (- (* a x) (* b x x) c))\n  (define (x x)\n    (- (* a x) (* b x x) c))\n  (define (y x)\n    (- (* a x) (* b x x) c))\n  (define (z x)\n    (- (* a x) (* b x x) c))\n  (define (aa x)\n    (- (* a x) (* b x x) c))\n  (define (bb x)\n    (- (* a x) (* b x x) c))\n  (define (cc\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "/tmp/tmp5fx885kd.rkt:51:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 52\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (/ c x) (/ b x x)))\n  (define (h x)\n    (- (/ c x) (/ b x x)))\n  (define (i x)\n    (- (/ c x) (/ b x x)))\n  (define (j x)\n    (- (/ c x) (/ b x x)))\n  (define (k x)\n    (- (/ c x) (/ b x x)))\n  (define (l x)\n    (- (/ c x) (/ b x x)))\n  (define (m x)\n    (- (/ c x) (/ b x x)))\n  (define (n x)\n    (- (/ c x) (/ b x x)))\n  (define (o x)\n    (- (/ c x) (/ b x x)))\n  (define (p x)\n    (- (/ c x) (/ b x x)))\n  (define (q x)\n    (- (/ c x) (/ b x x)))\n  (define (r x)\n    (- (/ c x) (/ b x x)))\n  (define (s x)\n    (- (/ c x) (/ b x x)))\n  (define (t x)\n    (- (/ c x) (/ b x x)))\n  (define (u x)\n    (- (/ c x) (/ b x x)))\n  (define (v x)\n    (- (/ c x) (/ b x x)))\n  (define (w x)\n    (- (/ c x) (/ b x x)))\n  (define (x x)\n    (- (/ c x) (/ b x x)))\n  (define (y x)\n    (- (/ c x) (/ b x x)))\n  (define (z x)\n    (- (/ c x) (/ b x x)))\n  (define (aa x)\n    (- (/ c x) (/ b x x)))\n  (define (bb x)\n    (- (/ c x) (/ b x x)))\n  (define (cc x)\n    (- (/ c x) (/ b x x)))\n  (define (dd x)\n    (- (/ c x) (/ b x x)))\n  (define (ee x)\n   \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "/tmp/tmp19lfoo9m.rkt:55:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 57\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- b (/ (sqrt (* (- (* b b) (* 4 a c)) (* 4 a))) (* 2 a)))))\n    (- x (/ c (* 2 a)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptk2xgome.rkt:13:4\nactual:     2.8-2.4899799195977463i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptk2xgome.rkt:14:4\nactual:     7.777777777777778-2.9814239699997196i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptk2xgome.rkt:15:4\nactual:     5/2-4i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper2 x)\n    (- (* a x) (* b x x) c))\n  (define (parabola_directrix_helper3 x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper4 x)\n    (- (* a x) (* b x x) c))\n  (define (parabola_directrix_helper5 x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper6 x)\n    (- (* a x) (* b x x) c))\n  (define (parabola_directrix_helper7 x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper8 x)\n    (- (* a x) (* b x x) c))\n  (define (parabola_directrix_helper9 x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper10 x)\n    (- (* a x) (* b x x) c))\n  (define (parabola_directrix_helper11 x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper12 x)\n    (- (* a x) (* b x x) c))\n  (define (parabola_directrix_helper13 x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper14 x)\n    (- (* a x) (* b x x) c))\n  (define (parabola_directrix_helper15 x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper16 x)\n    (- (* a x) (* b x x) c))\n  (define (parabola_directrix_helper17 x)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "/tmp/tmpdmm_h7qq.rkt:37:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 38\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (f x) (f 0)))\n  (define (h x)\n    (/ (g x) x))\n  (define (k x)\n    (- (h x) (/ b a)))\n  (define (l x)\n    (- (k x) (/ c a)))\n  (define (m x)\n    (* (l x) (l x)))\n  (define (n x)\n    (* 4 a (m x)))\n  (define (o x)\n    (- (n x) (m b)))\n  (define (p x)\n    (sqrt (o x)))\n  (define (q x)\n    (- (l x) (p x)))\n  (define (r x)\n    (- (l x) (p x)))\n  (define (s x)\n    (/ (q x) (r x)))\n  (define (t x)\n    (* a (s x)))\n  (define (u x)\n    (- (t x) b))\n  (define (v x)\n    (- (u x) c))\n  (define (w x)\n    (/ (v x) (s x)))\n  (define (x x)\n    (* -1 (w x)))\n  (x 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2yduab7b.rkt:46:4\n\n/: division by zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2yduab7b.rkt:47:4\n\n/: division by zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2yduab7b.rkt:48:4\n\n/: division by zero\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b 2) a)])\n    (- c (* a x x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16preytq.rkt:13:4\nactual:     -237/4\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16preytq.rkt:14:4\nactual:     -221\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16preytq.rkt:15:4\nactual:     6\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x1 (- b)]\n         [x2 (/ (+ (* a a) (* b b) (* c c)) (* 2 a))])\n    (if (zero? a)\n        (error \"The parabola is vertical.\")\n        (if (zero? b)\n            (error \"The parabola is horizontal.\")\n            (if (zero? c)\n                (error \"The parabola is a line.\")\n                (if (zero? (+ (* a x1) (* b x1) c))\n                    (error \"The parabola is a line.\")\n                    (if (zero? (+ (* a x2) (* b x2) c))\n                        (error \"The parabola is a line.\")\n                        (if (zero? (+ (* a x1) (* b x1) c))\n                            (error \"The parabola is a line.\")\n                            (if (zero? (+ (* a x2) (* b x2) c))\n                                (error \"The parabola is a line.\")\n                                (if (zero? (+ (* a x1) (* b x1) c))\n                                    (error \"The parabola is a line.\")\n                                    (if (zero? (+ (* a x2) (* b x2) c))\n                                        (error \"The parabola is a line.\")\n                                        (if (zero? (+ (* a x1) (* b x1) c))\n                                            (error \"The parabola is a line.\")\n                                            (if (zero? (+ (* a x2) (* b x2) c))\n                                                (error \"The parabola is a line.\")\n                                                (if (zero? (+ (* a x1) (* b x1) c))\n                                                    (error \"The parabola is a line.\")\n                                                    (if (zero? (+ (* a x2) (* b x2) c))\n                                                        (error \"The parabola is a line.\")\n                                                        (if (zero? (+ (* a x1) (* b x1) c))\n                                                            (error \"The parabola is a line.\")\n                                                            (if (zero? (+ (* a x2) (* b x2) c))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "/tmp/tmp17_ajasp.rkt:35:60: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 36\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (complex? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:15:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:16:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:17:4\n\nNo real solution\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (sqrt (/ (- b) (* 2 a))))\n  (define (y)\n    (- (/ c) (* a (sqr x))))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqwwjrwi.rkt:16:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqwwjrwi.rkt:17:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqwwjrwi.rkt:18:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([d (/ b (* 2 a))])\n    (- d (/ (sqrt (+ (sqr d) (* 4 a c))) (* 2 a)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1p7cw_f1.rkt:13:4\nactual:     -0.3331666447310692\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1p7cw_f1.rkt:14:4\nactual:     -0.22267931289413812\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1p7cw_f1.rkt:15:4\nactual:     -3/4\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (/ (+ (* a x) b) (- 0 c)))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaiqjrvv0.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaiqjrvv0.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaiqjrvv0.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b 2) a))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:12:4\nactual:     -7/2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:13:4\nactual:     -5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:14:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- b (/ (sqrt (* b b (- 4 (* 4 a c)))) (* 2 a)))])\n    (- (/ c x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnjev87a0.rkt:13:4\nactual:     -25/51-5/17i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnjev87a0.rkt:14:4\nactual:     -0.34913793103448276-0.22950309503403682i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnjev87a0.rkt:15:4\nactual:     -0.4-0.66332495807108i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (define (parabola y)\n      (+ (* a y) (* b y) c))\n    (define (derivative y)\n      (+ (* a 2) b))\n    (define (newton-transform g)\n      (lambda (x)\n        (- x (/ (g x) (derivative x)))))\n    (define (fixed-point f x)\n      (define (close-enough? v1 v2)\n        (< (abs (- v1 v2)) 0.00001))\n      (define (try guess)\n        (let ((next (f guess)))\n          (if (close-enough? guess next)\n              next\n              (try next))))\n      (try x))\n    (define (find-zero f)\n      (fixed-point (newton-transform f) 1))\n    (find-zero parabola))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6izoo5gi.rkt:32:4\nactual:     -75717250769157/302875106592253\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6izoo5gi.rkt:33:4\nactual:     -22453523272144859/95428956661682176\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6izoo5gi.rkt:34:4\nactual:     -524287/524288\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x-axis-intercept (/ (- b) (* 2 a))))\n    (let ((y-axis-intercept (+ c (* a (expt x-axis-intercept 2)) (* b x-axis-intercept))))\n      (let ((slope (- (/ b) (* 2 a))))\n        (let ((y-intercept (- y-axis-intercept (* slope x-axis-intercept))))\n          (cons slope y-intercept))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg028_uvw.rkt:16:4\nactual:     '(-29/3 . -27/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg028_uvw.rkt:17:4\nactual:     '(-143/8 . -103/18)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg028_uvw.rkt:18:4\nactual:     '(-15/4 . 1/4)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x-axis-intercept (parabola_x-axis-intercept a b c)]\n         [y-axis-intercept (parabola_y-axis-intercept a b c)]\n         [focus (make-posn (real-part x-axis-intercept)\n                           (real-part y-axis-intercept))]\n         [directrix (make-posn (real-part x-axis-intercept)\n                               (- (real-part y-axis-intercept)))])\n    (list focus directrix)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "/tmp/tmp6jx_dlnw.rkt:5:28: parabola_x-axis-intercept: unbound identifier\n  in: parabola_x-axis-intercept\n  location...:\n   /tmp/tmp6jx_dlnw.rkt:5:28\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b 2) a))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:12:4\nactual:     -7/2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:13:4\nactual:     -5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:14:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (* -1 b) (* 2 a))])\n    (let ([y (+ (* a (sqr x)) (* b x) c)])\n      (let ([d (/ (+ y c) (* -1 a))])\n        (list x d)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcyj1ez08.rkt:15:4\nactual:     '(-3/10 -71/100)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcyj1ez08.rkt:16:4\nactual:     '(-4/9 -56/81)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcyj1ez08.rkt:17:4\nactual:     '(-1 -5)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (* a x) b))\n  (directrix))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3sh5uhti.rkt:14:4\n\ndirectrix: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3sh5uhti.rkt:15:4\n\ndirectrix: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3sh5uhti.rkt:16:4\n\ndirectrix: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 0\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* (* 2 a) x) b))\n  (define (newton x)\n    (newton-help x 0.00001))\n  (define (newton-help x epsilon)\n    (if (&lt; (abs (- (f x) 0)) epsilon)\n        x\n        (newton-help (- x (/ (f x) (df x))) epsilon)))\n  (newton (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "/tmp/tmppb5vjn4d.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (ddf x)\n    b)\n  (define (newton x)\n    (newton-help x (f x) (df x) (ddf x)))\n  (define (newton-help x f df ddf)\n    (define (next x)\n      (- x (/ f df)))\n    (define (close-enough? x y)\n      (< (abs (- x y)) 0.00001))\n    (if (close-enough? x (next x))\n        x\n        (newton-help (next x) (f x) (df x) (ddf x))))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82owdzuw.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82owdzuw.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82owdzuw.rkt:30:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper_derivative x)\n    (+ (* a 1) (* b 2 x)))\n  (define (parabola_directrix_helper_derivative_derivative x)\n    (* b 2))\n  (define (newton_raphson_helper x)\n    (- x (/ (parabola_directrix_helper x)\n            (parabola_directrix_helper_derivative x))))\n  (define (newton_raphson_helper_derivative x)\n    (/ (- 1 (/ (parabola_directrix_helper_derivative x)\n               (parabola_directrix_helper_derivative x)))\n       (parabola_directrix_helper_derivative x)))\n  (define (newton_raphson_helper_derivative_derivative x)\n    (/ (- (/ (parabola_directrix_helper_derivative_derivative x)\n            (parabola_directrix_helper_derivative x))\n          (/ (parabola_directrix_helper_derivative x)\n             (parabola_directrix_helper_derivative x)))\n       (parabola_directrix_helper_derivative x)))\n  (define (newton_raphson_helper_derivative_derivative_derivative x)\n    (/ (- (/ (parabola_directrix_helper_derivative_derivative_derivative x)\n            (parabola_directrix_helper_derivative x))\n          (* 3 (/ (parabola_directrix_helper_derivative_derivative x)\n                  (parabola_directrix_helper_derivative x))))\n       (parabola_directrix_helper_derivative x)))\n  (define (newton_raphson_helper_derivative_derivative_derivative_derivative x)\n    (/ (- (/ (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "/tmp/tmpolfrpp66.rkt:31:13: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 32\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b 2) a))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:12:4\nactual:     -7/2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:13:4\nactual:     -5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:14:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* a 2) (* b 4 x)))\n  (define (newton x)\n    (newton-help f df x))\n  (define (newton-help f df guess)\n    (let ((next (newton-transform f df guess)))\n      (if (good-enough? guess next)\n          next\n          (newton-help f df next))))\n  (define (newton-transform f df guess)\n    (- guess (/ (f guess) (df guess))))\n  (define (good-enough? x y)\n    (< (abs (- x y)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpri64sexe.rkt:27:4\nactual:\n  -3788267678718265286463805862111635723296674775558500373104834155422692766077649702887155044421679846272576865032145909687868767873875300742760646432429926924274611683228738838741767467721732453662989949339320423608176703298618184104613697699900614150389294697002819057581832777249253623406545204299156734504150260460791775084751350837295254811490417558378624034323584558115669233427459498193262886672471877227967585492023549370327868640374030359206351233596451560962177068857030070918180544284626897369643295393541023494754201184272123705458181214733854076240336222604886462977879259722431027242652763035638708626561511236857647238346926580527065139662328671381962759041939743189157587853489242425767116357717072220859698660308658824997011372564473081315666962107178665189180834786877334650008588854143414087837004885525154030853773941686022804253748028242770497989597702483373578202385082146414312985541331548804177191502456642969481181169399157797745498585409836694490579169116029595357429818079453708747688783302057731311908519448108425638571188994516983913272477342440588696786503405017765919347414193161809016998962332212576108858546819513604116376492994390019862285484328963961989905129916656599694538394281289198778552897684998045757366460063984395273447274984111583403916790138685112189152839802534345713292185692194651410560989438833696593796159959592733519771471053856359671334907164164128317409205236581162198022400841365330947109028406799393147784992994758629548869284918490109962292781200700378954098658468062753257991597499618520217987165944915535508109768098583423852268895239774971890280705821263682179282783025864986503520556555140467492720795637858597361870052198571160512993211806416021826210890322620734130351236648261694261205673350719643515090151741433624979498821107402665103532819550803304378521103578106425044165867892303422708361394728318146726201582637275457360127736586828490892834109257477770075689173123847866088897",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (define (parabola y)\n      (+ (* a y) (* b y) c))\n    (define (derivative y)\n      (+ (* a 2) b))\n    (define (newton y)\n      (newton-raphson parabola derivative y))\n    (newton x))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "/tmp/tmpjo1byr99.rkt:11:7: newton-raphson: unbound identifier\n  in: newton-raphson\n  location...:\n   /tmp/tmpjo1byr99.rkt:11:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (/ (* -1 b) (* 2 a))))\n    (list d (parabola_y d a b c))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "/tmp/tmp2l8pa3pn.rkt:6:13: parabola_y: unbound identifier\n  in: parabola_y\n  location...:\n   /tmp/tmp2l8pa3pn.rkt:6:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (/ (+ (* 4 a c) (sqr b)) (* 4 a))))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6xne1k8.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6xne1k8.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6xne1k8.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* 2 a) (* 4 b x)))\n  (define (newton x)\n    (newton-help x (df x) (f x)))\n  (define (newton-help x dx fx)\n    (if (close-enough? x dx)\n        x\n        (newton-help (improve x dx fx) dx fx)))\n  (define (improve x dx fx)\n    (- x (/ fx dx)))\n  (define (close-enough? x dx)\n    (< (abs (- x dx)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([d (/ b (* 2 a))])\n    (if (zero? a)\n        (error \"a cannot be zero\")\n        (if (zero? b)\n            (error \"b cannot be zero\")\n            (if (zero? c)\n                (error \"c cannot be zero\")\n                (- d)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "/tmp/tmpd3br0nfu.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x1 (- b)]\n         [x2 (/ (- b) 2)])\n    (cond [(> a 0) (+ x1 c)]\n          [(< a 0) (+ x2 c)]\n          [else (error \"a cannot be 0\")])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5znbyfqf.rkt:16:4\nactual:     -1\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5znbyfqf.rkt:17:4\nactual:     -4\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5znbyfqf.rkt:18:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b 2) (* a x)))\n  (directrix (/ (- c b) (2 * a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qe_imhm.rkt:14:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qe_imhm.rkt:15:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qe_imhm.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x1 (/ (- b) (* 2 a))))\n    (let ((y1 (+ (* a (sqr x1)) (* b x1) c)))\n      (let ((x2 (/ (- b) (* 2 a))))\n        (let ((y2 (+ (* a (sqr x2)) (* b x2) c)))\n          (let ((slope (/ (- y2 y1) (- x2 x1))))\n            (let ((y-intercept (- y1 (* slope x1))))\n              (let ((directrix-slope (/ -1 slope)))\n                (let ((directrix-y-intercept (- y-intercept (* directrix-slope x1))))\n                  (list directrix-slope directrix-y-intercept))))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdx2o3j0.rkt:20:4\n\n/: division by zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdx2o3j0.rkt:21:4\n\n/: division by zero\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgdx2o3j0.rkt:22:4\n\n/: division by zero\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x-squared (* a a)]\n         [x-squared-times-b (* x-squared b)]\n         [x-squared-times-c (* x-squared c)]\n         [x-squared-times-b-times-2 (* x-squared-times-b 2)]\n         [x-squared-times-c-times-2 (* x-squared-times-c 2)]\n         [x-squared-times-b-times-4 (* x-squared-times-b-times-2 2)]\n         [x-squared-times-c-times-4 (* x-squared-times-c-times-2 2)]\n         [x-squared-times-b-times-4-plus-1 (+ x-squared-times-b-times-4 1)]\n         [x-squared-times-c-times-4-plus-1 (+ x-squared-times-c-times-4 1)]\n         [x-squared-times-b-times-4-plus-1-sqrt (sqrt x-squared-times-b-times-4-plus-1)]\n         [x-squared-times-c-times-4-plus-1-sqrt (sqrt x-squared-times-c-times-4-plus-1)])\n    (cond [(= a 0) (error \"a cannot be 0\")]\n          [(= b 0) (error \"b cannot be 0\")]\n          [(= c 0) (error \"c cannot be 0\")]\n          [(= x-squared-times-b-times-4-plus-1 0) (error \"x-squared-times-b-times-4-plus-1 cannot be 0\")]\n          [(= x-squared-times-c-times-4-plus-1 0) (error \"x-squared-times-c-times-4-plus-1 cannot be 0\")]\n          [else (let* ([x-squared-times-b-times-4-plus-1-sqrt-times-2 (* x-squared-times-b-times-4-plus-1-sqrt 2)]\n                     \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "/tmp/tmpkuazrkns.rkt:21:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 23\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (/ (- c (* a x)) b))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3s4xgx.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3s4xgx.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3s4xgx.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (/ (+ (* a x) b) (- 0 c)))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaiqjrvv0.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaiqjrvv0.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaiqjrvv0.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (/ (- c (* a x)) b))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3s4xgx.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3s4xgx.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3s4xgx.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (/ (+ (* a (sqr x)) (* b x) c) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpux5p80va.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpux5p80va.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpux5p80va.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* 2 a) (* 4 b x)))\n  (define (newton x)\n    (newton-help f df x))\n  (define (newton-help f df guess)\n    (let ((next (newton-transform f df guess)))\n      (if (good-enough? guess next)\n          next\n          (newton-help f df next))))\n  (define (newton-transform f df guess)\n    (- guess (/ (f guess) (df guess))))\n  (define (good-enough? guess next)\n    (< (abs (- guess next)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123513,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps4ovqkpm.rkt:27:4\nactual:\n  -3788267678718265286463805862111635723296674775558500373104834155422692766077649702887155044421679846272576865032145909687868767873875300742760646432429926924274611683228738838741767467721732453662989949339320423608176703298618184104613697699900614150389294697002819057581832777249253623406545204299156734504150260460791775084751350837295254811490417558378624034323584558115669233427459498193262886672471877227967585492023549370327868640374030359206351233596451560962177068857030070918180544284626897369643295393541023494754201184272123705458181214733854076240336222604886462977879259722431027242652763035638708626561511236857647238346926580527065139662328671381962759041939743189157587853489242425767116357717072220859698660308658824997011372564473081315666962107178665189180834786877334650008588854143414087837004885525154030853773941686022804253748028242770497989597702483373578202385082146414312985541331548804177191502456642969481181169399157797745498585409836694490579169116029595357429818079453708747688783302057731311908519448108425638571188994516983913272477342440588696786503405017765919347414193161809016998962332212576108858546819513604116376492994390019862285484328963961989905129916656599694538394281289198778552897684998045757366460063984395273447274984111583403916790138685112189152839802534345713292185692194651410560989438833696593796159959592733519771471053856359671334907164164128317409205236581162198022400841365330947109028406799393147784992994758629548869284918490109962292781200700378954098658468062753257991597499618520217987165944915535508109768098583423852268895239774971890280705821263682179282783025864986503520556555140467492720795637858597361870052198571160512993211806416021826210890322620734130351236648261694261205673350719643515090151741433624979498821107402665103532819550803304378521103578106425044165867892303422708361394728318146726201582637275457360127736586828490892834109257477770075689173123847866088897",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (/ (* -1 b) (* 2 a))))\n    (list d (parabola_y d a b c))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "/tmp/tmp2l8pa3pn.rkt:6:13: parabola_y: unbound identifier\n  in: parabola_y\n  location...:\n   /tmp/tmp2l8pa3pn.rkt:6:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x0 (/ (* -1 b) (* 2 a))))\n    (let ((y0 (+ (* a (sqr x0)) (* b x0) c)))\n      (let ((m (/ (* -1 a) b)))\n        (let ((b (- y0 (* m x0))))\n          (list m b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr31mezph.rkt:16:4\nactual:     '(-5/3 21/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr31mezph.rkt:17:4\nactual:     '(-9/8 31/18)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr31mezph.rkt:18:4\nactual:     '(-1/2 7/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* a (sqr x)) (* b x) c)\n          (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b 2) a))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:12:4\nactual:     -7/2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:13:4\nactual:     -5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:14:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* 2 a) (* 4 b x)))\n  (define (newton x)\n    (newton-help x (f x) (df x)))\n  (define (newton-help guess old-guess df)\n    (let ((next-guess (- guess (/ (f guess) df))))\n      (if (close-enough? guess next-guess)\n          next-guess\n          (newton-help next-guess guess df))))\n  (define (close-enough? x y)\n    (< (abs (- x y)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123536,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b 2) (* a x)))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuzp_wrxh.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuzp_wrxh.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuzp_wrxh.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (- (* b b) (* 4 a c))))\n    (if (&lt; d 0)\n        (error \"No real solution\")\n        (let ((x1 (/ (+ b (sqrt d)) (* 2 a)))\n              (x2 (/ (- b (sqrt d)) (* 2 a))))\n          (if (&lt; x1 x2)\n              x1\n              x2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "/tmp/tmpqws527yq.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (/ (* -1 b) (* 2 a))))\n    (if (and (number? d) (not (infinite? d)))\n        (list d)\n        '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_qkxwunh.rkt:15:4\nactual:     '(-3/10)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_qkxwunh.rkt:16:4\nactual:     '(-4/9)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_qkxwunh.rkt:17:4\nactual:     '(-1)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b 2) (/ (* a b) (sqrt (* 4 a c))))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No directrix exists for this parabola.\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_795ao8i.rkt:15:4\nactual:     -0.8717082451262845\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_795ao8i.rkt:16:4\nactual:     -2\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_795ao8i.rkt:17:4\nactual:     0.8452994616207483\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b 2) (/ c a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_tdelpm.rkt:12:4\nactual:     11/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_tdelpm.rkt:13:4\nactual:     32/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_tdelpm.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* -2 a))\n       (* x x (/ c a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt812auk2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt812auk2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt812auk2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (- (/ c a) (* a (x) (x))))\n  (list (x) (y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplymhzmez.rkt:16:4\nactual:     '(-3/10 -1/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplymhzmez.rkt:17:4\nactual:     '(-4/9 -4/3)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplymhzmez.rkt:18:4\nactual:     '(-1 1)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ((x (sqrt (- (sqr b) (* 4 a c))))\n         (x1 (- b x))\n         (x2 (+ b x)))\n    (cond ((< x1 x2) x1)\n          ((> x1 x2) x2)\n          (else (error \"The parabola is a straight line.\")))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponex4sqv.rkt:17:4\n\n<: contract violation\n  expected: real?\n  given: 3.0-5.5677643628300215i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponex4sqv.rkt:18:4\n\n<: contract violation\n  expected: real?\n  given: 8.0-8.94427190999916i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponex4sqv.rkt:19:4\n\n<: contract violation\n  expected: real?\n  given: 4.0-5.656854249492381i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (- (/ b (* 2 a))))\n  (define (y)\n    (- (/ c b)))\n  (cons x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwt94u5ei.rkt:16:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwt94u5ei.rkt:17:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwt94u5ei.rkt:18:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510388,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hddg6yb.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwci46my.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwci46my.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwci46my.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}