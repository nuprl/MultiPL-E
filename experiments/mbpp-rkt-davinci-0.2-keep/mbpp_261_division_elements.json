{
  "name": "mbpp_261_division_elements",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n(define (division_elements test_tup1 test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate division_elements))\n    (check-equal? (candidate (list 10 4 6 9) (list 5 2 3 3)) (list 2 2 2 3))\n    (check-equal? (candidate (list 12 6 8 16) (list 6 3 4 4)) (list 2 2 2 4))\n    (check-equal? (candidate (list 20 14 36 18) (list 5 7 6 9)) (list 4 2 6 2))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (if (or (not (pair? test_tup1)) (not (pair? test_tup2)))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2))\n            (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2))\n            (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (/ (first test_tup1) (first test_tup2))\n           (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (and (list? test_tup1) (list? test_tup2))\n      (if (and (equal? (length test_tup1) (length test_tup2))\n               (andmap number? test_tup1)\n               (andmap number? test_tup2))\n          (map (lambda (x y) (/ x y)) test_tup1 test_tup2)\n          '())\n      '()))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (and (tuple? test_tup1) (tuple? test_tup2))\n      (if (and (= (tuple-length test_tup1) (tuple-length test_tup2))\n               (= (tuple-length test_tup1) 2))\n          (cons (/ (tuple-ref test_tup1 0) (tuple-ref test_tup2 0))\n                (/ (tuple-ref test_tup1 1) (tuple-ref test_tup2 1)))\n          (error \"The given tuples are not of length 2\"))\n      (error \"The given arguments are not tuples\")))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons (/ (first test_tup1) (first test_tup2))\n           (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons (/ (first test_tup1) (first test_tup2))\n           (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (and (pair? test_tup1) (pair? test_tup2))\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))\n      '()))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (and (tuple? test_tup1) (tuple? test_tup2))\n      (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n          (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n              (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                  (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                      (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                          (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                              (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                  (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                      (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                          (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                              (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                  (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                      (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                          (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                              (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                                  (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                                      (if (and (tuple-length test_t",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                 (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                 (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (or (not (pair? test_tup1)) (not (pair? test_tup2)))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (and (tuple? test_tup1) (tuple? test_tup2))\n      (if (and (equal? (tuple-length test_tup1) (tuple-length test_tup2))\n               (not (zero? (tuple-ref test_tup2 0))))\n          (tuple (quotient (tuple-ref test_tup1 0) (tuple-ref test_tup2 0))\n                 (quotient (tuple-ref test_tup1 1) (tuple-ref test_tup2 1))\n                 (quotient (tuple-ref test_tup1 2) (tuple-ref test_tup2 2)))\n          (error \"The tuples must be of the same length and the second tuple must not contain zero.\"))\n      (error \"The given arguments are not tuples.\")))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (if (or (not (tuple? test_tup1)) (not (tuple? test_tup2)))\n      (error \"Inputs must be tuples\")\n      (if (not (= (tuple-length test_tup1) (tuple-length test_tup2)))\n          (error \"Input tuples must be of the same length\")\n          (if (tuple-length test_tup1)\n              (cons (/ (tuple-ref test_tup1 0) (tuple-ref test_tup2 0))\n                    (division_elements (tuple-rest test_tup1) (tuple-rest test_tup2)))\n              '()))))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (and (tuple? test_tup1) (tuple? test_tup2))\n      (if (and (equal? (tuple-length test_tup1) (tuple-length test_tup2))\n               (equal? (tuple-length test_tup1) 2))\n          (tuple (/ (tuple-ref test_tup1 0) (tuple-ref test_tup2 0))\n                  (/ (tuple-ref test_tup1 1) (tuple-ref test_tup2 1)))\n          (error \"The tuples must be of length 2\"))\n      (error \"The inputs must be tuples\")))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (and (tuple? test_tup1) (tuple? test_tup2))\n      (if (and (equal? (tuple-length test_tup1) (tuple-length test_tup2)) (not (zero? (tuple-length test_tup1))))\n          (cons (/ (tuple-ref test_tup1 0) (tuple-ref test_tup2 0)) (division_elements (tuple-rest test_tup1) (tuple-rest test_tup2)))\n          (if (and (equal? (tuple-length test_tup1) (tuple-length test_tup2)) (zero? (tuple-length test_tup1)))\n              '()\n              (error \"Tuples are not of the same length\")))\n      (error \"Not a tuple\")))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (and (tuple? test_tup1) (tuple? test_tup2))\n      (if (and (equal? (tuple-length test_tup1) (tuple-length test_tup2))\n               (equal? (tuple-length test_tup1) 2))\n          (tuple (/ (tuple-ref test_tup1 0) (tuple-ref test_tup2 0))\n                  (/ (tuple-ref test_tup1 1) (tuple-ref test_tup2 1)))\n          (error \"Tuples must be of length 2\"))\n      (error \"Inputs must be tuples\")))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (/ (first test_tup1) (first test_tup2))\n           (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (or (not (tuple? test_tup1)) (not (tuple? test_tup2)))\n      (error \"Inputs must be tuples\")\n      (if (not (= (tuple-length test_tup1) (tuple-length test_tup2)))\n          (error \"Tuples must be of the same length\")\n          (if (or (not (number? (tuple-ref test_tup1 0))) (not (number? (tuple-ref test_tup2 0))))\n              (error \"Tuple elements must be numbers\")\n              (if (not (tuple-length test_tup1))\n                  '()\n                  (cons (/ (tuple-ref test_tup1 0) (tuple-ref test_tup2 0)) (division_elements (tuple-rest test_tup1) (tuple-rest test_tup2))))))))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (if (null? test_tup1)\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (and (tuple? test_tup1) (tuple? test_tup2))\n      (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n          (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n              (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                  (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                      (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                          (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                              (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                  (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                      (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                          (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                              (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                  (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                      (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                          (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                              (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                                  (if (and (tuple-length test_tup1) (tuple-length test_tup2))\n                                                                      (if (and (tuple-length test_t",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (or (not (pair? test_tup1)) (not (pair? test_tup2)))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond [(empty? test_tup1) empty]\n        [else (cons (/ (first test_tup1) (first test_tup2))\n                    (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (and (tuple? test_tup1) (tuple? test_tup2))\n      (if (and (equal? (tuple-length test_tup1) (tuple-length test_tup2))\n               (not (zero? (tuple-ref test_tup2 0))))\n          (tuple (/ (tuple-ref test_tup1 0) (tuple-ref test_tup2 0))\n                  (/ (tuple-ref test_tup1 1) (tuple-ref test_tup2 1))\n                  (/ (tuple-ref test_tup1 2) (tuple-ref test_tup2 2)))\n          (error \"Tuples are not of equal length or division by zero\"))\n      (error \"Not a tuple\")))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (if (or (not (tuple? test_tup1)) (not (tuple? test_tup2)))\n      (error \"Invalid input\"))\n  (if (not (= (tuple-length test_tup1) (tuple-length test_tup2)))\n      (error \"Invalid input\"))\n  (define (division_elements_iter test_tup1 test_tup2 acc)\n    (if (null? test_tup1)\n        acc\n        (division_elements_iter (cdr test_tup1) (cdr test_tup2) (cons (/ (car test_tup1) (car test_tup2)) acc))))\n  (reverse (division_elements_iter test_tup1 test_tup2 '())))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (and (tuple? test_tup1) (tuple? test_tup2))\n      (if (and (= (length test_tup1) (length test_tup2))\n               (andmap number? test_tup1)\n               (andmap number? test_tup2))\n          (map (lambda (x y) (/ x y)) test_tup1 test_tup2)\n          (error \"The given tuples are not of the same length or do not contain only numbers\"))\n      (error \"The given arguments are not tuples\")))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2))\n            (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (/ (first test_tup1) (first test_tup2))\n           (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (or (not (pair? test_tup1)) (not (pair? test_tup2)))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2))\n            (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (or (not (tuple? test_tup1)) (not (tuple? test_tup2)))\n      (error \"Not a tuple\")\n      (if (or (not (number? (tuple-ref test_tup1 0))) (not (number? (tuple-ref test_tup2 0))))\n          (error \"Not a number\")\n          (if (or (not (number? (tuple-ref test_tup1 1))) (not (number? (tuple-ref test_tup2 1))))\n              (error \"Not a number\")\n              (tuple (/ (tuple-ref test_tup1 0) (tuple-ref test_tup2 0)) (/ (tuple-ref test_tup1 1) (tuple-ref test_tup2 1)))))))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (or (not (pair? test_tup1)) (not (pair? test_tup2)))\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (if (null? test_tup1)\n      '()\n      (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (if (or (not (tuple? test_tup1)) (not (tuple? test_tup2)))\n      (error \"Inputs must be tuples\")\n      (if (or (not (number? (tuple-ref test_tup1 0))) (not (number? (tuple-ref test_tup2 0))))\n          (error \"Inputs must be tuples of numbers\")\n          (if (and (tuple? test_tup1) (tuple? test_tup2) (number? (tuple-ref test_tup1 0)) (number? (tuple-ref test_tup2 0)))\n              (if (tuple-length test_tup1)\n                  (cons (/ (tuple-ref test_tup1 0) (tuple-ref test_tup2 0)) (division_elements (tuple-rest test_tup1) (tuple-rest test_tup2)))\n                  '()\n              )\n          )\n      )\n  )\n)\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons (/ (first test_tup1) (first test_tup2))\n           (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (if (or (not (tuple? test_tup1)) (not (tuple? test_tup2)))\n      (error \"Invalid input\"))\n  (if (not (= (tuple-length test_tup1) (tuple-length test_tup2)))\n      (error \"Invalid input\"))\n  (if (not (and (tuple-for-each real? test_tup1) (tuple-for-each real? test_tup2)))\n      (error \"Invalid input\"))\n  (tuple-map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons (/ (first test_tup1) (first test_tup2))\n           (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2))\n                (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (or (not (tuple? test_tup1)) (not (tuple? test_tup2)))\n      (error \"Inputs must be tuples\")\n      (if (not (= (tuple-length test_tup1) (tuple-length test_tup2)))\n          (error \"Tuples must be of equal length\")\n          (if (not (andmap number? test_tup1))\n              (error \"All elements of tuple must be numbers\")\n              (if (not (andmap number? test_tup2))\n                  (error \"All elements of tuple must be numbers\")\n                  (if (andmap zero? test_tup2)\n                      (error \"Cannot divide by zero\")\n                      (map / test_tup1 test_tup2)))))))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (map / test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n"
  ]
}