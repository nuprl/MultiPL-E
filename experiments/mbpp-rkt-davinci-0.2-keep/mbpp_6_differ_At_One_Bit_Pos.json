{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether the two numbers differ at one bit position only or not.\n(define (differ_At_One_Bit_Pos a b)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate differ_At_One_Bit_Pos))\n    (check-equal? (candidate 13 9) #t)\n    (check-equal? (candidate 15 8) #f)\n    (check-equal? (candidate 2 4) #f)\n    (check-equal? (candidate 2 3) #t)\n    (check-equal? (candidate 5 1) #t)\n    (check-equal? (candidate 1 5) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (let loop ([xor xor])\n          (if (zero? (bitwise-and xor 1))\n              (loop (bitwise-shift xor -1))\n              #t)))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #t]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1)))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (cond\n      [(zero? xor) #f]\n      [(zero? (bitwise-and xor (bitwise-xor xor (sub1 xor)))) #t]\n      [else #f])))\n",
    "  (let ([a-b (bitwise-xor a b)])\n    (if (zero? (bitwise-and a-b (bitwise-not (bitwise-and a-b (sub1 a-b)))))\n        #t\n        #f)))\n",
    "  (define (differ_At_One_Bit_Pos_Iter a b count)\n    (if (zero? a)\n        (if (zero? b)\n            (if (= count 1)\n                #t\n                #f)\n            #f)\n        (if (zero? b)\n            #f\n            (if (and (zero? (remainder a 2)) (zero? (remainder b 2)))\n                (differ_At_One_Bit_Pos_Iter (quotient a 2) (quotient b 2) count)\n                (if (and (not (zero? (remainder a 2))) (not (zero? (remainder b 2))))\n                    (differ_At_One_Bit_Pos_Iter (quotient a 2) (quotient b 2) count)\n                    (differ_At_One_Bit_Pos_Iter (quotient a 2) (quotient b 2) (+ count 1)))))))\n  (differ_At_One_Bit_Pos_Iter a b 0))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor) (and (not (zero? (bitwise-and xor (bitwise-xor xor (- xor 1))))) (zero? (bitwise-and xor (- xor 1)))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (and (not (zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (bitwise-arithmetic-shift xor -1))))))\n         (zero? (bitwise-and xor (bitwise-not (bitwise-arithmetic-shift xor -2)))))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-not (bitwise-xor xor (arithmetic-shift xor -1)))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (if (zero? xor)\n        #f\n        (if (zero? (bitwise-and xor (bitwise-xor xor (sub1 xor))))\n            #t\n            #f))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128) (= xor 256) (= xor 512) (= xor 1024) (= xor 2048) (= xor 4096) (= xor 8192) (= xor 16384) (= xor 32768) (= xor 65536) (= xor 131072) (= xor 262144) (= xor 524288) (= xor 1048576) (= xor 2097152) (= xor 4194304) (= xor 8388608) (= xor 16777216) (= xor 33554432) (= xor 67108864) (= xor 134217728) (= xor 268435456) (= xor 536870912) (= xor 1073741824) (= xor 2147483648) (= xor 4294967296) (= xor 8589934592) (= xor 17179869184) (= xor 34359738368) (= xor 68719476736) (= xor 137438953472) (= xor 274877906944) (= xor 549755813888) (= xor 1099511627776) (= xor 2199023255552) (= xor 4398046511104) (= xor 8796093022208) (= xor 17592186044416) (= xor 35184372088832) (= xor 70368744177664) (= xor 140737488355328) (= xor 281474976710656) (= xor 562949953421312) (= xor 1125899906842624) (= xor 2251799813685248) (= xor 4503599627370496) (= xor 9007199254740992) (= xor 18014398509481984) (= xor 36028797018963968) (= xor 72057594037927936) (= xor 144115188075855872) (= xor 288230376151711744) (= xor 576460752303423488) (= xor",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128) (= xor 256) (= xor 512) (= xor 1024) (= xor 2048) (= xor 4096) (= xor 8192) (= xor 16384) (= xor 32768) (= xor 65536) (= xor 131072) (= xor 262144) (= xor 524288) (= xor 1048576) (= xor 2097152) (= xor 4194304) (= xor 8388608) (= xor 16777216) (= xor 33554432) (= xor 67108864) (= xor 134217728) (= xor 268435456) (= xor 536870912) (= xor 1073741824) (= xor 2147483648) (= xor 4294967296) (= xor 8589934592) (= xor 17179869184) (= xor 34359738368) (= xor 68719476736) (= xor 137438953472) (= xor 274877906944) (= xor 549755813888) (= xor 1099511627776) (= xor 2199023255552) (= xor 4398046511104) (= xor 8796093022208) (= xor 17592186044416) (= xor 35184372088832) (= xor 70368744177664) (= xor 140737488355328) (= xor 281474976710656) (= xor 562949953421312) (= xor 1125899906842624) (= xor 2251799813685248) (= xor 4503599627370496) (= xor 9007199254740992) (= xor 18014398509481984) (= xor 36028797018963968) (= xor 72057594037927936) (= xor 144115188075855872) (= xor 288230376151711744) (= xor 576460752303423488) (= xor",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128) (= xor 256) (= xor 512) (= xor 1024) (= xor 2048) (= xor 4096) (= xor 8192) (= xor 16384) (= xor 32768) (= xor 65536) (= xor 131072) (= xor 262144) (= xor 524288) (= xor 1048576) (= xor 2097152) (= xor 4194304) (= xor 8388608) (= xor 16777216) (= xor 33554432) (= xor 67108864) (= xor 134217728) (= xor 268435456) (= xor 536870912) (= xor 1073741824) (= xor 2147483648) (= xor 4294967296) (= xor 8589934592) (= xor 17179869184) (= xor 34359738368) (= xor 68719476736) (= xor 137438953472) (= xor 274877906944) (= xor 549755813888) (= xor 1099511627776) (= xor 2199023255552) (= xor 4398046511104) (= xor 8796093022208) (= xor 17592186044416) (= xor 35184372088832) (= xor 70368744177664) (= xor 140737488355328) (= xor 281474976710656) (= xor 562949953421312) (= xor 1125899906842624) (= xor 2251799813685248) (= xor 4503599627370496) (= xor 9007199254740992) (= xor 18014398509481984) (= xor 36028797018963968) (= xor 72057594037927936) (= xor 144115188075855872) (= xor 288230376151711744) (= xor 576460752303423488) (= xor",
    "  (let ([a (integer->bit-string a)])\n    (let ([b (integer->bit-string b)])\n      (let ([a-len (string-length a)])\n        (let ([b-len (string-length b)])\n          (let ([diff-len (abs (- a-len b-len))])\n            (let ([diff-str (make-string diff-len #\\0)])\n              (let ([a (if (> a-len b-len)\n                           (string-append diff-str b)\n                           (string-append diff-str a))])\n                (let ([b (if (> b-len a-len)\n                             (string-append diff-str a)\n                             (string-append diff-str b))])\n                  (let ([diff-count 0])\n                    (for ([i (in-range (string-length a))])\n                      (if (not (char=? (string-ref a i) (string-ref b i)))\n                          (set! diff-count (+ diff-count 1))))\n                    (if (= diff-count 1)\n                        #t\n                        #f))))))))))))\n",
    "  (let ((xor (bitwise-xor a b)))\n    (if (= xor 0)\n        #f\n        (if (= (bitwise-and xor (bitwise-xor xor (bitwise-not xor))) 0)\n            #t\n            #f))))\n",
    "  (let ([a-b (bitwise-xor a b)])\n    (cond\n      [(zero? a-b) #f]\n      [(zero? (bitwise-and a-b (sub1 a-b))) #t]\n      [else #f])))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (zero? xor) (and (bitwise-and xor (bitwise-not (bitwise-arithmetic-shift xor -1))) 1))))\n",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128) (= xor 256) (= xor 512) (= xor 1024) (= xor 2048) (= xor 4096) (= xor 8192) (= xor 16384) (= xor 32768) (= xor 65536) (= xor 131072) (= xor 262144) (= xor 524288) (= xor 1048576) (= xor 2097152) (= xor 4194304) (= xor 8388608) (= xor 16777216) (= xor 33554432) (= xor 67108864) (= xor 134217728) (= xor 268435456) (= xor 536870912) (= xor 1073741824) (= xor 2147483648) (= xor 4294967296) (= xor 8589934592) (= xor 17179869184) (= xor 34359738368) (= xor 68719476736) (= xor 137438953472) (= xor 274877906944) (= xor 549755813888) (= xor 1099511627776) (= xor 2199023255552) (= xor 4398046511104) (= xor 8796093022208) (= xor 17592186044416) (= xor 35184372088832) (= xor 70368744177664) (= xor 140737488355328) (= xor 281474976710656) (= xor 562949953421312) (= xor 1125899906842624) (= xor 2251799813685248) (= xor 4503599627370496) (= xor 9007199254740992) (= xor 18014398509481984) (= xor 36028797018963968) (= xor 72057594037927936) (= xor 144115188075855872) (= xor 288230376151711744) (= xor 576460752303423488) (= xor",
    "  (let ([xor (bitwise-xor a b)])\n    (or (= xor 1) (= xor 2) (= xor 4) (= xor 8) (= xor 16) (= xor 32) (= xor 64) (= xor 128) (= xor 256) (= xor 512) (= xor 1024) (= xor 2048) (= xor 4096) (= xor 8192) (= xor 16384) (= xor 32768) (= xor 65536) (= xor 131072) (= xor 262144) (= xor 524288) (= xor 1048576) (= xor 2097152) (= xor 4194304) (= xor 8388608) (= xor 16777216) (= xor 33554432) (= xor 67108864) (= xor 134217728) (= xor 268435456) (= xor 536870912) (= xor 1073741824) (= xor 2147483648) (= xor 4294967296) (= xor 8589934592) (= xor 17179869184) (= xor 34359738368) (= xor 68719476736) (= xor 137438953472) (= xor 274877906944) (= xor 549755813888) (= xor 1099511627776) (= xor 2199023255552) (= xor 4398046511104) (= xor 8796093022208) (= xor 17592186044416) (= xor 35184372088832) (= xor 70368744177664) (= xor 140737488355328) (= xor 281474976710656) (= xor 562949953421312) (= xor 1125899906842624) (= xor 2251799813685248) (= xor 4503599627370496) (= xor 9007199254740992) (= xor 18014398509481984) (= xor 36028797018963968) (= xor 72057594037927936) (= xor 144115188075855872) (= xor 288230376151711744) (= xor 576460752303423488) (= xor"
  ]
}