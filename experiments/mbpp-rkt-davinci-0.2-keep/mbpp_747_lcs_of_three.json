{
  "name": "mbpp_747_lcs_of_three",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n(define (lcs_of_three X Y Z)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lcs_of_three))\n    (check-equal? (candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") 2)\n    (check-equal? (candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") 5)\n    (check-equal? (candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond ((equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                 (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n                (else (max (lcs_of_two_helper X Y m (- n 1))\n                           (lcs_of_two_helper X Y (- m 1) n))))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond ((and (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                  (equal? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n               (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n              (else (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                         (lcs_of_three_helper X Y Z (- m 1) n o)\n                         (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                         (lcs_of_three_helper X Y Z m n (- o 1))\n                         (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n                         (lcs_of_three_helper X Y Z m (- n 1) (- o 1)))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (if (equal? (vector-ref X (sub1 m)) (vector-ref Y (sub1 n)))\n              (+ 1 (lcs_of_two_helper X Y (sub1 m) (sub1 n)))\n              (max (lcs_of_two_helper X Y m (sub1 n)) (lcs_of_two_helper X Y (sub1 m) n)))))\n    (lcs_of_two_helper (string->vector X) (string->vector Y) (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (if (and (equal? (vector-ref X (sub1 m)) (vector-ref Y (sub1 n))) (equal? (vector-ref X (sub1 m)) (vector-ref Z (sub1 o))))\n            (+ 1 (lcs_of_three_helper X Y Z (sub1 m) (sub1 n) (sub1 o)))\n            (max (lcs_of_three_helper X Y Z m (sub1 n) (sub1 o)) (lcs_of_three_helper X Y Z (sub1 m) n (sub1 o)) (lcs_of_three_helper X Y Z (sub1 m) (sub1 n) o)))))\n  (lcs_of_three_helper (string->vector X) (string->vector Y) (string->vector Z) (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond [(or (zero? i) (zero? j)) 0]\n            [(char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n             (+ 1 (lcs_of_two_helper X Y (- i 1) (- j 1)))]\n            [else (max (lcs_of_two_helper X Y i (- j 1))\n                       (lcs_of_two_helper X Y (- i 1) j))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond [(or (zero? i) (zero? j) (zero? k)) 0]\n          [(and (char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n                (char=? (string-ref Y (- j 1)) (string-ref Z (- k 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- i 1) (- j 1) (- k 1)))]\n          [else (max (lcs_of_three_helper X Y Z i (- j 1) k)\n                     (max (lcs_of_three_helper X Y Z (- i 1) j k)\n                          (lcs_of_three_helper X Y Z (- i 1) (- j 1) k)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0)\n         (make-vector n 0)]\n        [(= n 0)\n         (make-vector m 0)]\n        [(= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (vector-append (lcs_of_two_helper X Y (- m 1) (- n 1)) (vector (+ 1 (vector-ref (lcs_of_two_helper X Y (- m 1) (- n 1)) (- m 2)))))\n         ]\n        [else\n         (let ([a (vector-ref (lcs_of_two_helper X Y (- m 1) n) (- m 2))]\n               [b (vector-ref (lcs_of_two_helper X Y m (- n 1)) (- n 2))])\n           (if (> a b)\n               (vector-append (lcs_of_two_helper X Y (- m 1) n) (vector a))\n               (vector-append (lcs_of_two_helper X Y m (- n 1)) (vector b))))\n         ]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0)\n       (make-vector n 0)]\n      [(= n 0)\n       (make-vector m 0)]\n      [(= o 0)\n       (make-vector m 0)]\n      [(= (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n       (vector-append (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (vector (+ 1 (vector-ref (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (- m 2)))))\n       ]\n      [else\n       (let ([a (vector-ref (lcs_of_three_hel",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (vector-ref X (sub1 m)) (vector-ref Y (sub1 n)))\n             (+ 1 (lcs_of_two_helper X Y (sub1 m) (sub1 n))))\n            (else (max (lcs_of_two_helper X Y m (sub1 n))\n                       (lcs_of_two_helper X Y (sub1 m) n)))))\n    (lcs_of_two_helper (vector->list X) (vector->list Y) (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (vector-ref X (sub1 m)) (vector-ref Y (sub1 n)))\n                (= (vector-ref X (sub1 m)) (vector-ref Z (sub1 o))))\n           (+ 1 (lcs_of_three_helper X Y Z (sub1 m) (sub1 n) (sub1 o))))\n          (else (max (lcs_of_three_helper X Y Z m (sub1 n) (sub1 o))\n                     (lcs_of_three_helper X Y Z (sub1 m) n (sub1 o))\n                     (lcs_of_three_helper X Y Z (sub1 m) (sub1 n) o)))))\n  (lcs_of_three_helper (vector->list X) (vector->list Y) (vector->list Z) (vector-length X) (vector-length Y) (vector-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0)\n         (make-vector n 0)]\n        [(= n 0)\n         (make-vector m 0)]\n        [else\n         (let ([x (vector-ref X (- m 1))]\n               [y (vector-ref Y (- n 1))])\n           (cond\n             [(char=? x y)\n              (vector-append\n               (lcs_of_two_helper X Y (- m 1) (- n 1))\n               (vector (+ 1 (vector-ref (lcs_of_two_helper X Y (- m 1) (- n 1)) (- m 2)))))\n             [else\n              (let ([a (vector-ref (lcs_of_two_helper X Y m (- n 1)) (- m 1))]\n                    [b (vector-ref (lcs_of_two_helper X Y (- m 1) n) (- m 2))])\n                (if (> a b)\n                    (vector-append (lcs_of_two_helper X Y m (- n 1)) (vector a))\n                    (vector-append (lcs_of_two_helper X Y (- m 1) n) (vector b))))]]))\n      (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0)\n       (make-vector n 0)]\n      [(= n 0)\n       (make-vector m 0)]\n      [(= o 0)\n       (make-vector m 0)]\n      [else\n       (let ([x (vector-ref X (- m 1))]\n             [y (vector-ref Y (- n 1))]\n             [z (vector-ref Z (- o 1))])\n         (cond\n           [(and (char=? x y) (char=? x z))\n            (vector-append",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond [(= i (string-length X)) (string)]\n            [(= j (string-length Y)) (string)]\n            [else\n             (cond [(char=? (string-ref X i) (string-ref Y j))\n                    (string-append (list (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n                   [else\n                    (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y i (+ j 1))]\n                          [lcs_of_two_helper_2 (lcs_of_two_helper X Y (+ i 1) j)])\n                      (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n                          lcs_of_two_helper_1\n                          lcs_of_two_helper_2))])])\n      (lcs_of_two_helper X Y 0 0))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else\n         (max (lcs_of_two_helper X Y m (- n 1))\n              (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z m (- n 1) o)\n            (lcs_of_three_helper X Y Z (- m 1) n o)\n            (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n            (lcs_of_three_helper X Y Z m n (- o 1))\n            (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n            (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string j #\\space)]\n        [(= j (string-length Y)) (make-string i #\\space)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (lcs_of_two_helper X Y (add1 i) (add1 j))\n                        (string (string-ref X i)))]\n        [else\n         (let ([l1 (lcs_of_two_helper X Y (add1 i) j)]\n               [l2 (lcs_of_two_helper X Y i (add1 j))])\n           (if (&gt; (string-length l1) (string-length l2))\n               l1\n               l2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i (string-length X)) (make-string (+ j k) #\\space)]\n      [(= j (string-length Y)) (make-string (+ i k) #\\space)]\n      [(= k (string-length Z)) (make-string (+ i j) #\\space)]\n      [(and (char=? (string-ref X i) (string-ref Y j))\n            (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (lcs_of_three_helper X Y Z (add1 i) (add1 j) (add1 k))\n                      (string (string-ref X i)))]\n      [else\n       (let ([l1 (lcs_of_three_helper X Y Z (add1 i) j k)]\n             [l2 (lcs_of_three_helper X Y Z i (add1 j) k)]\n             [l3 (lcs_of_three_helper X Y Z i j (add1 k))])\n         (cond\n          ",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond\n        [(or (= i m) (= j n) (= k o)) 0]\n        [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)))\n         (+ 1 (lcs_of_three_helper (+ i 1) (+ j 1) (+ k 1)))]\n        [else\n         (max (lcs_of_three_helper (+ i 1) j k)\n              (max (lcs_of_three_helper i (+ j 1) k)\n                   (lcs_of_three_helper i j (+ k 1))))]))\n    (lcs_of_three_helper 0 0 0)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond [(= i (string-length X)) (string)]\n            [(= j (string-length Y)) (string)]\n            [(char=? (string-ref X i) (string-ref Y j))\n             (string-append (string (string-ref X i))\n                            (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n            [else\n             (let ([s1 (lcs_of_two_helper X Y (+ i 1) j)]\n                   [s2 (lcs_of_two_helper X Y i (+ j 1))])\n               (if (&gt; (string-length s1) (string-length s2))\n                   s1\n                   s2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond ((or (= i (string-length X)) (= j (string-length Y))) \"\")\n            ((char=? (string-ref X i) (string-ref Y j))\n             (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1))))\n            (else (string-append (lcs_of_two_helper X Y i (+ j 1)) (lcs_of_two_helper X Y (+ i 1) j)))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else (max (lcs_of_two_helper X Y (+ i 1) j) (lcs_of_two_helper X Y i (+ j 1)))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two X (lcs_of_two Y Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([row (lcs_of_two_helper X Y (- m 1) n)]\n               [col (lcs_of_two_helper X Y m (- n 1))])\n           (vector-set! row m (if (char=? (string-ref X m) (string-ref Y n))\n                                  (+ 1 (vector-ref col (- n 1)))\n                                  (max (vector-ref row (- m 1)) (vector-ref col (- n 1)))))\n           row)]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n o)]\n      [(= n 0) (make-vector m o)]\n      [(= o 0) (make-vector m n)]\n      [else\n       (let ([row (lcs_of_three_helper X Y Z (- m 1) n o)]\n             [col (lcs_of_three_helper X Y Z m (- n 1) o)]\n             [z (lcs_of_three_helper X Y Z m n (- o 1))])\n         (vector-set! row m (if (char=? (string-ref X m) (string-ref Y n) (string-ref Z o))\n                                (+ 1 (vector-ref col (- n 1)) (vector-ref z (- o 1)))\n                                (max (vector-ref row (- m 1)) (vector-ref col (- n 1)) (vector-ref z (- o 1)))))\n         row)]))\n  (lcs_of_three_helper X Y Z (- (string-length X) 1) (- (string-length Y) 1) (- (string-length Z) 1)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1))) (= (string-ref X (- m 1)) (string-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_three_helper X Y Z (- m 1) (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n (- o 1)) (lcs_of_three_helper X Y Z m (- n 1) (- o 1)) (lcs_of_three_helper X Y Z m n (- o 1))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string 0)]\n        [(= j (string-length Y)) (make-string 0)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string 1 (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_X_Y_i_j_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_X_Y_i_j_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_X_Y_i_j_1) (string-length lcs_of_two_helper_X_Y_i_j_2))\n               lcs_of_two_helper_X_Y_i_j_1\n               lcs_of_two_helper_X_Y_i_j_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond [(or (= i m) (= j n) (= k o)) 0]\n            [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)))\n             (+ 1 (lcs_of_three_helper (+ i 1) (+ j 1) (+ k 1)))]\n            [else (max (lcs_of_three_helper (+ i 1) j k)\n                       (lcs_of_three_helper i (+ j 1) k)\n                       (lcs_of_three_helper i j (+ k 1)))]))\n    (lcs_of_three_helper 0 0 0)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([row (lcs_of_two_helper X Y (- m 1) n)]\n               [col (lcs_of_two_helper X Y m (- n 1))])\n           (vector-set! row m (if (string=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                                  (+ 1 (vector-ref col (- n 1)))\n                                  (max (vector-ref row (- m 1)) (vector-ref col (- n 1)))))\n           row)]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([row (lcs_of_three_helper X Y Z (- m 1) n o)]\n             [col (lcs_of_three_helper X Y Z m (- n 1) o)]\n             [z (lcs_of_three_helper X Y Z m n (- o 1))])\n         (vector-set! row m (if (string=? (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n                                (+ 1 (vector-ref z (- o 1)))\n                                (max (vector-ref row (- m 1)) (vector-ref col (- n 1)) (vector-ref z (- o 1)))))\n         row)]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1))\n                       (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m n (- o 1))\n                     (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)\n                     (lcs_of_three X Y (substring Z 0 (- o 1)))\n                     (lcs_of_three X (substring Y 0 (- n 1)) Z)\n                     (lcs_of_three (substring X 0 (- m 1)) Y Z)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond\n        [(or (= i m) (= j n) (= k o)) 0]\n        [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k))) (+ 1 (lcs_of_three_helper (+ i 1) (+ j 1) (+ k 1)))]\n        [else (max (lcs_of_three_helper (+ i 1) j k) (lcs_of_three_helper i (+ j 1) k) (lcs_of_three_helper i j (+ k 1)))]))\n    (lcs_of_three_helper 0 0 0)))\n"
  ]
}