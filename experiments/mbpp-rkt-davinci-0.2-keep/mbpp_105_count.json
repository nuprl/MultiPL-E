{
  "name": "mbpp_105_count",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count true booleans in the given list.\n(define (count lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count))\n    (check-equal? (candidate (list #t #f #t)) 2)\n    (check-equal? (candidate (list #f #f)) 0)\n    (check-equal? (candidate (list #t #t #t)) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst))\n         (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond\n    [(empty? lst) 0]\n    [(= (first lst) #t) (+ 1 (count (rest lst)))]\n    [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(= (first lst) #t) (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond\n    [(empty? lst) 0]\n    [else\n     (if (boolean? (first lst))\n         (+ 1 (count (rest lst)))\n         (count (rest lst)))]))\n",
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst))\n         (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(= (first lst) #t) (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(true? (first lst)) (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond\n    [(empty? lst) 0]\n    [(equal? (first lst) #t) (+ 1 (count (rest lst)))]\n    [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst)) (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst)) (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (define (count-iter lst acc)\n    (if (null? lst)\n        acc\n        (if (eq? (car lst) #t)\n            (count-iter (cdr lst) (+ acc 1))\n            (count-iter (cdr lst) acc))))\n  (count-iter lst 0))\n",
    "  (cond [(empty? lst) 0]\n        [(eq? (first lst) #t) (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst))\n         (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst)) (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst))\n         (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(= (first lst) #t) (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst))\n         (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (if (null? lst)\n      0\n      (+ (if (eq? (car lst) #t) 1 0)\n         (count (cdr lst)))))\n",
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst))\n         (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n",
    "  (cond [(empty? lst) 0]\n        [(boolean? (first lst))\n         (+ 1 (count (rest lst)))]\n        [else (count (rest lst))]))\n"
  ]
}