{
  "name": "mbpp_222_check_type",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if all the elements in tuple have same data type or not.\n(define (check_type test_tuple)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (not (empty? (cdr test_tuple)))\n          (not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ((type (type-tag (car test_tuple))))\n    (cond ((null? test_tuple) #t)\n          ((not (eq? type (type-tag (car test_tuple)))) #f)\n          (else (check_type (cdr test_tuple))))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(eq? (type-tag (car test_tuple)) first_type) (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (not (empty? test_tuple)) (not (empty? (cdr test_tuple))))\n     (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple)))]\n    [else #t]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let ([type_of_first (type-tag (car test_tuple))])\n    (cond [(null? (cdr test_tuple)) #t]\n          [(eq? (type-tag (car (cdr test_tuple))) type_of_first)\n           (check_type (cdr test_tuple))]\n          [else #f])))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(= (length test_tuple) 1) #t]\n    [else\n     (and\n      (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n      (check_type (rest test_tuple)))]))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (if (null? (cdr test_tuple))\n        #t\n        (if (equal? (type-tag (car (cdr test_tuple))) first_type)\n            (check_type (cdr test_tuple))\n            #f))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (andmap (lambda (x) (eq? (type-tag x) first_type)) test_tuple)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let ([first_element (car test_tuple)])\n    (cond\n      [(null? test_tuple) #t]\n      [(not (equal? (type-tag first_element) (type-tag (car test_tuple)))) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))))\n          #f\n          (check_type (cdr test_tuple)))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(not (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))) #f]\n    [else (check_type (rest test_tuple))]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([elem test_tuple])\n      (equal? (type-tag elem) first_type))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (list? (first test_tuple)) (check_type (first test_tuple))) (check_type (rest test_tuple))]\n    [(and (list? (first test_tuple)) (not (check_type (first test_tuple)))) #f]\n    [(and (not (list? (first test_tuple))) (equal? (typeof (first test_tuple)) (typeof (first (rest test_tuple))))) (check_type (rest test_tuple))]\n    [(and (not (list? (first test_tuple))) (not (equal? (typeof (first test_tuple)) (typeof (first (rest test_tuple)))))) #f]))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (cond\n      [(empty? test_tuple) #t]\n      [(equal? type (type-tag (car test_tuple))) (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([element test_tuple])\n      (equal? (type-tag element) first_type))))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([elem (in-list test_tuple)])\n      (eq? (type-tag elem) first_type))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (andmap (lambda (x) (eq? (type-tag x) first_type)) test_tuple)))\n",
    "  (define (check_type_iter test_tuple type)\n    (if (null? test_tuple)\n        #t\n        (if (eq? (type-tag (car test_tuple)) type)\n            (check_type_iter (cdr test_tuple) type)\n            #f)))\n  (check_type_iter test_tuple (type-tag (car test_tuple))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n     (check_type (rest test_tuple))]\n    [else #f]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([element test_tuple])\n      (eq? (type-tag element) first_type))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let loop ([tuple test_tuple]\n             [prev_type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) prev_type)\n            (loop (cdr tuple) prev_type)\n            #f))))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (cond [(null? (cdr test_tuple)) #t]\n          [(eq? type (type-tag (car (cdr test_tuple)))) (check_type (cdr test_tuple))]\n          [else #f])))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(empty? test_tuple) true]\n    [(and (number? (first test_tuple))\n          (check_type (rest test_tuple))) true]\n    [else false]))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(equal? first_type (type-tag (car test_tuple))) (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([item (in-list (cdr test_tuple))])\n      (eq? first_type (type-tag item)))))\n",
    "  (let loop ([tup test_tuple] [type (type-tag (car test_tuple))])\n    (if (null? tup)\n        #t\n        (if (eq? type (type-tag (car tup)))\n            (loop (cdr tup) type)\n            #f))))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n     (check_type (rest test_tuple))]\n    [else #f]))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(eq? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n     (check_type (rest test_tuple))]\n    [else #f]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (cond\n    [(null? (cdr test_tuple)) #t]\n    [else\n     (and\n      (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n      (check_type (cdr test_tuple)))]))\n",
    "  (let ((type (type-tag (car test_tuple))))\n    (cond ((null? test_tuple) #t)\n          ((not (eq? type (type-tag (car test_tuple)))) #f)\n          (else (check_type (cdr test_tuple))))))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (not (eq? type (type-tag (car tuple))))\n            #f\n            (loop (cdr tuple) type)))))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (andmap (lambda (x) (eq? (type-tag x) first_type)) test_tuple)))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple))\n          (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (cond [(null? test_tuple) #t]\n          [(eq? type (type-tag (car test_tuple))) (check_type (cdr test_tuple))]\n          [else #f])))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (cond\n      [(empty? test_tuple) #t]\n      [(eq? type (type-tag (car test_tuple))) (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (let ((type (type-tag (car test_tuple))))\n    (cond ((null? test_tuple) #t)\n          ((not (equal? (type-tag (car test_tuple)) type)) #f)\n          (else (check_type (cdr test_tuple))))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([element test_tuple])\n      (eq? (type-tag element) first_type))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple)))]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (cond [(empty? tuple) #t]\n          [(not (equal? (type-tag (car tuple)) type)) #f]\n          [else (loop (cdr tuple) type)])))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car tuple))])\n    (cond\n      [(empty? tuple) #t]\n      [(not (equal? type (type-tag (car tuple)))) #f]\n      [else (loop (cdr tuple) type)])))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(eq? first_type (type-tag (car test_tuple))) (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([item (in-list test_tuple)])\n      (eq? (type-tag item) first_type))))\n",
    "  (let ((first_type (type-tag (car test_tuple))))\n    (cond\n      ((null? test_tuple) #t)\n      ((not (eq? (type-tag (car test_tuple)) first_type)) #f)\n      (else (check_type (cdr test_tuple))))))\n",
    "  (let loop ([test_tuple test_tuple]\n             [type (type-tag (car test_tuple))])\n    (if (null? test_tuple)\n        #t\n        (if (eq? type (type-tag (car test_tuple)))\n            (loop (cdr test_tuple) type)\n            #f))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n               (check_type (cdr test_tuple)))]))\n",
    "  (let ((first_type (type-tag (car test_tuple))))\n    (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car (cdr test_tuple))) first_type)\n        (check_type (cdr test_tuple))\n        #f))))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [(and (string? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [(and (symbol? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [else #f]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(not (eq? (type-tag (car test_tuple)) first_type)) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(= (length test_tuple) 1) #t]\n    [else\n     (and\n      (equal? (type-tag (car test_tuple))\n              (type-tag (cadr test_tuple)))\n      (check_type (cdr test_tuple)))]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [(and (string? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [(and (symbol? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(not (eq? type (type-tag (car test_tuple)))) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(not (equal? (type-tag (car test_tuple)) first_type)) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (not (empty? test_tuple))\n          (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple))))\n     (check_type (rest test_tuple))]\n    [else #f]))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([item (in-list (cdr test_tuple))])\n      (eq? (type-tag item) first_type))))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [(and (string? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (cond\n      [(empty? test_tuple) #t]\n      [(type-tag (car test_tuple)) type]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(= (length test_tuple) 1) #t]\n    [(= (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n     (check_type (rest test_tuple))]\n    [else #f]))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_element (car test_tuple)])\n    (cond\n      [(null? test_tuple) #t]\n      [(and (number? first_element) (number? (car test_tuple))) (check_type (cdr test_tuple))]\n      [(and (string? first_element) (string? (car test_tuple))) (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (cond\n    [(null? (cdr test_tuple)) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type (car test_tuple)) (type (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(eq? first_type (type-tag (car test_tuple))) (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (cond [(empty? tuple) #t]\n          [(eq? type (type-tag (car tuple))) (loop (cdr tuple) type)]\n          [else #f])))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) true]\n      [(not (equal? (type-tag (car test_tuple)) type)) false]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([elem test_tuple])\n      (equal? (type-tag elem) first_type))))\n",
    "  (let loop ([tuple test_tuple])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) (type-tag (cadr tuple)))\n            (loop (cdr tuple))\n            #f))))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (cond\n      [(empty? test_tuple) #t]\n      [(not (eq? type (type-tag (car test_tuple)))) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(not (equal? first_type (type-tag (car test_tuple)))) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? (cdr test_tuple)) #t]\n      [(eq? first_type (type-tag (car (cdr test_tuple))))\n       (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([item test_tuple])\n      (eq? (type-tag item) first_type))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond [(null? (cdr test_tuple)) #t]\n          [(eq? (type-tag (car (cdr test_tuple))) first_type)\n           (check_type (cdr test_tuple))]\n          [else #f])))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (andmap (lambda (x) (eq? (type-tag x) first_type)) test_tuple)))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else\n     (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple)))]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_element (car test_tuple)])\n    (cond\n      [(null? test_tuple) #t]\n      [(not (equal? (typeof first_element) (typeof (car test_tuple)))) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(not (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))) #f]\n    [else (check_type (rest test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (not (empty? test_tuple)) (not (empty? (cdr test_tuple))))\n     (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple)))]\n    [else #t]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple))\n          (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([element test_tuple])\n      (equal? (type-tag element) first_type))))\n",
    "  (let loop ([tuple test_tuple])\n    (if (null? tuple)\n        #t\n        (if (equal? (type-tag (car tuple)) (type-tag (cadr tuple)))\n            (loop (cdr tuple))\n            #f))))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (cond\n      [(empty? test_tuple) #t]\n      [(type-tag (car test_tuple)) type]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let loop ((tuple test_tuple) (type (type-tag (car test_tuple))))\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple))\n          (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (equal? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n     (check_type (rest test_tuple))]\n    [else #f]))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([x (in-list (cdr test_tuple))])\n      (eq? (type-tag x) first_type))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([item test_tuple])\n      (eq? first_type (type-tag item)))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(= (length test_tuple) 1) #t]\n    [(= (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cdr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ((first_type (type-tag (car test_tuple))))\n    (cond ((null? (cdr test_tuple)) #t)\n          ((eq? (type-tag (car (cdr test_tuple))) first_type)\n           (check_type (cdr test_tuple)))\n          (else #f))))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n               (check_type (cdr test_tuple)))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(= (length test_tuple) 1) #t]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n               (check_type (cdr test_tuple)))]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple))\n          (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (cond [(empty? tuple) #t]\n          [(not (eq? (type-tag (car tuple)) type)) #f]\n          [else (loop (cdr tuple) type)])))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ((type (type-tag (car test_tuple))))\n    (cond\n      [(null? test_tuple) #t]\n      [(not (eq? type (type-tag (car test_tuple)))) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? (cdr test_tuple)) #t]\n      [(eq? first_type (type-tag (car (cdr test_tuple)))) (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (eq? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n               (check_type (cdr test_tuple)))]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car test_tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([item (in-list test_tuple)])\n      (eq? first_type (type-tag item)))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([elem (in-list (cdr test_tuple))])\n      (eq? (type-tag elem) first_type))))\n",
    "  (let loop ([tuple test_tuple] [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (andmap (lambda (x) (eq? (type-tag x) first_type)) test_tuple)))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple))\n          (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [(and (string? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (let ((first_element (car test_tuple))\n        (rest_elements (cdr test_tuple)))\n    (cond\n      ((null? rest_elements) #t)\n      ((not (equal? (type-tag first_element) (type-tag (car rest_elements)))) #f)\n      (else (check_type rest_elements)))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(equal? (type-tag (first test_tuple)) (type-tag (second test_tuple))) (check_type (rest test_tuple))]\n    [else #f]))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [else\n     (and (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n          (check_type (rest test_tuple)))]))\n",
    "  (cond [(empty? test_tuple) true]\n        [else (and (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n                  (check_type (rest test_tuple)))]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? (type-tag (car tuple)) type)\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond [(null? test_tuple) #t]\n          [else (and (eq? (type-tag (car test_tuple)) first_type)\n                     (check_type (cdr test_tuple)))])))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [(and (string? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [(and (symbol? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [else #f]))\n",
    "  (let ([type (type-tag (car test_tuple))])\n    (andmap (lambda (x) (eq? (type-tag x) type)) test_tuple)))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(= (length test_tuple) 1) #t]\n    [(= (length test_tuple) 2)\n     (and (not (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple))))\n          (check_type (rest test_tuple)))]))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(not (eq? (type-tag (car test_tuple)) first_type)) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(empty? test_tuple) true]\n      [(equal? first_type (type-tag (car (cdr test_tuple)))) (check_type (cdr test_tuple))]\n      [else false])))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (for/and ([item test_tuple])\n      (eq? (type-tag item) first_type))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(= (length test_tuple) 1) #t]\n    [(= (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (andmap (lambda (x) (eq? (type-tag x) first_type)) test_tuple)))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(= (length test_tuple) 1) #t]\n    [(= (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n     (check_type (rest test_tuple))]\n    [else #f]))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n"
  ]
}