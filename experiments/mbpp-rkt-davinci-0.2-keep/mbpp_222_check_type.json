{
  "name": "mbpp_222_check_type",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if all the elements in tuple have same data type or not.\n(define (check_type test_tuple)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (not (empty? (cdr test_tuple)))\n          (not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (let ((type (type-tag (car test_tuple))))\n    (cond ((null? test_tuple) #t)\n          ((not (eq? type (type-tag (car test_tuple)))) #f)\n          (else (check_type (cdr test_tuple))))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (cond\n      [(null? test_tuple) #t]\n      [(eq? (type-tag (car test_tuple)) first_type) (check_type (cdr test_tuple))]\n      [else #f])))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (not (empty? test_tuple)) (not (empty? (cdr test_tuple))))\n     (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple)))]\n    [else #t]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let ([type_of_first (type-tag (car test_tuple))])\n    (cond [(null? (cdr test_tuple)) #t]\n          [(eq? (type-tag (car (cdr test_tuple))) type_of_first)\n           (check_type (cdr test_tuple))]\n          [else #f])))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(= (length test_tuple) 1) #t]\n    [else\n     (and\n      (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n      (check_type (rest test_tuple)))]))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (if (null? (cdr test_tuple))\n        #t\n        (if (equal? (type-tag (car (cdr test_tuple))) first_type)\n            (check_type (cdr test_tuple))\n            #f))))\n",
    "  (let ([first_type (type-tag (car test_tuple))])\n    (andmap (lambda (x) (eq? (type-tag x) first_type)) test_tuple)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (let ([first_element (car test_tuple)])\n    (cond\n      [(null? test_tuple) #t]\n      [(not (equal? (type-tag first_element) (type-tag (car test_tuple)))) #f]\n      [else (check_type (cdr test_tuple))])))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))))\n          #f\n          (check_type (cdr test_tuple)))))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(not (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))) #f]\n    [else (check_type (rest test_tuple))]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (let loop ([tuple test_tuple]\n             [type (type-tag (car tuple))])\n    (if (null? tuple)\n        #t\n        (if (eq? type (type-tag (car tuple)))\n            (loop (cdr tuple) type)\n            #f))))\n",
    "  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n"
  ]
}