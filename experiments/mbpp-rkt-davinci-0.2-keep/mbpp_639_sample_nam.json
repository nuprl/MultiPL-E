{
  "name": "mbpp_639_sample_nam",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-equal? (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16)\n    (check-equal? (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10)\n    (check-equal? (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(symbol? (first sample_names))\n     (if (char-lower-case? (string-ref (symbol->string (first sample_names)) 0))\n         (sample_nam (rest sample_names))\n         (+ (string-length (symbol->string (first sample_names))) (sample_nam (rest sample_names))))]\n    [else (+ (string-length (symbol->string (first sample_names))) (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(null? sample_names) 0]\n    [(char-lower-case? (string-ref (car sample_names) 0))\n     (sample_nam (cdr sample_names))]\n    [else (+ (string-length (car sample_names))\n             (sample_nam (cdr sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0)) (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names)) (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [else\n     (cond\n       [(char-lower-case? (string-ref (first sample_names) 0))\n        (sample_nam (rest sample_names))]\n       [else\n        (+ (string-length (first sample_names))\n           (sample_nam (rest sample_names)))])]))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;syntax:eval:7:0&gt;\n  arguments...:\n   #&lt;syntax:eval:7:0&gt;\n</code>\nI am not sure what is wrong with my code.\n\n\nA:\n\nYou're missing a pair of parentheses in the <code>else</code> clause of the first <code>cond</code>.\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n</code>\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n",
    "  (cond\n    [(empty? sample_names) 0]\n    [(char-lower-case? (string-ref (first sample_names) 0))\n     (sample_nam (rest sample_names))]\n    [else (+ (string-length (first sample_names))\n             (sample_nam (rest sample_names)))]))\n"
  ]
}