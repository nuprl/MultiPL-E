{
  "name": "mbpp_56_checks",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check if a given number is one less than twice its reverse.\n(define (checks n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate checks))\n    (check-equal? (candidate 70) #f)\n    (check-equal? (candidate 23) #f)\n    (check-equal? (candidate 73) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (equal? (sub1 (* 2 (sub1 r))) n)))))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([n (number->string n)])\n    (let ([n (string-reverse n)])\n      (let ([n (string->number n)])\n        (let ([n (+ n 1)])\n          (let ([n (* n 2)])\n            (let ([n (number->string n)])\n              (let ([n (string-reverse n)])\n                (let ([n (string->number n)])\n                  (let ([n (+ n 1)])\n                    (let ([n (* n 2)])\n                      (let ([n (number->string n)])\n                        (let ([n (string-reverse n)])\n                          (let ([n (string->number n)])\n                            (let ([n (+ n 1)])\n                              (let ([n (* n 2)])\n                                (let ([n (number->string n)])\n                                  (let ([n (string-reverse n)])\n                                    (let ([n (string->number n)])\n                                      (let ([n (+ n 1)])\n                                        (let ([n (* n 2)])\n                                          (let ([n (number->string n)])\n                                            (let ([n (string-reverse n)])\n                                              (let ([n (string->number n)])\n                                                (let ([n (+ n 1)])\n                                                  (let ([n (* n 2)])\n                                                    (let ([n (number->string n)])\n                                                      (let ([n (string-reverse n)])\n                                                        (let ([n (string->number n)])\n                                                          (let ([n (+ n 1)])\n                                                            (let ([n (* n 2)])\n                                                              (let ([n (number->string n)])\n                                                                (let ([n (string-reverse n)])\n                                                                  (let ([n (string->number n)])\n                                                                    (let ([n (+ n 1)])\n                                                                      (let ([n (* n 2)])\n                                                                        (let ([n (number->string n)])\n                                                                          (let ([n (string-reverse n)])\n                                                                            (",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (if (= n (+ 1 (* 2 (reverse-digits n))))\n      #t\n      #f))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (if (= n (+ (- (* 2 (reverse-number n)) 1) 1))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (if (= (- n (* 2 (reverse-digits n))) 1)\n      #t\n      #f))\n",
    "  (let ([n-rev (string->number (string-reverse (number->string n)))])\n    (= (- n 1) (* 2 n-rev))))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (= (- (* 2 n-rev) 1) n)))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (zero? (modulo n 10))))))\n",
    "  (let ((n-str (number->string n))\n        (n-rev (number->string (reverse-number n))))\n    (if (= (- (string->number n-str) (string->number n-rev)) 1)\n        #t\n        #f)))\n",
    "  (define (reverse n)\n    (define (iter n r)\n      (if (zero? n)\n          r\n          (iter (quotient n 10) (+ (* r 10) (remainder n 10)))))\n    (iter n 0))\n  (if (= (- n (reverse n)) 1)\n      #t\n      #f))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 r) 1))))\n",
    "  (let ([r (reverse-number n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([rev (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= (- n rev) 1)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let* ([r (reverse n)]\n         [s (string-append n r)])\n    (and (equal? (string-length s) (string-length n))\n         (= (string->number s) (* 2 (string->number n))))))\n",
    "  (let ([rev (reverse n)])\n    (and (= (sub1 (* 2 rev)) n)\n         (= (sub1 (* 2 rev)) n))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n r) 1)))\n",
    "  (let ([n (string->number (number->string n))])\n    (and (= n (- (* 2 (reverse n)) 1))\n         (not (zero? (modulo n 10))))))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([rev (reverse-number n)])\n    (= (- n 1) (* 2 rev))))\n",
    "  (let ([rev (reverse-number n)])\n    (= (- n 1) (* 2 rev))))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let ((r (reverse n)))\n    (and (= (- n 1) (* 2 r))\n         (= (modulo n 10) 1))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let* ([r (reverse n)]\n         [d (string-&gt;number (string-append r))])\n    (= (- (* 2 d) 1) n)))\n",
    "  (let ([rev (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([rev (reverse-number n)])\n    (= (- n 1) (* 2 rev))))\n",
    "  (define (reverse n)\n    (if (= n 0)\n        0\n        (+ (* 10 (modulo n 10)) (reverse (quotient n 10)))))\n  (if (= n (+ 1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (= (- n-rev 1) (* 2 n))))\n",
    "  (define (reverse n)\n    (if (= n 0)\n        0\n        (+ (* 10 (modulo n 10)) (reverse (quotient n 10)))))\n  (= (- n (reverse n)) 1))\n",
    "  (let* ([n-str (number->string n)]\n         [n-rev (string-reverse n-str)]\n         [n-rev-num (string->number n-rev)])\n    (= (- (* 2 n-rev-num) 1) n)))\n",
    "  (let ([rev (reverse-number n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (= n (+ (- (* 2 (reverse n)) 1) 1))\n        #t\n        #f)))\n",
    "  (let ([n (string->number (number->string n))])\n    (and (= (- n (* 2 (reverse n))) 1)\n         (= (- n (* 2 (reverse n))) 1))))\n",
    "  (let ([rev (reverse-integer n)])\n    (= (- n rev) 1)))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (= n (- (* 2 n-rev) 1))))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([n (string->number (number->string n))])\n    (let ([n-rev (string->number (number->string (reverse n)))]\n          [n-1 (sub1 n)])\n      (if (= (* 2 n-rev) n-1)\n          'true\n          'false))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= (- n rev) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n r) 1)))\n",
    "  (let ([rev (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (define (reverse n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (* 10 (reverse (quotient n 10))) (remainder n 10))]))\n  (define (twice n)\n    (* 2 n))\n  (define (one-less n)\n    (- n 1))\n  (define (twice-reverse n)\n    (twice (reverse n)))\n  (define (one-less-twice-reverse n)\n    (one-less (twice-reverse n)))\n  (equal? n (one-less-twice-reverse n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= (- n rev) 1)))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= (- n rev) 1)))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (= (- (* 2 n-rev) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (equal? r 0)))))\n",
    "  (let ([n-rev (string->number (string-reverse (number->string n)))])\n    (= (- n 1) (* 2 n-rev))))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 r) 1))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (= (- n 1) (* 2 (reverse n))))))\n",
    "  (let* ([r (string->number (string-reverse (number->string n)))]\n         [d (- (* 2 r) n)])\n    (if (= d 1)\n        #t\n        #f)))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (= (- n 1) (* 2 (reverse r))))))\n",
    "  (let ((rev (string->number (string-reverse (number->string n)))))\n    (= (- n rev) 1)))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([rev (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= (- n rev) 1)))\n</code>\n",
    "  (and (= n (- (* 2 (reverse-number n)) 1))\n       (not (= n (reverse-number n)))))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (= (- n-rev 1) (* 2 n))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (define (reverse n)\n    (if (= n 0)\n        0\n        (+ (* (modulo n 10) (expt 10 (- (length (number->string n)) 1)))\n           (reverse (quotient n 10)))))\n  (= (- (* 2 (reverse n)) 1) n))\n",
    "  (if (= n 1)\n      #t\n      (if (= (modulo n 10) 0)\n          (checks (quotient n 10))\n          (if (= (- n (reverse n)) 1)\n              #t\n              #f))))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([n (number->string n)]\n        [n-rev (string-reverse n)])\n    (and (equal? (string-length n) (string-length n-rev))\n         (= (string->number n)\n            (- (* 2 (string->number n-rev)) 1)))))\n",
    "  (let* ((rev (reverse n))\n         (doubled (multiply n 2)))\n    (equal? (subtract doubled 1) rev)))\n",
    "  (let* ([r (reverse n)]\n         [s (string-append r \"0\")]\n         [d (string->number s)])\n    (= n (- d 1))))\n",
    "  (let ([n (number->string n)])\n    (and (string=? (string-reverse n) (number->string (- (* 2 (string->number n)) 1)))\n         #t)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (equal? n r)))))\n",
    "  (let ([n (string->number (string-reverse (number->string n)))])\n    (= (- n 1) (* 2 n))))\n",
    "  (let ([r (number->string (reverse n))])\n    (and (equal? (string-append r \"1\") (number->string (+ n 1)))\n         (equal? (string-append r \"2\") (number->string (+ n 2)))\n         (equal? (string-append r \"3\") (number->string (+ n 3)))\n         (equal? (string-append r \"4\") (number->string (+ n 4)))\n         (equal? (string-append r \"5\") (number->string (+ n 5)))\n         (equal? (string-append r \"6\") (number->string (+ n 6)))\n         (equal? (string-append r \"7\") (number->string (+ n 7)))\n         (equal? (string-append r \"8\") (number->string (+ n 8)))\n         (equal? (string-append r \"9\") (number->string (+ n 9)))\n         (equal? (string-append r \"0\") (number->string (+ n 0))))))\n",
    "  (let ([rev (reverse-number n)])\n    (and (= (- n 1) (* 2 rev))\n         (= (- n 1) (* 2 (reverse-number n))))))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (if (= n (+ (- (* 2 (reverse-number n)) 1) 1))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (= (- n 1) (* 2 (reverse n))))))\n",
    "  (let ([n-str (number->string n)])\n    (let ([n-rev (string->number (string-reverse n-str))])\n      (= (- n 1) (* 2 n-rev)))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (zero? (remainder n 10))))))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n r) 1)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([n (number->string n)])\n    (let ([n (string-&gt;number (string-reverse n))])\n      (= (- n (* 2 (string-&gt;number n))) 1))))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (= (- (* 2 n-rev) 1) n)))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= (- n rev) 1)))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string-&gt;number (string-reverse n-str))])\n    (= n (- (* 2 n-rev) 1))))\n",
    "  (let ([n (number->string n)])\n    (and (= (string-length n) (string-length (string-reverse n)))\n         (= (string->number n) (- (* 2 (string->number (string-reverse n))) 1)))))\n",
    "  (let* ([n-str (number->string n)]\n         [n-rev (string->number (string-reverse n-str))])\n    (= (- n-rev 1) (* 2 n))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (define (reverse n)\n    (if (= n 0)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (length (number->string n)) 1)))\n           (reverse (quotient n 10)))))\n  (= (- n (reverse n)) 1))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (not (zero? (remainder n 10)))\n         (not (zero? (remainder r 10))))))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (= n (- (* 2 n-rev) 1))))\n",
    "  (let ([rev (reverse-number n)])\n    (= (- n rev) 1)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (equal? r 0)))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (define (reverse-digits n)\n    (define (iter n rev)\n      (if (zero? n)\n          rev\n          (iter (quotient n 10) (+ (* rev 10) (remainder n 10)))))\n    (iter n 0))\n  (= (- n (reverse-digits n)) 1))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (reverse-number n)])\n    (and (= (- n 1) (* 2 r))\n         (= n (reverse-number r)))))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([n (number->string n)])\n    (if (equal? n (reverse n))\n        #t\n        (let ([n (string->number n)])\n          (= n (- (* 2 (string->number (reverse n))) 1))))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (= (- n 1) (* 2 (reverse n))))))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (if (= n (+ 1 (* 2 (reverse-number n))))\n      #t\n      #f))\n",
    "  (let ([n (string->number (number->string n))])\n    (= n (- (* 2 (reverse n)) 1))))\n",
    "  (let ([n-str (number->string n)]\n        [n-str-rev (reverse n-str)])\n    (if (= n (- (* 2 (string->number n-str-rev)) 1))\n        #t\n        #f)))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let* ([r (string->number (string-reverse (number->string n)))]\n         [d (- n (* 2 r))])\n    (if (= d 1)\n        #t\n        #f)))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (not (zero? (remainder n 2))))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= (- n rev) 1)))\n",
    "  (let ([rev (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= (- n rev) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (zero? (modulo n 10))))))\n",
    "  (let ([n-str (number->string n)])\n    (let ([n-rev (string->number (string-reverse n-str))])\n      (= n (- (* 2 n-rev) 1)))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (equal? (sub1 (* 2 n)) r))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (= (modulo n 10) 1))))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= (- n rev) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- (string->number n) (string->number r)) 1)))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (if (= (- n-rev 1) (* 2 n))\n        #t\n        #f)))\n",
    "  (let ([n-rev (number->string n)])\n    (string-append (reverse n-rev) n-rev)))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 r) 1))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 r) 1))))\n",
    "  (let ([n (string->number (number->string n))])\n    (let ([r (string->number (string-reverse (number->string n)))])\n      (= (- (* 2 r) 1) n))))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (define (reverse n)\n    (define (helper n r)\n      (if (= n 0)\n          r\n          (helper (quotient n 10) (+ (* r 10) (remainder n 10)))))\n    (helper n 0))\n  (if (= (- n (reverse n)) 1)\n      #t\n      #f))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (= (- n-rev 1) (* 2 n))))\n",
    "  (let* ([r (reverse n)]\n         [r2 (string-append (substring r 1) (substring r 0 1))])\n    (if (equal? (string-&gt;number r2) (- (string-&gt;number n) 1))\n        #t\n        #f)))\n",
    "  (let ([rev (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= (- n 1) (* 2 rev))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([n (number->string n)]\n        [r (string-reverse n)])\n    (and (= (string-length n) (string-length r))\n         (= (string->number n) (- (* 2 (string->number r)) 1)))))\n",
    "  (let* ([r (string->number (string-reverse (number->string n)))]\n         [d (- (* 2 r) n)])\n    (if (= d 1)\n        #t\n        #f)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (if (= n (+ 1 (* 2 (reverse-number n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (equal? r 0)))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ((r (string->number (string-reverse (number->string n)))))\n    (= (- n r) 1)))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([n-str (number->string n)]\n        [n-rev (string->number (string-reverse n-str))])\n    (and (= (- n 1) (* 2 n-rev))\n         (= (string-length n-str) (string-length (number->string n-rev))))))\n",
    "  (let ([r (string-&gt;number (string-reverse (number-&gt;string n)))])\n    (= (- n r) 1)))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (if (= n 1)\n      #t\n      (if (= n 0)\n          #f\n          (if (= (- n (* 2 (reverse n))) 1)\n              #t\n              #f))))\n",
    "  (let ([r (reverse-number n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (if (= n (sub1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))]\n        [d (- n (* 2 r))])\n    (if (= d 1)\n        #t\n        #f)))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n r) 1)))\n",
    "  (define (reverse n)\n    (define (iter n r)\n      (if (= n 0)\n          r\n          (iter (quotient n 10) (+ (* r 10) (remainder n 10)))))\n    (iter n 0))\n  (if (= n (+ (- (* 2 (reverse n)) 1) 1))\n      #t\n      #f))\n",
    "  (let ([n (string->number (number->string n))])\n    (and (= (- n (reverse n)) 1)\n         (= (- n (reverse n)) 1))))\n",
    "  (if (= n 1)\n      #t\n      (if (= n 0)\n          #t\n          (if (= (- n (* 2 (reverse n))) 1)\n              #t\n              #f))))\n",
    "  (let ([n-rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 n-rev) 1))))\n",
    "  (let ([r (string->number (string-reverse (number->string n)))])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= n (- (* 2 rev) 1))))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= (- n rev) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n"
  ]
}