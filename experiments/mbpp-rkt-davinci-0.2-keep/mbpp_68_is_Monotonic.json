{
  "name": "mbpp_68_is_Monotonic",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether the given array is monotonic or not.\n(define (is_Monotonic A)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Monotonic))\n    (check-equal? (candidate (list 6 5 4 4)) #t)\n    (check-equal? (candidate (list 1 2 2 3)) #t)\n    (check-equal? (candidate (list 1 3 2)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([i 0] [j 1])\n    (if (&gt;= i (length A))\n        #t\n        (if (&gt; (vector-ref A i) (vector-ref A j))\n            #f\n            (loop (+ i 1) (+ j 1))))))\n",
    "  (let loop ((A A) (prev (car A)))\n    (cond ((null? A) #t)\n          ((< prev (car A)) (loop (cdr A) (car A)))\n          ((> prev (car A)) (loop (cdr A) (car A)))\n          (else #f))))\n",
    "  (let loop ([A A] [i 0] [j (length A)])\n    (cond [(= i j) #t]\n          [(< (list-ref A i) (list-ref A (+ i 1))) (loop A (+ i 1) j)]\n          [(> (list-ref A i) (list-ref A (+ i 1))) (loop A (+ i 1) j)]\n          [else #f])))\n",
    "  (let loop ((A A) (prev (car A)))\n    (cond ((null? A) #t)\n          ((< prev (car A)) (loop (cdr A) (car A)))\n          ((> prev (car A)) (loop (cdr A) (car A)))\n          (else #f))))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (cond [(= i j) #t]\n          [(< (list-ref A i) (list-ref A (add1 i))) (loop (add1 i) j)]\n          [(> (list-ref A i) (list-ref A (add1 i))) (loop (add1 i) j)]\n          [else #f])))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (length A)) #t]\n      [(> (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_Helper A (+ i 1))]\n      [(< (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_Helper A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_Helper A 1))\n",
    "  (let loop ([i 0] [j 1])\n    (if (&gt;= i (length A))\n        #t\n        (if (&gt; (vector-ref A i) (vector-ref A j))\n            #f\n            (loop (+ i 1) (+ j 1))))))\n",
    "  (let ([n (length A)])\n    (and\n     (for/and ([i (in-range n)])\n       (and\n        (for/and ([j (in-range (add1 i))])\n          (and\n           (for/and ([k (in-range (add1 j))])\n             (and\n              (for/and ([l (in-range (add1 k))])\n                (and\n                 (for/and ([m (in-range (add1 l))])\n                   (and\n                    (for/and ([o (in-range (add1 m))])\n                      (and\n                       (for/and ([p (in-range (add1 o))])\n                         (and\n                          (for/and ([q (in-range (add1 p))])\n                            (and\n                             (for/and ([r (in-range (add1 q))])\n                               (and\n                                (for/and ([s (in-range (add1 r))])\n                                  (and\n                                   (for/and ([t (in-range (add1 s))])\n                                     (and\n                                      (for/and ([u (in-range (add1 t))])\n                                        (and\n                                         (for/and ([v (in-range (add1 u))])\n                                           (and\n                                            (for/and ([w (in-range (add1 v))])\n                                              (and\n                                               (for/and ([x (in-range (add1 w))])\n                                                 (and\n                                                  (for/and ([y (in-range (add1 x))])\n                                                    (and\n                                                     (for/and ([z (in-range (add1 y))])\n                                                       (and\n                                                        (for/and ([aa (in-range (add1 z))])\n                                                          (and\n                                                           (for/and ([bb (in-range (add1 aa))])\n                                                             (and\n                                                              (for/and ([cc (in-range (add1 bb))])\n                                                                (and\n                                                                 (for/and ([dd (",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(< (list-ref A i) (list-ref A j)) (loop j (add1 j))]\n          [else #f])))\n",
    "  (let ([is_increasing? (lambda (A)\n                          (let loop ([i 0])\n                            (cond [(= i (sub1 (length A))) #t]\n                                  [(< (list-ref A i) (list-ref A (add1 i))) (loop (add1 i))]\n                                  [else #f])))])\n    (or (is_increasing? A)\n        (is_increasing? (reverse A)))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(> (list-ref A i) (list-ref A (add1 i))) #f]\n      [else (is_Monotonic_Helper A (add1 i))]))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(< (vector-ref A i) (vector-ref A j)) (loop j (add1 j))]\n      [(> (vector-ref A i) (vector-ref A j)) (loop j (add1 j))]\n      [else #f])))\n",
    "  (let loop ([A A] [flag 0])\n    (cond\n      [(null? A) (if (= flag 0) #t #f)]\n      [(null? (cdr A)) #t]\n      [(< (car A) (cadr A)) (loop (cdr A) 1)]\n      [(> (car A) (cadr A)) (loop (cdr A) -1)]\n      [else (loop (cdr A) flag)])))\n",
    "  (let loop ([i 0] [j 1])\n    (if (&lt; i (vector-length A))\n        (if (&lt;= (vector-ref A i) (vector-ref A j))\n            (loop (+ i 1) (+ j 1))\n            #f)\n        #t)))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(< (list-ref A i) (list-ref A (add1 i))) (is_Monotonic_Helper A (add1 i))]\n      [(> (list-ref A i) (list-ref A (add1 i))) (is_Monotonic_Helper A (add1 i))]\n      [else #f]))\n  (is_Monotonic_Helper A 0))\n",
    "  (let ([n (length A)])\n    (cond\n      [(= n 1) #t]\n      [(< (vector-ref A 0) (vector-ref A 1))\n       (for/and ([i (in-range 1 (- n 1))])\n         (<= (vector-ref A i) (vector-ref A (+ i 1))))]\n      [(> (vector-ref A 0) (vector-ref A 1))\n       (for/and ([i (in-range 1 (- n 1))])\n         (>= (vector-ref A i) (vector-ref A (+ i 1))))]\n      [else #f])))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (= i (length A))\n        #t\n        (if (= (A i) (A (+ i 1)))\n            (is_Monotonic_Helper A (+ i 1))\n            (if (&lt; (A i) (A (+ i 1)))\n                (is_Monotonic_Helper A (+ i 1))\n                #f))))\n  (is_Monotonic_Helper A 0))\n",
    "  (if (or (is_Increasing A) (is_Decreasing A))\n      #t\n      #f))\n",
    "  (define (is_increasing A)\n    (if (null? (cdr A))\n        #t\n        (and (<= (car A) (cadr A))\n             (is_increasing (cdr A)))))\n  (define (is_decreasing A)\n    (if (null? (cdr A))\n        #t\n        (and (>= (car A) (cadr A))\n             (is_decreasing (cdr A)))))\n  (or (is_increasing A)\n      (is_decreasing A)))\n",
    "  (let loop ((A A) (prev (car A)))\n    (cond ((null? A) #t)\n          ((< (car A) prev) #f)\n          (else (loop (cdr A) (car A))))))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(> (vector-ref A i) (vector-ref A j)) #f]\n      [else (loop (add1 i) (add1 j))])))\n",
    "  (let loop ([A A] [i 0] [j (add1 (length A))])\n    (cond [(= i j) #t]\n          [(< (vector-ref A i) (vector-ref A (add1 i)))\n           (loop A (add1 i) j)]\n          [(> (vector-ref A i) (vector-ref A (add1 i)))\n           (loop A (add1 i) j)]\n          [else #f])))\n",
    "  (define (is_Monotonic_Aux A i)\n    (cond\n      [(= i (- (length A) 1)) #t]\n      [(< (list-ref A i) (list-ref A (+ i 1))) (is_Monotonic_Aux A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_Aux A 0))\n",
    "  (let loop ([i 0] [j 1])\n    (if (&lt; i (length A))\n        (if (&lt; (vector-ref A i) (vector-ref A j))\n            (loop (+ i 1) (+ j 1))\n            #f)\n        #t)))\n",
    "  (let ([n (length A)])\n    (if (< n 2)\n        #t\n        (let ([inc (for/and ([i (in-range 1 n)])\n                       (and (<= (list-ref A (- i 1)) (list-ref A i))\n                            #t))]\n              [dec (for/and ([i (in-range 1 n)])\n                       (and (>= (list-ref A (- i 1)) (list-ref A i))\n                            #t))])\n          (or inc dec)))))\n",
    "  (let ([n (length A)])\n    (and\n     (for/and ([i (in-range 1 n)])\n       (and\n        (or\n         (and\n          (for/and ([j (in-range i n)])\n            (and\n             (for/and ([k (in-range j n)])\n               (and\n                (for/and ([l (in-range k n)])\n                  (and\n                   (for/and ([m (in-range l n)])\n                     (and\n                      (for/and ([o (in-range m n)])\n                        (and\n                         (for/and ([p (in-range o n)])\n                           (and\n                            (for/and ([q (in-range p n)])\n                              (and\n                               (for/and ([r (in-range q n)])\n                                 (and\n                                  (for/and ([s (in-range r n)])\n                                    (and\n                                     (for/and ([t (in-range s n)])\n                                       (and\n                                        (for/and ([u (in-range t n)])\n                                          (and\n                                           (for/and ([v (in-range u n)])\n                                             (and\n                                              (for/and ([w (in-range v n)])\n                                                (and\n                                                 (for/and ([x (in-range w n)])\n                                                   (and\n                                                    (for/and ([y (in-range x n)])\n                                                      (and\n                                                       (for/and ([z (in-range y n)])\n                                                         (and\n                                                          (for/and ([aa (in-range z n)])\n                                                            (and\n                                                             (for/and ([ab (in-range aa n)])\n                                                               (and\n                                                                (for/and ([ac (in-range ab n)])\n                                                                  (and\n                                                                   (for/and ([ad (in-range ac n)])\n                                                                     (and\n                                                                      (for/and ([ae (",
    "  (define (is_monotonic_helper A index)\n    (if (= index (length A))\n        #t\n        (if (and (<= (list-ref A index) (list-ref A (+ index 1)))\n                 (is_monotonic_helper A (+ index 1)))\n            #t\n            #f)))\n  (is_monotonic_helper A 0))\n",
    "  (let loop ([i 0] [j (length A)])\n    (cond\n      [(= i j) #t]\n      [(< (vector-ref A i) (vector-ref A (+ i 1)))\n       (loop (+ i 1) j)]\n      [(> (vector-ref A i) (vector-ref A (+ i 1)))\n       (loop (+ i 1) j)]\n      [else #f])))\n",
    "  (let loop ([A A] [prev (car A)])\n    (cond [(empty? A) #t]\n          [(<= prev (car A)) (loop (cdr A) (car A))]\n          [else #f])))\n",
    "  (define (is_increasing A)\n    (cond\n      [(empty? A) #t]\n      [(empty? (rest A)) #t]\n      [(< (first A) (second A)) (is_increasing (rest A))]\n      [else #f]))\n  (define (is_decreasing A)\n    (cond\n      [(empty? A) #t]\n      [(empty? (rest A)) #t]\n      [(> (first A) (second A)) (is_decreasing (rest A))]\n      [else #f]))\n  (or (is_increasing A) (is_decreasing A)))\n",
    "  (let loop ([A A] [prev (car A)])\n    (if (null? A)\n        #t\n        (if (&lt;= prev (car A))\n            (loop (cdr A) (car A))\n            #f))))\n",
    "  (let loop ((A A) (prev (car A)) (result #t))\n    (if (null? A)\n        result\n        (if (or (and (<= prev (car A)) result)\n                (and (>= prev (car A)) result))\n            (loop (cdr A) (car A) result)\n            (loop (cdr A) (car A) #f)))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(< (list-ref A i) (list-ref A (add1 i))) (is_Monotonic_Helper A (add1 i))]\n      [else #f]))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([i 0] [j 1])\n    (if (&lt; i (length A))\n        (if (&lt; (vector-ref A i) (vector-ref A j))\n            (loop (+ i 1) (+ j 1))\n            #f)\n        #t)))\n",
    "  (let ([n (length A)])\n    (let loop ([i 0] [j 1])\n      (cond [(= i (- n 1)) #t]\n            [(= j (- n 1)) (loop (+ i 1) (+ i 2))]\n            [(> (vector-ref A i) (vector-ref A j)) #f]\n            [else (loop i (+ j 1))]))))\n",
    "  (let* ([n (length A)]\n         [increasing? (for/and ([i (in-range n)]\n                                #:when (not (zero? i)))\n                        (<= (list-ref A (- i 1)) (list-ref A i)))]\n         [decreasing? (for/and ([i (in-range n)]\n                                #:when (not (zero? i)))\n                        (>= (list-ref A (- i 1)) (list-ref A i)))])\n    (or increasing? decreasing?)))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (if (&lt; i j)\n        (if (or (&lt; (list-ref A i) (list-ref A (add1 i)))\n                (&gt; (list-ref A i) (list-ref A (add1 i))))\n            #f\n            (loop (add1 i) j))\n        #t)))\n",
    "  (let loop ((A A) (B '()))\n    (if (null? A)\n        (if (null? B)\n            #t\n            (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                #t\n                #f))\n        (if (null? B)\n            (loop (cdr A) (cons (car A) B))\n            (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                (loop (cdr A) (cons (car A) B))\n                (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                    (loop (cdr A) (cons (car A) B))\n                    (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                        (loop (cdr A) (cons (car A) B))\n                        (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                            (loop (cdr A) (cons (car A) B))\n                            (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                                (loop (cdr A) (cons (car A) B))\n                                (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                                    (loop (cdr A) (cons (car A) B))\n                                    (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                                        (loop (cdr A) (cons (car A) B))\n                                        (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                                            (loop (cdr A) (cons (car A) B))\n                                            (if (and (equal? (car B) '=) (equal? (cadr B) '=))\n                                                (loop (cdr A) (cons (car A) B))\n                                               ",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(< (vector-ref A i) (vector-ref A j)) (loop j (add1 j))]\n          [else #f])))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(< (list-ref A i) (list-ref A (add1 i)))\n       (is_Monotonic_Helper A (add1 i))]\n      [else #f]))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ((A A) (B (cdr A)))\n    (if (null? B)\n        #t\n        (if (and (&lt;= (car A) (car B)) (loop B (cdr B)))\n            #t\n            #f))))\n",
    "  (let loop ([A A] [prev (car A)])\n    (if (null? A) #t\n        (if (&lt;= prev (car A))\n            (loop (cdr A) (car A))\n            #f))))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(> (vector-ref A i) (vector-ref A j)) #f]\n          [else (loop (add1 i) (add1 j))])))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (if (&lt; i j)\n        (if (&lt; (vector-ref A i) (vector-ref A (add1 i)))\n            (loop (add1 i) j)\n            (if (&gt; (vector-ref A i) (vector-ref A (add1 i)))\n                (loop (add1 i) j)\n                #f))\n        #t)))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (- (length A) 1)) #t]\n          [(> (list-ref A i) (list-ref A j)) #f]\n          [else (loop (+ i 1) (+ j 1))])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(>= i (length A)) #t]\n          [(>= j (length A)) (loop (+ i 1) (+ i 2))]\n          [(< (list-ref A i) (list-ref A j)) (loop (+ i 1) (+ j 1))]\n          [else #f])))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (length A)) #t]\n      [(> (vector-ref A i) (vector-ref A (- i 1))) (is_Monotonic_Helper A (+ i 1))]\n      [(< (vector-ref A i) (vector-ref A (- i 1))) (is_Monotonic_Helper A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_Helper A 1))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(> (list-ref A i) (list-ref A (add1 i))) #f]\n      [else (is_Monotonic_Helper A (add1 i))]))\n  (is_Monotonic_Helper A 0))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (length A)) #t]\n      [(> (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_Helper A (+ i 1))]\n      [(< (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_Helper A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_Helper A 1))\n",
    "  (let loop ([i 0])\n    (if (= i (sub1 (length A)))\n        #t\n        (if (or (< (vector-ref A i) (vector-ref A (add1 i)))\n                (> (vector-ref A i) (vector-ref A (add1 i))))\n            #f\n            (loop (add1 i))))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (= i (length A))\n        #t\n        (if (and (<= (list-ref A i) (list-ref A (+ i 1)))\n                 (is_Monotonic_Helper A (+ i 1)))\n            #t\n            #f)))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([A A])\n    (if (null? A)\n        #t\n        (if (or (and (<= (car A) (cadr A)) (loop (cdr A)))\n                (and (>= (car A) (cadr A)) (loop (cdr A))))\n            #t\n            #f))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (= i (length A))\n        #t\n        (if (and (<= (list-ref A i) (list-ref A (+ i 1)))\n                 (is_Monotonic_Helper A (+ i 1)))\n            #t\n            #f)))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([i 0] [j (sub1 (vector-length A))])\n    (cond [(= i j) #t]\n          [(< (vector-ref A i) (vector-ref A j)) (loop (add1 i) (sub1 j))]\n          [else #f])))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? (cdr A)) #t]\n    [(< (car A) (cadr A)) (is_Monotonic (cdr A))]\n    [(> (car A) (cadr A)) (is_Monotonic (cdr A))]\n    [else #f]))\n",
    "  (let ([n (length A)])\n    (if (= n 1)\n        #t\n        (let ([i 0])\n          (let loop ([i 0])\n            (if (= i (- n 1))\n                #t\n                (if (or (and (< (vector-ref A i) (vector-ref A (+ i 1)))\n                             (is_Monotonic (vector-ref A i) (vector-ref A (+ i 1))))\n                        (and (> (vector-ref A i) (vector-ref A (+ i 1)))\n                             (is_Monotonic (vector-ref A i) (vector-ref A (+ i 1)))))\n                    (loop (+ i 1))\n                    #f)))))))\n",
    "  (let loop ([A A] [i 0] [j 0])\n    (cond [(empty? A) #t]\n          [(= i (length A)) #t]\n          [(= j (length A)) (loop (rest A) (+ i 1) 0)]\n          [(> (list-ref A i) (list-ref A j)) #f]\n          [else (loop A i (+ j 1))])))\n",
    "  (let ([n (length A)])\n    (cond\n      [(= n 1) #t]\n      [(< (vector-ref A 0) (vector-ref A 1))\n       (let loop ([i 1])\n         (cond\n           [(= i n) #t]\n           [(>= (vector-ref A i) (vector-ref A (- i 1)))\n            (loop (+ i 1))]\n           [else #f]))]\n      [(> (vector-ref A 0) (vector-ref A 1))\n       (let loop ([i 1])\n         (cond\n           [(= i n) #t]\n           [(<= (vector-ref A i) (vector-ref A (- i 1)))\n            (loop (+ i 1))]\n           [else #f]))]\n      [else #f])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(> (vector-ref A i) (vector-ref A j)) #f]\n          [else (loop (add1 i) (add1 j))])))\n",
    "  (let ([n (length A)])\n    (define (is_Monotonic_helper A i)\n      (if (= i n)\n          #t\n          (if (&lt; (list-ref A i) (list-ref A (+ i 1)))\n              (is_Monotonic_helper A (+ i 1))\n              #f)))\n    (is_Monotonic_helper A 0)))\n",
    "  (let ([n (length A)])\n    (cond [(= n 1) #t]\n          [(= n 2) #t]\n          [else (let ([first (first A)]\n                      [last (last A)])\n                  (cond [(< first last) (is_Monotonic_increasing A)]\n                        [(> first last) (is_Monotonic_decreasing A)]\n                        [else #f]))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(< (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [(> (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (define (is_increasing A)\n    (cond\n      [(empty? A) #t]\n      [(empty? (rest A)) #t]\n      [else (and (<= (first A) (first (rest A))) (is_increasing (rest A)))]))\n  (define (is_decreasing A)\n    (cond\n      [(empty? A) #t]\n      [(empty? (rest A)) #t]\n      [else (and (>= (first A) (first (rest A))) (is_decreasing (rest A)))]))\n  (or (is_increasing A) (is_decreasing A)))\n",
    "  (let loop ((A A) (prev (car A)))\n    (if (null? A)\n        #t\n        (if (&lt; prev (car A))\n            (loop (cdr A) (car A))\n            #f))))\n",
    "  (let loop ((i 0) (j (sub1 (length A))))\n    (if (&lt; i j)\n        (if (&lt; (vector-ref A i) (vector-ref A j))\n            (loop (add1 i) (sub1 j))\n            #f)\n        #t)))\n",
    "  (define (is_Monotonic_Aux A i)\n    (cond\n      [(= i (length A)) #t]\n      [(> (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_Aux A (+ i 1))]\n      [(< (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_Aux A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_Aux A 1))\n",
    "  (define (is_Monotonic_helper A i)\n    (if (&gt;= i (length A))\n        #t\n        (if (&gt; (vector-ref A i) (vector-ref A (- i 1)))\n            (is_Monotonic_helper A (+ i 1))\n            #f)))\n  (is_Monotonic_helper A 1))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (length A)) #t]\n      [(> (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_Helper A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_Helper A 1))\n",
    "  (define (is_increasing A)\n    (if (null? (cdr A))\n        #t\n        (if (&lt; (car A) (car (cdr A)))\n            (is_increasing (cdr A))\n            #f)))\n  (define (is_decreasing A)\n    (if (null? (cdr A))\n        #t\n        (if (&gt; (car A) (car (cdr A)))\n            (is_decreasing (cdr A))\n            #f)))\n  (or (is_increasing A) (is_decreasing A)))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(< (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [(> (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (define (is_Monotonic_helper A i)\n    (if (= i (length A))\n        #t\n        (if (or (< (list-ref A i) (list-ref A (- i 1)))\n                (> (list-ref A i) (list-ref A (- i 1))))\n            #f\n            (is_Monotonic_helper A (+ i 1)))))\n  (is_Monotonic_helper A 1))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(< (list-ref A i) (list-ref A (add1 i))) (is_Monotonic_Helper A (add1 i))]\n      [else #f]))\n  (is_Monotonic_Helper A 0))\n",
    "  (let ([n (length A)])\n    (cond\n      [(= n 1) #t]\n      [(< (list-ref A 0) (list-ref A 1))\n       (let loop ([i 1])\n         (cond\n           [(= i n) #t]\n           [(< (list-ref A i) (list-ref A (+ i 1))) #f]\n           [else (loop (+ i 1))]))]\n      [(> (list-ref A 0) (list-ref A 1))\n       (let loop ([i 1])\n         (cond\n           [(= i n) #t]\n           [(> (list-ref A i) (list-ref A (+ i 1))) #f]\n           [else (loop (+ i 1))]))]\n      [else #f])))\n",
    "  (let loop ((A A) (prev (car A)))\n    (cond ((null? A) #t)\n          ((< prev (car A)) (loop (cdr A) (car A)))\n          ((> prev (car A)) (loop (cdr A) (car A)))\n          (else #f))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (= i (length A))\n        #t\n        (if (and (<= (list-ref A i) (list-ref A (+ i 1)))\n                 (is_Monotonic_Helper A (+ i 1)))\n            #t\n            #f)))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([A A] [prev (car A)] [mono #t])\n    (cond [(null? A) mono]\n          [(> (car A) prev) (loop (cdr A) (car A) mono)]\n          [(< (car A) prev) (loop (cdr A) (car A) #f)]\n          [else (loop (cdr A) (car A) mono)])))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (cond [(= i j) #t]\n          [(or (< (list-ref A i) (list-ref A (add1 i)))\n               (> (list-ref A i) (list-ref A (add1 i)))) #f]\n          [else (loop (add1 i) j)])))\n",
    "  (let ([n (length A)])\n    (and\n     (for/and ([i (in-range 1 n)])\n       (or\n        (and (< (list-ref A (- i 1)) (list-ref A i))\n             (for/and ([j (in-range i n)])\n               (<= (list-ref A (- j 1)) (list-ref A j))))\n        (and (> (list-ref A (- i 1)) (list-ref A i))\n             (for/and ([j (in-range i n)])\n               (>= (list-ref A (- j 1)) (list-ref A j))))))\n     (for/and ([i (in-range 1 n)])\n       (or\n        (and (<= (list-ref A (- i 1)) (list-ref A i))\n             (for/and ([j (in-range i n)])\n               (<= (list-ref A (- j 1)) (list-ref A j))))\n        (and (>= (list-ref A (- i 1)) (list-ref A i))\n             (for/and ([j (in-range i n)])\n               (>= (list-ref A (- j 1)) (list-ref A j)))))))))\n",
    "  (define (is_Monotonic_helper A i)\n    (cond\n      [(= i (length A)) #t]\n      [(> (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_helper A (+ i 1))]\n      [(< (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_helper A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_helper A 1))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (cond [(= i j) #t]\n          [(< (vector-ref A i) (vector-ref A (add1 i))) (loop (add1 i) j)]\n          [(> (vector-ref A i) (vector-ref A (add1 i))) (loop (add1 i) j)]\n          [else #f])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(> (vector-ref A i) (vector-ref A j)) #f]\n          [else (loop (add1 i) (add1 j))])))\n",
    "  (define (is_Monotonic_Aux A i)\n    (if (= i (length A))\n        #t\n        (if (and (<= (list-ref A i) (list-ref A (+ i 1)))\n                 (is_Monotonic_Aux A (+ i 1)))\n            #t\n            #f)))\n  (is_Monotonic_Aux A 0))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(< (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [(> (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (let loop ([A A] [i 0] [j (sub1 (length A))])\n    (cond [(or (negative? i) (negative? j)) #t]\n          [(and (equal? (vector-ref A i) (vector-ref A j))\n                (loop A (add1 i) (sub1 j))) #t]\n          [(and (or (and (positive? (vector-ref A i)) (negative? (vector-ref A j)))\n                    (and (negative? (vector-ref A i)) (positive? (vector-ref A j))))\n                (loop A (add1 i) (sub1 j))) #f]\n          [else #t])))\n",
    "  (let loop ([i 0] [j (add1 (length A))] [increasing? #t] [decreasing? #t])\n    (cond [(= i (sub1 j)) #t]\n          [(and increasing? decreasing?) #f]\n          [(and increasing? (not decreasing?)) #t]\n          [(and (not increasing?) decreasing?) #t]\n          [(and increasing? (not (or (< (list-ref A i) (list-ref A (add1 i)))\n                                     (= (list-ref A i) (list-ref A (add1 i))))))\n           (loop (add1 i) j #f increasing?)]\n          [(and decreasing? (not (or (> (list-ref A i) (list-ref A (add1 i)))\n                                     (= (list-ref A i) (list-ref A (add1 i))))))\n           (loop (add1 i) j increasing? #f)]\n          [else (loop (add1 i) j increasing? decreasing?)])))\n",
    "  (let loop ([A A] [prev (car A)])\n    (cond [(null? A) #t]\n          [(< prev (car A)) (loop (cdr A) (car A))]\n          [(> prev (car A)) (loop (cdr A) (car A))]\n          [else #f])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(= (length A) 1) #t]\n    [else\n     (let ([first (first A)]\n           [last (last A)])\n       (cond\n         [(< first last)\n          (andmap (lambda (x y) (< x y)) (rest A) (rest (rest A)))]\n         [(> first last)\n          (andmap (lambda (x y) (> x y)) (rest A) (rest (rest A)))]\n         [else #t]))]))\n",
    "  (let loop ((i 0) (j (sub1 (length A))))\n    (cond ((= i j) #t)\n          ((< (list-ref A i) (list-ref A j)) #f)\n          (else (loop (add1 i) (sub1 j))))))\n",
    "  (define (is_increasing A)\n    (cond\n      [(empty? A) #t]\n      [(empty? (rest A)) #t]\n      [(> (first A) (second A)) #f]\n      [else (is_increasing (rest A))]))\n  (define (is_decreasing A)\n    (cond\n      [(empty? A) #t]\n      [(empty? (rest A)) #t]\n      [(< (first A) (second A)) #f]\n      [else (is_decreasing (rest A))]))\n  (or (is_increasing A) (is_decreasing A)))\n",
    "  (let loop ([i 0] [j 1] [inc #t] [dec #t])\n    (if (&gt;= i (length A))\n        (or inc dec)\n        (if (&gt;= j (length A))\n            (loop (+ i 1) (+ i 2) inc dec)\n            (if (&lt; (vector-ref A i) (vector-ref A j))\n                (loop i (+ j 1) #t dec)\n                (if (&gt; (vector-ref A i) (vector-ref A j))\n                    (loop i (+ j 1) inc #t)\n                    (loop i (+ j 1) inc dec)))))))\n",
    "  (define (is_Monotonic_helper A i)\n    (if (= i (length A))\n        #t\n        (if (or (and (<= (list-ref A i) (list-ref A (+ i 1)))\n                     (is_Monotonic_helper A (+ i 1)))\n                (and (>= (list-ref A i) (list-ref A (+ i 1)))\n                     (is_Monotonic_helper A (+ i 1))))\n            #t\n            #f)))\n  (is_Monotonic_helper A 0))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond [(= i (length A)) #t]\n          [(< (list-ref A i) (list-ref A (- i 1))) #f]\n          [else (is_Monotonic_Helper A (+ i 1))]))\n  (is_Monotonic_Helper A 1))\n",
    "  (let loop ([A A]\n             [monotonic #t])\n    (if (null? A)\n        monotonic\n        (if (or (< (car A) (cadr A))\n                (> (car A) (cadr A)))\n            (loop (cdr A) #f)\n            (loop (cdr A) monotonic)))))\n",
    "  (let ([n (length A)])\n    (let loop ([i 0] [j (add1 i)])\n      (cond\n        [(= i n) #t]\n        [(< (vector-ref A i) (vector-ref A j)) (loop j (add1 j))]\n        [else #f]))))\n",
    "  (let ([len (length A)])\n    (cond\n      [(= len 0) #t]\n      [(= len 1) #t]\n      [(= len 2) #t]\n      [else\n       (let ([first (first A)]\n             [last (last A)])\n         (cond\n           [(< first last)\n            (for/and ([i (in-range 1 (- len 1))])\n              (<= (list-ref A i) (list-ref A (+ i 1))))]\n           [(> first last)\n            (for/and ([i (in-range 1 (- len 1))])\n              (>= (list-ref A i) (list-ref A (+ i 1))))]))])))\n",
    "  (define (is_increasing A)\n    (if (null? (cdr A))\n        #t\n        (and (<= (car A) (cadr A))\n             (is_increasing (cdr A)))))\n  (define (is_decreasing A)\n    (if (null? (cdr A))\n        #t\n        (and (>= (car A) (cadr A))\n             (is_decreasing (cdr A)))))\n  (or (is_increasing A) (is_decreasing A)))\n",
    "  (define (is_increasing A)\n    (if (null? (cdr A))\n        #t\n        (and (<= (car A) (cadr A))\n             (is_increasing (cdr A)))))\n  (define (is_decreasing A)\n    (if (null? (cdr A))\n        #t\n        (and (>= (car A) (cadr A))\n             (is_decreasing (cdr A)))))\n  (or (is_increasing A) (is_decreasing A)))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(< (list-ref A i) (list-ref A (add1 i))) (is_Monotonic_Helper A (add1 i))]\n      [else #f]))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ((i 0) (j 1) (len (length A)) (mono #t))\n    (cond ((= i (- len 1)) mono)\n          ((&gt; (vector-ref A i) (vector-ref A j)) (loop (+ i 1) (+ j 1) len #f))\n          (else (loop (+ i 1) (+ j 1) len mono)))))\n",
    "  (let loop ([i 0] [j 1])\n    (if (&lt; i (vector-length A))\n        (if (&lt; (vector-ref A i) (vector-ref A j))\n            (loop (+ i 1) (+ j 1))\n            #f)\n        #t)))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (length A)) #t]\n      [(> (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_Helper A (+ i 1))]\n      [(< (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_Helper A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_Helper A 1))\n",
    "  (cond [(or (and (apply <= A) (apply >= A)) (and (apply >= A) (apply <= A))) #t]\n        [else #f]))\n",
    "  (let loop ([A A] [i 0])\n    (if (empty? A)\n        #t\n        (if (or (and (<= (first A) (second A)) (loop (rest A) (+ i 1)))\n                (and (>= (first A) (second A)) (loop (rest A) (+ i 1))))\n            #t\n            #f))))\n",
    "  (let loop ([A A] [prev (car A)])\n    (cond [(null? A) #t]\n          [(< prev (car A)) (loop (cdr A) (car A))]\n          [(> prev (car A)) (loop (cdr A) (car A))]\n          [else #f])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(< (first A) (first (rest A)))\n     (is_Monotonic (rest A))]\n    [(> (first A) (first (rest A)))\n     (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (define (is_increasing A)\n    (cond\n      [(null? A) #t]\n      [(null? (cdr A)) #t]\n      [else (and (<= (car A) (cadr A)) (is_increasing (cdr A)))]))\n  (define (is_decreasing A)\n    (cond\n      [(null? A) #t]\n      [(null? (cdr A)) #t]\n      [else (and (>= (car A) (cadr A)) (is_decreasing (cdr A)))]))\n  (or (is_increasing A) (is_decreasing A)))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(< (vector-ref A i) (vector-ref A j)) (loop j (+ j 1))]\n          [else #f])))\n",
    "  (let loop ([i 0] [j 1])\n    (if (&lt; i (length A))\n        (if (&lt; (vector-ref A i) (vector-ref A j))\n            (loop (+ i 1) (+ j 1))\n            #f)\n        #t)))\n",
    "  (let loop ([A A] [i 0])\n    (if (null? A)\n        #t\n        (if (and (not (null? (cdr A)))\n                 (or (< (car A) (cadr A))\n                     (> (car A) (cadr A))))\n            (loop (cdr A) (+ i 1))\n            #f))))\n",
    "  (let ([n (length A)])\n    (let loop ([i 0])\n      (cond [(= i (- n 1)) #t]\n            [(< (vector-ref A i) (vector-ref A (+ i 1))) (loop (+ i 1))]\n            [(> (vector-ref A i) (vector-ref A (+ i 1))) #f]\n            [else #f]))))\n",
    "  (let loop ((i 0) (j (add1 (length A))))\n    (cond ((= i j) #t)\n          ((< (list-ref A i) (list-ref A (add1 i))) (loop (add1 i) j))\n          ((> (list-ref A i) (list-ref A (add1 i))) (loop (add1 i) j))\n          (else #f))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (- (length A) 1)) #t]\n      [(> (list-ref A i) (list-ref A (+ i 1))) #f]\n      [else (is_Monotonic_Helper A (+ i 1))]))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([A A] [i 0] [j (length A)])\n    (cond [(empty? A) #t]\n          [(= i (sub1 j)) #t]\n          [(< (first A) (second A)) (loop (rest A) (add1 i) j)]\n          [(> (first A) (second A)) (loop (rest A) (add1 i) j)]\n          [else #f])))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (= i (length A))\n        #t\n        (if (and (<= (list-ref A i) (list-ref A (+ i 1)))\n                 (is_Monotonic_Helper A (+ i 1)))\n            #t\n            #f)))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([A A] [i 0] [j (length A)])\n    (cond [(= i j) #t]\n          [(= (vector-ref A i) (vector-ref A j)) (loop A (+ i 1) (- j 1))]\n          [else #f])))\n",
    "  (define (is_Monotonic_helper A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(< (vector-ref A i) (vector-ref A (add1 i))) (is_Monotonic_helper A (add1 i))]\n      [else #f]))\n  (is_Monotonic_helper A 0))\n",
    "  (define (is_Monotonic_Aux A i)\n    (cond\n      [(= i (- (length A) 1)) #t]\n      [(> (list-ref A i) (list-ref A (+ i 1))) #f]\n      [else (is_Monotonic_Aux A (+ i 1))]))\n  (is_Monotonic_Aux A 0))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (= i (length A))\n        #t\n        (if (and (<= (list-ref A i) (list-ref A (+ i 1)))\n                 (is_Monotonic_Helper A (+ i 1)))\n            #t\n            #f)))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([i 0] [prev (vector-ref A 0)])\n    (if (= i (vector-length A))\n        #t\n        (if (&lt; prev (vector-ref A i))\n            (loop (+ i 1) (vector-ref A i))\n            #f))))\n",
    "  (let loop ([A A] [prev (car A)])\n    (if (null? A)\n        #t\n        (if (&lt;= prev (car A))\n            (loop (cdr A) (car A))\n            #f))))\n",
    "  (let loop ([i 0])\n    (cond [(= i (sub1 (length A))) #t]\n          [(< (list-ref A i) (list-ref A (add1 i))) (loop (add1 i))]\n          [else #f])))\n",
    "  (define (is_Monotonic_helper A i)\n    (cond [(= i (- (length A) 1)) #t]\n          [(< (list-ref A i) (list-ref A (+ i 1))) (is_Monotonic_helper A (+ i 1))]\n          [else #f]))\n  (is_Monotonic_helper A 0))\n",
    "  (let loop ((i 0) (j 1) (increasing? #t) (decreasing? #t))\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(> (vector-ref A i) (vector-ref A j)) (loop (+ i 1) (+ j 1) #f #t)]\n      [(< (vector-ref A i) (vector-ref A j)) (loop (+ i 1) (+ j 1) #t #f)]\n      [else (loop (+ i 1) (+ j 1) #t #t)])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(> (vector-ref A i) (vector-ref A j)) #f]\n          [else (loop (add1 i) (add1 j))])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(< (vector-ref A i) (vector-ref A j)) (loop j (add1 j))]\n          [else #f])))\n",
    "  (let loop ((i 0) (j (sub1 (length A))))\n    (if (&lt; i j)\n        (if (&lt;= (list-ref A i) (list-ref A j))\n            (loop (add1 i) (sub1 j))\n            #f)\n        #t)))\n",
    "  (let loop ((i 0) (j 1) (inc #t) (dec #t))\n    (cond\n      [(= i (sub1 (vector-length A))) (and inc dec)]\n      [(> (vector-ref A i) (vector-ref A j)) (loop (+ i 1) (+ j 1) #f dec)]\n      [(< (vector-ref A i) (vector-ref A j)) (loop (+ i 1) (+ j 1) inc #f)]\n      [else (loop (+ i 1) (+ j 1) inc dec)])))\n",
    "  (let ([n (length A)])\n    (cond\n      [(= n 0) #t]\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [else\n       (let ([a (list-ref A 0)]\n             [b (list-ref A 1)]\n             [c (list-ref A 2)])\n         (cond\n           [(and (<= a b) (<= b c)) (is_Monotonic (rest A))]\n           [(and (>= a b) (>= b c)) (is_Monotonic (rest A))]\n           [else #f]))])))\n",
    "  (let loop ([i 0] [j 1] [monotonic #t])\n    (if (&lt; i (length A))\n        (if (&lt; j (length A))\n            (if (and monotonic (&lt; (vector-ref A i) (vector-ref A j)))\n                (loop (+ i 1) (+ j 1) monotonic)\n                (loop (+ i 1) (+ j 1) #f))\n            (loop (+ i 1) (+ j 1) monotonic))\n        monotonic)))\n",
    "  (let loop ([i 0])\n    (if (= i (sub1 (length A)))\n        #t\n        (and (or (and (<= (list-ref A i) (list-ref A (add1 i)))\n                     (loop (add1 i)))\n             (and (>= (list-ref A i) (list-ref A (add1 i)))\n                  (loop (add1 i))))))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (= i (length A))\n        #t\n        (if (or (and (< (list-ref A i) (list-ref A (+ i 1)))\n                     (is_Monotonic_Helper A (+ i 1)))\n                (and (> (list-ref A i) (list-ref A (+ i 1)))\n                     (is_Monotonic_Helper A (+ i 1))))\n            #t\n            #f)))\n  (is_Monotonic_Helper A 0))\n",
    "  (let ([n (length A)])\n    (define (increasing? i)\n      (if (= i (- n 1))\n          #t\n          (and (<= (list-ref A i) (list-ref A (+ i 1)))\n               (increasing? (+ i 1)))))\n    (define (decreasing? i)\n      (if (= i (- n 1))\n          #t\n          (and (>= (list-ref A i) (list-ref A (+ i 1)))\n               (decreasing? (+ i 1)))))\n    (or (increasing? 0) (decreasing? 0))))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (if (&lt; i j)\n        (if (&lt; (list-ref A i) (list-ref A (add1 i)))\n            (loop (add1 i) j)\n            #f)\n        #t)))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (cond [(= i j) #t]\n          [(< (vector-ref A i) (vector-ref A (add1 i))) (loop (add1 i) j)]\n          [else #f])))\n",
    "  (let ([n (length A)])\n    (cond\n      [(= n 1) #t]\n      [(< (vector-ref A 0) (vector-ref A 1))\n       (for/and ([i (in-range 1 (- n 1))])\n         (<= (vector-ref A i) (vector-ref A (+ i 1))))]\n      [(> (vector-ref A 0) (vector-ref A 1))\n       (for/and ([i (in-range 1 (- n 1))])\n         (>= (vector-ref A i) (vector-ref A (+ i 1))))]\n      [else #f])))\n",
    "  (let ([n (length A)])\n    (define (is_monotonic-helper A i)\n      (cond\n        [(= i n) #t]\n        [(< (vector-ref A i) (vector-ref A (+ i 1))) (is_monotonic-helper A (+ i 1))]\n        [(> (vector-ref A i) (vector-ref A (+ i 1))) #f]))\n    (is_monotonic-helper A 0)))\n",
    "  (let loop ([A A] [i 0])\n    (if (null? A)\n        #t\n        (if (and (null? (cdr A))\n                 (null? (cddr A)))\n            #t\n            (if (and (null? (cdr A))\n                     (null? (cddr A))\n                     (null? (cdddr A)))\n                #t\n                (if (and (null? (cdr A))\n                         (null? (cddr A))\n                         (null? (cdddr A))\n                         (null? (cddddr A)))\n                    #t\n                    (if (and (null? (cdr A))\n                             (null? (cddr A))\n                             (null? (cdddr A))\n                             (null? (cddddr A))\n                             (null? (cdddddr A)))\n                        #t\n                        (if (and (null? (cdr A))\n                                 (null? (cddr A))\n                                 (null? (cdddr A))\n                                 (null? (cddddr A))\n                                 (null? (cdddddr A))\n                                 (null? (cddddddr A)))\n                            #t\n                            (if (and (null? (cdr A))\n                                     (null? (cddr A))\n                                     (null? (cdddr A))\n                                     (null? (cddddr A))\n                                     (null? (cdddddr A))\n                                     (null? (cddddddr A))\n                                     (null? (cdddddddr A)))\n                                #t\n                                (if (and (null? (cdr A))\n                                         (null? (cddr A))\n                                         (null? (cdddr A))\n                                         (null? (cddddr A))\n                                         (null? (cdddddr A))\n                                         (null? (cddddddr A))\n                                         (null? (cdddddddr A))\n                                         (null? (cddddddddr A)))\n                                    #t\n                                   ",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(> (vector-ref A i) (vector-ref A j)) #f]\n          [else (loop (add1 i) (add1 j))])))\n",
    "  (let loop ([A A] [prev (car A)] [result #t])\n    (cond\n      [(empty? A) result]\n      [(> (car A) prev) (loop (cdr A) (car A) result)]\n      [(< (car A) prev) (loop (cdr A) (car A) #f)]\n      [else (loop (cdr A) (car A) result)])))\n",
    "  (let loop ([i 0] [j (add1 (length A))] [increasing? #t] [decreasing? #t])\n    (if (&lt; i j)\n        (let ([a (list-ref A i)]\n              [b (list-ref A (add1 i))])\n          (if (and increasing? decreasing?)\n              (loop (add1 i) j\n                    (and increasing? (&lt;= a b))\n                    (and decreasing? (&gt;= a b)))\n              #f))\n        (or increasing? decreasing?))))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (- (length A) 1)) #t]\n      [(= j (- (length A) 1)) (loop (+ i 1) (+ i 2))]\n      [(< (list-ref A i) (list-ref A j)) (loop (+ i 1) (+ i 2))]\n      [else #f])))\n",
    "  (let loop ([A A])\n    (if (null? A)\n        #t\n        (if (null? (cdr A))\n            #t\n            (if (<= (car A) (cadr A))\n                (loop (cdr A))\n                #f)))))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (if (&lt; i j)\n        (if (&gt; (vector-ref A i) (vector-ref A (add1 i)))\n            #f\n            (loop (add1 i) j))\n        #t)))\n",
    "  (let loop ([A A])\n    (if (null? A)\n        #t\n        (if (null? (cdr A))\n            #t\n            (if (<= (car A) (cadr A))\n                (loop (cdr A))\n                #f)))))\n",
    "  (let loop ([A A])\n    (cond [(null? A) #t]\n          [(null? (cdr A)) #t]\n          [(<= (car A) (cadr A)) (loop (cdr A))]\n          [else #f])))\n",
    "  (let loop ((A A) (prev (car A)))\n    (if (null? A)\n        #t\n        (if (&lt;= prev (car A))\n            (loop (cdr A) (car A))\n            #f))))\n",
    "  (let ([n (length A)])\n    (let loop ([i 0] [j 1])\n      (cond [(= i (- n 1)) #t]\n            [(< (vector-ref A i) (vector-ref A j)) (loop j (+ j 1))]\n            [else #f]))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (length A)) #t]\n      [(< (list-ref A i) (list-ref A (- i 1))) #f]\n      [else (is_Monotonic_Helper A (+ i 1))]))\n  (is_Monotonic_Helper A 1))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (sub1 (length A))) #t]\n          [(< (vector-ref A i) (vector-ref A j)) (loop j (+ j 1))]\n          [else #f])))\n",
    "  (let ([n (length A)])\n    (let loop ([i 0] [j n])\n      (cond [(= i j) #t]\n            [(< (vector-ref A i) (vector-ref A (- j 1))) #f]\n            [else (loop (+ i 1) (- j 1))]))))\n",
    "  (let loop ((A A) (prev (car A)))\n    (cond ((null? A) #t)\n          ((< prev (car A)) (loop (cdr A) (car A)))\n          ((> prev (car A)) (loop (cdr A) (car A)))\n          (else #f))))\n",
    "  (let ((n (length A)))\n    (define (is_Monotonic_helper A i)\n      (if (= i (- n 1))\n          #t\n          (if (and (<= (list-ref A i) (list-ref A (+ i 1)))\n                   (is_Monotonic_helper A (+ i 1)))\n              #t\n              #f)))\n    (is_Monotonic_helper A 0)))\n",
    "  (let loop ([i 0] [j (add1 (length A))] [increasing? #t] [decreasing? #t])\n    (cond [(= i (sub1 j)) #t]\n          [(> (list-ref A i) (list-ref A (add1 i))) (loop (add1 i) j #f #t)]\n          [(< (list-ref A i) (list-ref A (add1 i))) (loop (add1 i) j #t #f)]\n          [else #f])))\n",
    "  (let ([n (length A)])\n    (if (= n 1)\n        #t\n        (let ([inc? (for/and ([i (in-range 1 n)])\n                       (and (<= (list-ref A (- i 1)) (list-ref A i))\n                            #t))]\n              [dec? (for/and ([i (in-range 1 n)])\n                       (and (>= (list-ref A (- i 1)) (list-ref A i))\n                            #t))])\n          (or inc? dec?)))))\n",
    "  (if (or (is_Increasing A) (is_Decreasing A))\n      #t\n      #f))\n",
    "  (let loop ([i 0] [j (length A)])\n    (if (= i (- j 1))\n        #t\n        (if (&lt;= (list-ref A i) (list-ref A (+ i 1)))\n            (loop (+ i 1) j)\n            #f))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (= i (- (length A) 1))\n        #t\n        (if (and (<= (list-ref A i) (list-ref A (+ i 1)))\n                 (is_Monotonic_Helper A (+ i 1)))\n            #t\n            #f)))\n  (is_Monotonic_Helper A 0))\n",
    "  (let ([n (length A)])\n    (and\n     (for/and ([i (in-range (- n 1))])\n       (or (< (list-ref A i) (list-ref A (+ i 1)))\n           (= (list-ref A i) (list-ref A (+ i 1)))))\n     (for/and ([i (in-range (- n 1))])\n       (or (> (list-ref A i) (list-ref A (+ i 1)))\n           (= (list-ref A i) (list-ref A (+ i 1))))))))\n",
    "  (let loop ([A A] [prev (car A)])\n    (cond [(empty? A) #t]\n          [(<= (car A) prev) (loop (cdr A) (car A))]\n          [else #f])))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (cond [(= i j) #t]\n          [(< (list-ref A i) (list-ref A (add1 i))) (loop (add1 i) j)]\n          [(> (list-ref A i) (list-ref A (add1 i))) (loop (add1 i) j)]\n          [else #f])))\n",
    "  (let loop ([A A] [i 0] [j (length A)])\n    (cond [(= i j) #t]\n          [(< (list-ref A i) (list-ref A (+ i 1))) (loop A (+ i 1) j)]\n          [(> (list-ref A i) (list-ref A (+ i 1))) (loop A (+ i 1) j)]\n          [else #f])))\n",
    "  (define (is_Monotonic_helper A i)\n    (cond\n      [(= i (length A)) #t]\n      [(> (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_helper A (+ i 1))]\n      [(< (list-ref A i) (list-ref A (- i 1))) (is_Monotonic_helper A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_helper A 1))\n",
    "  (define (is_Monotonic_Aux A i)\n    (cond\n      [(= i (length A)) #t]\n      [(< (list-ref A i) (list-ref A (+ i 1))) (is_Monotonic_Aux A (+ i 1))]\n      [else #f]))\n  (is_Monotonic_Aux A 0))\n",
    "  (let loop ((A A) (prev (car A)) (result #t))\n    (if (null? A)\n        result\n        (if (or (< (car A) prev)\n                (> (car A) prev))\n            (loop (cdr A) (car A) #f)\n            (loop (cdr A) (car A) result)))))\n",
    "  (define (is_Monotonic_Aux A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(> (list-ref A i) (list-ref A (add1 i))) #f]\n      [else (is_Monotonic_Aux A (add1 i))]))\n  (is_Monotonic_Aux A 0))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(and (<= (first A) (first (rest A)))\n          (is_Monotonic (rest A))) #t]\n    [(and (>= (first A) (first (rest A)))\n          (is_Monotonic (rest A))) #t]\n    [else #f]))\n",
    "  (let loop ([A A] [i 0])\n    (cond [(empty? A) #t]\n          [(empty? (rest A)) #t]\n          [(< (first A) (first (rest A))) (loop (rest A) (+ i 1))]\n          [(> (first A) (first (rest A))) (loop (rest A) (+ i 1))]\n          [else #f])))\n",
    "  (let loop ((i 0) (j 1) (len (length A)))\n    (cond\n      [(= i (- len 1)) #t]\n      [(< (vector-ref A i) (vector-ref A j)) (loop j (+ j 1) len)]\n      [(> (vector-ref A i) (vector-ref A j)) (loop j (+ j 1) len)]\n      [else #f])))\n",
    "  (define (monotonic? A)\n    (cond\n      [(empty? A) #t]\n      [(empty? (rest A)) #t]\n      [else\n       (and\n        (if (positive? (sub1 (first A)))\n            (positive? (sub1 (first (rest A))))\n            (negative? (sub1 (first (rest A)))))\n        (monotonic? (rest A)))]))\n  (monotonic? A))\n",
    "  (let ([n (length A)])\n    (let loop ([i 0] [j 1] [k 2])\n      (cond\n        [(= i (- n 1)) #t]\n        [(= j (- n 1)) (loop (+ i 1) (+ j 1) (+ k 1))]\n        [(= k (- n 1)) (loop (+ i 1) (+ j 1) (+ k 1))]\n        [(and (<= (list-ref A i) (list-ref A j)) (<= (list-ref A j) (list-ref A k))) (loop (+ i 1) (+ j 1) (+ k 1))]\n        [(and (>= (list-ref A i) (list-ref A j)) (>= (list-ref A j) (list-ref A k))) (loop (+ i 1) (+ j 1) (+ k 1))]\n        [else #f]))))\n",
    "  (let ([n (length A)])\n    (and\n     (for/and ([i (in-range (add1 n))])\n       (let ([prev (vector-ref A (sub1 i))])\n         (for/and ([j (in-range i)])\n           (let ([curr (vector-ref A j)])\n             (if (and (not (eq? prev curr))\n                      (not (eq? prev (add1 curr)))\n                      (not (eq? prev (sub1 curr))))\n                 #f\n                 (and (not (eq? prev curr))\n                      (eq? prev (add1 curr))\n                      (eq? prev (sub1 curr)))))))\n     (for/and ([i (in-range (add1 n))])\n       (let ([prev (vector-ref A (sub1 i))])\n         (for/and ([j (in-range i)])\n           (let ([curr (vector-ref A j)])\n             (if (and (not (eq? prev curr))\n                      (not (eq? prev (add1 curr)))\n                      (not (eq? prev (sub1 curr))))\n                 #f\n                 (and (not (eq? prev curr))\n                      (eq? prev (add1 curr))\n                      (eq? prev (sub1 curr)))))))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(< (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [(> (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (define (is_Monotonic_helper A i)\n    (cond\n      [(= i (length A)) #t]\n      [(= (vector-ref A i) (vector-ref A (- i 1))) (is_Monotonic_helper A (+ i 1))]\n      [(< (vector-ref A i) (vector-ref A (- i 1))) #f]\n      [else (is_Monotonic_helper A (+ i 1))]))\n  (is_Monotonic_helper A 1))\n",
    "  (let ((n (length A)))\n    (cond\n      [(= n 1) #t]\n      [(= n 2) (if (<= (car A) (cadr A)) #t #f)]\n      [else\n       (let loop ((i 1) (j (+ i 1)) (k (+ j 1)))\n         (cond\n           [(= i (- n 2)) (if (<= (list-ref A i) (list-ref A j)) #t #f)]\n           [(= j (- n 1)) (if (<= (list-ref A i) (list-ref A j)) #t #f)]\n           [(= k n) (if (<= (list-ref A i) (list-ref A j)) #t #f)]\n           [else\n            (if (<= (list-ref A i) (list-ref A j))\n                (loop j k (+ k 1))\n                #f)]))])))\n",
    "  (let loop ((A A) (prev (car A)))\n    (if (null? A)\n        #t\n        (if (&gt;= (car A) prev)\n            (loop (cdr A) (car A))\n            #f))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(= (length A) 1) #t]\n    [(and (<= (first A) (second A)) (is_Monotonic (rest A))) #t]\n    [(and (>= (first A) (second A)) (is_Monotonic (rest A))) #t]\n    [else #f]))\n",
    "  (define (is_increasing A)\n    (if (null? (cdr A))\n        #t\n        (and (<= (car A) (cadr A))\n             (is_increasing (cdr A)))))\n  (define (is_decreasing A)\n    (if (null? (cdr A))\n        #t\n        (and (>= (car A) (cadr A))\n             (is_decreasing (cdr A)))))\n  (or (is_increasing A)\n      (is_decreasing A)))\n",
    "  (let loop ((i 0) (j 1) (monotonic #t))\n    (cond\n      [(= i (sub1 (length A))) monotonic]\n      [(> (vector-ref A i) (vector-ref A j)) (loop (+ i 1) (+ j 1) #f)]\n      [(< (vector-ref A i) (vector-ref A j)) (loop (+ i 1) (+ j 1) #f)]\n      [else (loop (+ i 1) (+ j 1) monotonic)])))\n",
    "  (let loop ((i 0) (j 1) (A A))\n    (cond ((null? A) #t)\n          ((< i (length A))\n           (if (and (<= (list-ref A i) (list-ref A j))\n                    (loop (+ i 1) (+ j 1) A))\n               #t\n               #f))\n          (else #f))))\n",
    "  (let loop ((i 0) (j (sub1 (length A))))\n    (cond ((&gt; i j) #t)\n          ((&lt; (list-ref A i) (list-ref A j)) #f)\n          (else (loop (add1 i) (sub1 j))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(< (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [(> (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (let ([n (length A)])\n    (cond [(= n 0) #t]\n          [(= n 1) #t]\n          [(= n 2) #t]\n          [else\n           (let ([inc #t]\n                 [dec #t])\n             (for ([i (in-range 1 (- n 1))])\n               (when (and inc (not (<= (list-ref A i) (list-ref A (- i 1)))))\n                 (set! inc #f))\n               (when (and dec (not (>= (list-ref A i) (list-ref A (- i 1)))))\n                 (set! dec #f)))\n             (or inc dec))])))\n",
    "  (define (monotonic? A)\n    (cond\n      [(empty? A) #t]\n      [(empty? (rest A)) #t]\n      [(> (first A) (first (rest A))) (monotonic? (rest A))]\n      [(< (first A) (first (rest A))) (monotonic? (rest A))]\n      [else #f]))\n  (monotonic? A))\n",
    "  (let loop ([A A] [prev (car A)])\n    (if (null? A)\n        #t\n        (if (&gt;= (car A) prev)\n            (loop (cdr A) (car A))\n            #f))))\n",
    "  (let ([n (length A)])\n    (define (is_Monotonic_Aux i)\n      (cond\n        [(= i n) #t]\n        [(> (vector-ref A i) (vector-ref A (+ i 1))) #f]\n        [else (is_Monotonic_Aux (+ i 1))]))\n    (is_Monotonic_Aux 0)))\n",
    "  (define (is_Monotonic_Helper A i)\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(< (list-ref A i) (list-ref A (add1 i))) (is_Monotonic_Helper A (add1 i))]\n      [else #f]))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([i 0] [j (add1 (length A))])\n    (cond [(= i j) #t]\n          [(< (vector-ref A i) (vector-ref A (add1 i))) (loop (add1 i) j)]\n          [(> (vector-ref A i) (vector-ref A (add1 i))) (loop (add1 i) j)]\n          [else #f])))\n",
    "  (let ([n (length A)])\n    (let loop ([i 0] [j 1])\n      (if (= i (- n 1))\n          #t\n          (if (and (<= (list-ref A i) (list-ref A j))\n                   (<= (list-ref A j) (list-ref A (+ j 1))))\n              (loop j (+ j 1))\n              #f)))))\n",
    "  (let ([n (length A)])\n    (cond [(= n 1) #t]\n          [(< (vector-ref A 0) (vector-ref A 1))\n           (for/and ([i (in-range 1 (- n 1))])\n             (<= (vector-ref A i) (vector-ref A (+ i 1))))]\n          [(> (vector-ref A 0) (vector-ref A 1))\n           (for/and ([i (in-range 1 (- n 1))])\n             (>= (vector-ref A i) (vector-ref A (+ i 1))))]\n          [else #f])))\n",
    "  (let loop ([A A] [i 0] [j (length A)])\n    (cond [(= i (- j 1)) #t]\n          [(< (list-ref A i) (list-ref A (+ i 1))) (loop A (+ i 1) j)]\n          [else #f])))\n",
    "  (define (is_Monotonic_helper A i)\n    (cond\n      [(= i (- (length A) 1)) #t]\n      [(> (list-ref A i) (list-ref A (+ i 1))) #f]\n      [else (is_Monotonic_helper A (+ i 1))]))\n  (is_Monotonic_helper A 0))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (or (= i (sub1 (length A)))\n            (= i 0))\n        #t\n        (if (and (<= (list-ref A i) (list-ref A (add1 i)))\n                 (>= (list-ref A i) (list-ref A (sub1 i))))\n            (is_Monotonic_Helper A (add1 i))\n            #f)))\n  (is_Monotonic_Helper A 0))\n",
    "  (let loop ([A A] [prev (car A)] [result #t])\n    (if (null? A)\n        result\n        (if (and (<= prev (car A)) result)\n            (loop (cdr A) (car A) #t)\n            (loop (cdr A) (car A) #f)))))\n",
    "  (let ([n (length A)])\n    (let loop ([i 0] [j 1] [k 2])\n      (cond\n        [(= i (- n 1)) #t]\n        [(= j (- n 1)) #t]\n        [(= k (- n 1)) #t]\n        [(< (list-ref A i) (list-ref A j))\n         (loop j k (+ k 1))]\n        [(> (list-ref A i) (list-ref A j))\n         (loop j k (+ k 1))]\n        [else #f]))))\n",
    "  (let loop ([A A] [prev (car A)])\n    (cond [(empty? A) #t]\n          [(<= (car A) prev) (loop (cdr A) (car A))]\n          [else #f])))\n",
    "  (if (equal? (length A) 1)\n      #t\n      (let ([first (first A)]\n            [last (last A)])\n        (if (and (<= first last)\n                 (is_Monotonic (rest A)))\n            #t\n            #f))))\n",
    "  (define (is_Monotonic_Helper A i)\n    (if (= i (length A))\n        #t\n        (if (or (< (list-ref A i) (list-ref A (- i 1)))\n                (> (list-ref A i) (list-ref A (- i 1))))\n            #f\n            (is_Monotonic_Helper A (+ i 1)))))\n  (is_Monotonic_Helper A 1))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (sub1 (length A))) #t]\n      [(< (list-ref A i) (list-ref A (add1 i))) #f]\n      [else (loop (add1 i))])))\n",
    "  (if (or (is_Increasing A) (is_Decreasing A))\n      #t\n      #f))\n",
    "  (let loop ([i 0] [j (add1 (length A))] [is_increasing? #t] [is_decreasing? #t])\n    (cond [(= i j) (and is_increasing? is_decreasing?)]\n          [(> (vector-ref A i) (vector-ref A (add1 i))) (loop (add1 i) j #f is_decreasing?)]\n          [(< (vector-ref A i) (vector-ref A (add1 i))) (loop (add1 i) j is_increasing? #f)]\n          [else (loop (add1 i) j is_increasing? is_decreasing?)])))\n"
  ]
}