{
  "name": "mbpp_97_frequency_lists",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n(define (frequency_lists list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate frequency_lists))\n    (check-equal? (candidate (list (list 1 2 3 2) (list 4 5 6 2) (list 7 8 9 5))) #hash((1 .  1) (2 .  3) (3 .  1) (4 .  1) (5 .  2) (6 .  1) (7 .  1) (8 .  1) (9 .  1)))\n    (check-equal? (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12))) #hash((1 .  1) (2 .  1) (3 .  1) (4 .  1) (5 .  1) (6 .  1) (7 .  1) (8 .  1) (9 .  1) (10 .  1) (11 .  1) (12 .  1)))\n    (check-equal? (candidate (list (list 20 30 40 17) (list 18 16 14 13) (list 10 20 30 40))) #hash((20 .  2) (30 .  2) (40 .  2) (17 .  1) (18 .  1) (16 .  1) (14 .  1) (13 .  1) (10 .  1)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (frequency_helper list1)\n    (cond\n      [(empty? list1) empty]\n      [else (cons (cons (first list1) (count (first list1) list1)) (frequency_helper (remove (first list1) list1)))]))\n  (frequency_helper (flatten list1)))\n",
    "  (define (frequency_lists_helper list1 dict)\n    (cond ((null? list1) dict)\n          ((assoc (car list1) dict)\n           (frequency_lists_helper (cdr list1)\n                                   (cons (list (car list1) (+ 1 (cadr (assoc (car list1) dict))))\n                                         (remove (assoc (car list1) dict) dict))))\n          (else\n           (frequency_lists_helper (cdr list1) (cons (list (car list1) 1) dict)))))\n  (frequency_lists_helper list1 '()))\n",
    "  (define (frequency_lists_helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else (frequency_lists_helper (rest list1) (add-to-dict (first list1) dict))]))\n  (frequency_lists_helper list1 (make-dict)))\n",
    "  (define (frequency_lists_iter list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else (frequency_lists_iter (rest list1) (add-to-dict (first list1) dict))]))\n  (frequency_lists_iter list1 (make-dict)))\n",
    "  (define (frequency_lists_helper list1 result)\n    (cond [(empty? list1) result]\n          [else (frequency_lists_helper (rest list1) (add-to-dict (first list1) result))]))\n  (frequency_lists_helper list1 (make-dict)))\n",
    "  (define (frequency_lists-helper list1 result)\n    (cond ((null? list1) result)\n          ((assoc (car list1) result)\n           (frequency_lists-helper (cdr list1) (cons (list (car list1) (+ 1 (cadr (assoc (car list1) result)))) (remove (assoc (car list1) result) result))))\n          (else (frequency_lists-helper (cdr list1) (cons (list (car list1) 1) result)))))\n  (frequency_lists-helper list1 '()))\n",
    "  (let ([freq (make-hash)])\n    (for ([elem list1])\n      (hash-update! freq elem add1 0))\n    freq))\n",
    "  (letrec ([freq (lambda (list1)\n                   (cond [(empty? list1) empty]\n                         [(member (first list1) (rest list1)) (cons (first list1) (freq (rest list1)))]\n                         [else (freq (rest list1))]))]\n           [freq_dict (lambda (list1)\n                        (cond [(empty? list1) empty]\n                              [else (cons (list (first list1) (count (first list1) list1)) (freq_dict (rest list1)))]))])\n    (freq_dict (freq list1))))\n",
    "  (define (frequency_helper list1)\n    (cond [(empty? list1) empty]\n          [else (cons (list (first list1) (length (filter (lambda (x) (equal? x (first list1))) list1)))\n                      (frequency_helper (filter (lambda (x) (not (equal? x (first list1)))) list1)))]))\n  (frequency_helper list1))\n",
    "  (define (frequency_lists_iter list1 result)\n    (cond ((null? list1) result)\n          ((assoc (car list1) result)\n           (frequency_lists_iter (cdr list1) (cons (cons (car list1) (+ 1 (cdr (assoc (car list1) result)))) (remove (assoc (car list1) result) result))))\n          (else (frequency_lists_iter (cdr list1) (cons (cons (car list1) 1) result)))))\n  (frequency_lists_iter list1 '()))\n",
    "  (define (frequency_lists-helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else\n       (define key (car list1))\n       (define value (dict-ref dict key 0))\n       (frequency_lists-helper (cdr list1) (dict-set dict key (+ 1 value)))]))\n  (frequency_lists-helper list1 (make-dict)))\n",
    "  (define (frequency_lists-helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else (frequency_lists-helper (rest list1) (add-to-dict (first list1) dict))]))\n  (frequency_lists-helper list1 (make-dict)))\n",
    "  (define (frequency_lists_helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else\n       (define key (car list1))\n       (define value (dict-ref dict key 0))\n       (frequency_lists_helper (cdr list1) (dict-set dict key (+ 1 value)))]))\n  (frequency_lists_helper list1 (make-dict)))\n",
    "  (define (frequency_lists_helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else (frequency_lists_helper (rest list1) (update-dict (first list1) dict))]))\n  (frequency_lists_helper list1 (make-dict)))\n",
    "  (define (frequency_lists_iter list1 dict)\n    (cond [(empty? list1) dict]\n          [else (frequency_lists_iter (rest list1) (increment_dict (first list1) dict))]))\n  (frequency_lists_iter list1 (make-hash)))\n",
    "  (define (frequency_lists_helper list1 result)\n    (cond\n      [(empty? list1) result]\n      [else (frequency_lists_helper (rest list1) (cons (cons (first list1) (add1 (or (assoc (first list1) result) 0))) result))]))\n  (frequency_lists_helper list1 '()))\n",
    "  (define (frequency_lists_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [else (frequency_lists_iter (rest list1) (cons (cons (first list1) (add1 (get (first list1) result 0))) result))]))\n  (frequency_lists_iter list1 '()))\n",
    "  (letrec ([freq (lambda (list1)\n                   (cond [(empty? list1) empty]\n                         [(member (first list1) (rest list1))\n                          (cons (list (first list1) (add1 (length (filter (lambda (x) (equal? x (first list1))) list1))))\n                                (freq (remove (first list1) (rest list1))))]\n                         [else (cons (list (first list1) 1) (freq (rest list1)))]))])\n    (freq list1)))\n",
    "  (define (helper list1)\n    (cond\n      [(empty? list1) empty]\n      [else (cons (cons (first list1) (length (filter (lambda (x) (equal? x (first list1))) list1))) (helper (filter (lambda (x) (not (equal? x (first list1)))) list1)))]))\n  (helper list1))\n",
    "  (letrec ([flatten (lambda (list1)\n                      (cond [(empty? list1) empty]\n                            [(list? (first list1)) (append (flatten (first list1)) (flatten (rest list1)))]\n                            [else (cons (first list1) (flatten (rest list1)))]))]\n           [count (lambda (list1)\n                    (cond [(empty? list1) empty]\n                          [(equal? (first list1) (first (rest list1))) (cons (first list1) (count (rest list1)))]\n                          [else (cons (first list1) (count (rest list1)))]))]\n           [frequency (lambda (list1)\n                        (cond [(empty? list1) empty]\n                              [else (cons (cons (first list1) (length (filter (lambda (x) (equal? x (first list1))) list1))) (frequency (filter (lambda (x) (not (equal? x (first list1)))) list1)))]))])\n    (frequency (count (flatten list1)))))\n"
  ]
}