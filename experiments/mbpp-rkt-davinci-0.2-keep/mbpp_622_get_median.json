{
  "name": "mbpp_622_get_median",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the median of two sorted lists of same size.\n(define (get_median arr1 arr2 n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_median))\n    (check-equal? (candidate (list 1 12 15 26 38) (list 2 13 17 30 45) 5) 16.0)\n    (check-equal? (candidate (list 2 4 8 9) (list 7 13 19 28) 4) 8.5)\n    (check-equal? (candidate (list 3 6 14 23 36 42) (list 2 18 27 39 49 55) 6) 25.0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_median_helper arr1 arr2 n)\n    (cond ((= n 1) (/ (+ (car arr1) (car arr2)) 2))\n          ((= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4))\n          (else\n           (let ([m (/ n 2)])\n             (if (&lt; (car (drop m arr1)) (car (drop m arr2)))\n                 (get_median_helper (drop m arr1) arr2 (- n m))\n                 (get_median_helper arr1 (drop m arr2) (- n m)))))))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else\n           (let ([m (/ n 2)])\n             (cond [(< (car (drop m arr1)) (car (drop m arr2)))\n                    (get_median_helper (drop m arr1) (take m arr2) m)]\n                   [else\n                    (get_median_helper (take m arr1) (drop m arr2) m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) (cons (car arr1) (car arr2))]\n          [(= n 1) (cons (car arr1) (car arr2))]\n          [(= n 2) (cons (car arr1) (car arr2))]\n          [else (get_median_helper (cdr arr1) (cdr arr2) (- n 2))]))\n  (define (get_median_helper_2 arr1 arr2 n)\n    (cond [(= n 0) (cons (car arr1) (car arr2))]\n          [(= n 1) (cons (car arr1) (car arr2))]\n          [(= n 2) (cons (car arr1) (car arr2))]\n          [else (get_median_helper_2 (cdr arr1) (cdr arr2) (- n 1))]))\n  (cond [(= (remainder n 2) 0) (get_median_helper arr1 arr2 n)]\n        [else (get_median_helper_2 arr1 arr2 n)]))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2)) 2)]\n      [else\n       (let ([m1 (quotient (sub1 n) 2)]\n             [m2 (quotient n 2)])\n         (cond\n           [(= (car arr1) (car arr2)) (car arr1)]\n           [(< (car arr1) (car arr2))\n            (get_median-helper (drop arr1 m1) (drop arr2 (- m2 m1)) (- n m1))]\n           [else\n            (get_median-helper (drop arr1 (- m2 m1)) (drop arr2 m1) (- n m1))]))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (if (= n 1)\n        (if (< (car arr1) (car arr2))\n            (car arr1)\n            (car arr2))\n        (if (< (car arr1) (car arr2))\n            (get_median_helper (cdr arr1) (cdr arr2) (- n 1))\n            (get_median_helper arr1 (cdr arr2) (- n 1)))))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 m) (list-ref arr2 m))\n          (get_median (sublist arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 m) (list-ref arr2 m))\n          (get_median arr1 (sublist arr2 m) (- n m))]\n         [else\n          (list-ref arr1 m)]))]))\n",
    "  (cond [(empty? arr1) (error \"empty array\")]\n        [(empty? arr2) (error \"empty array\")]\n        [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n        [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                      (min (second arr1) (second arr2))) 2)]\n        [else\n         (let ([m (/ n 2)])\n           (cond [(< (first arr1) (first arr2))\n                  (get_median (rest arr1) (drop arr2 m) (- n m))]\n                 [(> (first arr1) (first arr2))\n                  (get_median (drop arr1 m) (rest arr2) (- n m))]\n                 [else\n                  (first arr1)]))]))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (if (= n 0)\n        (list (car arr1) (car arr2))\n        (let* ([m (/ n 2)]\n               [a (get_median-helper (cdr arr1) (cdr arr2) (- n 1))])\n          (if (= (car a) (car arr1))\n              (get_median-helper (cdr arr1) arr2 (- n 1))\n              (get_median-helper arr1 (cdr arr2) (- n 1))))))\n  (let* ([a (get_median-helper arr1 arr2 n)]\n         [b (get_median-helper (cdr arr1) (cdr arr2) (- n 1))])\n    (/ (+ (car a) (car b)) 2)))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper (take arr1 m) (take arr2 m) m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             (get_median_helper (drop arr1 m) (take arr2 m) (- n m))\n             (get_median_helper (take arr1 m) (drop arr2 m) m)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             (get_median_helper arr1 arr2 m)\n             (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (get_median_helper arr1 arr2 m)]\n               [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n           (if (< m1 m2)\n               (get_median_helper arr1 arr2 m)\n               (get_median_helper (drop arr1 m) (drop arr2 m) (- n m)))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (if (= n 1)\n      (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)\n      (let ([m (/ n 2)])\n        (if (< (list-ref arr1 m) (list-ref arr2 m))\n            (get_median (sublist arr1 m) arr2 (- n m))\n            (get_median arr1 (sublist arr2 m) (- n m))))))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                    (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n      [else\n       (let ([m1 (quotient n 2)]\n             [m2 (- n m1)])\n         (cond\n           [(< (list-ref arr1 m1) (list-ref arr2 m2))\n            (get_median_helper (sublist arr1 m1) arr2 m2)]\n           [(> (list-ref arr1 m1) (list-ref arr2 m2))\n            (get_median_helper arr1 (sublist arr2 m2) m2)]\n           [else (list-ref arr1 m1)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (list-ref arr1 m) (list-ref arr2 m))\n             (get-median-helper (drop arr1 m) arr2 (- n m))\n             (get-median-helper arr1 (drop arr2 m) (- n m))))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (sublist arr1 m) (sublist arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (sublist arr1 (if (&lt; m1 m2) 0 m))\n                       (sublist arr2 (if (&lt; m1 m2) 0 m))\n                       m)))]))\n</code>\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) 0]\n          [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n          [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                        (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n          [else\n           (let ([m1 (/ n 2)]\n                 [m2 (- n (/ n 2))])\n             (cond [(< (list-ref arr1 m1) (list-ref arr2 m2))\n                    (get_median_helper (drop arr1 m1) (take arr2 m2) m2)]\n                   [(> (list-ref arr1 m1) (list-ref arr2 m2))\n                    (get_median_helper (take arr1 m1) (drop arr2 m2) m1)]\n                   [else (list-ref arr1 m1)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                  (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (vector-ref arr1 m)]\n            [m2 (vector-ref arr2 m)])\n       (cond\n         [(= m1 m2) m1]\n         [(< m1 m2) (get_median (subvector arr1 m) (subvector arr2 0 m) m)]\n         [else (get_median (subvector arr1 0 m) (subvector arr2 m) m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n           (if (&lt; (car arr1) (car arr2))\n               (get_median_helper (drop arr1 m) arr2 m)\n               (get_median_helper arr1 (drop arr2 m) m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n i)\n    (cond\n      [(= i n) (/ (+ (list-ref arr1 (- n 1)) (list-ref arr2 (- n 1))) 2)]\n      [(> (list-ref arr1 i) (list-ref arr2 i)) (get_median_helper arr1 arr2 n (+ i 1))]\n      [else (get_median_helper arr1 arr2 n (+ i 1))]))\n  (get_median_helper arr1 arr2 n 0))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) (cons (list-ref arr1 0) (list-ref arr2 0))]\n          [(= n 1) (cons (list-ref arr1 1) (list-ref arr2 1))]\n          [else (get_median_helper (cdr arr1) (cdr arr2) (- n 2))]))\n  (let ([(list a b) (get_median_helper arr1 arr2 (- n 2))])\n    (/ (+ a b) 2)))\n"
  ]
}