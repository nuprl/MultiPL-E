{
  "name": "mbpp_622_get_median",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the median of two sorted lists of same size.\n(define (get_median arr1 arr2 n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_median))\n    (check-equal? (candidate (list 1 12 15 26 38) (list 2 13 17 30 45) 5) 16.0)\n    (check-equal? (candidate (list 2 4 8 9) (list 7 13 19 28) 4) 8.5)\n    (check-equal? (candidate (list 3 6 14 23 36 42) (list 2 18 27 39 49 55) 6) 25.0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_median_helper arr1 arr2 n)\n    (cond ((= n 1) (/ (+ (car arr1) (car arr2)) 2))\n          ((= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4))\n          (else\n           (let ([m (/ n 2)])\n             (if (&lt; (car (drop m arr1)) (car (drop m arr2)))\n                 (get_median_helper (drop m arr1) arr2 (- n m))\n                 (get_median_helper arr1 (drop m arr2) (- n m)))))))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else\n           (let ([m (/ n 2)])\n             (cond [(< (car (drop m arr1)) (car (drop m arr2)))\n                    (get_median_helper (drop m arr1) (take m arr2) m)]\n                   [else\n                    (get_median_helper (take m arr1) (drop m arr2) m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) (cons (car arr1) (car arr2))]\n          [(= n 1) (cons (car arr1) (car arr2))]\n          [(= n 2) (cons (car arr1) (car arr2))]\n          [else (get_median_helper (cdr arr1) (cdr arr2) (- n 2))]))\n  (define (get_median_helper_2 arr1 arr2 n)\n    (cond [(= n 0) (cons (car arr1) (car arr2))]\n          [(= n 1) (cons (car arr1) (car arr2))]\n          [(= n 2) (cons (car arr1) (car arr2))]\n          [else (get_median_helper_2 (cdr arr1) (cdr arr2) (- n 1))]))\n  (cond [(= (remainder n 2) 0) (get_median_helper arr1 arr2 n)]\n        [else (get_median_helper_2 arr1 arr2 n)]))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2)) 2)]\n      [else\n       (let ([m1 (quotient (sub1 n) 2)]\n             [m2 (quotient n 2)])\n         (cond\n           [(= (car arr1) (car arr2)) (car arr1)]\n           [(< (car arr1) (car arr2))\n            (get_median-helper (drop arr1 m1) (drop arr2 (- m2 m1)) (- n m1))]\n           [else\n            (get_median-helper (drop arr1 (- m2 m1)) (drop arr2 m1) (- n m1))]))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (if (= n 1)\n        (if (< (car arr1) (car arr2))\n            (car arr1)\n            (car arr2))\n        (if (< (car arr1) (car arr2))\n            (get_median_helper (cdr arr1) (cdr arr2) (- n 1))\n            (get_median_helper arr1 (cdr arr2) (- n 1)))))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 m) (list-ref arr2 m))\n          (get_median (sublist arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 m) (list-ref arr2 m))\n          (get_median arr1 (sublist arr2 m) (- n m))]\n         [else\n          (list-ref arr1 m)]))]))\n",
    "  (cond [(empty? arr1) (error \"empty array\")]\n        [(empty? arr2) (error \"empty array\")]\n        [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n        [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                      (min (second arr1) (second arr2))) 2)]\n        [else\n         (let ([m (/ n 2)])\n           (cond [(< (first arr1) (first arr2))\n                  (get_median (rest arr1) (drop arr2 m) (- n m))]\n                 [(> (first arr1) (first arr2))\n                  (get_median (drop arr1 m) (rest arr2) (- n m))]\n                 [else\n                  (first arr1)]))]))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (if (= n 0)\n        (list (car arr1) (car arr2))\n        (let* ([m (/ n 2)]\n               [a (get_median-helper (cdr arr1) (cdr arr2) (- n 1))])\n          (if (= (car a) (car arr1))\n              (get_median-helper (cdr arr1) arr2 (- n 1))\n              (get_median-helper arr1 (cdr arr2) (- n 1))))))\n  (let* ([a (get_median-helper arr1 arr2 n)]\n         [b (get_median-helper (cdr arr1) (cdr arr2) (- n 1))])\n    (/ (+ (car a) (car b)) 2)))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper (take arr1 m) (take arr2 m) m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             (get_median_helper (drop arr1 m) (take arr2 m) (- n m))\n             (get_median_helper (take arr1 m) (drop arr2 m) m)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             (get_median_helper arr1 arr2 m)\n             (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (get_median_helper arr1 arr2 m)]\n               [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n           (if (< m1 m2)\n               (get_median_helper arr1 arr2 m)\n               (get_median_helper (drop arr1 m) (drop arr2 m) (- n m)))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (if (= n 1)\n      (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)\n      (let ([m (/ n 2)])\n        (if (< (list-ref arr1 m) (list-ref arr2 m))\n            (get_median (sublist arr1 m) arr2 (- n m))\n            (get_median arr1 (sublist arr2 m) (- n m))))))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                    (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n      [else\n       (let ([m1 (quotient n 2)]\n             [m2 (- n m1)])\n         (cond\n           [(< (list-ref arr1 m1) (list-ref arr2 m2))\n            (get_median_helper (sublist arr1 m1) arr2 m2)]\n           [(> (list-ref arr1 m1) (list-ref arr2 m2))\n            (get_median_helper arr1 (sublist arr2 m2) m2)]\n           [else (list-ref arr1 m1)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (list-ref arr1 m) (list-ref arr2 m))\n             (get-median-helper (drop arr1 m) arr2 (- n m))\n             (get-median-helper arr1 (drop arr2 m) (- n m))))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (sublist arr1 m) (sublist arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (sublist arr1 (if (&lt; m1 m2) 0 m))\n                       (sublist arr2 (if (&lt; m1 m2) 0 m))\n                       m)))]))\n</code>\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) 0]\n          [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n          [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                        (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n          [else\n           (let ([m1 (/ n 2)]\n                 [m2 (- n (/ n 2))])\n             (cond [(< (list-ref arr1 m1) (list-ref arr2 m2))\n                    (get_median_helper (drop arr1 m1) (take arr2 m2) m2)]\n                   [(> (list-ref arr1 m1) (list-ref arr2 m2))\n                    (get_median_helper (take arr1 m1) (drop arr2 m2) m1)]\n                   [else (list-ref arr1 m1)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                  (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (vector-ref arr1 m)]\n            [m2 (vector-ref arr2 m)])\n       (cond\n         [(= m1 m2) m1]\n         [(< m1 m2) (get_median (subvector arr1 m) (subvector arr2 0 m) m)]\n         [else (get_median (subvector arr1 0 m) (subvector arr2 m) m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n           (if (&lt; (car arr1) (car arr2))\n               (get_median_helper (drop arr1 m) arr2 m)\n               (get_median_helper arr1 (drop arr2 m) m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n i)\n    (cond\n      [(= i n) (/ (+ (list-ref arr1 (- n 1)) (list-ref arr2 (- n 1))) 2)]\n      [(> (list-ref arr1 i) (list-ref arr2 i)) (get_median_helper arr1 arr2 n (+ i 1))]\n      [else (get_median_helper arr1 arr2 n (+ i 1))]))\n  (get_median_helper arr1 arr2 n 0))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) (cons (list-ref arr1 0) (list-ref arr2 0))]\n          [(= n 1) (cons (list-ref arr1 1) (list-ref arr2 1))]\n          [else (get_median_helper (cdr arr1) (cdr arr2) (- n 2))]))\n  (let ([(list a b) (get_median_helper arr1 arr2 (- n 2))])\n    (/ (+ a b) 2)))\n",
    "  (cond\n    [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                  (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (vector-ref arr1 m)]\n            [m2 (vector-ref arr2 m)])\n       (cond\n         [(= m1 m2) m1]\n         [(> m1 m2) (get_median (subvector arr1 0 m) (subvector arr2 m) m)]\n         [else (get_median (subvector arr1 m) (subvector arr2 0 m) m)]))]))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median-helper arr1 arr2 m)]\n              [m2 (get_median-helper (drop arr1 m) (drop arr2 m) m)])\n         (if (< m1 m2)\n             (get_median-helper arr1 arr2 m)\n             (get_median-helper (drop arr1 m) (drop arr2 m) m)))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (car (drop m arr1)) (car (drop m arr2)))\n             (get_median_helper (drop m arr1) arr2 (- n m))\n             (get_median_helper arr1 (drop m arr2) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (cons (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (cons (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (cons (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let* ([mid1 (quotient n 2)]\n              [mid2 (quotient (+ n 1) 2)]\n              [median1 (list-ref arr1 mid1)]\n              [median2 (list-ref arr2 mid2)])\n         (cond\n           [(= median1 median2) median1]\n           [(< median1 median2) (get_median_helper (sublist arr1 0 mid1) (sublist arr2 mid2 n) mid1)]\n           [else (get_median_helper (sublist arr1 mid2 n) (sublist arr2 0 mid2) mid2)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (if (< (list-ref arr1 m) (list-ref arr2 m))\n           (get_median (drop arr1 m) arr2 (- n m))\n           (get-median arr1 (drop arr2 m) (- n m))))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 m) (list-ref arr2 m))\n          (get_median (sublist arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 m) (list-ref arr2 m))\n          (get_median arr1 (sublist arr2 m) (- n m))]\n         [else\n          (list-ref arr1 m)]))]))\n",
    "  (cond [(= n 0) 0]\n        [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n        [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                      (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n        [else\n         (let ([m (/ n 2)])\n           (cond [(< (list-ref arr1 m) (list-ref arr2 m))\n                  (get_median (sublist arr1 m) arr2 (- n m))]\n                 [(> (list-ref arr1 m) (list-ref arr2 m))\n                  (get_median arr1 (sublist arr2 m) (- n m))]\n                 [else (list-ref arr1 m)]))]))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 0)\n       (if (&gt; (car arr1) (car arr2))\n           (car arr2)\n           (car arr1))]\n      [(= n 1)\n       (/ (+ (car arr1) (car arr2)) 2)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median-helper arr1 arr2 m)]\n              [m2 (get_median-helper (cdr arr1) (cdr arr2) (- n m))])\n         (if (&gt; m1 m2)\n             (get_median-helper (cdr arr1) arr2 (- n 1))\n             (get_median-helper arr1 (cdr arr2) (- n 1))))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) (cons (car arr1) (car arr2))]\n          [(= n 1) (cons (car arr1) (car arr2))]\n          [(= n 2) (cons (car arr1) (car arr2))]\n          [else (get_median_helper (cdr arr1) (cdr arr2) (- n 2))]))\n  (define (get_median_helper2 arr1 arr2 n)\n    (cond [(= n 0) (car arr1)]\n          [(= n 1) (car arr1)]\n          [(= n 2) (car arr1)]\n          [else (get_median_helper2 (cdr arr1) (cdr arr2) (- n 2))]))\n  (define (get_median_helper3 arr1 arr2 n)\n    (cond [(= n 0) (car arr2)]\n          [(= n 1) (car arr2)]\n          [(= n 2) (car arr2)]\n          [else (get_median_helper3 (cdr arr1) (cdr arr2) (- n 2))]))\n  (define (get_median_helper4 arr1 arr2 n)\n    (cond [(= n 0) (cadr arr1)]\n          [(= n 1) (cadr arr1)]\n          [(= n 2) (cadr arr1)]\n          [else (get_median_helper4 (cdr arr1) (cdr arr2) (- n 2))]))\n  (define (get_median_helper5 arr1 arr2 n)\n    (cond [(= n 0) (cadr arr2)]\n          [(= n 1) (cadr arr2)]\n          [(= n 2) (cadr arr2)]\n          [else (get_median_helper5 (cdr arr1) (cdr arr2) (- n 2))]))\n  (define (get_median_helper6 arr1 arr2 n)\n    (cond [(= n 0) (caddr arr1)]\n          [(= n 1) (caddr",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m1 (quotient n 2)]\n             [m2 (quotient n 2)])\n         (cond\n           [(= (first arr1) (first arr2)) (first arr1)]\n           [(< (first arr1) (first arr2))\n            (get_median_helper (drop arr1 m1) (drop arr2 (- m2 1)) (- m2 1))]\n           [else\n            (get_median_helper (drop arr1 (- m2 1)) (drop arr2 m1) (- m2 1))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             (get_median_helper (take arr1 m) (drop arr2 m) m)\n             (get_median_helper (drop arr1 m) (take arr2 m) m)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n        [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                     (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n        [else\n         (let ([m (/ n 2)])\n           (cond [(< (list-ref arr1 m) (list-ref arr2 m))\n                  (get_median (sublist arr1 m) (sublist arr2 0 m) m)]\n                 [(> (list-ref arr1 m) (list-ref arr2 m))\n                  (get_median (sublist arr1 0 m) (sublist arr2 m) m)]\n                 [else (list-ref arr1 m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (second arr1) (first arr2) (second arr2)) 4)]\n      [else\n       (let ([m1 (get_median_helper (rest arr1) (rest arr2) (/ n 2))]\n             [m2 (get_median_helper (take arr1 (/ n 2)) (take arr2 (/ n 2)) (/ n 2))])\n         (if (< m1 m2)\n             (get_median_helper (rest arr1) (take arr2 (/ n 2)) (/ n 2))\n             (get_median_helper (take arr1 (/ n 2)) (rest arr2) (/ n 2))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [else (let ([m (/ n 2)])\n              (cond\n                [(< (car (drop m arr1)) (car (drop m arr2))) (get_median_helper (drop m arr1) arr2 (- n m))]\n                [else (get_median_helper arr1 (drop m arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                    (min (second arr1) (second arr2))) 2)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (first (drop m arr1)) (first (drop m arr2)))\n            (get_median_helper (drop m arr1) (take m arr2) m)]\n           [(> (first (drop m arr1)) (first (drop m arr2)))\n            (get_median_helper (take m arr1) (drop m arr2) m)]\n           [else\n            (first (drop m arr1))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n        [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                      (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n        [else\n         (let* ([m (/ n 2)]\n                [m1 (vector-ref arr1 m)]\n                [m2 (vector-ref arr2 m)])\n           (cond [(= m1 m2) m1]\n                 [(< m1 m2) (get_median (subvector arr1 m) arr2 (- n m))]\n                 [else (get_median arr1 (subvector arr2 m) (- n m))]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (&lt; m1 m2)\n             m1\n             m2))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2)) 2)]\n      [else\n       (cond\n         [(> (first arr1) (first arr2)) (get_median_helper (rest arr1) (rest arr2) (- n 2))]\n         [else (get_median_helper (rest arr1) (rest arr2) (- n 2))])]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [else\n            (get_median_helper arr1 (drop m arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))]\n              [m2 (get_median_helper (take arr1 m) (take arr2 m) m)])\n         (if (> m1 m2)\n             (get_median_helper (drop arr1 m) (take arr2 m) m)\n             (get_median_helper (take arr1 m) (drop arr2 m) m)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond [(empty? arr1) (error \"Empty array\")]\n        [(empty? arr2) (error \"Empty array\")]\n        [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n        [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                      (min (second arr1) (second arr2))) 2)]\n        [else\n         (let* ([m (/ n 2)]\n                [m1 (get_median (rest arr1) (rest arr2) (- n 2))]\n                [m2 (get_median arr1 arr2 m)])\n           (if (&lt; m1 m2)\n               (get_median (rest arr1) arr2 (- n 1))\n               (get_median arr1 (rest arr2) (- n 1))))]))\n",
    "  (cond [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n        [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                      (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n        [else\n         (let* ([m (/ n 2)]\n                [m1 (get_median arr1 arr2 m)]\n                [m2 (get_median (sublist arr1 m) (sublist arr2 m) (- n m))])\n           (if (&lt; m1 m2) m1 m2))]))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 0) (error \"Empty array\")]\n      [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                     (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median-helper arr1 arr2 m)]\n              [m2 (get_median-helper (vector-slice arr1 m) (vector-slice arr2 m) (- n m))])\n         (if (<= m1 m2) m1 m2))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (list-ref arr1 m) (list-ref arr2 m))\n             (get-median-helper (drop arr1 m) arr2 (- n m))\n             (get-median-helper arr1 (drop arr2 m) (- n m))))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [else\n            (get_median_helper arr1 (drop m arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get-median-helper arr1 arr2 n)\n    (cond [(= n 0) (get-median-helper arr1 arr2 n)]\n          [(= n 1) (get-median-helper arr1 arr2 n)]\n          [(= n 2) (get-median-helper arr1 arr2 n)]\n          [else (get-median-helper arr1 arr2 n)]))\n  (get-median-helper arr1 arr2 n))\n</code>\nI am not sure how to proceed with the helper function. I am trying to use recursion to find the median. I am not sure how to do that.\n\n\nA:\n\nHere's a solution that uses <code>map</code> to combine the two lists and then <code>sort</code> to sort them. Then it uses <code>quotient</code> to find the middle index and <code>list-ref</code> to get the median.\n<code>(define (get-median lst1 lst2)\n  (define combined (sort &lt; (map + lst1 lst2)))\n  (list-ref combined (quotient (length combined) 2)))\n</code>\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (cons (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (cons (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (cons (list-ref arr1 2) (list-ref arr2 2))]\n      [else (let ([m1 (quotient n 2)]\n                  [m2 (quotient (+ n 1) 2)])\n              (cond\n                [(= (list-ref arr1 m1) (list-ref arr2 m1))\n                 (list (list-ref arr1 m1) (list-ref arr2 m1))]\n                [(> (list-ref arr1 m1) (list-ref arr2 m1))\n                 (get_median_helper (sublist arr1 0 m1) (sublist arr2 m2 n) (- m1 1))]\n                [else (get_median_helper (sublist arr1 m2 n) (sublist arr2 0 m1) (- m1 1))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 m) (list-ref arr2 m))\n          (get_median (drop arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 m) (list-ref arr2 m))\n          (get_median arr1 (drop arr2 m) (- n m))]\n         [else\n          (list-ref arr1 m)]))]))\n",
    "  (cond [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n        [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                      (min (second arr1) (second arr2))) 2)]\n        [else\n         (let* ([m1 (/ n 2)]\n                [m2 (- n m1 1)]\n                [med1 (list-ref arr1 m1)]\n                [med2 (list-ref arr2 m2)])\n           (cond [(= med1 med2) med1]\n                 [(< med1 med2) (get_median (drop arr1 m1) (take arr2 m1) m1)]\n                 [else (get_median (take arr1 m1) (drop arr2 m1) m1)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [else\n            (get_median_helper arr1 (drop m arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [else\n            (get_median_helper arr1 (drop m arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_rec arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_rec arr1 arr2 m)]\n              [m2 (get_median_rec (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (<= m1 m2)\n             m1\n             m2))]))\n  (get_median_rec arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) 0]\n          [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else (let ([m (/ n 2)])\n                  (+ (/ (get_median_helper (drop arr1 m) (drop arr2 m) (- n m)) 2)\n                     (/ (get_median_helper (take arr1 m) (take arr2 m) m) 2)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (first (drop m arr1)) (first (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [(> (first (drop m arr1)) (first (drop m arr2)))\n            (get_median_helper arr1 (drop m arr2) (- n m))]\n           [else\n            (first (drop m arr1))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [else\n            (get_median_helper arr1 (drop m arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0)) (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m1 (/ (length arr1) 2)]\n           [m2 (/ (length arr2) 2)])\n       (if (< (list-ref arr1 m1) (list-ref arr2 m2))\n           (get_median (drop arr1 m1) arr2 (- n m1))\n           (get_median arr1 (drop arr2 m2) (- n m2))))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n      [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0) (list-ref arr1 1) (list-ref arr2 1)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (list-ref arr1 m) (list-ref arr2 m))\n             (get_median_helper (sublist arr1 m) arr2 (- n m))\n             (get_median_helper arr1 (sublist arr2 m) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty arr1\")]\n      [(empty? arr2) (error \"empty arr2\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let* ([m1 (/ (length arr1) 2)]\n              [m2 (/ (length arr2) 2)]\n              [m (/ (+ m1 m2) 2)])\n         (cond\n           [(= (first arr1) (first arr2)) (first arr1)]\n           [(< (first arr1) (first arr2))\n            (get_median-helper (drop arr1 m) (take arr2 m) (- n m))]\n           [else\n            (get_median-helper (take arr1 m) (drop arr2 m) (- n m))]))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else\n           (let ([m (/ n 2)])\n             (cond [(< (car (drop arr1 m)) (car (drop arr2 m)))\n                    (get_median_helper (drop arr1 m) (take arr2 m) m)]\n                   [else\n                    (get_median_helper (take arr1 m) (drop arr2 m) m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (max (car arr1) (car arr2)) (min (cadr arr1) (cadr arr2))) 2)]\n      [else\n       (let ([m (/ n 2)]\n             [m1 (get_median_helper (take arr1 m) (take arr2 m) m)]\n             [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             (get_median_helper (drop arr1 m) (take arr2 m) (- n m))\n             (get_median_helper (take arr1 m) (drop arr2 m) m)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                  (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (vector-ref arr1 (- m 1)) (vector-ref arr2 (- m 1)))\n          (get_median (subvector arr1 m) arr2 (- n m))]\n         [(> (vector-ref arr1 (- m 1)) (vector-ref arr2 (- m 1)))\n          (get-median arr1 (subvector arr2 m) (- n m))]\n         [else\n          (vector-ref arr1 (- m 1))]))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 m) (list-ref arr2 m))\n          (get_median (drop arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 m) (list-ref arr2 m))\n          (get_median arr1 (drop arr2 m) (- n m))]\n         [else\n          (list-ref arr1 m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (list (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (list (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (list (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let*\n           ([m1 (quotient n 2)]\n            [m2 (- n 1 m1)]\n            [a1 (list-ref arr1 m1)]\n            [a2 (list-ref arr2 m1)]\n            [b1 (list-ref arr1 m2)]\n            [b2 (list-ref arr2 m2)])\n         (cond\n           [(= a1 a2) (list a1 a2)]\n           [(> a1 a2) (get_median_helper (sublist arr1 m1) (sublist arr2 0 m2) m2)]\n           [else (get_median_helper (sublist arr1 0 m2) (sublist arr2 m1) m2)]))]))\n  (let*\n      ([m1 (quotient n 2)]\n       [m2 (- n 1 m1)]\n       [a1 (list-ref arr1 m1)]\n       [a2 (list-ref arr2 m1)]\n       [b1 (list-ref arr1 m2)]\n       [b2 (list-ref arr2 m2)])\n    (cond\n      [(= a1 a2) (list a1 a2)]\n      [(> a1 a2) (get_median_helper (sublist arr1 m1) (sublist arr2 0 m2) m2)]\n      [else (get_median_helper (sublist arr1 0 m2) (sublist arr2 m1) m2)])))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                    (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n      [else\n       (let ([m1 (/ n 2)]\n             [m2 (- n 1 m1)])\n         (cond\n           [(< (vector-ref arr1 m1) (vector-ref arr2 m2))\n            (get_median-helper (vector-copy arr1 m1) (vector-copy arr2 0 m2) m2)]\n           [(> (vector-ref arr1 m1) (vector-ref arr2 m2))\n            (get_median-helper (vector-copy arr1 0 m1) (vector-copy arr2 m2) m1)]\n           [else\n            (vector-ref arr1 m1)]))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else\n           (let ([m (/ n 2)])\n             (if (> (car arr1) (car arr2))\n                 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))\n                 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n i)\n    (cond\n      [(= i n) (/ (+ (list-ref arr1 (- n 1)) (list-ref arr2 (- n 1))) 2)]\n      [(> (list-ref arr1 i) (list-ref arr2 i)) (get_median_helper arr1 arr2 n (+ i 1))]\n      [(< (list-ref arr1 i) (list-ref arr2 i)) (get_median_helper arr1 arr2 n (+ i 1))]\n      [else (list-ref arr1 i)]))\n  (get_median_helper arr1 arr2 n 0))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [else\n            (get_median_helper arr1 (drop m arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(empty? arr1) (error \"empty array\")]\n    [(empty? arr2) (error \"empty array\")]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (max (first arr1) (first arr2)) (min (second arr1) (second arr2))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (first arr1) (first arr2))\n          (get_median (drop arr1 m) (drop arr2 (- m)) m)]\n         [else\n          (get_median (drop arr1 (- m)) (drop arr2 m) m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop arr1 m)) (car (drop arr2 m)))\n            (get_median_helper (drop arr1 m) (take arr2 m) m)]\n           [(> (car (drop arr1 m)) (car (drop arr2 m)))\n            (get_median_helper (take arr1 m) (drop arr2 m) m)]\n           [else\n            (car (drop arr1 m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             (get_median_helper arr1 arr2 m)\n             (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(> (first arr1) (first arr2)) (get_median_helper (rest arr1) (rest arr2) (- n 1))]\n           [(< (first arr1) (first arr2)) (get_median_helper (rest arr1) (rest arr2) (- n 1))]\n           [else (get_median_helper (rest arr1) (rest arr2) (- n 2))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (if (= n 1)\n      (/ (+ (car arr1) (car arr2)) 2)\n      (let ([m (/ n 2)])\n        (if (< (car (drop arr1 m)) (car (drop arr2 m)))\n            (get_median (drop arr1 m) arr2 (- n m))\n            (get_median arr1 (drop arr2 m) (- n m))))))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond ((= n 1) (/ (+ (car arr1) (car arr2)) 2))\n          ((= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4))\n          (else\n           (let ([m1 (/ (car arr1) 2)])\n             (let ([m2 (/ (car arr2) 2)])\n               (if (&lt; m1 m2)\n                   (get_median_helper (cdr arr1) (cdr arr2) (/ n 2))\n                   (get_median_helper (cdr arr1) (cdr arr2) (/ n 2))))))))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (&lt; (car (drop m arr1)) (car (drop m arr2)))\n             (get_median_helper (drop m arr1) arr2 (- n m))\n             (get_median_helper arr1 (drop m arr2) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                  (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (vector-ref arr1 m) (vector-ref arr2 m))\n          (get_median (vector-slice arr1 m) arr2 (- n m))]\n         [(> (vector-ref arr1 m) (vector-ref arr2 m))\n          (get_median arr1 (vector-slice arr2 m) (- n m))]\n         [else\n          (vector-ref arr1 m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (first (drop arr1 m)) (first (drop arr2 m)))\n            (get_median_helper (drop arr1 m) (take arr2 m) m)]\n           [(> (first (drop arr1 m)) (first (drop arr2 m)))\n            (get_median_helper (take arr1 m) (drop arr2 m) m)]\n           [else\n            (first (drop arr1 m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty list\")]\n      [(empty? arr2) (error \"empty list\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (get_median-helper (rest arr1) (rest arr2) m)])\n           (let ([m2 (get-median-helper (drop arr1 m) (drop arr2 m) m)])\n             (if (&lt; m1 m2)\n                 m2\n                 m1))))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n    [(= n 2) (/ (+ (max (car arr1) (car arr2)) (min (car (cdr arr1)) (car (cdr arr2)))) 2)]\n    [else\n     (let ([m1 (/ (car (cdr arr1)) 2)]\n           [m2 (/ (car (cdr arr2)) 2)])\n       (cond\n         [(= m1 m2) m1]\n         [(> m1 m2) (get_median (cdr arr1) (take arr2 (/ n 2)) (/ n 2))]\n         [else (get_median (take arr1 (/ n 2)) (cdr arr2) (/ n 2))]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) 0]\n          [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else\n           (let* ([m (/ n 2)]\n                  [m1 (get_median_helper arr1 arr2 m)]\n                  [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n             (/ (+ m1 m2) 2))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (/ (+ m1 m2) 2))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 0) 0]\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (&lt; m1 m2) m1 m2))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) 0]\n          [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n          [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                        (min (second arr1) (second arr2))) 2)]\n          [else (let ([m (/ n 2)])\n                  (cond [(< (first (drop m arr1)) (first (drop m arr2)))\n                         (get_median_helper (drop m arr1) (take m arr2) m)]\n                        [else (get_median_helper (take m arr1) (drop m arr2) m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get-median-helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (car (get-median-helper arr1 arr2 m))]\n              [m2 (car (get-median-helper (drop arr1 m) (drop arr2 m) m))])\n         (if (< m1 m2)\n             (get-median-helper arr1 (drop arr2 m) m)\n             (get-median-helper (drop arr1 m) arr2 m)))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (if (< (list-ref arr1 m) (list-ref arr2 m))\n           (get_median (sublist arr1 m) arr2 (- n m))\n           (get_median arr1 (sublist arr2 m) (- n m))))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (cons (car arr1) (car arr2))]\n      [(= n 1) (cons (car arr1) (car arr2))]\n      [(= n 2) (cons (car arr1) (car arr2))]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n           (if (and (even? n) (= (car m1) (cadr m1)))\n               m1\n               (get_median_helper (take arr1 m) (take arr2 m) m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else\n           (let ([m (/ n 2)])\n             (if (< (car (drop m arr1)) (car (drop m arr2)))\n                 (get_median-helper (drop m arr1) arr2 (- n m))\n                 (get_median-helper arr1 (drop m arr2) (- n m))))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [else\n            (get_median_helper arr1 (drop m arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n i)\n    (cond\n      [(= i n) (/ (+ (list-ref arr1 (- n 1)) (list-ref arr2 (- n 1))) 2)]\n      [(< (list-ref arr1 i) (list-ref arr2 i)) (get_median-helper arr1 arr2 n (+ i 1))]\n      [else (get_median-helper arr1 arr2 n (+ i 1))]))\n  (get_median-helper arr1 arr2 n 0))\n",
    "  (cond\n    [(empty? arr1) (error \"empty array\")]\n    [(empty? arr2) (error \"empty array\")]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                  (min (second arr1) (second arr2))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median (rest arr1) (rest arr2) (- m 2))]\n            [m2 (get_median (rest arr1) (rest arr2) (- m 1))])\n       (if (&gt; (first arr1) (first arr2))\n           (get_median (rest arr1) arr2 n)\n           (get_median arr1 (rest arr2) n)))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                    (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n      [else\n       (let* ([m1 (/ n 2)]\n              [m2 (- n m1 1)]\n              [med1 (list-ref arr1 m1)]\n              [med2 (list-ref arr2 m2)])\n         (cond\n           [(= med1 med2) med1]\n           [(< med1 med2) (get_median_helper (sublist arr1 m1) (sublist arr2 0 m2) m1)]\n           [else (get_median_helper (sublist arr1 0 m1) (sublist arr2 m2) m1)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (cond\n    [(= n 1)\n     (/ (+ (car arr1) (car arr2)) 2)]\n    [(= n 2)\n     (/ (+ (max (car arr1) (car arr2)) (min (car (cdr arr1)) (car (cdr arr2)))) 2)]\n    [else\n     (let ([m1 (/ n 2)]\n           [m2 (- n m1)])\n       (cond\n         [(< (car (cdr (reverse arr1))) (car arr2))\n          (get_median (drop-right arr1 m2) (drop arr2 m2) m1)]\n         [(> (car (reverse arr1)) (car (cdr arr2)))\n          (get_median (drop arr1 m1) (drop-right arr2 m2) m1)]\n         [else\n          (if (= (car (reverse arr1)) (car (cdr arr2)))\n              (car (reverse arr1))\n              (get_median (drop arr1 m1) (drop arr2 m1) m1))]))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 m) (list-ref arr2 m))\n          (get_median (sublist arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 m) (list-ref arr2 m))\n          (get_median arr1 (sublist arr2 m) (- n m))]\n         [else\n          (list-ref arr1 m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else\n           (let ([m (/ n 2)])\n             (cond [(< (car (drop m arr1)) (car (drop m arr2)))\n                    (get_median_helper (drop m arr1) arr2 m)]\n                   [(> (car (drop m arr1)) (car (drop m arr2)))\n                    (get_median_helper arr1 (drop m arr2) m)]\n                   [else\n                    (car (drop m arr1))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (values (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (values (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (values (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let ([m (/ n 2)])\n         (let-values ([(m1 m2) (get_median_helper arr1 arr2 m)])\n           (if (&lt; m1 m2)\n               (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))\n               (get_median_helper (take arr1 m) (take arr2 m) m))))]))\n  (let-values ([(m1 m2) (get_median_helper arr1 arr2 n)])\n    (if (= m1 m2) m1\n        (if (&lt; m1 m2) (list m1 m2) (list m2 m1)))))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (second arr1) (first arr2) (second arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (&lt; m1 m2) m1 m2))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (cons (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (cons (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (cons (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (list-ref arr1 m) (list-ref arr2 m))\n             (get_median_helper (sublist arr1 m) arr2 (- n m))\n             (get_median_helper arr1 (sublist arr2 m) (- n m))))]))\n  (let ([medians (get_median_helper arr1 arr2 n)])\n    (if (= (length medians) 1)\n        (car medians)\n        (/ (+ (car medians) (cadr medians)) 2))))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2)) 2)]\n      [else\n       (cond\n         [(< (car arr1) (car arr2))\n          (get_median_helper (cdr arr1) (cdr arr2) (- n 2))]\n         [else\n          (get_median_helper (cdr arr1) (cdr arr2) (- n 2))])]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else\n           (let ([m (/ n 2)])\n             (if (< (car (drop m arr1)) (car (drop m arr2)))\n                 (get_median_helper (drop m arr1) arr2 (- n m))\n                 (get_median_helper arr1 (drop m arr2) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 (- m 1)) (list-ref arr2 (- m 1)))\n          (get_median (sublist arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 (- m 1)) (list-ref arr2 (- m 1)))\n          (get_median arr1 (sublist arr2 m) (- n m))]\n         [else\n          (list-ref arr1 (- m 1))]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n          [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n          [else\n           (let ([m (/ n 2)])\n             (cond [(< (first (drop (sub1 m) arr1)) (first (drop (sub1 m) arr2)))\n                    (get_median_helper (drop m arr1) arr2 (sub1 m))]\n                   [(> (first (drop (sub1 m) arr1)) (first (drop (sub1 m) arr2)))\n                    (get_median_helper arr1 (drop m arr2) (sub1 m))]\n                   [else (first (drop (sub1 m) arr1))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (if (empty? arr1) (first arr2) (first arr1))]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper (rest arr1) (rest arr2) m)])\n         (if (empty? (rest arr1))\n             (if (empty? (rest arr2))\n                 m1\n                 (get_median_helper arr1 (rest arr2) m))\n             (if (empty? (rest arr2))\n                 (get_median_helper (rest arr1) arr2 m)\n                 (if (<= (first (rest arr1)) (first (rest arr2)))\n                     (get_median_helper (rest arr1) (rest arr2) m)\n                     (get_median_helper arr1 (rest arr2) m))))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get-median-helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n          [else (let ([m (/ n 2)])\n                  (cond [(< (car (drop arr1 m)) (car (drop arr2 m)))\n                         (get-median-helper (drop arr1 m) (take arr2 m) m)]\n                        [else (get-median-helper (take arr1 m) (drop arr2 m) m)]))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 (- m 1)) (list-ref arr2 (- m 1)))\n          (get_median (sublist arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 (- m 1)) (list-ref arr2 (- m 1)))\n          (get_median arr1 (sublist arr2 m) (- n m))]\n         [else\n          (list-ref arr1 (- m 1))]))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty array\")]\n      [(empty? arr2) (error \"empty array\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper (rest arr1) (rest arr2) m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) m)])\n         (if (&lt; m1 m2) m2 m1))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (cadr arr1) (car arr2) (cadr arr2)) 4)]\n      [else\n       (let ([m1 (/ (car arr1) 2)]\n             [m2 (/ (car arr2) 2)])\n         (if (< m1 m2)\n             (get_median_helper (cdr arr1) (cdr arr2) (- n 2))\n             (get_median_helper (cdr arr1) (cdr arr2) (- n 2))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (list (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (list (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (list (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (get_median_helper (sublist arr1 0 m) (sublist arr2 0 m) m)])\n           (let ([m2 (get-median-helper (sublist arr1 m) (sublist arr2 m) (- n m))])\n             (if (< (car m1) (car m2))\n                 (if (< (car m2) (cadr m1))\n                     m2\n                     (if (< (car m1) (cadr m2))\n                         m1\n                         (list (car m1) (car m2))))\n                 (if (< (car m1) (cadr m2))\n                     m1\n                     (if (< (car m2) (cadr m1))\n                         m2\n                         (list (car m2) (car m1)))))))))]))\n  (let ([m (get_median_helper arr1 arr2 n)])\n    (/ (+ (car m) (cadr m)) 2)))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n    [(= n 2) (/ (+ (max (car arr1) (car arr2)) (min (cadr arr1) (cadr arr2))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2)\n           m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (define (get_median_helper arr1 arr2 n m1 m2)\n    (cond\n      [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                    (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n      [else\n       (cond\n         [(= m1 m2) m1]\n         [(> m1 m2) (get_median_helper (list-take arr1 (/ n 2))\n                                       (list-drop arr2 (/ n 2))\n                                       (/ n 2)\n                                       (list-ref arr1 (/ n 2))\n                                       (list-ref arr2 (/ n 2)))]\n         [else (get_median_helper (list-drop arr1 (/ n 2))\n                                  (list-take arr2 (/ n 2))\n                                  (/ n 2)\n                                  (list-ref arr1 (/ n 2))\n                                  (list-ref arr2 (/ n 2)))])])\n    )\n  (get_median_helper arr1 arr2 n (list-ref arr1 (/ n 2)) (list-ref arr2 (/ n 2))))\n",
    "  (define (get-median-helper arr1 arr2 n)\n    (if (= n 1)\n        (if (&lt; (car arr1) (car arr2))\n            (car arr1)\n            (car arr2))\n        (let ((m (/ n 2)))\n          (if (&lt; (car (drop arr1 m)) (car (drop arr2 m)))\n              (get-median-helper (drop arr1 m) arr2 (- n m))\n              (get-median-helper arr1 (drop arr2 m) (- n m))))))\n  (get-median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty list\")]\n      [(empty? arr2) (error \"empty list\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (get_median_helper (rest arr1) (rest arr2) (- m 1))])\n           (let ([m2 (get_median_helper (rest arr1) (rest arr2) m)])\n             (if (> m1 m2)\n                 m1\n                 m2))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (if (= n 1)\n        (if (< (car arr1) (car arr2))\n            (car arr1)\n            (car arr2))\n        (let ((m (/ n 2)))\n          (if (< (car (drop arr1 m)) (car (drop arr2 m)))\n              (get_median_helper (drop arr1 m) arr2 (- n m))\n              (get_median_helper arr1 (drop arr2 m) (- n m))))))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (if (< (list-ref arr1 m) (list-ref arr2 m))\n           (get_median (sublist arr1 m) arr2 m)\n           (get_median arr1 (sublist arr2 m) m)))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0)) (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m1 (/ n 2)]\n            [m2 (- n m1 1)]\n            [med1 (list-ref arr1 m1)]\n            [med2 (list-ref arr2 m2)])\n       (cond\n         [(= med1 med2) med1]\n         [(< med1 med2) (get_median (sublist arr1 m1) (sublist arr2 0 m1) m1)]\n         [else (get_median (sublist arr1 0 m1) (sublist arr2 m1) m1)]))]))\n",
    "  (cond\n    [(empty? arr1) (error \"empty array\")]\n    [(empty? arr2) (error \"empty array\")]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                  (min (second arr1) (second arr2))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (if (&lt; m1 m2) (drop arr1 m) arr1)\n                       (if (&lt; m1 m2) arr2 (drop arr2 m))\n                       (/ n 2))))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0)) (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (take arr1 m) (take arr2 m) m)))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let* ([m1 (/ n 2)]\n              [m2 (- n m1 1)]\n              [m1-val (list-ref arr1 m1)]\n              [m2-val (list-ref arr2 m2)])\n         (cond\n           [(= m1-val m2-val) m1-val]\n           [(< m1-val m2-val) (get_median_helper (drop arr1 m1) (take arr2 m2) m2)]\n           [else (get_median_helper (take arr1 m1) (drop arr2 m1) m1)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n m1 m2)\n    (cond\n      [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                   (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n      [else\n       (if (= m1 m2)\n           m1\n           (if (< m1 m2)\n               (get_median_helper (sublist arr1 0 (/ n 2))\n                                  (sublist arr2 (/ n 2) n)\n                                  (/ n 2)\n                                  (list-ref arr1 (/ n 2))\n                                  (list-ref arr2 (/ n 2)))\n               (get_median_helper (sublist arr1 (/ n 2) n)\n                                  (sublist arr2 0 (/ n 2))\n                                  (/ n 2)\n                                  (list-ref arr1 (/ n 2))\n                                  (list-ref arr2 (/ n 2))))))])\n  (get_median_helper arr1 arr2 n (list-ref arr1 (/ n 2)) (list-ref arr2 (/ n 2))))\n",
    "  (define (get-median-helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (first arr1) (first arr2))\n             (get-median-helper (rest arr1) (drop arr2 m) (- n m))\n             (get-median-helper (drop arr1 m) (rest arr2) (- n m))))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n        [(= n 2) (/ (+ (max (car arr1) (car arr2))\n                      (min (cadr arr1) (cadr arr2))) 2)]\n        [else\n         (let* ([m (/ n 2)]\n                [m1 (get_median arr1 arr2 m)]\n                [m2 (get_median (drop arr1 m) (drop arr2 m) (- n m))])\n           (if (< m1 m2)\n               m1\n               m2))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"arr1 is empty\")]\n      [(empty? arr2) (error \"arr2 is empty\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (first arr1) (first arr2))\n             (get_median_helper (rest arr1) (drop arr2 m) (- n m))\n             (get_median_helper (drop arr1 m) (rest arr2) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_rec arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 1) (if (&gt; (first arr1) (first arr2))\n                   (first arr1)\n                   (first arr2))]\n      [else (if (&gt; (first arr1) (first arr2))\n               (get_median_rec (rest arr1) (rest arr2) (- n 1))\n               (get_median_rec (rest arr1) (rest arr2) (- n 1)))]))\n  (get_median_rec arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (car (drop m arr1)) (car (drop m arr2)))\n             (get_median_helper (drop m arr1) arr2 (- n m))\n             (get_median_helper arr1 (drop m arr2) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (list (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (list (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (list (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (list-ref arr1 m)]\n               [m2 (list-ref arr2 m)])\n           (cond\n             [(= m1 m2) m1]\n             [(< m1 m2) (get_median_helper (sublist arr1 m) (sublist arr2 0 m) m)]\n             [else (get_median_helper (sublist arr1 0 m) (sublist arr2 m) m)])))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper (rest arr1) (rest arr2) (- n 2))]\n              [m2 (get_median_helper arr1 arr2 (- n 2))])\n         (cond\n           [(< m1 m2) (get_median_helper (rest arr1) arr2 (- n 2))]\n           [(> m1 m2) (get_median_helper arr1 (rest arr2) (- n 2))]\n           [else m1]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(empty? arr1) (error \"empty array\")]\n    [(empty? arr2) (error \"empty array\")]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (first arr1) (first arr2))\n          (get_median (rest arr1) (drop arr2 m) (- n m))]\n         [else\n          (get_median (drop arr1 m) (rest arr2) (- n m))]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2)) 2)]\n      [else\n       (let ([m1 (/ (length arr1) 2)]\n             [m2 (/ (length arr2) 2)])\n         (cond\n           [(= (first arr1) (first arr2)) (first arr1)]\n           [(> (first arr1) (first arr2))\n            (get_median_helper (rest arr1) (rest arr2) (- n 2))]\n           [else\n            (get_median_helper (rest arr1) (rest arr2) (- n 2))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 m) (list-ref arr2 m))\n          (get_median (drop arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 m) (list-ref arr2 m))\n          (get_median arr1 (drop arr2 m) (- n m))]\n         [else\n          (list-ref arr1 m)]))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (list-drop arr1 m) (list-drop arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (list-take arr1 m) (list-take arr2 m) m)))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (&lt; m1 m2)\n             m1\n             m2))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get-median-helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"Empty array\")]\n      [(empty? arr2) (error \"Empty array\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (first arr1) (first arr2))\n            (get-median-helper (drop arr1 m) (drop arr2 (- m)) (- n m))]\n           [(> (first arr1) (first arr2))\n            (get-median-helper (drop arr1 (- m)) (drop arr2 m) (- n m))]\n           [else\n            (first arr1)]))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty array\")]\n      [(empty? arr2) (error \"empty array\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper (rest arr1) (rest arr2) m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) m)])\n         (if (&lt;= m1 m2) m1 m2))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2)) 2)]\n      [else\n       (cond\n         [(< (car arr1) (car arr2))\n          (get_median-helper (cdr arr1) (cdr arr2) (- n 2))]\n         [else\n          (get_median-helper (cdr arr1) (cdr arr2) (- n 2))])]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty array\")]\n      [(empty? arr2) (error \"empty array\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (&lt; (first arr1) (first arr2))\n             (get_median_helper (drop arr1 m) (drop arr2 (- m)) (- n m))\n             (get_median_helper (drop arr1 (- m)) (drop arr2 m) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2)) 2)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop arr1 m)) (car (drop arr2 m)))\n            (get_median_helper (drop arr1 m) (take arr2 m) m)]\n           [(> (car (drop arr1 m)) (car (drop arr2 m)))\n            (get_median_helper (take arr1 m) (drop arr2 m) m)]\n           [else\n            (car (drop arr1 m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else (let ([m (/ n 2)])\n              (cond\n                [(< (car (drop arr1 m)) (car (drop arr2 m)))\n                 (get_median_helper (drop arr1 m) (take arr2 m) m)]\n                [(> (car (drop arr1 m)) (car (drop arr2 m)))\n                 (get_median_helper (take arr1 m) (drop arr2 m) m)]\n                [else (car (drop arr1 m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond ((= n 1) (/ (+ (car arr1) (car arr2)) 2))\n          ((= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4))\n          (else (let ((m (/ n 2)))\n                  (if (< (car (drop arr1 m)) (car (drop arr2 m)))\n                      (get-median-helper (drop arr1 m) (take arr2 m) (- n m))\n                      (get-median-helper (take arr1 m) (drop arr2 m) (- n m)))))))\n  (get-median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (first (drop (sub1 m) arr1)) (first (drop (sub1 m) arr2)))\n            (get_median_helper (drop m arr1) arr2 (sub1 m))]\n           [else\n            (get_median_helper arr1 (drop m arr2) (sub1 m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (if (< (list-ref arr1 m) (list-ref arr2 m))\n           (get_median (sublist arr1 m) arr2 (- n m))\n           (get-median arr1 (sublist arr2 m) (- n m))))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                  (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(> (vector-ref arr1 m) (vector-ref arr2 m))\n          (get_median (subvector arr1 0 m) (subvector arr2 m) m)]\n         [(< (vector-ref arr1 m) (vector-ref arr2 m))\n          (get_median (subvector arr1 m) (subvector arr2 0 m) m)]\n         [else (vector-ref arr1 m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (car (drop (sub1 m) arr1))\n                (car (drop (sub1 m) arr2)))\n             (get_median_helper (drop m arr1) arr2 (sub1 m))\n             (get_median_helper arr1 (drop m arr2) (sub1 m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n          [(= n 2) (/ (+ (car arr1) (cadr arr1) (car arr2) (cadr arr2)) 4)]\n          [else\n           (let ([m1 (/ (car arr1) 2)])\n             (let ([m2 (/ (car arr2) 2)])\n               (if (< m1 m2)\n                   (get_median_helper (cdr arr1) (take arr2 (/ n 2)) (/ n 2))\n                   (get_median_helper (take arr1 (/ n 2)) (cdr arr2) (/ n 2)))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) 0]\n      [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                    (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n      [else\n       (let ([m1 (/ n 2)]\n             [m2 (- n m1)])\n         (cond\n           [(< (vector-ref arr1 m1) (vector-ref arr2 m2))\n            (get_median_helper (vector-copy arr1 m1) arr2 m2)]\n           [else\n            (get_median_helper arr1 (vector-copy arr2 m2) m2)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1)\n     (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2)\n     (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n            (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 (- m 1)) (list-ref arr2 (- m 1)))\n          (get_median (sublist arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 (- m 1)) (list-ref arr2 (- m 1)))\n          (get_median arr1 (sublist arr2 m) (- n m))]\n         [else\n          (list-ref arr1 (- m 1))]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get_median_helper (drop m arr1) (take m arr2) m)]\n           [else\n            (get_median_helper (take m arr1) (drop m arr2) m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (list (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (list (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (list (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (cond\n           [(> (car m1) (car m2)) (get_median_helper arr1 arr2 (- m 1))]\n           [else (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))]))]))\n  (let* ([m (get_median_helper arr1 arr2 n)]\n         [m1 (car m)]\n         [m2 (cadr m)])\n    (if (= (modulo n 2) 0)\n        (/ (+ m1 m2) 2)\n        m1)))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m1 (quotient n 2)]\n            [m2 (- m1 1)]\n            [m1 (list-ref arr1 m1)]\n            [m2 (list-ref arr2 m2)])\n       (if (< m1 m2)\n           (get_median (sublist arr1 m2) (sublist arr2 0 m2) m2)\n           (get_median (sublist arr1 0 m2) (sublist arr2 m2) m2)))]))\n",
    "  (cond [(empty? arr1) (error \"empty array\")]\n        [(empty? arr2) (error \"empty array\")]\n        [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n        [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n        [else\n         (let ([m (/ n 2)]\n               [m1 (get_median (rest arr1) (rest arr2) (- n 1))]\n               [m2 (get_median arr1 arr2 m)])\n           (cond [(< m1 m2) (get_median (take arr1 m) (drop arr2 m) m)]\n                 [else (get_median (drop arr1 m) (take arr2 m) m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (list-ref arr1 m) (list-ref arr2 m))\n             (get-median-helper (drop arr1 m) arr2 (- n m))\n             (get-median-helper arr1 (drop arr2 m) (- n m))))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (first arr1) (first arr2)) (get_median_helper (drop arr1 m) (drop arr2 (- m)) m)]\n           [else (get_median_helper (drop arr1 (- m)) (drop arr2 m) m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (cond\n           [(= m1 m2) m1]\n           [(> m1 m2) (get_median_helper (drop arr1 m) arr2 m)]\n           [else (get_median_helper arr1 (drop arr2 m) m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) m)])\n         (if (< m1 m2)\n             (get_median_helper arr1 arr2 m)\n             (get_median_helper (drop arr1 m) (drop arr2 m) m)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (list-ref arr1 (- m 1)) (list-ref arr2 (- m 1)))\n          (get_median (sublist arr1 m) arr2 (- n m))]\n         [(> (list-ref arr1 (- m 1)) (list-ref arr2 (- m 1)))\n          (get_median arr1 (sublist arr2 m) (- n m))]\n         [else\n          (list-ref arr1 (- m 1))]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (cons (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (cons (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (cons (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get-median-helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (cond\n           [(= (car m1) (car m2)) (car m1)]\n           [(< (car m1) (car m2)) (car m2)]\n           [else (car m1)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (car (drop arr1 m)) (car (drop arr2 m)))\n             (get_median_helper (drop arr1 m) (take arr2 m) m)\n             (get_median_helper (take arr1 m) (drop arr2 m) m)))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond [(= n 0) (cons 0 0)]\n          [(= n 1) (cons (list-ref arr1 0) (list-ref arr2 0))]\n          [(= n 2) (cons (list-ref arr1 1) (list-ref arr2 1))]\n          [else\n           (let ([m (/ n 2)])\n             (let ([m1 (get_median_helper arr1 arr2 m)]\n                   [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n               (if (&lt; (car m1) (car m2))\n                   m2\n                   m1)))]))\n  (let ([m (get_median_helper arr1 arr2 n)])\n    (if (= n 0)\n        0\n        (/ (+ (car m) (cdr m)) 2))))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2)) 2)]\n      [else\n       (cond\n         [(< (first arr1) (first arr2))\n          (get_median_helper (rest arr1) arr2 (- n 1))]\n         [else\n          (get_median_helper arr1 (rest arr2) (- n 1))])]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                    (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n      [else\n       (let ([m1 (/ (length arr1) 2)]\n             [m2 (/ (length arr2) 2)])\n         (cond\n           [(= (list-ref arr1 m1) (list-ref arr2 m2)) (list-ref arr1 m1)]\n           [(> (list-ref arr1 m1) (list-ref arr2 m2))\n            (get_median_helper (take arr1 m1) (drop arr2 m2) (- n m2))]\n           [else\n            (get_median_helper (drop arr1 m1) (take arr2 m2) (- n m1))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (list (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (list (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (list (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let ([m (/ n 2)])\n         (let ([m1 (list-ref arr1 m)]\n               [m2 (list-ref arr2 m)])\n           (cond\n             [(= m1 m2) (list m1 m2)]\n             [(> m1 m2) (get_median_helper (sublist arr1 0 m) (sublist arr2 m n) m)]\n             [else (get_median_helper (sublist arr1 m n) (sublist arr2 0 m) m)])))]))\n  (let ([medians (get_median_helper arr1 arr2 n)])\n    (if (= (length medians) 2)\n        (apply + medians)\n        (apply + (sublist medians 0 2)))))\n",
    "  (cond\n    [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n    [(= n 2) (/ (+ (max (car arr1) (car arr2)) (min (car (cdr arr1)) (car (cdr arr2)))) 2)]\n    [else\n     (let ([m1 (quotient n 2)]\n           [m2 (quotient (+ n 1) 2)])\n       (cond\n         [(= (car (cdr arr1)) (car (cdr arr2))) (car (cdr arr1))]\n         [(> (car (cdr arr1)) (car (cdr arr2))) (get_median (drop arr1 m1) (take arr2 m2) m2)]\n         [else (get_median (take arr1 m2) (drop arr2 m1) m2)]))]))\n",
    "  (cond\n    [(empty? arr1) 0]\n    [(empty? arr2) 0]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (first arr1) (first arr2))\n          (get_median (drop arr1 m) (drop arr2 (- m)) m)]\n         [else\n          (get_median (drop arr2 m) (drop arr1 (- m)) m)]))]))\n",
    "  (cond [(= n 0) 0]\n        [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n        [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                      (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n        [else\n         (let ([m (/ n 2)])\n           (if (< (list-ref arr1 m) (list-ref arr2 m))\n               (get_median (sublist arr1 m) arr2 (- n m))\n               (get_median arr1 (sublist arr2 m) (- n m))))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n    [(= n 2) (/ (+ (max (car arr1) (car arr2)) (min (car (cdr arr1)) (car (cdr arr2)))) 2)]\n    [else\n     (let ([m1 (car (cdr (cdr arr1))))\n           [m2 (car (cdr (cdr arr2)))])\n       (cond\n         [(= m1 m2) m1]\n         [(> m1 m2) (get_median (cdr arr1) arr2 (/ n 2))]\n         [else (get_median arr1 (cdr arr2) (/ n 2))]))]))\n",
    "  (if (= n 1)\n      (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)\n      (let ([m (/ n 2)])\n        (if (< (list-ref arr1 m) (list-ref arr2 m))\n            (get_median (drop arr1 m) arr2 (- n m))\n            (get_median arr1 (drop arr2 m) (- n m))))))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (< m1 m2)\n             m1\n             m2))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"Empty array\")]\n      [(empty? arr2) (error \"Empty array\")]\n      [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n      [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(= (first arr1) (first arr2)) (first arr1)]\n           [(< (first arr1) (first arr2))\n            (get_median_helper (drop arr1 m) (take arr2 m) m)]\n           [else\n            (get_median_helper (take arr1 m) (drop arr2 m) m)]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get_median_helper (drop m arr1) arr2 (- n m))]\n           [else\n            (get_median_helper arr1 (drop m arr2) (- n m))]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (if (&lt; (car arr1) (car arr2))\n                   (car arr1)\n                   (car arr2))]\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [else (let ([m (/ n 2)])\n              (if (&lt; (car (drop arr1 m)) (car (drop arr2 m)))\n                  (get_median_helper (drop arr1 m) arr2 (- n m))\n                  (get_median_helper arr1 (drop arr2 m) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [else\n       (cond\n         [(> (car arr1) (car arr2))\n          (get_median_helper (cdr arr1) (cdr arr2) (- n 2))]\n         [else\n          (get_median_helper (cdr arr1) (cdr arr2) (- n 2))])]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(empty? arr1) (error \"empty array\")]\n    [(empty? arr2) (error \"empty array\")]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (max (first arr1) (first arr2)) (min (second arr1) (second arr2))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median (rest arr1) (rest arr2) (- n 2))]\n            [m2 (get-median arr1 arr2 n)])\n       (if (< m1 m2)\n           (get_median (take arr1 m) (take arr2 m) m)\n           (get_median (drop arr1 m) (drop arr2 m) m)))]))\n",
    "  (define (get-median-helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (cond\n           [(< (car (drop m arr1)) (car (drop m arr2)))\n            (get-median-helper (drop m arr1) arr2 (- n m))]\n           [(> (car (drop m arr1)) (car (drop m arr2)))\n            (get-median-helper arr1 (drop m arr2) (- n m))]\n           [else\n            (car (drop m arr1))]))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond [(= n 0) 0]\n          [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n          [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                        (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n          [else\n           (let ([m (/ n 2)])\n             (cond [(< (list-ref arr1 m) (list-ref arr2 m))\n                    (get-median-helper (drop arr1 m) arr2 (- n m))]\n                   [else\n                    (get-median-helper arr1 (drop arr2 m) (- n m))]))]))\n  (get-median-helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond [(= n 0) 0]\n          [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n          [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n          [else\n           (let ([m1 (/ (add1 n) 2)]\n                 [m2 (sub1 m1)])\n             (cond [(< (list-ref arr1 m1) (list-ref arr2 m1))\n                    (get_median-helper (sublist arr1 m1) arr2 m2)]\n                   [(> (list-ref arr1 m1) (list-ref arr2 m1))\n                    (get_median-helper arr1 (sublist arr2 m1) m2)]\n                   [else\n                    (list-ref arr1 m1)]))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (if (= n 1)\n        (if (< (car arr1) (car arr2))\n            (car arr1)\n            (car arr2))\n        (let ((m (/ n 2)))\n          (if (< (car (drop arr1 m)) (car (drop arr2 m)))\n              (get_median_helper (drop arr1 m) arr2 (- n m))\n              (get_median_helper arr1 (drop arr2 m) (- n m))))))\n  (get_median_helper arr1 arr2 n))\n",
    "  (cond\n    [(empty? arr1) (error \"empty list\")]\n    [(empty? arr2) (error \"empty list\")]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n    [else\n     (let ([m (/ n 2)])\n       (cond\n         [(< (first arr1) (first arr2))\n          (get_median (drop arr1 m) (take arr2 m) m)]\n         [else\n          (get_median (take arr1 m) (drop arr2 m) m)]))]))\n",
    "  (cond [(= n 1) (/ (+ (vector-ref arr1 0) (vector-ref arr2 0)) 2)]\n        [(= n 2) (/ (+ (max (vector-ref arr1 0) (vector-ref arr2 0))\n                      (min (vector-ref arr1 1) (vector-ref arr2 1))) 2)]\n        [else\n         (let* ([m (/ n 2)]\n                [m1 (vector-ref arr1 m)]\n                [m2 (vector-ref arr2 m)])\n           (cond [(= m1 m2) m1]\n                 [(> m1 m2) (get_median (subvector arr1 0 m)\n                                        (subvector arr2 m) m)]\n                 [else (get_median (subvector arr1 m)\n                                   (subvector arr2 0 m) m)]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(empty? arr1) (error \"empty array\")]\n      [(empty? arr2) (error \"empty array\")]\n      [(= 1 n) (/ (+ (first arr1) (first arr2)) 2)]\n      [else\n       (let ([m (/ n 2)]\n             [m1 (get_median_helper (rest arr1) (rest arr2) m)]\n             [m2 (get-median-helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (&lt; m1 m2) m1 m2))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (values 0 0)]\n      [(= n 1) (values (car arr1) (car arr2))]\n      [(= n 2) (values (car arr1) (car arr2))]\n      [else\n       (let ([mid (/ n 2)])\n         (let-values ([(m1 m2) (get_median_helper (take arr1 mid) (take arr2 mid) mid)])\n           (if (and (= m1 (car (drop arr1 mid)))\n                    (= m2 (car (drop arr2 mid))))\n               (values m1 m2)\n               (let-values ([(m1 m2) (get_median_helper (drop arr1 mid) (drop arr2 mid) (- n mid))])\n                 (values m1 m2)))))]))\n  (let-values ([(m1 m2) (get_median_helper arr1 arr2 n)])\n    (if (= m1 m2)\n        m1\n        (/ (+ m1 m2) 2))))\n",
    "  (cond\n    [(empty? arr1) (error \"empty array\")]\n    [(empty? arr2) (error \"empty array\")]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (first arr1) (first arr2) (second arr1) (second arr2)) 4)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median (rest arr1) (rest arr2) (- n 2))]\n            [m2 (get_median arr1 arr2 (- n 1))])\n       (cond\n         [(< m1 m2) (get_median (rest arr1) arr2 (- n 1))]\n         [else (get_median arr1 (rest arr2) (- n 1))]))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n      [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                    (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n      [else\n       (let* ([m (/ n 2)]\n              [m1 (get_median_helper arr1 arr2 m)]\n              [m2 (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))])\n         (if (<= m1 m2) m1 m2))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m (/ n 2)])\n         (if (< (car (drop m arr1)) (car (drop m arr2)))\n             (get_median_helper (drop m arr1) arr2 (- n m))\n             (get_median_helper arr1 (drop m arr2) (- n m))))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 0) (list (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (list (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (list (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let* ([m1 (quotient n 2)]\n              [m2 (quotient (+ n 1) 2)]\n              [m1-val (list-ref arr1 m1)]\n              [m2-val (list-ref arr2 m2)])\n         (cond\n           [(= m1-val m2-val) (list m1-val m2-val)]\n           [(< m1-val m2-val) (get_median-helper (sublist arr1 0 m1) (sublist arr2 m2 n) (- m2 m1))]\n           [else (get_median-helper (sublist arr1 m2 n) (sublist arr2 0 m2) (- m2 m1))]))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (define (merge arr1 arr2 n)\n    (cond\n      [(= n 0) '()]\n      [(= n 1) (list (min (car arr1) (car arr2)))]\n      [(= n 2) (list (min (car arr1) (car arr2)) (max (car arr1) (car arr2)))]\n      [else (let ([m (/ n 2)])\n              (let ([left1 (take arr1 m)])\n                (let ([left2 (take arr2 m)])\n                  (let ([right1 (drop arr1 m)])\n                    (let ([right2 (drop arr2 m)])\n                      (let ([left_median (merge left1 left2 m)])\n                        (let ([right_median (merge right1 right2 (- n m))])\n                          (cond\n                            [(= (length left_median) 1)\n                             (if (= (length right_median) 1)\n                                 (list (car left_median) (car right_median))\n                                 (list (car left_median) (car right_median) (cadr right_median)))]\n                            [(= (length left_median) 2)\n                             (if (= (length right_median) 1)\n                                 (list (car left_median) (car right_median) (cadr left_median))\n                                 (list (car left_median) (car right_median) (cadr left_median) (cadr right_median)))])))))))))))\n  (define (get_median_helper arr)\n    (cond\n      [(= (length arr) 1) (car arr)]\n      [(= (length arr) 2) (/ (+ (car arr) (cadr arr)) 2)]\n      [(= (length arr) 3) (car arr)]\n      [(= (length arr) 4) (/ (+ (car arr) (cadr arr)) 2)]))\n  (get_median_helper (merge arr1 arr2 n)))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (cond\n      [(= n 0) (cons (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (cons (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (cons (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let ([m (quotient n 2)])\n         (let ([m1 (get_median-helper arr1 arr2 m)])\n           (let ([m2 (get-median-helper (drop arr1 m) (drop arr2 m) (- n m))])\n             (cond\n               [(= (car m1) (car m2)) (cons (car m1) (car m2))]\n               [(> (car m1) (car m2)) (cons (car m1) (car m2))]\n               [else (cons (car m2) (car m1))]))))]))\n  (get_median-helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0)) (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (if (> (list-ref arr1 m) (list-ref arr2 m))\n           (get_median arr1 (sublist arr2 0 m) m)\n           (get_median (sublist arr1 0 m) arr2 m)))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median arr1 arr2 m)]\n            [m2 (get_median (sublist arr1 m) (sublist arr2 m) (- n m))])\n       (if (= m1 m2) m1\n           (get_median (sublist arr1 0 m) (sublist arr2 0 m) m)))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (list (list-ref arr1 0) (list-ref arr2 0))]\n      [(= n 1) (list (list-ref arr1 1) (list-ref arr2 1))]\n      [(= n 2) (list (list-ref arr1 2) (list-ref arr2 2))]\n      [else\n       (let ([m1 (quotient n 2)]\n             [m2 (- n 1 m1)])\n         (let ([m1-1 (list-ref arr1 m1)]\n               [m2-1 (list-ref arr2 m2)]\n               [m1-2 (list-ref arr1 (- m1 1))]\n               [m2-2 (list-ref arr2 (- m2 1))])\n           (cond\n             [(> m1-1 m2-2) (get_median (sublist arr1 0 m1) arr2 m2)]\n             [(> m2-1 m1-2) (get_median arr1 (sublist arr2 0 m2) m1)]\n             [else (list m1-1 m2-1)])))]))\n  (let ([median (get_median_helper arr1 arr2 n)])\n    (if (= (length median) 2)\n        (quotient (+ (list-ref median 0) (list-ref median 1)) 2)\n        (list-ref median 0))))\n",
    "  (cond\n    [(empty? arr1) (error \"empty array\")]\n    [(empty? arr2) (error \"empty array\")]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                  (min (second arr1) (second arr2))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median (rest arr1) (rest arr2) m)]\n            [m2 (get_median (take arr1 m) (take arr2 m) m)])\n       (if (< m1 m2)\n           m2\n           m1))]))\n",
    "  (cond\n    [(empty? arr1) (error \"Empty array\")]\n    [(empty? arr2) (error \"Empty array\")]\n    [(= n 1) (/ (+ (first arr1) (first arr2)) 2)]\n    [(= n 2) (/ (+ (max (first arr1) (first arr2))\n                   (min (second arr1) (second arr2))) 2)]\n    [else\n     (let* ([m (/ n 2)]\n            [m1 (get_median (rest arr1) (rest arr2) (- n 2))]\n            [m2 (get_median arr1 arr2 m)])\n       (if (&lt; m1 m2) m1 m2))]))\n",
    "  (define (get_median-helper arr1 arr2 n)\n    (if (= n 1)\n        (if (> (car arr1) (car arr2))\n            (car arr2)\n            (car arr1))\n        (if (> (car arr1) (car arr2))\n            (get_median-helper (cdr arr1) (cdr arr2) (- n 1))\n            (get_median-helper arr1 (cdr arr2) (- n 1)))))\n  (get_median-helper arr1 arr2 n))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (if (< (list-ref arr1 m) (list-ref arr2 m))\n           (get_median (sublist arr1 m) arr2 m)\n           (get_median arr1 (sublist arr2 m) m)))]))\n",
    "  (cond\n    [(= n 1) (/ (+ (list-ref arr1 0) (list-ref arr2 0)) 2)]\n    [(= n 2) (/ (+ (max (list-ref arr1 0) (list-ref arr2 0))\n                  (min (list-ref arr1 1) (list-ref arr2 1))) 2)]\n    [else\n     (let ([m (/ n 2)])\n       (if (< (list-ref arr1 m) (list-ref arr2 m))\n           (get_median (sublist arr1 m) arr2 (- n m))\n           (get-median arr1 (sublist arr2 m) (- n m))))]))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 0) (cons (car arr1) (car arr2))]\n      [(= n 1) (cons (car arr1) (car arr2))]\n      [(= n 2) (cons (car arr1) (car arr2))]\n      [else\n       (let* ([m (/ n 2)]\n              [a (get_median_helper (drop arr1 m) (drop arr2 m) (- n m))]\n              [b (get_median_helper (take arr1 m) (take arr2 m) m)])\n         (cond\n           [(< (car a) (car b)) a]\n           [else b]))]))\n  (get_median_helper arr1 arr2 n))\n",
    "  (define (get_median_helper arr1 arr2 n)\n    (cond\n      [(= n 1) (/ (+ (car arr1) (car arr2)) 2)]\n      [(= n 2) (/ (+ (car arr1) (car arr2) (cadr arr1) (cadr arr2)) 4)]\n      [else\n       (let ([m1 (/ (car arr1) 2)])\n         (let ([m2 (/ (car arr2) 2)])\n           (if (< m1 m2)\n               (get_median_helper (cdr arr1) (take arr2 (/ n 2)) (/ n 2))\n               (get_median_helper (take arr1 (/ n 2)) (cdr arr2) (/ n 2)))))]))\n  (get_median_helper arr1 arr2 n))\n"
  ]
}