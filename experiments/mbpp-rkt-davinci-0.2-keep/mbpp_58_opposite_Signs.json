{
  "name": "mbpp_58_opposite_Signs",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether the given two integers have opposite sign or not.\n(define (opposite_Signs x y)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate opposite_Signs))\n    (check-equal? (candidate 1 -2) #t)\n    (check-equal? (candidate 3 2) #f)\n    (check-equal? (candidate -10 -10) #f)\n    (check-equal? (candidate -2 2) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (or (and (positive? x) (negative? y))\n      (and (positive? y) (negative? x))))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (positive? y) (negative? x))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (positive? y) (negative? x))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n",
    "  (if (and (positive? x) (negative? y))\n      #t\n      (if (and (negative? x) (positive? y))\n          #t\n          #f)))\n"
  ]
}