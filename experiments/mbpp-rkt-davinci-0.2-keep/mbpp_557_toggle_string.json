{
  "name": "mbpp_557_toggle_string",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-equal? (candidate \"Python\") \"pYTHON\")\n    (check-equal? (candidate \"Pangram\") \"pANGRAM\")\n    (check-equal? (candidate \"LIttLE\") \"liTTle\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-map\n   (lambda (c)\n     (if (char-alphabetic? c)\n         (if (char-lower-case? c)\n             (char-upcase c)\n             (char-downcase c))\n         c))\n   string))\n",
    "  (string-map (lambda (c) (if (char-upper-case? c)\n                              (char-downcase c)\n                              (char-upcase c)))\n              string))\n",
    "  (string-map (lambda (x)\n                (if (char-alphabetic? x)\n                    (if (char-upper-case? x)\n                        (char-downcase x)\n                        (char-upcase x))\n                    x))\n              string))\n",
    "  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n",
    "  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (if (char-lower-case? c)\n                        (char-upcase c)\n                        (char-downcase c))\n                    c))\n              string))\n",
    "  (string-map\n   (lambda (char)\n     (if (char-upper-case? char)\n         (char-downcase char)\n         (char-upcase char)))\n   string))\n",
    "  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n",
    "  (string-map (lambda (c) (if (char-upper-case? c) (char-downcase c) (char-upcase c))) string))\n",
    "  (string-map (lambda (char)\n                (if (char-upper-case? char)\n                    (char-downcase char)\n                    (char-upcase char)))\n              string))\n",
    "  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n",
    "  (string-map\n   (lambda (c)\n     (if (char-upper-case? c)\n         (char-downcase c)\n         (char-upcase c)))\n   string))\n",
    "  (string-map (lambda (char)\n                (if (char-alphabetic? char)\n                    (if (char-lower-case? char)\n                        (char-upcase char)\n                        (char-downcase char))\n                    char))\n              string))\n",
    "  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n",
    "  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n",
    "  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n",
    "  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n",
    "  (string-map (lambda (x) (if (char-upper-case? x) (char-downcase x) (char-upcase x))) string))\n",
    "  (string-map (lambda (c)\n                (if (char-lower-case? c)\n                    (char-upcase c)\n                    (char-downcase c)))\n              string))\n",
    "  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase c) (char-downcase c))) string))\n",
    "  (string-map (lambda (c)\n                (if (char-upper-case? c)\n                    (char-downcase c)\n                    (char-upcase c)))\n              string))\n"
  ]
}