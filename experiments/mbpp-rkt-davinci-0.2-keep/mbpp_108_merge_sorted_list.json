{
  "name": "mbpp_108_merge_sorted_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to merge three lists into a single sorted list.\n(define (merge_sorted_list num1 num2 num3)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate merge_sorted_list))\n    (check-equal? (candidate (list 25 24 15 4 5 29 110) (list 19 20 11 56 25 233 154) (list 24 26 54 48)) (list 4 5 11 15 19 20 24 24 25 25 26 29 48 54 56 110 154 233))\n    (check-equal? (candidate (list 1 3 5 6 8 9) (list 2 5 7 11) (list 1 4 7 8 12)) (list 1 1 2 3 4 5 5 6 7 7 8 8 9 11 12))\n    (check-equal? (candidate (list 18 14 10 9 8 7 9 3 2 4 1) (list 25 35 22 85 14 65 75 25 58) (list 12 74 9 50 61 41)) (list 1 2 3 4 7 8 9 9 9 10 12 14 14 18 22 25 25 35 41 50 58 61 65 74 75 85))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (sort (append num1 num2 num3) <))\n",
    "  (sort (append num1 num2 num3) <))\n",
    "  (cond\n    [(empty? num1) (merge num2 num3)]\n    [(empty? num2) (merge num1 num3)]\n    [(empty? num3) (merge num1 num2)]\n    [(< (first num1) (first num2))\n     (cons (first num1) (merge_sorted_list (rest num1) num2 num3))]\n    [(< (first num2) (first num3))\n     (cons (first num2) (merge_sorted_list num1 (rest num2) num3))]\n    [(< (first num3) (first num1))\n     (cons (first num3) (merge_sorted_list num1 num2 (rest num3)))]\n    [else (cons (first num1) (merge_sorted_list (rest num1) num2 num3))]))\n",
    "  (cond\n    [(empty? num1) (cond\n                     [(empty? num2) num3]\n                     [(empty? num3) (merge num2 num3)]\n                     [else (merge num2 num3)])]\n    [(empty? num2) (cond\n                     [(empty? num3) num1]\n                     [(empty? num1) (merge num1 num3)]\n                     [else (merge num1 num3)])]\n    [(empty? num3) (cond\n                     [(empty? num1) num2]\n                     [(empty? num2) (merge num1 num2)]\n                     [else (merge num1 num2)])]\n    [else (merge (merge num1 num2) num3)]))\n",
    "  (cond\n    [(empty? num1) (append num2 num3)]\n    [(empty? num2) (append num1 num3)]\n    [(empty? num3) (append num1 num2)]\n    [(< (first num1) (first num2))\n     (cons (first num1) (merge_sorted_list (rest num1) num2 num3))]\n    [(< (first num2) (first num3))\n     (cons (first num2) (merge_sorted_list num1 (rest num2) num3))]\n    [else\n     (cons (first num3) (merge_sorted_list num1 num2 (rest num3)))]))\n",
    "  (cond\n    [(empty? num1) (merge num2 num3)]\n    [(empty? num2) (merge num1 num3)]\n    [(empty? num3) (merge num1 num2)]\n    [(< (first num1) (first num2))\n     (cons (first num1) (merge_sorted_list (rest num1) num2 num3))]\n    [(< (first num2) (first num3))\n     (cons (first num2) (merge_sorted_list num1 (rest num2) num3))]\n    [else\n     (cons (first num3) (merge_sorted_list num1 num2 (rest num3)))]))\n",
    "  (sort (append num1 num2 num3) <))\n",
    "  (sort (append num1 num2 num3) <))\n",
    "  (sort (append num1 num2 num3) <))\n",
    "  (cond\n    [(empty? num1) (append num2 num3)]\n    [(empty? num2) (append num1 num3)]\n    [(empty? num3) (append num1 num2)]\n    [else\n     (cond\n       [(<= (first num1) (first num2))\n        (cons (first num1) (merge_sorted_list (rest num1) num2 num3))]\n       [else\n        (cons (first num2) (merge_sorted_list num1 (rest num2) num3))])]))\n",
    "  (cond\n    [(empty? num1) (merge num2 num3)]\n    [(empty? num2) (merge num1 num3)]\n    [(empty? num3) (merge num1 num2)]\n    [(< (first num1) (first num2))\n     (cons (first num1) (merge_sorted_list (rest num1) num2 num3))]\n    [(< (first num2) (first num3))\n     (cons (first num2) (merge_sorted_list num1 (rest num2) num3))]\n    [else\n     (cons (first num3) (merge_sorted_list num1 num2 (rest num3)))]))\n",
    "  (cond\n    [(empty? num1) (cond\n                      [(empty? num2) num3]\n                      [(empty? num3) (append num2 num3)]\n                      [else (append num2 num3)])]\n    [(empty? num2) (cond\n                      [(empty? num3) num1]\n                      [else (append num1 num3)])]\n    [(empty? num3) (cond\n                      [(empty? num1) num2]\n                      [else (append num1 num2)])]\n    [else (cond\n            [(< (car num1) (car num2)) (cons (car num1) (merge_sorted_list (cdr num1) num2 num3))]\n            [(< (car num2) (car num3)) (cons (car num2) (merge_sorted_list num1 (cdr num2) num3))]\n            [else (cons (car num3) (merge_sorted_list num1 num2 (cdr num3)))])]))\n",
    "  (cond\n    [(empty? num1) (cond\n                     [(empty? num2) num3]\n                     [else (merge_sorted_list num2 num3 num1)])]\n    [(empty? num2) (cond\n                     [(empty? num3) num1]\n                     [else (merge_sorted_list num3 num1 num2)])]\n    [(empty? num3) (cond\n                     [(empty? num1) num2]\n                     [else (merge_sorted_list num1 num2 num3)])]\n    [else (cond\n           [(< (car num1) (car num2)) (cond\n                                       [(< (car num1) (car num3)) (cons (car num1) (merge_sorted_list (cdr num1) num2 num3))]\n                                       [else (cons (car num3) (merge_sorted_list num1 num2 (cdr num3)))])]\n           [(< (car num2) (car num3)) (cons (car num2) (merge_sorted_list num1 (cdr num2) num3))]\n           [else (cons (car num3) (merge_sorted_list num1 num2 (cdr num3)))])])\n  )\n",
    "  (sort (append num1 num2 num3) <))\n",
    "  (sort (append num1 num2 num3) <))\n",
    "  (sort (append num1 num2 num3) <))\n",
    "  (sort (append num1 num2 num3) <))\n",
    "  (cond [(empty? num1) (merge num2 num3)]\n        [(empty? num2) (merge num1 num3)]\n        [(empty? num3) (merge num1 num2)]\n        [else (cond [(<= (first num1) (first num2))\n                     (cons (first num1) (merge_sorted_list (rest num1) num2 num3))]\n                    [(<= (first num2) (first num3))\n                     (cons (first num2) (merge_sorted_list num1 (rest num2) num3))]\n                    [else (cons (first num3) (merge_sorted_list num1 num2 (rest num3)))])]))\n",
    "  (cond\n    [(empty? num1) (append num2 num3)]\n    [(empty? num2) (append num1 num3)]\n    [(empty? num3) (append num1 num2)]\n    [(< (first num1) (first num2))\n     (cons (first num1) (merge_sorted_list (rest num1) num2 num3))]\n    [(< (first num2) (first num3))\n     (cons (first num2) (merge_sorted_list num1 (rest num2) num3))]\n    [else\n     (cons (first num3) (merge_sorted_list num1 num2 (rest num3)))]))\n",
    "  (cond\n    [(empty? num1) (append num2 num3)]\n    [(empty? num2) (append num1 num3)]\n    [(empty? num3) (append num1 num2)]\n    [else\n     (cond\n       [(< (first num1) (first num2))\n        (cons (first num1) (merge_sorted_list (rest num1) num2 num3))]\n       [(< (first num2) (first num3))\n        (cons (first num2) (merge_sorted_list num1 (rest num2) num3))]\n       [else\n        (cons (first num3) (merge_sorted_list num1 num2 (rest num3)))])]))\n"
  ]
}