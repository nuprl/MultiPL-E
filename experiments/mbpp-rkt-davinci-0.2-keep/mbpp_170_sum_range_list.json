{
  "name": "mbpp_170_sum_range_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the sum of numbers in a list within a range specified by two indices.\n(define (sum_range_list list1 m n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_range_list))\n    (check-equal? (candidate (list 2 1 5 6 8 3 4 9 10 11 8 12) 8 10) 29)\n    (check-equal? (candidate (list 2 1 5 6 8 3 4 9 10 11 8 12) 5 7) 16)\n    (check-equal? (candidate (list 2 1 5 6 8 3 4 9 10 11 8 12) 7 10) 38)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (length list1)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n)\n          (&lt; m 0)\n          (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m)\n         (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (>= m 0) (>= n 0) (< m (length list1)) (< n (length list1)))\n          (if (< m n)\n              (apply + (sublist list1 m n))\n              (apply + (sublist list1 n m)))\n          (error \"Index out of range\"))\n      (error \"Index must be integer\")))\n",
    "  (cond ((= m n) (list-ref list1 m))\n        (else (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))))\n",
    "  (if (or (= m n) (= m (length list1)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (+ n 1)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (cond\n       [(= m 0)\n        (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n       [(= n 0)\n        (sum_range_list (rest list1) (- m 1) (- n 1))]\n       [else\n        (sum_range_list (rest list1) (- m 1) (- n 1))])]))\n",
    "  (if (or (= m n) (= m (length list1)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (null? list1)\n      0\n      (if (and (>= m (length list1)) (>= n (length list1)))\n          0\n          (if (and (>= m 0) (>= n 0) (>= m n))\n              (apply + (sublist list1 m n))\n              0))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (<= 0 m) (<= m n) (<= n (length list1)))\n          (if (= m n)\n              (list-ref list1 m)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n          (error \"Invalid range\"))\n      (error \"Invalid index\")))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (&gt;= m 0) (&gt;= n 0) (&lt; m (length list1)) (&lt; n (length list1)))\n          (if (&lt; m n)\n              (if (null? list1)\n                  0\n                  (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n              (if (null? list1)\n                  0\n                  (+ (list-ref list1 n) (sum_range_list list1 m (- n 1)))))\n          (error \"Invalid range\"))\n      (error \"Invalid index\")))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (and (integer? m) (integer? n) (integer? (length list1)) (and (>= m 0) (<= m (length list1))) (and (>= n 0) (<= n (length list1))))\n      (if (= m n)\n          (list-ref list1 m)\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n      (error \"Invalid input\")))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0)\n                 (first list1)\n                 (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (and (integer? m) (integer? n) (integer? (list-ref list1 m)) (integer? (list-ref list1 n)))\n      (if (= m n)\n          (list-ref list1 m)\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n      (error \"Invalid input\")))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= (first list1) m) (+ (first list1) (sum_range_list (rest list1) m n))]\n    [(= (first list1) n) (+ (first list1) (sum_range_list (rest list1) m n))]\n    [(> (first list1) m) (sum_range_list (rest list1) m n)]\n    [(< (first list1) n) (sum_range_list (rest list1) m n)]))\n",
    "  (if (or (= m n) (&gt; m n))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (or (= m n) (= m (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (&gt; m n))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (>= m 0) (>= n 0) (<= m n))\n          (if (or (= m n) (= m (+ n 1)))\n              (list-ref list1 m)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n          (error \"m and n must be positive integers and m must be less than or equal to n\"))\n      (error \"m and n must be integers\")))\n",
    "  (if (null? (cdr list1))\n      (car list1)\n      (if (and (&gt;= m (car list1)) (&lt;= n (car list1)))\n          (+ (car list1) (sum_range_list (cdr list1) m n))\n          (sum_range_list (cdr list1) m n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [(> m 0) (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (<= 0 m) (<= m n) (<= n (length list1)))\n          (if (= m n)\n              (list-ref list1 m)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n          0)\n      0))\n",
    "  (cond\n    [(= m n) (list-ref list1 m)]\n    [else (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))]))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (and (integer? m) (integer? n) (integer? (list-ref list1 m)) (integer? (list-ref list1 n)))\n      (if (= m n)\n          (list-ref list1 m)\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n      (error \"Invalid input\")))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\n",
    "  (if (or (&lt; m 0) (&gt; n (length list1)))\n      0\n      (if (= m n)\n          (list-ref list1 m)\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))))\n</code>\n",
    "  (if (or (= m n) (&gt; m n))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\nI have written the above code to find the sum of numbers in a list within a range specified by two indices.\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(1 2 3 4 5 6 7 8 9 10)\n  arguments...:\n   1\n   2\n</code>\nI am not able to figure out the error.\n\n\nA:\n\nThe problem is that you're not calling the function properly, you're passing the list as the first argument and the two indices as the second and third arguments, but the function expects the list as the last argument, try this:\n<code>(define (sum_range_list m n list1)\n  (if (or (= m n) (&gt; m n))\n      0\n      (+ (list-ref list1 m) (sum_range_list (+ m 1) n list1))))\n</code>\nAnd then call it like this:\n<code>(sum_range_list 1 3 '(1 2 3 4 5 6 7 8 9 10))\n</code>\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\nI am not sure if this is the best way to do it. I am also not sure if I should use <code>list-ref</code> or <code>list-tail</code>.\n\n\nA:\n\nYou can use <code>list-ref</code> or <code>list-tail</code>, but you should use <code>list-ref</code> in this case.\nYou can use <code>list-ref</code> to get the element at a specific index, and <code>list-tail</code> to get the list from a specific index.\n<code>(list-ref '(1 2 3 4 5) 2) ; =&gt; 3",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m n) (list-ref list1 m)]\n    [else (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))]))\n",
    "  (if (or (= m n) (= m (length list1)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(= m n) (list-ref list1 m)]\n    [else (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]\n    )\n  )\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (&gt; m n))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (null? list1)\n          (&lt; m 0)\n          (&gt; n (length list1)))\n      0\n      (if (= m n)\n          (list-ref list1 m)\n          (+ (list-ref list1 m)\n             (sum_range_list list1 (+ m 1) n)))))\n</code>\n",
    "  (if (and (integer? m) (integer? n) (and (<= m n) (<= 0 m) (<= n (length list1))))\n      (if (= m n)\n          (list-ref list1 m)\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n      (error \"Invalid input\")))\n",
    "  (if (or (= m n) (= m (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\nI have tried to run the code in DrRacket, but it gives me the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;void&gt;\n  arguments...:\n   #&lt;void&gt;\n</code>\nI am not sure what I am doing wrong.\n\n\nA:\n\nYou have a typo in your code:\n<code>(define (sum_range_list list1 m n)\n  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\nYou're missing a <code>)</code> at the end of the <code>if</code> expression.\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (null? list1) (&lt; m 0) (&lt; n 0) (&lt; n m))\n      0\n      (if (&lt; m (length list1))\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))\n          0)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (and (integer? m) (integer? n) (integer? (length list1)) (and (&gt;= m 0) (&gt;= n 0) (&lt;= m n) (&lt;= n (length list1))))\n      (if (= m n)\n          (list-ref list1 m)\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n      (error \"Invalid input\")))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (positive? m) (positive? n) (<= m n))\n          (if (null? list1)\n              0\n              (if (= m 1)\n                  (+ (car list1) (sum_range_list (cdr list1) m (- n 1)))\n                  (sum_range_list (cdr list1) m (- n 1))))\n          (error \"m and n should be positive and m <= n\"))\n      (error \"m and n should be integers\")))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 1) (cond\n               [(= n 1) (first list1)]\n               [(> n 1) (+ (first list1) (sum_range_list (rest list1) m (- n 1)))]\n               [else (error \"n is not greater than 1\")])]\n    [(> m 1) (cond\n               [(= n 1) 0]\n               [(> n 1) (sum_range_list (rest list1) (- m 1) (- n 1))]\n               [else (error \"n is not greater than 1\")])]\n    [else (error \"m is not greater than 1\")]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (<= 0 m) (<= m n) (<= n (length list1)))\n          (if (= m n)\n              (list-ref list1 m)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n          0)\n      0))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (&lt; m 0) (&gt; n (length list1)))\n      0\n      (if (&gt; m n)\n          0\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))))\n</code>\nThis is the code I have so far. I am not sure if it is correct. I am also not sure how to test it.\n\n\nA:\n\nYour code is correct, but it's not very idiomatic.\nHere's a more idiomatic version:\n<code>(define (sum-range-list lst m n)\n  (apply + (sublist lst m n)))\n</code>\nWhere <code>sublist</code> is defined as:\n<code>(define (sublist lst m n)\n  (if (&lt; m 0)\n      (error \"sublist: negative start index\")\n      (if (&gt; n (length lst))\n          (error \"sublist: end index too large\")\n          (if (&gt; m n)\n              '()\n              (take n (drop m lst))))))\n</code>\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (empty? list1)\n      0\n      (if (= m 0)\n          (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))\n          (sum_range_list (rest list1) (- m 1) (- n 1)))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (&gt; m n))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (&gt;= m 0) (&gt;= n 0) (&lt; m (length list1)) (&lt; n (length list1)))\n          (if (&lt; m n)\n              (if (= m n)\n                  (list-ref list1 m)\n                  (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n              (if (= m n)\n                  (list-ref list1 m)\n                  (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n          (error \"index out of range\"))\n      (error \"index must be integer\")))\n</code>\nI am not sure if this is the best way to do it.\n\n\nA:\n\nI think you can simplify your code a bit.\n<code>(define (sum_range_list list1 m n)\n  (if (and (integer? m) (integer? n))\n      (if (and (&gt;= m 0) (&gt;= n 0) (&lt; m (length list1)) (&lt; n (length list1)))\n          (if (&lt; m n)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))\n              (if (= m n)\n                  (list-ref list1 m)\n                  (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n          (error \"index out of range\"))\n      (error \"index must be integer\")))\n</code>\nThe first <code>if</code> is unnecessary, since the <code>and</code> in the <code>if</code> will return <code>#f</code> if any of the arguments are <code>#f</code>.\nThe second <code>if</code> can be simplified to:\n<code>(if (&lt; m n)\n    (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))\n    (list-ref list1 m))\n</code>\nThe third <code>if</code> can be simplified",
    "  (if (null? list1)\n      0\n      (if (and (>= m (length list1)) (>= n (length list1)))\n          0\n          (if (and (>= m 0) (>= n 0) (>= m n))\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))\n              0))))\n",
    "  (if (null? list1)\n      0\n      (if (and (>= m (car list1)) (<= n (car list1)))\n          (+ (car list1) (sum_range_list (cdr list1) m n))\n          (sum_range_list (cdr list1) m n))))\n",
    "  (if (or (&lt; m 0) (&gt; n (length list1)))\n      (error \"Index out of range\")\n      (if (&gt; m n)\n          0\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [(> m 0) (sum_range_list (rest list1) (- m 1) (- n 1))]\n    [else 0]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\nThe problem is that I get a \"list-ref: index out of range\" error. I'm not sure what I'm doing wrong.\n\n\nA:\n\nYou need to check that <code>m</code> is less than the length of the list.\n<code>(define (sum_range_list list1 m n)\n  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)) (&gt;= m (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= (length list1) (+ m n)) (sum_range_list (rest list1) m n)]\n    [else (sum_range_list (rest list1) m n)]))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (<= 0 m) (<= m n) (<= n (length list1)))\n          (if (= m n)\n              (list-ref list1 m)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n          (error \"Invalid range\"))\n      (error \"Invalid index\")))\n",
    "  (if (or (= m n) (&gt; m n))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (<= 0 m) (<= m n) (<= n (length list1)))\n          (if (= m n)\n              (list-ref list1 m)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n          (error \"Invalid range\"))\n      (error \"Invalid index\")))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (<= 0 m) (<= m n) (<= n (length list1)))\n          (if (= m n)\n              (list-ref list1 m)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n          (error \"Invalid index\"))\n      (error \"Invalid index\")))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (if (or (= m n) (= m (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n  arguments...:\n   [none]\n</code>\nI am not sure what I am doing wrong.\n\n\nA:\n\nYou're missing a <code>else</code> in your <code>if</code> expression.\n<code>(define (sum_range_list list1 m n)\n  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond ((= m n) (list-ref list1 m))\n        (else (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (>= m 0) (>= n 0))\n          (if (<= m n)\n              (if (and (<= m (length list1)) (<= n (length list1)))\n                  (if (= m n)\n                      (list-ref list1 m)\n                      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n                  (error \"Index out of range\"))\n              (error \"m should be less than or equal to n\"))\n          (error \"m and n should be greater than or equal to 0\"))\n      (error \"m and n should be integers\")))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) 0 (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond [(empty? list1) 0]\n        [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n        [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n)\n          (= m (length list1)))\n      0\n      (+ (list-ref list1 m)\n         (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (>= m 0) (>= n 0) (<= m n) (<= n (length list1)))\n          (if (= m n)\n              (list-ref list1 m)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n          (error \"Invalid index\"))\n      (error \"Invalid index\")))\n",
    "  (if (or (= m n)\n          (&gt; m (length list1)))\n      0\n      (+ (list-ref list1 m)\n         (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (null? list1)\n      0\n      (if (and (>= m 0) (<= n (- (length list1) 1)))\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))\n          0)))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (if (or (= m n) (= m (length list1)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (&gt; m n))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (length list1)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (> m n) (> n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (>= m 0) (>= n 0) (< m (length list1)) (< n (length list1)))\n          (if (< m n)\n              (if (null? list1)\n                  0\n                  (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n              (if (null? list1)\n                  0\n                  (+ (list-ref list1 n) (sum_range_list list1 m (- n 1)))))\n          (error \"Index out of range\"))\n      (error \"Index must be integer\")))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond ((= m n) (list-ref list1 m))\n        (else (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (= m (length list1)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (and (integer? m) (integer? n) (integer? (list-ref list1 m)) (integer? (list-ref list1 n)))\n      (if (< m n)\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))\n          (list-ref list1 m))\n      (error \"Invalid input\")))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add (list-ref list1 m)\n           (sum_range_list list1 (add1 m) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= (length list1) m) (sum_range_list (rest list1) m n)]\n    [(= (length list1) n) (first list1)]\n    [else (+ (first list1) (sum_range_list (rest list1) m n))]))\n",
    "  (if (or (&lt; m 0) (&gt; n (length list1)))\n      0\n      (if (= m n)\n          (list-ref list1 m)\n          (+ (list-ref list1 m)\n             (sum_range_list list1 (+ m 1) n)))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (or (= m n) (= m (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    ((= m n) (list-ref list1 m))\n    (else (+ (list-ref list1 m)\n             (sum_range_list list1 (+ m 1) n)))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (= m (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [(= n 0) 0]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add1 (sum_range_list list1 m (sub1 n)) (list-ref list1 n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m)\n         (sum_range_list list1 (add1 m) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n)\n          (= m (length list1)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m)\n         (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) (first list1) (+ (first list1) (sum_range_list (rest list1) 0 (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (null? list1)\n      0\n      (+ (if (and (>= m 0) (<= m n))\n             (list-ref list1 m)\n             0)\n         (sum_range_list (cdr list1) (+ m 1) n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (and (integer? m) (integer? n) (integer? (list-ref list1 m)) (integer? (list-ref list1 n)))\n      (if (and (>= m 0) (>= n 0) (< m (length list1)) (< n (length list1)))\n          (if (<= m n)\n              (if (= m n)\n                  (list-ref list1 m)\n                  (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n              (sum_range_list list1 n m))\n          (error \"Index out of range\"))\n      (error \"Not a list of integers\")))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (cond\n       [(= m 0)\n        (+ (first list1) (sum_range_list (rest list1) m (- n 1)))]\n       [else\n        (sum_range_list (rest list1) (- m 1) (- n 1))])]))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 1) (if (= n 1) (first list1) (+ (first list1) (sum_range_list (rest list1) m (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond ((or (null? list1) (&lt; m n)) 0)\n        ((&lt; m 0) (sum_range_list list1 0 n))\n        ((&gt; n (length list1)) (sum_range_list list1 m (length list1)))\n        (else (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))))\n</code>\nI am getting the following error:\n<code>sum_range_list: expects type &lt;number&gt; as 1st argument, given: '(1 2 3 4 5); other arguments were: 1 2\n</code>\nI am not sure what I am doing wrong.\n\n\nA:\n\nYou're passing a list as the first argument, but the function expects a number.\n<code>(sum_range_list '(1 2 3 4 5) 1 2)\n</code>\n",
    "  (if (and (integer? m) (integer? n))\n      (if (and (<= 0 m) (<= m n) (<= n (length list1)))\n          (if (= m n)\n              (list-ref list1 m)\n              (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n)))\n          (error \"Invalid index\"))\n      (error \"Invalid index\")))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [(> m 0) (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1)))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (cond\n    [(= m n) (list-ref list1 m)]\n    [else (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))]))\n",
    "  (if (or (null? list1)\n          (&lt; m 0)\n          (&gt; n (length list1)))\n      0\n      (if (= m n)\n          (list-ref list1 m)\n          (+ (list-ref list1 m)\n             (sum_range_list list1 (+ m 1) n)))))\n</code>\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n</code>\n",
    "  (if (>= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (length list1)))\n      0\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (add (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (add1 m) n))))\n",
    "  (if (or (= m n) (= m (add1 n)))\n      (list-ref list1 m)\n      (+ (list-ref list1 m)\n         (sum_range_list list1 (add1 m) n))))\n",
    "  (if (or (= m n) (&lt; m 0) (&gt; n (length list1)))\n      0\n      (+ (list-ref list1 m)\n         (sum_range_list list1 (+ m 1) n))))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(= m 0) (if (= n 0) 0 (+ (first list1) (sum_range_list (rest list1) (- m 1) (- n 1))))]\n    [else (sum_range_list (rest list1) (- m 1) (- n 1))]))\n",
    "  (if (or (&lt; m 0) (&gt; n (- (length list1) 1)))\n      0\n      (if (&lt; m n)\n          (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))\n          (list-ref list1 m))))\n",
    "  (if (= m n)\n      (list-ref list1 m)\n      (+ (list-ref list1 m) (sum_range_list list1 (+ m 1) n))))\n"
  ]
}