{
  "name": "mbpp_400_extract_freq",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to extract the number of unique tuples in the given list.\n(define (extract_freq test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_freq))\n    (check-equal? (candidate (list (list 3 4) (list 1 2) (list 4 3) (list 5 6))) 3)\n    (check-equal? (candidate (list (list 4 15) (list 2 3) (list 5 4) (list 6 7))) 4)\n    (check-equal? (candidate (list (list 5 16) (list 2 3) (list 6 5) (list 6 9))) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (length (remove-duplicates test_list)))\n",
    "  (letrec ([freq_list (map (lambda (x) (list x (count x test_list))) (remove-duplicates test_list))])\n    (map (lambda (x) (list (car x) (cadr x))) freq_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(member (first test_list) result) (extract_freq_helper (rest test_list) result)]\n      [else (extract_freq_helper (rest test_list) (cons (first test_list) result))]))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (map (lambda (x) (list (car x) (length x)))\n       (group-by (lambda (x y) (equal? (car x) (car y)))\n                 (sort test_list (lambda (x y) (string<? (car x) (car y)))))))\n",
    "  (letrec ([freq (make-hash)]\n           [extract-freq (lambda (test_list)\n                           (cond [(empty? test_list) (hash-ref freq 'end 0)]\n                                 [else (hash-update! freq (car test_list) add1 0)\n                                       (extract-freq (cdr test_list))]))])\n    (extract-freq test_list)\n    (hash-ref freq 'end 0)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (letrec ([freq (make-hash)])\n    (for ([i test_list])\n      (hash-set! freq i (add1 (hash-ref freq i 0))))\n    (hash-ref freq test_list 0)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (cons (cons (first test_list) (count (first test_list) test_list))\n           (extract_freq (remove (first test_list) test_list)))]))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (let ([freq_list (map (lambda (x) (list x (count x test_list))) test_list)])\n    (map (lambda (x) (list (car x) (car (cdr x))))\n         (remove-duplicates freq_list (lambda (x y) (equal? (car x) (car y)))))))\n",
    "  (cond\n    [(null? test_list) 0]\n    [else\n     (let* ([first_elem (car test_list)]\n            [rest_list (cdr test_list)]\n            [rest_freq (extract_freq rest_list)])\n       (if (member first_elem rest_list)\n           rest_freq\n           (+ rest_freq 1)))]))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(member (first test_list) acc) (extract_freq_iter (rest test_list) acc)]\n      [else (extract_freq_iter (rest test_list) (cons (first test_list) acc))]))\n  (extract_freq_iter test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list freq_list)\n    (cond\n      [(null? test_list) freq_list]\n      [(member (car test_list) freq_list) (extract_freq_helper (cdr test_list) freq_list)]\n      [else (extract_freq_helper (cdr test_list) (append freq_list (list (car test_list))))]))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (letrec ([freq (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! freq tuple add1 0))\n    (hash-map freq (lambda (k v) (list k v)))))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let* ([first_tuple (first test_list)]\n            [rest_tuples (rest test_list)]\n            [rest_freq (extract_freq rest_tuples)])\n       (cond\n         [(member first_tuple rest_tuples) rest_freq]\n         [else (+ 1 rest_freq)]))]))\n",
    "  (letrec ([freq (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! freq tuple add1 0))\n    freq))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(member (first test_list) result) (extract_freq_helper (rest test_list) result)]\n      [else (extract_freq_helper (rest test_list) (cons (first test_list) result))]))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else (cons (cons (first test_list) (count (first test_list) test_list)) (extract_freq (rest test_list)))]))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (map (lambda (x) (list x (length (filter (lambda (y) (equal? x y)) test_list))))\n       (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list)\n    (if (null? test_list)\n        '()\n        (cons (cons (car test_list) (count (car test_list) test_list))\n              (extract_freq_helper (remove (car test_list) test_list)))))\n  (extract_freq_helper test_list))\n",
    "  (cond\n    [(null? test_list) 0]\n    [else (length (remove-duplicates test_list))]))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list freq_list)\n    (cond ((null? test_list) freq_list)\n          ((member (car test_list) freq_list)\n           (extract_freq_helper (cdr test_list) freq_list))\n          (else (extract_freq_helper (cdr test_list) (cons (car test_list) freq_list)))))\n  (extract_freq_helper test_list '()))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(member? (first test_list) (rest test_list)) (extract_freq (rest test_list))]\n    [else (cons (first test_list) (extract_freq (rest test_list)))]))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (cons (list (first test_list) (count (first test_list) test_list))\n           (extract_freq (remove (first test_list) test_list)))]))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(member (first test_list) result) (extract_freq_helper (rest test_list) result)]\n      [else (extract_freq_helper (rest test_list) (cons (first test_list) result))]))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (letrec ([freq (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! freq tuple add1 0))\n    (hash-map freq (lambda (k v) (list k v)))))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else (length (filter (lambda (x) (member x test_list)) test_list))]))\n",
    "  (define (extract_freq_iter test_list freq_list)\n    (if (null? test_list)\n        freq_list\n        (extract_freq_iter (cdr test_list)\n                           (if (member (car test_list) freq_list)\n                               freq_list\n                               (cons (car test_list) freq_list)))))\n  (length (extract_freq_iter test_list '())))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (cons (cons (first test_list) (count (first test_list) test_list))\n           (extract_freq (remove (first test_list) test_list)))]))\n",
    "  (letrec ([unique-tuples (lambda (lst)\n                            (cond [(empty? lst) empty]\n                                  [(empty? (cdr lst)) lst]\n                                  [(equal? (car lst) (cadr lst)) (unique-tuples (cdr lst))]\n                                  [else (cons (car lst) (unique-tuples (cdr lst)))]))]\n           [freq (lambda (lst)\n                   (cond [(empty? lst) empty]\n                         [(empty? (cdr lst)) (cons (list (car lst) 1) empty)]\n                         [(equal? (car lst) (caadr lst)) (cons (list (car lst) (+ 1 (cadadr lst))) (freq (cdr lst)))]\n                         [else (cons (list (car lst) 1) (freq (cdr lst)))]))])\n    (freq (unique-tuples test_list))))\n",
    "  (define (extract_freq_helper test_list result)\n    (cond ((null? test_list) result)\n          ((member (car test_list) result)\n           (extract_freq_helper (cdr test_list) result))\n          (else (extract_freq_helper (cdr test_list)\n                                     (cons (car test_list) result)))))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (map (lambda (x) (list x (length (filter (lambda (y) (equal? x y)) test_list))))\n       (remove-duplicates test_list)))\n",
    "  (let ([freq_list (map (lambda (x) (list x (count x test_list))) test_list)])\n    (map (lambda (x) (list (car x) (length (filter (lambda (y) (equal? (car x) (car y))) freq_list)))) freq_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (letrec ([freq (for/hash ([tuple (in-list test_list)])\n                    (hash-ref (hash-ref freq tuple 0) + 1))])\n    freq))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (define (extract_freq_helper test_list result_list)\n       (cond\n         [(empty? test_list) result_list]\n         [else\n          (define (is_in_list? test_list test_tuple)\n            (cond\n              [(empty? test_list) #f]\n              [(equal? (car test_list) test_tuple) #t]\n              [else (is_in_list? (cdr test_list) test_tuple)]))\n          (if (is_in_list? result_list (car test_list))\n              (extract_freq_helper (cdr test_list) result_list)\n              (extract_freq_helper (cdr test_list) (cons (car test_list) result_list)))]))\n     (length (extract_freq_helper test_list '()))]))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list result)\n    (if (null? test_list)\n        result\n        (extract_freq_helper (cdr test_list)\n                             (cons (cons (car test_list)\n                                         (count (car test_list) test_list))\n                                   result))))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (extract_freq_helper (cdr test_list)\n                             (if (member (car test_list) acc)\n                                 acc\n                                 (cons (car test_list) acc)))))\n  (length (extract_freq_helper test_list '())))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else\n       (extract_freq_helper (cdr test_list)\n                            (cons (cons (car test_list)\n                                        (count (car test_list) test_list))\n                                  acc))]))\n  (extract_freq_helper test_list '()))\n",
    "  (letrec ([freq (for/fold ([freq-list '()]) ([tuple test_list])\n                       (if (member tuple freq-list)\n                           freq-list\n                           (cons tuple freq-list)))]\n           [freq-list (for/list ([tuple freq])\n                                (list tuple (length (filter (lambda (x) (equal? tuple x)) test_list))))])\n    freq-list))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (map (lambda (x) (list x (length (filter (lambda (y) (equal? x y)) test_list))))\n       (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (map (lambda (x) (list (car x) (length x)))\n       (group-by equal? test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (for/fold ([freq_list '()]) ([tuple test_list])\n    (if (member tuple freq_list)\n        freq_list\n        (cons tuple freq_list))))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (define (extract_freq_helper test_list)\n       (cond\n         [(empty? test_list) 0]\n         [else\n          (define (extract_freq_helper2 test_list)\n            (cond\n              [(empty? test_list) 0]\n              [else\n               (define (extract_freq_helper3 test_list)\n                 (cond\n                   [(empty? test_list) 0]\n                   [else\n                    (define (extract_freq_helper4 test_list)\n                      (cond\n                        [(empty? test_list) 0]\n                        [else\n                         (define (extract_freq_helper5 test_list)\n                           (cond\n                             [(empty? test_list) 0]\n                             [else\n                              (define (extract_freq_helper6 test_list)\n                                (cond\n                                  [(empty? test_list) 0]\n                                  [else\n                                   (define (extract_freq_helper7 test_list)\n                                     (cond\n                                       [(empty? test_list) 0]\n                                       [else\n                                        (define (extract_freq_helper8 test_list)\n                                          (cond\n                                            [(empty? test_list) 0]\n                                            [else\n                                             (define (extract_freq_helper9 test_list)\n                                               (cond\n                                                 [(empty? test_list) 0]\n                                                 [else\n                                                  (define (extract_freq_helper10 test_list)\n                                                    (cond\n                                                      [(empty? test_list) 0]\n                                                      [else\n                                                       (define (extract_freq_helper11 test_list)\n                                                         (cond\n                                                           [(empty? test_list) 0]\n                                                           [else\n                                                            (define (extract_freq_helper12 test_list)\n                                                              (cond\n                                                                [(empty? test_list) 0]\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(member (first test_list) acc) (extract_freq_iter (rest test_list) acc)]\n      [else (extract_freq_iter (rest test_list) (cons (first test_list) acc))]))\n  (extract_freq_iter test_list '()))\n",
    "  (define (extract_freq_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(member (first test_list) result) (extract_freq_helper (rest test_list) result)]\n      [else (extract_freq_helper (rest test_list) (cons (first test_list) result))]))\n  (extract_freq_helper test_list '()))\n",
    "  (letrec ([freq (make-hash)])\n    (for ([i test_list])\n      (hash-set! freq i (add1 (hash-ref freq i 0))))\n    (hash-ref freq test_list 0)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (helper test_list)\n    (if (null? test_list)\n        '()\n        (cons (list (car test_list) (count (car test_list) test_list))\n              (helper (cdr test_list)))))\n  (remove-duplicates (helper test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else (cons (cons (first test_list) (count (first test_list) test_list))\n                (extract_freq (remove (first test_list) test_list)))]))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract-freq-helper test_list acc)\n    (if (null? test_list)\n        acc\n        (extract-freq-helper (cdr test_list) (cons (cons (car test_list) (count (car test_list) test_list)) acc))))\n  (extract-freq-helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list freq_list)\n    (cond ((null? test_list) freq_list)\n          ((member (car test_list) freq_list)\n           (extract_freq_helper (cdr test_list) freq_list))\n          (else (extract_freq_helper (cdr test_list)\n                                     (cons (car test_list) freq_list)))))\n  (extract_freq_helper test_list '()))\n",
    "  (for/fold ([result '()]) ([i test_list])\n    (if (member i result)\n        result\n        (cons i result))))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list freq_list)\n    (cond\n      [(empty? test_list) freq_list]\n      [(member? (first test_list) freq_list) (extract_freq_helper (rest test_list) freq_list)]\n      [else (extract_freq_helper (rest test_list) (cons (first test_list) freq_list))]))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (letrec ([freq (make-hash)])\n    (for ([i test_list])\n      (hash-update! freq i add1 0))\n    (hash-map freq (lambda (k v) (list k v)))))\n",
    "  (map (lambda (x) (list (car x) (length x)))\n       (group-by equal? test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (cond\n       [(member (first test_list) (rest test_list))\n        (extract_freq (rest test_list))]\n       [else\n        (+ 1 (extract_freq (rest test_list)))])]))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(member (first test_list) result) (extract_freq_helper (rest test_list) result)]\n      [else (extract_freq_helper (rest test_list) (cons (first test_list) result))]))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list result)\n    (if (null? test_list)\n        result\n        (extract_freq_helper (cdr test_list) (cons (cons (car test_list) (count (car test_list) test_list)) result))))\n  (extract_freq_helper test_list '()))\n",
    "  (letrec ([freq_list (map (lambda (x) (cons x (count x test_list))) test_list)]\n           [unique_freq_list (remove-duplicates freq_list)])\n    (map (lambda (x) (cons (car x) (cdr x))) unique_freq_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (let ([freq (make-hash)])\n    (for ([i test_list])\n      (hash-update! freq i add1 0))\n    (hash-ref freq test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (map (lambda (x) (list (car x) (length x)))\n       (group-by (lambda (x) (car x))\n                 (sort test_list (lambda (x y) (string<? (car x) (car y)))))))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(member (first test_list) acc) (extract_freq_helper (rest test_list) acc)]\n      [else (extract_freq_helper (rest test_list) (cons (first test_list) acc))]))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (letrec ([freq (make-hash)]\n           [extract-freq (lambda (test_list)\n                           (cond [(empty? test_list) empty]\n                                 [(hash-ref freq (car test_list) #f)\n                                  (extract-freq (cdr test_list))]\n                                 [else (begin\n                                         (hash-set! freq (car test_list) 1)\n                                         (cons (car test_list) (extract-freq (cdr test_list))))]))])\n    (extract-freq test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (map (lambda (x) (list x (length (filter (lambda (y) (equal? x y)) test_list))))\n       (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n"
  ]
}