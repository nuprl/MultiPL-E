{
  "name": "mbpp_400_extract_freq",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to extract the number of unique tuples in the given list.\n(define (extract_freq test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_freq))\n    (check-equal? (candidate (list (list 3 4) (list 1 2) (list 4 3) (list 5 6))) 3)\n    (check-equal? (candidate (list (list 4 15) (list 2 3) (list 5 4) (list 6 7))) 4)\n    (check-equal? (candidate (list (list 5 16) (list 2 3) (list 6 5) (list 6 9))) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (length (remove-duplicates test_list)))\n",
    "  (letrec ([freq_list (map (lambda (x) (list x (count x test_list))) (remove-duplicates test_list))])\n    (map (lambda (x) (list (car x) (cadr x))) freq_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (define (extract_freq_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(member (first test_list) result) (extract_freq_helper (rest test_list) result)]\n      [else (extract_freq_helper (rest test_list) (cons (first test_list) result))]))\n  (extract_freq_helper test_list '()))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (map (lambda (x) (list (car x) (length x)))\n       (group-by (lambda (x y) (equal? (car x) (car y)))\n                 (sort test_list (lambda (x y) (string<? (car x) (car y)))))))\n",
    "  (letrec ([freq (make-hash)]\n           [extract-freq (lambda (test_list)\n                           (cond [(empty? test_list) (hash-ref freq 'end 0)]\n                                 [else (hash-update! freq (car test_list) add1 0)\n                                       (extract-freq (cdr test_list))]))])\n    (extract-freq test_list)\n    (hash-ref freq 'end 0)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (letrec ([freq (make-hash)])\n    (for ([i test_list])\n      (hash-set! freq i (add1 (hash-ref freq i 0))))\n    (hash-ref freq test_list 0)))\n",
    "  (length (remove-duplicates test_list)))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [else\n     (cons (cons (first test_list) (count (first test_list) test_list))\n           (extract_freq (remove (first test_list) test_list)))]))\n",
    "  (length (remove-duplicates test_list)))\n"
  ]
}