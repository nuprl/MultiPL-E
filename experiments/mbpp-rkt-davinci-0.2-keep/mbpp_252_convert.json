{
  "name": "mbpp_252_convert",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to convert complex numbers to polar coordinates.\n(define (convert numbers)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate convert))\n    (check-equal? (candidate 1) (list 1.0 0.0))\n    (check-equal? (candidate 4) (list 4.0 0.0))\n    (check-equal? (candidate 5) (list 5.0 0.0))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (cons r (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (real-part number))\n    (define (get-imag number)\n      (imag-part number))\n    (define (get-radius number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imag number) 2))))\n    (define (get-angle number)\n      (atan (get-imag number) (get-real number)))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (expt (get-real-part number) 2)\n               (expt (get-imaginary-part number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (list (get-magnitude number)\n          (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude z)\n      (sqrt (+ (expt (real-part z) 2)\n               (expt (imag-part z) 2))))\n    (define (phase z)\n      (atan (imag-part z) (real-part z)))\n    (values (magnitude number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2) (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (cons (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (square (get-real number))\n               (square (get-imaginary number)))))\n    (define (get-theta number)\n      (atan (/ (get-imaginary number)\n               (get-real number))))\n    (list (get-r number) (get-theta number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-phase number)\n      (atan (/ (get-imaginary-part number)\n               (get-real-part number))))\n    (cons (get-magnitude number)\n          (get-phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-to-cartesian x y)\n      (cons (* x (cos y)) (* x (sin y))))\n    (define (cartesian-to-polar x y)\n      (cons (sqrt (+ (* x x) (* y y))) (atan y x)))\n    (define (magnitude x)\n      (sqrt (+ (* (real-part x) (real-part x))\n               (* (imag-part x) (imag-part x)))))\n    (define (angle x)\n      (atan (imag-part x) (real-part x)))\n    (define (conjugate x)\n      (make-rectangular (real-part x) (- (imag-part x))))\n    (define (magnitude-squared x)\n      (+ (* (real-part x) (real-part x))\n         (* (imag-part x) (imag-part x))))\n    (define (angle-in-degrees x)\n      (* (angle x) 180.0 (/ pi)))\n    (define (angle-in-radians x)\n      (angle x))\n    (define (make-from-real-imag x y)\n      (make-rectangular x y))\n    (define (make-from-mag-ang x y)\n      (make-rectangular (* x (cos y)) (* x (sin y))))\n    (define (real-part z)\n      (car z))\n    (define (imag-part z)\n      (cdr z))\n    (define (make-rectangular x y)\n      (cons x y))\n    (define (make-polar r a)\n      (cons r a))\n    (define (rectangular? z)\n      (and (number? (real-part z))\n           (number? (imag-part z))))\n    (define (polar? z)\n      (and (number? (magnitude z))\n           (number? (angle z))))\n    (define (exact? z)\n      (and (exact? (real-part z))\n           (exact? (imag-part z))))\n    (define (inexact? z)\n      (",
    "  (define (convert-one number)\n    (define (polar-coordinates number)\n      (define (magnitude number)\n        (sqrt (+ (expt (real-part number) 2)\n                 (expt (imag-part number) 2))))\n      (define (phase number)\n        (atan (imag-part number) (real-part number)))\n      (list (magnitude number) (phase number)))\n    (polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imag-part number)))))\n    (define (angle number)\n      (atan (/ (imag-part number) (real-part number))))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-coordinates number)\n      (define (magnitude number)\n        (sqrt (+ (square (real-part number))\n                 (square (imag-part number)))))\n      (define (angle number)\n        (atan (imag-part number) (real-part number)))\n      (list (magnitude number) (angle number)))\n    (polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-theta number)\n      (atan (get-imaginary-part number) (get-real-part number)))\n    (list (get-r number) (get-theta number)))\n  (map convert-one numbers))\n",
    "  (for/list ([n numbers])\n    (let* ([real (real-part n)]\n           [imag (imag-part n)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (cons r (atan imag real)))))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-radius number)\n      (sqrt (+ (square (get-real number))\n               (square (get-imaginary number)))))\n    (define (get-angle number)\n      (atan (get-imaginary number) (get-real number)))\n    (cons (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))]\n           [theta (atan (imag/real number))])\n      (list r theta)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x)\n      (define (good-enough? guess)\n        (< (abs (- (square guess) x)) 0.001))\n      (define (improve guess)\n        (/ (+ guess (/ x guess)) 2))\n      (define (sqrt-iter guess)\n        (if (good-enough? guess)\n            guess\n            (sqrt-iter (improve guess))))\n      (sqrt-iter 1.0))\n    (define (magnitude z)\n      (sqrt (+ (square (real-part z))\n               (square (imag-part z)))))\n    (define (angle z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let ([real (real-part number)]\n          [imag (imag-part number)])\n      (list (sqrt (+ (* real real) (* imag imag)))\n            (atan (real-part (/ imag real))))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-to-cartesian x y)\n      (cons (* x (cos y)) (* x (sin y))))\n    (define (cartesian-to-polar x y)\n      (cons (sqrt (+ (sqr x) (sqr y)))\n            (atan y x)))\n    (define (sqr x)\n      (* x x))\n    (define (atan y x)\n      (cond\n        [(> x 0) (atan y (/ x y))]\n        [(< x 0) (+ (atan y (/ x y)) (/ pi 2))]\n        [(= x 0) (/ pi 2)]))\n    (cartesian-to-polar (car number) (cdr number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-angle number)\n      (atan (/ (get-imaginary-part number)\n               (get-real-part number))))\n    (define (get-polar-coordinates number)\n      (cons (get-magnitude number)\n            (get-angle number)))\n    (get-polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (square-root x) (sqrt x))\n    (define (abs x) (if (&lt; x 0) (- x) x))\n    (define (phase number)\n      (define (phase-one number)\n        (define (phase-one-one number)\n          (cond\n            [(= number 0) (/ pi 2)]\n            [(= number (/ pi 2)) pi]\n            [(= number pi) (* 3 (/ pi 2))]\n            [(= number (* 3 (/ pi 2))) (* 2 pi)]))\n        (cond\n          [(= number 0) 0]\n          [(= number (/ pi 2)) (/ pi 2)]\n          [(= number pi) pi]\n          [(= number (* 3 (/ pi 2))) (* 3 (/ pi 2))]\n          [else (phase-one-one (phase-one (/ number (/ pi 2))))]))\n      (cond\n        [(= number 0) 0]\n        [(= number (/ pi 2)) (/ pi 2)]\n        [(= number pi) pi]\n        [(= number (* 3 (/ pi 2))) (* 3 (/ pi 2))]\n        [else (phase-one (/ number (/ pi 2)))]))\n    (define (r number)\n      (define (r-one number)\n        (define (r-one-one number)\n          (cond\n            [(= number 0) (/ pi 2)]\n            [(= number (/ pi 2)) pi]\n            [(= number pi) (* 3 (/ pi 2))]\n            [(= number (* 3 (/ pi 2))) (* 2 pi)]))\n        (cond\n          [(= number 0) 0]\n          [(= number (/ pi 2)) (/ pi 2)]\n          [(= number pi) pi]\n          [(= number (* 3 (/ pi 2))) (* 3 (/ pi 2))]\n          [else (r-one-one (r-one (/ number (/ pi 2))))]))\n      (cond\n        [(= number 0) 0]\n        [(= number (/ pi 2)) (/ pi 2)]\n        [(= number pi) pi]\n        [(= number (* 3 (/ pi 2))) (* 3 (/ pi 2))]\n        [else (r-one (/",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imag-part number)))))\n    (define (phase number)\n      (atan (/ (imag-part number) (real-part number))))\n    (list (magnitude number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-coordinates number)\n      (define (magnitude number)\n        (sqrt (+ (expt (real-part number) 2)\n                 (expt (imag-part number) 2))))\n      (define (angle number)\n        (atan (imag-part number) (real-part number)))\n      (list (magnitude number) (angle number)))\n    (polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (real-part number)\n      (car number))\n    (define (imag-part number)\n      (cdr number))\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude z)\n      (sqrt (+ (expt (real-part z) 2)\n               (expt (imag-part z) 2))))\n    (define (phase z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (let ([real (car numbers)]\n        [imag (cadr numbers)])\n    (list (sqrt (+ (* real real) (* imag imag)))\n          (atan real imag))))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (define (polar-to-cartesian r theta) (make-rectangular (* r (cos theta)) (* r (sin theta))))\n    (polar-to-cartesian (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let ([r (sqrt (+ (square (real-part number))\n                      (square (imag-part number))))]\n          [theta (atan (imag-part number) (real-part number))])\n      (list r theta)))\n  (map convert-one numbers))\n",
    "  (map (lambda (number)\n         (define (polar-coordinates number)\n           (define (magnitude number)\n             (sqrt (+ (square (real-part number))\n                      (square (imag-part number)))))\n           (define (phase number)\n             (atan (imag-part number) (real-part number)))\n           (list (magnitude number) (phase number)))\n         (polar-coordinates number))\n       numbers))\n",
    "  (define (convert-one number)\n    (define (polar-from-cartesian x y)\n      (define (square x) (* x x))\n      (define (sqrt x) (expt x 0.5))\n      (define (atan x) (atan x))\n      (define (atan2 x y) (atan (/ x y)))\n      (define (hypot x y) (sqrt (+ (square x) (square y))))\n      (values (hypot x y) (atan2 y x)))\n      (polar-from-cartesian (real-part number) (imag-part number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (phase number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (square-root x) (sqrt x))\n    (define (magnitude z) (square-root (+ (square (real-part z)) (square (imag-part z)))))\n    (define (angle z) (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imag number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (square (get-real number))\n               (square (get-imag number)))))\n    (define (get-theta number)\n      (atan (get-imag number) (get-real number)))\n    (cons (get-r number) (get-theta number)))\n  (map convert-one numbers))\n",
    "  (map (lambda (x) (polar-from-complex x)) numbers))\n",
    "  (define (convert-helper number)\n    (define (get-polar-coordinates number)\n      (define (get-phase number)\n        (atan (/ (imag-part number) (real-part number))))\n      (define (get-radius number)\n        (sqrt (+ (expt (real-part number) 2)\n                 (expt (imag-part number) 2))))\n      (list (get-radius number) (get-phase number)))\n    (get-polar-coordinates number))\n  (map convert-helper numbers))\n",
    "  (define (convert-one number)\n    (define (convert-one-helper number)\n      (define (convert-one-helper-helper number)\n        (define (convert-one-helper-helper-helper number)\n          (define (convert-one-helper-helper-helper-helper number)\n            (define (convert-one-helper-helper-helper-helper-helper number)\n              (define (convert-one-helper-helper-helper-helper-helper-helper number)\n                (define (convert-one-helper-helper-helper-helper-helper-helper-helper number)\n                  (define (convert-one-helper-helper-helper-helper-helper-helper-helper-helper number)\n                    (define (convert-one-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                      (define (convert-one-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                        (define (convert-one-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                          (define (convert-one-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                            (define (convert-one-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                              (define (convert-one-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                                (define (convert-one-helper-helper-helper-helper-helper-helper-",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (to-polar x y)\n      (define (to-radians x)\n        (* x (/ pi 180)))\n      (define (to-degrees x)\n        (* x (/ 180 pi)))\n      (define (square x)\n        (* x x))\n      (define (sqrt x)\n        (expt x 0.5))\n      (define (abs x)\n        (if (&lt; x 0)\n            (- x)\n            x))\n      (define (phase x y)\n        (to-degrees (atan y x)))\n      (define (modulus x y)\n        (sqrt (+ (square x) (square y))))\n      (list (modulus x y) (phase x y)))\n    (to-polar (real-part number) (imag-part number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-coordinates number)\n      (define (magnitude number)\n        (sqrt (+ (expt (real-part number) 2)\n                 (expt (imag-part number) 2))))\n      (define (phase number)\n        (atan (/ (imag-part number) (real-part number))))\n      (list (magnitude number) (phase number)))\n    (polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (real-part number))\n    (define (get-imaginary-part number)\n      (imag-part number))\n    (define (get-angle number)\n      (angle number))\n    (define (get-magnitude number)\n      (magnitude number))\n    (list (get-magnitude number) (get-angle number)))\n  (if (null? numbers)\n      '()\n      (cons (convert-one (car numbers)) (convert (cdr numbers)))))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imaginary number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary number) (get-real number)))\n    (list (get-magnitude number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (let ([x (car numbers)]\n        [y (cadr numbers)])\n    (list (sqrt (+ (sqr x) (sqr y)))\n          (atan y x))))\n",
    "  (define (convert-helper number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (cons r (atan imag real))))\n  (map convert-helper numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))]\n           [theta (atan (imag number) (real number))])\n      (list r theta)))\n  (map convert-one numbers))\n",
    "  (define (convert-number number)\n    (define (get-angle number)\n      (define (get-angle-helper number)\n        (if (negative? number)\n            (get-angle-helper (- number (* 2 pi)))\n            number))\n      (get-angle-helper (atan (imag-part number) (real-part number))))\n    (define (get-radius number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (list (get-radius number) (get-angle number)))\n  (map convert-number numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imag-part number)))))\n    (define (phase number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (values (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-helper number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (cons r (atan imag real))))\n  (map convert-helper numbers))\n",
    "  (let ([x (car numbers)]\n        [y (cadr numbers)])\n    (list (sqrt (+ (sqr x) (sqr y)))\n          (atan y x))))\n",
    "  (let ([real (car numbers)]\n        [imag (cadr numbers)])\n    (list (sqrt (+ (* real real) (* imag imag)))\n          (atan real imag))))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imag number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (expt (get-real number) 2) (expt (get-imag number) 2))))\n    (define (get-theta number)\n      (atan (get-imag number) (get-real number)))\n    (cons (get-r number) (get-theta number)))\n  (map convert-one numbers))\n",
    "  (define (to-polar number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map to-polar numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (expt (get-real-part number) 2)\n               (expt (get-imaginary-part number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (list (get-magnitude number)\n          (get-angle number)))\n  (map convert-one numbers))\n",
    "  (let ([x (car numbers)]\n        [y (cadr numbers)])\n    (list (sqrt (+ (* x x) (* y y)))\n          (atan y x))))\n",
    "  (define (convert-one number)\n    (define (real-part z) (car z))\n    (define (imag-part z) (cdr z))\n    (define (magnitude z)\n      (sqrt (+ (square (real-part z))\n               (square (imag-part z)))))\n    (define (angle z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude z)\n      (sqrt (+ (expt (real-part z) 2) (expt (imag-part z) 2))))\n    (define (angle z)\n      (atan (/ (imag-part z) (real-part z))))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-coordinates number)\n      (define (magnitude number)\n        (sqrt (+ (expt (real-part number) 2)\n                 (expt (imag-part number) 2))))\n      (define (angle number)\n        (atan (imag-part number) (real-part number)))\n      (list (magnitude number) (angle number)))\n    (polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (expt (get-real-part number) 2)\n               (expt (get-imaginary-part number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary-part number) (get-real-part number)))\n    (list (get-magnitude number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (sqr x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (sqr (real-part number)) (sqr (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (map (lambda (x) (polar x)) numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (list r (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (real-part number)\n      (car number))\n    (define (imaginary-part number)\n      (cdr number))\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imaginary-part number)))))\n    (define (angle number)\n      (atan (imaginary-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-coordinates number)\n      (define (polar-coordinates-helper number)\n        (define (distance number)\n          (sqrt (+ (expt (real-part number) 2)\n                   (expt (imag-part number) 2))))\n        (define (angle number)\n          (atan (imag-part number) (real-part number)))\n        (list (distance number) (angle number)))\n      (define (polar-coordinates-helper-2 number)\n        (define (distance number)\n          (sqrt (+ (expt (real-part number) 2)\n                   (expt (imag-part number) 2))))\n        (define (angle number)\n          (atan (imag-part number) (real-part number)))\n        (list (distance number) (angle number)))\n      (if (complex? number)\n          (polar-coordinates-helper number)\n          (polar-coordinates-helper-2 number)))\n    (polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (expt (get-real-part number) 2)\n               (expt (get-imaginary-part number) 2))))\n    (define (get-phase number)\n      (atan (get-imaginary-part number) (get-real-part number)))\n    (list (get-magnitude number) (get-phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (inner-convert-one number)\n      (define (inner-inner-convert-one number)\n        (define (inner-inner-inner-convert-one number)\n          (define (inner-inner-inner-inner-convert-one number)\n            (define (inner-inner-inner-inner-inner-convert-one number)\n              (define (inner-inner-inner-inner-inner-inner-convert-one number)\n                (define (inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                  (define (inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                    (define (inner-inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                      (define (inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                        (define (inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                          (define (inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                            (define (inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                              (define (inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                                (define (inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                                  (define (inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                                    (define (inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-convert-one number)\n                ",
    "  (let ([real (car numbers)]\n        [imag (cadr numbers)])\n    (list (sqrt (+ (sqr real) (sqr imag)))\n          (atan real imag))))\n",
    "  (define (convert-one number)\n    (define (convert-one-aux number)\n      (let* ([real (real-part number)]\n             [imag (imag-part number)]\n             [r (sqrt (+ (* real real) (* imag imag)))])\n        (list r (atan real imag))))\n    (if (complex? number)\n        (convert-one-aux number)\n        (error \"Not a complex number\")))\n  (if (list? numbers)\n      (map convert-one numbers)\n      (convert-one numbers)))\n",
    "  (define (convert-one number)\n    (let ((real (real-part number))\n          (imag (imag-part number)))\n      (list (sqrt (+ (* real real) (* imag imag)))\n            (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-angle number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (list (get-magnitude number)\n          (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (get-polar-coordinates number)\n    (define (get-angle number)\n      (define (get-angle-in-degrees number)\n        (define (get-angle-in-radians number)\n          (atan (/ (imag-part number) (real-part number))))\n        (* (get-angle-in-radians number) 180 (/ pi)))\n      (if (&lt; (get-angle-in-degrees number) 0)\n          (+ (get-angle-in-degrees number) 360)\n          (get-angle-in-degrees number)))\n    (define (get-radius number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (list (get-radius number) (get-angle number)))\n  (map get-polar-coordinates numbers))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x)\n      (define (good-enough? guess)\n        (< (abs (- (square guess) x)) 0.001))\n      (define (improve guess)\n        (/ (+ guess (/ x guess)) 2))\n      (define (sqrt-iter guess)\n        (if (good-enough? guess)\n            guess\n            (sqrt-iter (improve guess))))\n      (sqrt-iter 1.0))\n    (define (magnitude z)\n      (sqrt (+ (square (real-part z))\n               (square (imag-part z)))))\n    (define (angle z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (if (null? numbers)\n      '()\n      (cons (convert-one (car numbers))\n            (convert (cdr numbers)))))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-angle number)\n      (atan (get-imaginary-part number) (get-real-part number)))\n    (define (get-radius number)\n      (sqrt (+ (sqr (get-real-part number))\n               (sqr (get-imaginary-part number)))))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imag number)\n      (cdr number))\n    (define (get-radius number)\n      (sqrt (+ (square (get-real number))\n               (square (get-imag number)))))\n    (define (get-angle number)\n      (atan (get-imag number) (get-real number)))\n    (cons (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-number number)\n    (define (get-angle number)\n      (define (get-angle-helper number)\n        (if (negative? number)\n            (- number)\n            number))\n      (define (get-angle-helper2 number)\n        (if (negative? number)\n            (* -1 number)\n            number))\n      (define (get-angle-helper3 number)\n        (if (negative? number)\n            (* -1 number)\n            number))\n      (define (get-angle-helper4 number)\n        (if (negative? number)\n            (- number)\n            number))\n      (cond ((and (positive? (real-part number)) (positive? (imag-part number)))\n             (get-angle-helper (atan (imag-part number) (real-part number))))\n            ((and (negative? (real-part number)) (positive? (imag-part number)))\n             (get-angle-helper2 (atan (imag-part number) (real-part number))))\n            ((and (negative? (real-part number)) (negative? (imag-part number)))\n             (get-angle-helper3 (atan (imag-part number) (real-part number))))\n            ((and (positive? (real-part number)) (negative? (imag-part number)))\n             (get-angle-helper4 (atan (imag-part number) (real-part number))))))\n    (define (get-radius number)\n      (sqrt (+ (sqr (real-part number)) (sqr (imag-part number)))))\n    (list (get-radius number) (get-angle number)))\n  (map convert-number numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude n)\n      (sqrt (+ (* (real-part n) (real-part n))\n               (* (imag-part n) (imag-part n)))))\n    (define (angle n)\n      (atan (imag-part n) (real-part n)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let ([real (real-part number)]\n          [imag (imag-part number)])\n      (list (sqrt (+ (* real real) (* imag imag)))\n            (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imag-part number)))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-coordinates number)\n      (define (magnitude number)\n        (sqrt (+ (expt (real-part number) 2)\n                 (expt (imag-part number) 2))))\n      (define (phase number)\n        (atan (imag-part number) (real-part number)))\n      (list (magnitude number) (phase number)))\n    (polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (real-part z) (car z))\n    (define (imag-part z) (cdr z))\n    (define (magnitude z)\n      (sqrt (+ (square (real-part z))\n               (square (imag-part z)))))\n    (define (angle z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (let ((real (car numbers))\n        (imag (cadr numbers)))\n    (list (sqrt (+ (* real real) (* imag imag)))\n          (atan real imag))))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imaginary number) 2))))\n    (define (get-phi number)\n      (atan (get-imaginary number) (get-real number)))\n    (list (get-r number) (get-phi number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (distance x y)\n      (sqrt (+ (square x) (square y))))\n    (define (angle x y)\n      (atan (/ y x)))\n    (values (distance (real-part number) (imag-part number))\n            (angle (real-part number) (imag-part number))))\n  (map convert-one numbers))\n",
    "  (define (convert-complex number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-complex numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (list r (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-modulus number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-phase number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (list (get-modulus number)\n          (get-phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (map (lambda (x) (polar x)) numbers))\n",
    "  (define (convert-one number)\n    (define (real-part z)\n      (car z))\n    (define (imag-part z)\n      (cdr z))\n    (define (magnitude z)\n      (sqrt (+ (square (real-part z))\n               (square (imag-part z)))))\n    (define (angle z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (real-part z) (car z))\n    (define (imag-part z) (cdr z))\n    (define (magnitude z)\n      (sqrt (+ (square (real-part z))\n               (square (imag-part z)))))\n    (define (angle z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (let ([real (car numbers)]\n        [imag (cadr numbers)])\n    (list (sqrt (+ (sqr real) (sqr imag)))\n          (atan real imag))))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let ([real (real-part number)]\n          [imag (imag-part number)])\n      (list (sqrt (+ (square real) (square imag)))\n            (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (real-part number) (car number))\n    (define (imag-part number) (cdr number))\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imag-part number)))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-radius number)\n      (sqrt (+ (sqr (get-real number))\n               (sqr (get-imaginary number)))))\n    (define (get-angle number)\n      (atan (get-imaginary number)\n            (get-real number)))\n    (list (get-radius number)\n          (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let ([real (real-part number)]\n          [imag (imag-part number)])\n      (list (sqrt (+ (* real real) (* imag imag)))\n            (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))]\n           [theta (atan (imag number) (real number))])\n      (list r theta)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-polar-radius number)\n      (sqrt (+ (expt (get-real-part number) 2)\n               (expt (get-imaginary-part number) 2))))\n    (define (get-polar-angle number)\n      (atan (get-imaginary-part number) (get-real-part number)))\n    (list (get-polar-radius number) (get-polar-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x)\n      (define (good-enough? guess)\n        (< (abs (- (square guess) x)) 0.001))\n      (define (improve guess)\n        (/ (+ guess (/ x guess)) 2))\n      (define (sqrt-iter guess)\n        (if (good-enough? guess)\n            guess\n            (sqrt-iter (improve guess))))\n      (sqrt-iter 1.0))\n    (define (magnitude z)\n      (sqrt (+ (square (real-part z))\n               (square (imag-part z)))))\n    (define (angle z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude z)\n      (sqrt (+ (square (real-part z))\n               (square (imag-part z)))))\n    (define (angle z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-r)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (get-theta)\n      (atan (imag-part number) (real-part number)))\n    (list (get-r) (get-theta)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-helper number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (expt real 2) (expt imag 2)))]\n           [theta (atan (imag number) (real number))])\n      (list r theta)))\n  (map convert-helper numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x)\n      (define (good-enough? guess)\n        (< (abs (- (square guess) x)) 0.001))\n      (define (improve guess)\n        (/ (+ guess (/ x guess)) 2))\n      (define (sqrt-iter guess)\n        (if (good-enough? guess)\n            guess\n            (sqrt-iter (improve guess))))\n      (sqrt-iter 1.0))\n    (define (abs x)\n      (if (< x 0)\n          (- x)\n          x))\n    (define (angle x)\n      (if (< x 0)\n          (- (acos (/ (real-part x) (abs x))))\n          (acos (/ (real-part x) (abs x)))))\n    (define (magnitude x)\n      (sqrt (+ (square (real-part x)) (square (imag-part x)))))\n    (cons (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (real-part number)\n      (car number))\n    (define (imaginary-part number)\n      (cdr number))\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imaginary-part number)))))\n    (define (angle number)\n      (atan (imaginary-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (real-part number))\n    (define (get-imaginary number)\n      (imag-part number))\n    (define (get-radius number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imaginary number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary number) (get-real number)))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imag number)\n      (cdr number))\n    (define (get-radius number)\n      (sqrt (+ (square (get-real number))\n               (square (get-imag number)))))\n    (define (get-angle number)\n      (atan (get-imag number) (get-real number)))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (convert-one-real number)\n      (define (convert-one-real-one number)\n        (define (convert-one-real-one-one number)\n          (define (convert-one-real-one-one-one number)\n            (define (convert-one-real-one-one-one-one number)\n              (define (convert-one-real-one-one-one-one-one number)\n                (define (convert-one-real-one-one-one-one-one-one number)\n                  (define (convert-one-real-one-one-one-one-one-one-one number)\n                    (define (convert-one-real-one-one-one-one-one-one-one-one number)\n                      (define (convert-one-real-one-one-one-one-one-one-one-one-one number)\n                        (define (convert-one-real-one-one-one-one-one-one-one-one-one-one number)\n                          (define (convert-one-real-one-one-one-one-one-one-one-one-one-one-one number)\n                            (define (convert-one-real-one-one-one-one-one-one-one-one-one-one-one-one number)\n                              (define (convert-one-real-one-one-one-one-one-one-one-one-one-one-one-one-one number)\n                                (define (convert-one-real-one-one-one-one-one-one-one-one-one-one-one-one-one-one number)\n                                  (define (convert-one-real-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one number)\n                                    (define (convert-one-real-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one number)\n                ",
    "  (define (convert-one number)\n    (define (real-part number)\n      (car number))\n    (define (imag-part number)\n      (cdr number))\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imag-part number)))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (let* ([real (car numbers)]\n         [imaginary (cadr numbers)])\n    (list (sqrt (+ (* real real) (* imaginary imaginary)))\n          (atan real imaginary))))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part x)) (square (imag-part x)))))\n    (define (phase x) (atan (imag-part x) (real-part x)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (for/list ([n numbers])\n    (let* ([x (real-part n)]\n           [y (imag-part n)]\n           [r (sqrt (+ (* x x) (* y y)))])\n      (list r (atan x y)))))\n",
    "  (define (convert-one number)\n    (define (abs-complex z)\n      (sqrt (+ (expt (real-part z) 2)\n               (expt (imag-part z) 2))))\n    (define (arg-complex z)\n      (atan (imag-part z) (real-part z)))\n    (list (abs-complex number) (arg-complex number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let ([real (real-part number)]\n          [imag (imag-part number)])\n      (list (sqrt (+ (* real real) (* imag imag)))\n            (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-radius number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imaginary number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary number) (get-real number)))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x)\n      (define (good-enough? guess)\n        (< (abs (- (square guess) x)) 0.001))\n      (define (improve guess)\n        (/ (+ guess (/ x guess)) 2))\n      (define (sqrt-iter guess)\n        (if (good-enough? guess)\n            guess\n            (sqrt-iter (improve guess))))\n      (sqrt-iter 1.0))\n    (define (magnitude z)\n      (sqrt (+ (square (real-part z))\n               (square (imag-part z)))))\n    (define (angle z)\n      (atan (/ (imag-part z) (real-part z))))\n    (cons (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-helper num)\n    (define (get-angle num)\n      (define (get-angle-helper num)\n        (cond\n          [(> num 0) (/ num (sqrt (+ (sqr (real-part num)) (sqr (imag-part num)))))]\n          [(< num 0) (/ num (sqrt (+ (sqr (real-part num)) (sqr (imag-part num)))))]\n          [else (/ num (sqrt (+ (sqr (real-part num)) (sqr (imag-part num)))))]))\n      (define (get-angle-helper2 num)\n        (cond\n          [(> (real-part num) 0) (acos (get-angle-helper num))]\n          [(< (real-part num) 0) (acos (get-angle-helper num))]\n          [(= (real-part num) 0) (acos (get-angle-helper num))]))\n      (define (get-angle-helper3 num)\n        (cond\n          [(> (imag-part num) 0) (get-angle-helper2 num)]\n          [(< (imag-part num) 0) (- (get-angle-helper2 num))]\n          [(= (imag-part num) 0) (get-angle-helper2 num)]))\n      (get-angle-helper3 num))\n    (define (get-radius num)\n      (sqrt (+ (sqr (real-part num)) (sqr (imag-part num)))))\n    (list (get-radius num) (get-angle num)))\n  (map convert-helper numbers))\n",
    "  (define (convert-single number)\n    (define (get-angle number)\n      (define (get-angle-helper number)\n        (if (negative? (imag-part number))\n            (- (angle number))\n            (angle number)))\n      (if (negative? (real-part number))\n          (get-angle-helper (make-rectangular (- (real-part number)) (imag-part number)))\n          (get-angle-helper number)))\n    (define (get-radius number)\n      (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (list (get-radius number) (get-angle number)))\n  (if (list? numbers)\n      (map convert-single numbers)\n      (convert-single numbers)))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-angle number)\n      (atan (get-imaginary-part number) (get-real-part number)))\n    (define (get-radius number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part x)) (square (imag-part x)))))\n    (define (phase x) (atan (imag-part x) (real-part x)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-to-cartesian r theta)\n      (define x (* r (cos theta)))\n      (define y (* r (sin theta)))\n      (list x y))\n    (define (cartesian-to-polar x y)\n      (define r (sqrt (+ (* x x) (* y y))))\n      (define theta (atan y x))\n      (list r theta))\n    (cartesian-to-polar (real-part number) (imag-part number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (to-polar number)\n      (define (to-polar-helper number)\n        (define (to-polar-helper-helper number)\n          (define (to-polar-helper-helper-helper number)\n            (define (to-polar-helper-helper-helper-helper number)\n              (define (to-polar-helper-helper-helper-helper-helper number)\n                (define (to-polar-helper-helper-helper-helper-helper-helper number)\n                  (define (to-polar-helper-helper-helper-helper-helper-helper-helper number)\n                    (define (to-polar-helper-helper-helper-helper-helper-helper-helper-helper number)\n                      (define (to-polar-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                        (define (to-polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                          (define (to-polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                            (define (to-polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                              (define (to-polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                                (define (to-polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                                  (define (to-polar-helper-helper-",
    "  (define (convert-one number)\n    (define (sqr x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (atan x) (atan x))\n    (define (abs x) (sqrt (+ (sqr (real-part number)) (sqr (imag-part number)))))\n    (define (phase x) (atan (/ (imag-part number) (real-part number))))\n    (define (polar x) (list (abs number) (phase number)))\n    (polar number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (expt (get-real-part number) 2)\n               (expt (get-imaginary-part number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (list (get-magnitude number)\n          (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (square (get-real number))\n               (square (get-imaginary number)))))\n    (define (get-theta number)\n      (atan (get-imaginary number)\n            (get-real number)))\n    (cons (get-r number)\n          (get-theta number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (real-part z) (car z))\n    (define (imag-part z) (cdr z))\n    (define (magnitude z)\n      (sqrt (+ (expt (real-part z) 2)\n               (expt (imag-part z) 2))))\n    (define (angle z)\n      (atan (imag-part z) (real-part z)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-single number)\n    (define (get-real number)\n      (real-part number))\n    (define (get-imag number)\n      (imag-part number))\n    (define (get-angle number)\n      (angle number))\n    (define (get-magnitude number)\n      (magnitude number))\n    (define (get-polar number)\n      (list (get-magnitude number) (get-angle number)))\n    (get-polar number))\n  (map convert-single numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imag number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imag number) 2))))\n    (define (get-theta number)\n      (atan (get-imag number) (get-real number)))\n    (list (get-r number) (get-theta number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))]\n           [theta (atan real imag)])\n      (cons r theta)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-radius number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imaginary number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary number) (get-real number)))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (to-polar number)\n    (define (to-radians angle)\n      (* angle (/ pi 180)))\n    (define (to-degrees angle)\n      (* angle (/ 180 pi)))\n    (define (to-complex number)\n      (define (to-rectangular number)\n        (define (to-cartesian number)\n          (define (to-polar number)\n            (define (to-radians angle)\n              (* angle (/ pi 180)))\n            (define (to-degrees angle)\n              (* angle (/ 180 pi)))\n            (define (to-complex number)\n              (define (to-rectangular number)\n                (define (to-cartesian number)\n                  (define (to-polar number)\n                    (define (to-radians angle)\n                      (* angle (/ pi 180)))\n                    (define (to-degrees angle)\n                      (* angle (/ 180 pi)))\n                    (define (to-complex number)\n                      (define (to-rectangular number)\n                        (define (to-cartesian number)\n                          (define (to-polar number)\n                            (define (to-radians angle)\n                              (* angle (/ pi 180)))\n                            (define (to-degrees angle)\n                              (* angle (/ 180 pi)))\n                            (define (to-complex number)\n                              (define (to-rectangular number)\n                                (define (to-cartesian number)\n                                  (define (to-polar number)\n                                    (define (to-radians angle)\n                                      (* angle (/ pi 180)))\n                                    (define (to-degrees angle)\n                                      (* angle (/ 180 pi)))\n                                    (define (to-complex number)\n                                      (define (to-rectangular number)\n                                        (define (to-cartesian number)\n                                          (define (to-polar number)\n                                            (define (to-radians angle)\n                                              (* angle (/ pi 180)))\n                                            (define (to-degrees angle)\n                                              (* angle (/ 180 pi)))\n                                            (define (to-complex number)\n                                              (define (to-rectangular number)\n                                                (define (",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (to-polar number)\n      (define (get-r number)\n        (sqrt (+ (sqr (real-part number))\n                 (sqr (imag-part number)))))\n      (define (get-theta number)\n        (atan (imag-part number) (real-part number)))\n      (cons (get-r number) (get-theta number)))\n    (to-polar number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-helper number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-helper numbers))\n",
    "  (define (convert-helper number)\n    (define (get-real number)\n      (real-part number))\n    (define (get-imag number)\n      (imag-part number))\n    (define (get-angle number)\n      (atan (get-imag number) (get-real number)))\n    (define (get-radius number)\n      (sqrt (+ (square (get-real number))\n               (square (get-imag number)))))\n    (list (get-radius number) (get-angle number)))\n  (map convert-helper numbers))\n",
    "  (define (convert-one number)\n    (define (real-part number) (car number))\n    (define (imag-part number) (cdr number))\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imag-part number)))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (sqr x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (sqr (real-part number)) (sqr (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (expt (get-real-part number) 2)\n               (expt (get-imaginary-part number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (list (get-magnitude number)\n          (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part x)) (square (imag-part x)))))\n    (define (phase x) (atan (imag-part x) (real-part x)))\n    (values (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (expt (get-real-part number) 2)\n               (expt (get-imaginary-part number) 2))))\n    (define (get-phase number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (list (get-magnitude number)\n          (get-phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (map (lambda (n)\n         (list (sqrt (+ (expt (real-part n) 2)\n                       (expt (imag-part n) 2)))\n               (atan (imag-part n) (real-part n))))\n       numbers))\n",
    "  (let ([real (car numbers)]\n        [imag (cadr numbers)])\n    (list (sqrt (+ (* real real) (* imag imag)))\n          (atan real imag))))\n",
    "  (define (convert-one number)\n    (define (to-radians degrees)\n      (* (/ degrees 180) pi))\n    (define (to-degrees radians)\n      (* (/ radians pi) 180))\n    (define (to-polar number)\n      (define (to-polar-one number)\n        (define (to-polar-one-one number)\n          (define (to-polar-one-one-one number)\n            (define (to-polar-one-one-one-one number)\n              (define (to-polar-one-one-one-one-one number)\n                (define (to-polar-one-one-one-one-one-one number)\n                  (define (to-polar-one-one-one-one-one-one-one number)\n                    (define (to-polar-one-one-one-one-one-one-one-one number)\n                      (define (to-polar-one-one-one-one-one-one-one-one-one number)\n                        (define (to-polar-one-one-one-one-one-one-one-one-one-one number)\n                          (define (to-polar-one-one-one-one-one-one-one-one-one-one-one number)\n                            (define (to-polar-one-one-one-one-one-one-one-one-one-one-one-one number)\n                              (define (to-polar-one-one-one-one-one-one-one-one-one-one-one-one-one number)\n                                (define (to-polar-one-one-one-one-one-one-one-one-one-one-one-one-one-one number)\n                                  (define (to-polar-one-one-one-one-one-one-one-one-one-one-one-one-one-one-one number)\n                                    (define (to-polar-one-one-one-one-one-one-one-one-one-one-one-one-one-one",
    "  (let ([real (car numbers)]\n        [imag (cadr numbers)])\n    (list (sqrt (+ (* real real) (* imag imag)))\n          (atan real imag))))\n",
    "  (define (convert-helper numbers)\n    (if (null? numbers)\n        '()\n        (cons (polar (car numbers)) (convert-helper (cdr numbers)))))\n  (convert-helper numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (cons r (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (/ (imag-part number) (real-part number))))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imag number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imag number) 2))))\n    (define (get-phi number)\n      (atan (get-imag number) (get-real number)))\n    (list (get-r number) (get-phi number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let ([real (real-part number)]\n          [imag (imag-part number)])\n      (list (sqrt (+ (* real real) (* imag imag)))\n            (atan real imag))))\n  (map convert-one numbers))\n</code>\n",
    "  (let ([real (car numbers)]\n        [imag (cadr numbers)])\n    (list (sqrt (+ (* real real) (* imag imag)))\n          (atan real imag))))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-angle number)\n      (atan (get-imaginary number) (get-real number)))\n    (define (get-radius number)\n      (sqrt (+ (* (get-real number) (get-real number))\n               (* (get-imaginary number) (get-imaginary number)))))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nYou can use the <code>rectangular-&gt;polar</code> procedure from the <code>racket/complex</code> library.\n<code>(require racket/complex)\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (real-part number))\n    (define (get-imaginary number)\n      (imag-part number))\n    (define (get-r number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imaginary number) 2))))\n    (define (get-phi number)\n      (atan (get-imaginary number)\n            (get-real number)))\n    (list (get-r number)\n          (get-phi number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imag number)\n      (cdr number))\n    (define (get-abs number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imag number) 2))))\n    (define (get-phase number)\n      (atan (get-imag number) (get-real number)))\n    (list (get-abs number) (get-phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-angle number)\n      (atan (get-imaginary-part number) (get-real-part number)))\n    (define (get-radius number)\n      (sqrt (+ (expt (get-real-part number) 2) (expt (get-imaginary-part number) 2))))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-helper number)\n    (define (magnitude n)\n      (sqrt (+ (* (real-part n) (real-part n))\n               (* (imag-part n) (imag-part n)))))\n    (define (angle n)\n      (atan (/ (imag-part n) (real-part n))))\n    (list (magnitude number) (angle number)))\n  (map convert-helper numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-phase number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (list (get-magnitude number)\n          (get-phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x)\n      (if (and (real-part number) (imag-part number))\n          (atan (/ (imag-part number) (real-part number)))\n          (if (real-part number) 0 (/ pi 2))))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-phase number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (cons (get-magnitude number)\n          (get-phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n</code>\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (real-part number))\n    (define (get-imag number)\n      (imag-part number))\n    (define (get-angle number)\n      (angle number))\n    (define (get-magnitude number)\n      (magnitude number))\n    (define (get-polar number)\n      (list (get-magnitude number) (get-angle number)))\n    (get-polar number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))]\n           [theta (atan real imag)])\n      (list r theta)))\n  (map convert-one numbers))\n",
    "  (for/list ([n numbers])\n    (let* ([real (real-part n)]\n           [imag (imag-part n)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (list r (atan real imag)))))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imaginary number) 2))))\n    (define (get-phi number)\n      (atan (get-imaginary number) (get-real number)))\n    (cons (get-r number) (get-phi number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imaginary number) 2))))\n    (define (get-phi number)\n      (atan (get-imaginary number) (get-real number)))\n    (list (get-r number) (get-phi number)))\n  (map convert-one numbers))\n",
    "  (map (lambda (x)\n         (list (sqrt (+ (expt (real-part x) 2)\n                        (expt (imag-part x) 2)))\n               (atan (imag-part x) (real-part x))))\n       numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-angle number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (cons (get-magnitude number)\n          (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (/ (imag-part number) (real-part number))))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (let ([real (car numbers)]\n        [imag (cadr numbers)])\n    (list (sqrt (+ (* real real) (* imag imag)))\n          (atan real imag))))\n",
    "  (map (lambda (number)\n         (let ([x (real-part number)]\n               [y (imag-part number)])\n           (list (sqrt (+ (square x) (square y)))\n                 (atan y x))))\n       numbers))\n",
    "  (let ([real (car numbers)]\n        [imag (cadr numbers)])\n    (list (sqrt (+ (* real real) (* imag imag)))\n          (atan real imag))))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-to-cartesian x y)\n      (cons (* x (cos y)) (* x (sin y))))\n    (define (cartesian-to-polar x y)\n      (cons (sqrt (+ (* x x) (* y y))) (atan y x)))\n    (cartesian-to-polar (car number) (cdr number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (values (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (cons r (atan real imag))))\n  (map convert-one numbers))\n",
    "  (let* ([x (car numbers)]\n         [y (cadr numbers)]\n         [r (sqrt (+ (square x) (square y)))]\n         [theta (atan y x)])\n    (list r theta)))\n",
    "  (for ([i numbers])\n    (let* ([real (real-part i)]\n           [imag (imag-part i)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (displayln (list r (atan real imag))))))\n",
    "  (define (magnitude z)\n    (sqrt (+ (square (real-part z))\n             (square (imag-part z)))))\n  (define (angle z)\n    (atan (imag-part z) (real-part z)))\n  (list (magnitude numbers) (angle numbers)))\n"
  ]
}