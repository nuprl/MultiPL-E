{
  "name": "mbpp_252_convert",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to convert complex numbers to polar coordinates.\n(define (convert numbers)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate convert))\n    (check-equal? (candidate 1) (list 1.0 0.0))\n    (check-equal? (candidate 4) (list 4.0 0.0))\n    (check-equal? (candidate 5) (list 5.0 0.0))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (cons r (atan real imag))))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (real-part number))\n    (define (get-imag number)\n      (imag-part number))\n    (define (get-radius number)\n      (sqrt (+ (expt (get-real number) 2)\n               (expt (get-imag number) 2))))\n    (define (get-angle number)\n      (atan (get-imag number) (get-real number)))\n    (list (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (expt (get-real-part number) 2)\n               (expt (get-imaginary-part number) 2))))\n    (define (get-angle number)\n      (atan (get-imaginary-part number)\n            (get-real-part number)))\n    (list (get-magnitude number)\n          (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude z)\n      (sqrt (+ (expt (real-part z) 2)\n               (expt (imag-part z) 2))))\n    (define (phase z)\n      (atan (imag-part z) (real-part z)))\n    (values (magnitude number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (expt (real-part number) 2) (expt (imag-part number) 2))))\n    (define (angle number)\n      (atan (imag-part number) (real-part number)))\n    (cons (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (square (get-real number))\n               (square (get-imaginary number)))))\n    (define (get-theta number)\n      (atan (/ (get-imaginary number)\n               (get-real number))))\n    (list (get-r number) (get-theta number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-magnitude number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-phase number)\n      (atan (/ (get-imaginary-part number)\n               (get-real-part number))))\n    (cons (get-magnitude number)\n          (get-phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-to-cartesian x y)\n      (cons (* x (cos y)) (* x (sin y))))\n    (define (cartesian-to-polar x y)\n      (cons (sqrt (+ (* x x) (* y y))) (atan y x)))\n    (define (magnitude x)\n      (sqrt (+ (* (real-part x) (real-part x))\n               (* (imag-part x) (imag-part x)))))\n    (define (angle x)\n      (atan (imag-part x) (real-part x)))\n    (define (conjugate x)\n      (make-rectangular (real-part x) (- (imag-part x))))\n    (define (magnitude-squared x)\n      (+ (* (real-part x) (real-part x))\n         (* (imag-part x) (imag-part x))))\n    (define (angle-in-degrees x)\n      (* (angle x) 180.0 (/ pi)))\n    (define (angle-in-radians x)\n      (angle x))\n    (define (make-from-real-imag x y)\n      (make-rectangular x y))\n    (define (make-from-mag-ang x y)\n      (make-rectangular (* x (cos y)) (* x (sin y))))\n    (define (real-part z)\n      (car z))\n    (define (imag-part z)\n      (cdr z))\n    (define (make-rectangular x y)\n      (cons x y))\n    (define (make-polar r a)\n      (cons r a))\n    (define (rectangular? z)\n      (and (number? (real-part z))\n           (number? (imag-part z))))\n    (define (polar? z)\n      (and (number? (magnitude z))\n           (number? (angle z))))\n    (define (exact? z)\n      (and (exact? (real-part z))\n           (exact? (imag-part z))))\n    (define (inexact? z)\n      (",
    "  (define (convert-one number)\n    (define (polar-coordinates number)\n      (define (magnitude number)\n        (sqrt (+ (expt (real-part number) 2)\n                 (expt (imag-part number) 2))))\n      (define (phase number)\n        (atan (imag-part number) (real-part number)))\n      (list (magnitude number) (phase number)))\n    (polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (magnitude number)\n      (sqrt (+ (square (real-part number))\n               (square (imag-part number)))))\n    (define (angle number)\n      (atan (/ (imag-part number) (real-part number))))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (polar-coordinates number)\n      (define (magnitude number)\n        (sqrt (+ (square (real-part number))\n                 (square (imag-part number)))))\n      (define (angle number)\n        (atan (imag-part number) (real-part number)))\n      (list (magnitude number) (angle number)))\n    (polar-coordinates number))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (get-real-part number)\n      (car number))\n    (define (get-imaginary-part number)\n      (cdr number))\n    (define (get-r number)\n      (sqrt (+ (square (get-real-part number))\n               (square (get-imaginary-part number)))))\n    (define (get-theta number)\n      (atan (get-imaginary-part number) (get-real-part number)))\n    (list (get-r number) (get-theta number)))\n  (map convert-one numbers))\n",
    "  (for/list ([n numbers])\n    (let* ([real (real-part n)]\n           [imag (imag-part n)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (cons r (atan imag real)))))\n",
    "  (define (convert-one number)\n    (define (get-real number)\n      (car number))\n    (define (get-imaginary number)\n      (cdr number))\n    (define (get-radius number)\n      (sqrt (+ (square (get-real number))\n               (square (get-imaginary number)))))\n    (define (get-angle number)\n      (atan (get-imaginary number) (get-real number)))\n    (cons (get-radius number) (get-angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (define (convert-one number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))]\n           [theta (atan (imag/real number))])\n      (list r theta)))\n  (map convert-one numbers))\n"
  ]
}