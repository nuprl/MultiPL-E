{
  "name": "mbpp_627_find_First_Missing",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the smallest missing number from a sorted list of natural numbers.\n(define (find_First_Missing array)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_First_Missing))\n    (check-equal? (candidate (list 0 1 2 3)) 4)\n    (check-equal? (candidate (list 0 1 2 6 9)) 3)\n    (check-equal? (candidate (list 2 3 5 8 9)) 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([len (length array)])\n    (cond\n      [(= len 0) 1]\n      [(= len 1) (if (= (car array) 1) 2 1)]\n      [else\n       (let ([mid (quotient len 2)])\n         (if (= (array-ref array mid) mid)\n             (find_First_Missing (array-copy array mid len))\n             (find_First_Missing (array-copy array 0 mid))))])))\n",
    "  (let loop ([i 0])\n    (cond [(>= i (length array)) (add1 (vector-ref array (sub1 i)))]\n          [(= (vector-ref array i) (add1 (vector-ref array (sub1 i)))) (loop (add1 i))]\n          [else (vector-ref array i)])))\n",
    "  (if (null? array)\n      0\n      (if (= (car array) 0)\n          (find_First_Missing (cdr array))\n          (if (= (car array) (add1 (car (cdr array))))\n              (find_First_Missing (cdr array))\n              (car array)))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= i (vector-ref array i)) (loop (add1 i))]\n      [else i])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) j]\n      [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) (add1 i)) (loop (add1 i))]\n      [else i])))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(= index (length array)) (+ index 1)]\n      [(= index (array index)) (find_First_Missing_Helper array (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (define (find_First_Missing_Helper array counter)\n    (cond\n      [(empty? array) counter]\n      [(= (first array) counter) (find_First_Missing_Helper (rest array) (+ counter 1))]\n      [else counter]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) (+ j 1)]\n      [(= (array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= i (vector-ref array i))\n            (find_First_Missing_Helper array (add1 i))\n            i)))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ((i 0) (j (length array)))\n    (cond ((= i j) i)\n          ((= (array-ref array i) i) (loop (+ i 1) j))\n          (else i))))\n",
    "  (let loop ([i 0])\n    (if (and (< i (length array)) (not (= (list-ref array i) i)))\n        i\n        (loop (+ i 1)))))\n",
    "  (let loop ((i 0) (array array))\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= i (vector-ref array i))\n            (loop (add1 i) array)\n            i))))\n",
    "  (define (helper array index)\n    (if (= (vector-ref array index) (+ index 1))\n        (helper array (+ index 1))\n        index))\n  (helper array 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (- i 1)))\n        (if (= (vector-ref array i) (add1 (vector-ref array (- i 1))))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ((i 0) (j (add1 (length array))))\n    (if (= i j)\n        i\n        (if (and (= (array-ref array i) i)\n                 (= (array-ref array (add1 i)) (add1 i)))\n            (loop (add1 i) j)\n            i))))\n",
    "  (let loop ([i 0])\n    (if (and (< i (length array)) (= i (vector-ref array i)))\n        (loop (+ i 1))\n        i)))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ([i 0])\n    (if (= (vector-ref array i) i)\n        (loop (+ i 1))\n        i)))\n",
    "  (let loop ((i 0) (n (length array)))\n    (cond ((= i n) (+ i 1))\n          ((= (array-ref array i) i) (loop (+ i 1) n))\n          (else i))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= (vector-ref array i) (+ i 1)) (find_First_Missing_Helper array (+ i 1))]\n      [else (+ i 1)]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 0]))\n",
    "  (let loop ((i 0) (j (vector-length array)))\n    (cond ((= i j) (+ i 1))\n          ((= (vector-ref array i) i) (loop (+ i 1) j))\n          (else i))))\n",
    "  (define (find_First_Missing_helper array index)\n    (if (= index (length array))\n        (add1 index)\n        (if (= index (array index))\n            (find_First_Missing_helper array (add1 index))\n            index)))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (let loop ([i 0])\n    (if (and (< i (length array))\n             (= i (array-ref array i)))\n        (loop (+ i 1))\n        i)))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(>= i (length array)) j]\n      [(= (array-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (let loop ([i 0] [j (length array)])\n    (if (= i j)\n        (add1 (list-ref array i))\n        (if (= (list-ref array i) i)\n            (loop (add1 i) j)\n            i))))\n",
    "  (define (find_First_Missing_helper array i)\n    (if (and (not (null? array)) (= (car array) i))\n        (find_First_Missing_helper (cdr array) (+ i 1))\n        i))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ((i 0) (j 1))\n    (cond ((= i (length array)) j)\n          ((= (array i) j) (loop (+ i 1) (+ j 1)))\n          (else j))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (and (> (vector-ref array i) 0)\n                 (= (vector-ref array i) (add1 (vector-ref array (sub1 i)))))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (define (find-first-missing-helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find-first-missing-helper (rest array) (+ index 1))]\n      [else index]))\n  (find-first-missing-helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (length array)) j]\n          [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n          [else j])))\n",
    "  (define (find_First_Missing_helper array i)\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (find_First_Missing_helper array (add1 i))\n            (vector-ref array i))))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= i (vector-ref array i)) (loop (add1 i))]\n      [else i])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (- i 1)))]\n      [(= (vector-ref array i) (add1 (vector-ref array (- i 1)))) (loop (add1 i))]\n      [else (vector-ref array i)])))\n",
    "  (let loop ((i 0) (j 1))\n    (cond ((= i (length array)) j)\n          ((= (array i) j) (loop (+ i 1) (+ j 1)))\n          (else j))))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (vector-ref array i)) (find_First_Missing_helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) j]\n      [(= (array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [else (if (= i (array i))\n               (loop (+ i 1))\n               i)])))\n",
    "  (define (find_First_Missing_helper array i)\n    (if (or (= i (length array)) (= i (vector-ref array i)))\n        (if (= i (length array))\n            i\n            (+ i 1))\n        (find_First_Missing_helper array (+ i 1))))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= (vector-ref array i) i) (find_First_Missing_helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j (length array)])\n    (cond\n      [(= i j) (+ i 1)]\n      [(= (array-ref array i) i) (loop (+ i 1) j)]\n      [else i])))\n",
    "  (for/fold ([missing 0]) ([i (in-list array)])\n    (if (= i missing)\n        (+ missing 1)\n        missing)))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_Helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(null? array) i]\n      [(= (car array) i) (find_First_Missing_Helper (cdr array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0] [j (length array)])\n    (if (= i j)\n        (add1 (array-ref array (sub1 i)))\n        (if (= (array-ref array i) (add1 i))\n            (loop (add1 i) j)\n            (array-ref array i)))))\n",
    "  (define (helper array i)\n    (if (and (not (null? array)) (= i (car array)))\n        (helper (cdr array) (+ i 1))\n        i))\n  (helper array 1))\n",
    "  (let loop ([i 0] [j 1])\n    (if (and (< i (length array)) (< j (length array)))\n        (if (= (array-ref array i) (array-ref array j))\n            (loop (+ i 1) (+ j 1))\n            (if (= (array-ref array i) (+ (array-ref array j) 1))\n                (loop (+ i 1) (+ j 1))\n                (array-ref array j)))\n        (array-ref array i))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (vector-ref array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (vector-ref array i)) (find_First_Missing_helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) j]\n      [(= (array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array))\n       (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) (add1 i))\n       (loop (add1 i))]\n      [else i])))\n",
    "  (let loop ((array array) (i 0))\n    (if (null? array)\n        i\n        (if (= (car array) i)\n            (loop (cdr array) (+ i 1))\n            i))))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (list-ref array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [(= (first array) (+ (second array) 1)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (let loop ((i 0) (j (vector-length array)))\n    (if (= i j)\n        (vector-ref array i)\n        (if (= (vector-ref array i) i)\n            (loop (+ i 1) j)\n            i))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) j) (loop (add1 i) (add1 j))]\n      [else j])))\n",
    "  (define (find_First_Missing_helper array i)\n    (if (null? array)\n        i\n        (if (= i (car array))\n            (find_First_Missing_helper (cdr array) (+ i 1))\n            i)))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j (length array)])\n    (cond\n      [(= i j) (+ i 1)]\n      [(= (array-ref array i) i) (loop (+ i 1) j)]\n      [else i])))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            i))))\n",
    "  (let loop ((i 0) (j 1))\n    (cond ((= i (length array)) j)\n          ((= (vector-ref array i) j) (loop (+ i 1) (+ j 1)))\n          (else j))))\n",
    "  (let loop ((i 0) (j 1))\n    (cond ((= i (length array)) j)\n          ((= (vector-ref array i) j) (loop (+ i 1) (+ j 1)))\n          (else j))))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ((i 0) (n (length array)))\n    (if (= i n)\n        (add1 (vector-ref array (sub1 n)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i) n)\n            i))))\n",
    "  (if (null? array)\n      0\n      (if (= (car array) 0)\n          (find_First_Missing (cdr array))\n          (if (= (car array) (add1 (car (cdr array))))\n              (find_First_Missing (cdr array))\n              (car array)))))\n",
    "  (let loop ([i 0] [j (add1 (vector-length array))])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (if (&lt; (vector-ref array mid) mid)\n              (loop mid j)\n              (loop i mid))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (and (= (vector-ref array i) (add1 i))\n                 (= (vector-ref array (add1 i)) (add1 (add1 i))))\n            (loop (add1 i))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) j]\n      [(= (array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) i]\n      [(= j (array i)) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (let loop ([i 0] [j (length array)])\n    (cond\n      [(= i j) (+ i 1)]\n      [(= (array-ref array i) i) (loop (+ i 1) j)]\n      [else i])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(>= i (length array)) j]\n      [(= (array-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= i (vector-ref array i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ([i 0] [j (length array)])\n    (if (= i j)\n        (add1 i)\n        (if (= (array-ref array i) i)\n            (loop (add1 i) j)\n            i))))\n",
    "  (let loop ([i 0])\n    (if (and (< i (length array))\n             (= (vector-ref array i) i))\n        (loop (+ i 1))\n        i)))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (vector-ref array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (= i (length array))\n        (add1 (vector-ref array (- i 1)))\n        (if (= (vector-ref array i) (add1 (vector-ref array (- i 1))))\n            (find_First_Missing_Helper array (add1 i))\n            (vector-ref array i))))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (last array))\n        (if (and (= (array-ref array i) i)\n                 (= (array-ref array (add1 i)) (add1 i)))\n            (loop (add1 i))\n            i))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (= i (length array))\n        (add1 (vector-ref array (- i 1)))\n        (if (= i (vector-ref array i))\n            (find_First_Missing_Helper array (add1 i))\n            i)))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (vector-ref array i)) (find_First_Missing_helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [else\n     (let* ([first (first array)]\n            [rest (rest array)]\n            [missing (find_First_Missing rest)])\n       (if (and (not (= first missing))\n                (= first (add1 missing)))\n           (add1 missing)\n           missing))]))\n",
    "  (let loop ([i 0] [j (length array)])\n    (cond\n      [(= i j) (+ i 1)]\n      [(= (list-ref array i) (+ i 1)) (loop (+ i 1) j)]\n      [else (+ i 1)])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array))\n       (add1 (vector-ref array (sub1 i)))]\n      [(= i (vector-ref array i))\n       (loop (add1 i))]\n      [else i])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array))\n       (add1 (vector-ref array (sub1 i)))]\n      [(= i (vector-ref array i))\n       (loop (add1 i))]\n      [else\n       i])))\n",
    "  (let loop ((i 0) (n (length array)))\n    (if (= i n)\n        (add1 (vector-ref array (sub1 n)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i) n)\n            i))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(>= i (length array)) j]\n      [(= (array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ((i 0) (array array))\n    (if (equal? (vector-ref array i) (+ i 1))\n        (loop (+ i 1) array)\n        (+ i 1))))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond [(empty? array) i]\n          [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n          [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (length array)) j]\n          [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n          [else j])))\n",
    "  (if (null? array)\n      0\n      (if (= (car array) 0)\n          (find_First_Missing (cdr array))\n          (if (= (car array) (add1 (car (cdr array))))\n              (find_First_Missing (cdr array))\n              (car array)))))\n",
    "  (let loop ((i 0) (n (length array)))\n    (cond ((= i n) (+ i 1))\n          ((= i (vector-ref array i)) (loop (+ i 1) n))\n          (else i))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond [(= i (length array)) (+ i 1)]\n          [(= i (vector-ref array i)) (find_First_Missing_Helper array (+ i 1))]\n          [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(= index (length array)) (+ index 1)]\n      [(= index (array index)) (find_First_Missing_helper array (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (vector-ref array i)) (find_First_Missing_Helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ((i 0) (j 1))\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (let loop ((i 0) (j 1))\n    (cond\n      [(= i (length array)) j]\n      [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_Helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0] [n (length array)])\n    (cond\n      [(= i n) (add1 (vector-ref array (- n 1))) ]\n      [(= (vector-ref array i) (add1 i)) (loop (add1 i) n)]\n      [else (add1 i)])))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond [(= i (length array)) (+ i 1)]\n          [(= i (vector-ref array i)) (find_First_Missing_helper array (+ i 1))]\n          [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ((i 0) (n (length array)))\n    (cond ((= i n) (+ i 1))\n          ((= i (array-ref array i)) (loop (+ i 1) n))\n          (else i))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond [(= index (length array)) (+ index 1)]\n          [(= index (list-ref array index)) (find_First_Missing_Helper array (+ index 1))]\n          [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([array array] [i 0])\n    (if (empty? array)\n        i\n        (if (= (car array) i)\n            (loop (cdr array) (+ i 1))\n            i))))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_Helper array start end)\n    (cond\n      [(= start end) (+ start 1)]\n      [(= (- end start) 1) (if (= (+ start 1) (vector-ref array start)) (+ end 1) (+ start 1))]\n      [else\n       (let* ([mid (/ (+ start end) 2)]\n              [mid_val (vector-ref array mid)])\n         (if (= mid_val (+ mid 1))\n             (find_First_Missing_Helper array (+ mid 1) end)\n             (find_First_Missing_Helper array start mid)))]))\n  (find_First_Missing_Helper array 0 (vector-length array)))\n",
    "  (let loop ((i 0) (array array))\n    (if (= i (length array))\n        (add1 (vector-ref array (- (length array) 1)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i) array)\n            i))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (vector-ref array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (define (find-missing-helper array i)\n    (if (or (null? array) (= i (car array)))\n        (if (= i (length array))\n            (error \"No missing number found\")\n            (find-missing-helper array (+ i 1)))\n        i))\n  (find-missing-helper array 0))\n",
    "  (cond\n    [(null? array) 0]\n    [(= (car array) 0) 1]\n    [(= (car array) 1) (find_First_Missing (cdr array))]\n    [else (car array)]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array))\n       (add1 (vector-ref array (- i 1)))]\n      [(= (vector-ref array i) (add1 (vector-ref array (- i 1))))\n       (loop (add1 i))]\n      [else\n       (vector-ref array i)])))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_Helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0] [array array])\n    (if (= i (length array))\n        (add1 (list-ref array (sub1 i)))\n        (if (= (list-ref array i) (add1 i))\n            (loop (add1 i) array)\n            i))))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) j]\n      [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (define (iter i)\n    (cond [(= i (length array)) (+ (vector-ref array (- i 1)) 1)]\n          [(= (vector-ref array i) (+ (vector-ref array (- i 1)) 1)) (iter (+ i 1))]\n          [else (+ (vector-ref array (- i 1)) 1)]))\n  (iter 0))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (list-ref array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_Helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (let loop ((array array) (i 0))\n    (if (null? array)\n        i\n        (if (= i (car array))\n            (loop (cdr array) (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (- i 1)))\n        (if (< (vector-ref array i) i)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (list-ref array i)) (find_First_Missing_Helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (and (= (vector-ref array i) (add1 i))\n                 (= (vector-ref array (add1 i)) (add1 (add1 i))))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (and (= (vector-ref array i) (add1 i))\n                 (= (vector-ref array (add1 i)) (add1 (add1 i))))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (equal? i (length array))\n        (add1 i)\n        (if (equal? (list-ref array i) i)\n            (find_First_Missing_Helper array (add1 i))\n            i)))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (- i 1)))\n        (if (and (= (vector-ref array i) (add1 (vector-ref array (- i 1))))\n                 (= (vector-ref array i) (add1 (vector-ref array (+ i 1)))))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (let loop ((i 0) (array array))\n    (if (= i (length array))\n        (add1 (last array))\n        (if (= i (list-ref array i))\n            (loop (add1 i) array)\n            i))))\n",
    "  (let loop ((i 0) (j 1))\n    (if (= i (length array))\n        j\n        (if (= (list-ref array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (let loop ((i 0) (array array))\n    (if (empty? array)\n        i\n        (if (= (first array) i)\n            (loop (+ i 1) (rest array))\n            i))))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (if (and (<= (array-ref array mid) mid)\n                   (<= (add1 (array-ref array mid)) (add1 mid)))\n              (loop (add1 mid) j)\n              (loop i mid))))))\n",
    "  (let loop ((i 0) (j (length array)))\n    (cond\n      [(= i j) (+ i 1)]\n      [(= (array-ref array i) i) (loop (+ i 1) j)]\n      [else i])))\n",
    "  (define (find_First_Missing_helper array index)\n    (if (empty? array)\n        index\n        (if (= (first array) index)\n            (find_First_Missing_helper (rest array) (+ index 1))\n            index)))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find-first-missing-helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find-first-missing-helper (rest array) (+ index 1))]\n      [else index]))\n  (find-first-missing-helper array 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) (add1 i)) (loop (add1 i))]\n      [else i])))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (list-ref array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (define (find_First_Missing_helper array start end)\n    (cond\n      [(= start end) (+ start 1)]\n      [(= (- end start) 1) (if (= (+ start 1) (list-ref array start)) (+ end 1) (+ start 1))]\n      [else\n       (let* ([mid (/ (+ start end) 2)]\n              [mid-val (list-ref array mid)])\n         (if (= mid-val (+ mid start))\n             (find_First_Missing_helper array (+ mid 1) end)\n             (find_First_Missing_helper array start mid)))]))\n  (find_First_Missing_helper array 0 (sub1 (length array))))\n",
    "  (let loop ([i 0] [j (length array)])\n    (cond\n      [(= i j) (+ i 1)]\n      [(= i (vector-ref array i)) (loop (+ i 1) j)]\n      [else i])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= (vector-ref array i) (+ i 1)) (loop (+ i 1))]\n      [else (+ i 1)])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array))\n       j]\n      [(= (vector-ref array i) j)\n       (loop (+ i 1) (+ j 1))]\n      [else\n       j])))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ((i 0) (len (vector-length array)))\n    (cond\n      [(= i len) (add1 i)]\n      [(= (vector-ref array i) i) (loop (add1 i) len)]\n      [else i])))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond [(= i (length array)) (+ i 1)]\n          [(= i (car array)) (find_First_Missing_Helper (cdr array) (+ i 1))]\n          [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) j]\n      [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(> i (length array)) j]\n          [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n          [else j])))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (let loop ((i 0) (j 1))\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) j) (loop (add1 i) (add1 j))]\n      [else j])))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (cond [(= i j) i]\n          [(= (vector-ref array i) i) (loop (add1 i) j)]\n          [else i])))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (helper array n)\n    (cond\n      [(empty? array) n]\n      [(= (first array) n) (helper (rest array) (+ n 1))]\n      [else n]))\n  (helper array 1))\n",
    "  (let loop ([i 0] [j (length array)])\n    (if (= i j)\n        i\n        (if (= (array-ref array i) i)\n            (loop (+ i 1) j)\n            i))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(>= i (length array))\n       (length array)]\n      [(= i (array i))\n       (loop (+ i 1))]\n      [else\n       i])))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (and (= (vector-ref array i) (add1 i))\n                 (= (vector-ref array (add1 i)) (add1 (add1 i))))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ([i 0] [array array])\n    (cond [(= i (length array)) (+ i 1)]\n          [(= i (list-ref array i)) (loop (+ i 1) array)]\n          [else i])))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (and (not (null? array)) (= i (car array)))\n        (find_First_Missing_Helper (cdr array) (+ i 1))\n        i))\n  (find_First_Missing_Helper array 1))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (and (= (vector-ref array i) (add1 i)) (= (vector-ref array (add1 i)) (add1 (add1 i))))\n            (loop (add1 i))\n            (add1 i)))))\n",
    "  (define (find-first-missing-helper array index)\n    (cond ((= index (length array)) (+ index 1))\n          ((= index (car array)) (find-first-missing-helper (cdr array) (+ index 1)))\n          (else index)))\n  (find-first-missing-helper array 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ((i 0) (j 1))\n    (if (= i (length array))\n        j\n        (if (= (list-ref array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ((i 0) (j 1))\n    (cond ((= i (length array)) j)\n          ((= (array-ref array i) j) (loop (+ i 1) (+ j 1)))\n          (else j))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 i))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (define (find-missing array)\n    (if (null? array)\n        (error \"No missing number\")\n        (if (= (car array) (add1 (cadr array)))\n            (find-missing (cdr array))\n            (car array))))\n  (find-missing array))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) j) (loop (add1 i) (add1 j))]\n      [else j])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= i (vector-ref array i)) (loop (add1 i))]\n      [else (vector-ref array i)])))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (if (= i j)\n        i\n        (if (= (array-ref array i) i)\n            (loop (add1 i) j)\n            i))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ((i 0) (j 1))\n    (cond ((= i (length array)) j)\n          ((= (list-ref array i) j) (loop (+ i 1) (+ j 1)))\n          (else j))))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (length array)) j]\n          [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n          [else j])))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond ((= i (length array)) (+ i 1))\n          ((= i (vector-ref array i)) (find_First_Missing_helper array (+ i 1)))\n          (else i)))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) j]\n      [(= (list-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= index (first array)) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ((i 0) (j 1))\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) j]\n      [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (and (= (vector-ref array i) (add1 i))\n                 (= (vector-ref array (add1 i)) (add1 (add1 i))))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (or (null? array) (= i (car array)))\n        (if (null? array)\n            i\n            (find_First_Missing_Helper (cdr array) (+ i 1)))\n        i))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0] [j (length array)])\n    (cond\n      [(= i j) (+ i 1)]\n      [(= (list-ref array i) i) (loop (+ i 1) j)]\n      [else i])))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (and (= (vector-ref array i) (add1 i))\n                 (= (vector-ref array (add1 i)) (add1 (add1 i))))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (define (find-first-missing-helper array index)\n    (if (= index (length array))\n        (add1 (vector-ref array (- index 1)))\n        (if (and (= (vector-ref array index) (add1 (vector-ref array (- index 1))))\n                 (= (vector-ref array index) (add1 index)))\n            (find-first-missing-helper array (add1 index))\n            (vector-ref array index))))\n  (find-first-missing-helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond ((= i (length array)) (+ i 1))\n          ((= i (vector-ref array i)) (find_First_Missing_helper array (+ i 1)))\n          (else i)))\n  (find_First_Missing_helper array 0))\n"
  ]
}