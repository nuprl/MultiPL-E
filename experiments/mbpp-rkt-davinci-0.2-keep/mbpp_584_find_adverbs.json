{
  "name": "mbpp_584_find_adverbs",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the first adverb ending with ly and its positions in a given string.\n(define (find_adverbs text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverbs))\n    (check-equal? (candidate \"Clearly, he has no excuse for such behavior.\") \"0-7: Clearly\")\n    (check-equal? (candidate \"Please handle the situation carefuly\") \"28-36: carefuly\")\n    (check-equal? (candidate \"Complete the task quickly\") \"18-25: quickly\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"early\" \"only\" \"slowly\" \"friendly\" \"carefully\" \"slightly\" \"sadly\" \"happily\" \"loudly\" \"quietly\" \"angrily\" \"quickly\" \"finally\" \"badly\" \"hardly\" \"nearly\" \"really\" \"clearly\" \"honestly\" \"gently\" \"obviously\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"care",
    "  (let loop ((text text)\n             (positions '()))\n    (cond ((empty? text) (reverse positions))\n          ((regexp-match #rx\"ly$\" (first text))\n           (loop (rest text) (cons (first text) positions)))\n          (else (loop (rest text) positions)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word (in-list words)])\n      (and (string-suffix? \"ly\" word)\n           (list word (position word words))))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find-adverb-helper words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words))\n           (cons (car words) (cons (string-index text (car words)) '())))\n          (else (find-adverb-helper (cdr words)))))\n  (find-adverb-helper (string-split text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text] [pos 0])\n    (cond [(empty? text) '()]\n          [(string-suffix? \"ly\" (first text))\n           (list (first text) pos)]\n          [else (loop (rest text) (+ 1 pos))])))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (find_adverbs-helper text pos)\n    (if (string-empty? text)\n        '()\n        (if (and (string-suffix? \"ly\" text)\n                 (member (string-ref text (- (string-length text) 2))\n                         '(#\\a #\\e #\\i #\\o #\\u)))\n            (cons (list (substring text 0 (- (string-length text) 2)) pos)\n                  (find_adverbs-helper (substring text 1) (+ pos 1)))\n            (find_adverbs-helper (substring text 1) (+ pos 1)))))\n  (find_adverbs-helper text 0))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (string-index text (car words))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text #\\space)))\n",
    "  (let loop ([text text]\n             [pos 0])\n    (cond [(empty? text) '()]\n          [(regexp-match #rx\"ly$\" (first text))\n           (list (list (first text) pos))]\n          [else (loop (rest text) (+ pos 1))])))\n",
    "  (let loop ([text text]\n             [positions '()])\n    (cond\n      [(empty? text) (list (reverse positions))]\n      [(regexp-match #rx\"ly$\" (first text))\n       (loop (rest text) (cons (first text) positions))]\n      [else (loop (rest text) positions)])))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx(regexp adverb) text)))))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" (sub1 (string-length word)))))\n      (list word (string-index text word)))))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word #\\ly)\n                            (string-contains word #\\.)))\n      (list word (string-index word #\\.)))))\n",
    "  (define (is-adverb? word)\n    (and (string-contains word \"ly\")\n         (not (string-contains word \"lyly\"))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list-ref (string-tokenize text) (car words))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-tokenize text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is-adverb? word)\n    (and (string-contains word \"ly\")\n         (not (string-contains word \"lyly\"))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list-ref (string-split text) (car words))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text)))\n",
    "  (let ([words (string-split text #\\space)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find_adverb words)\n    (cond\n      [(empty? words) empty]\n      [(is_adverb? (first words)) (cons (first words) (cons (position (first words) text) empty))]\n      [else (find_adverb (rest words))]))\n  (find_adverb (string-split text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find_adverb words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (list (string-index text (car words)))))\n          (else (find_adverb (cdr words)))))\n  (find_adverb (string-split text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text] [result '()])\n    (cond\n      [(empty? text) result]\n      [(regexp-match? #rx\"ly$\" (first text))\n       (loop (rest text) (cons (list (first text) (regexp-match #rx\"ly$\" (first text))) result))]\n      [else (loop (rest text) result)])))\n</code>\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" #:start (sub1 (string-length word)))))\n      (list word (string-index text word)))))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-contains word #\\space)))\n  (define (find-adverb-helper text start-index)\n    (define (find-adverb-helper-2 text start-index)\n      (define (find-adverb-helper-3 text start-index)\n        (define (find-adverb-helper-4 text start-index)\n          (define (find-adverb-helper-5 text start-index)\n            (define (find-adverb-helper-6 text start-index)\n              (define (find-adverb-helper-7 text start-index)\n                (define (find-adverb-helper-8 text start-index)\n                  (define (find-adverb-helper-9 text start-index)\n                    (define (find-adverb-helper-10 text start-index)\n                      (define (find-adverb-helper-11 text start-index)\n                        (define (find-adverb-helper-12 text start-index)\n                          (define (find-adverb-helper-13 text start-index)\n                            (define (find-adverb-helper-14 text start-index)\n                              (define (find-adverb-helper-15 text start-index)\n                                (define (find-adverb-helper-16 text start-index)\n                                  (define (find-adverb-helper-17 text start-index)\n                                    (define (find-adverb-helper-18 text start-index)\n                                      (define (find-adverb-helper-19 text start-index)\n                                        (define (find-adverb-helper-20 text start-index)\n                                          (define (find-adverb-helper-21 text start-index)\n                                            (define (find-adverb-helper-22 text start-index)\n                                              (define (find-adverb-helper-23 text start-index)\n                                                (define (find-adverb-helper-24 text start-index)\n                                ",
    "  (regexp-match* #px\"\\\\b[a-z]+ly\\\\b\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list (car (regexp-match #rx\"\\w+ly\" text)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text #rx\"\\W+\")))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (member word (string-split \"adverbly\"))))\n      (list word (string-index text word)))))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (string-contains? \"ly\" word)))\n      (list word (string-index word \"ly\")))))\n",
    "  (define (is_adverb? word)\n    (and (string-contains word #\\ly)\n         (string-contains word #\\ly (sub1 (string-length word)))))\n  (define (find-adverb-helper text pos)\n    (cond ((string-empty? text) '())\n          ((is_adverb? text) (list text pos))\n          (else (find-adverb-helper (substring text 1) (add1 pos)))))\n  (find-adverb-helper text 0))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (member word (string-split \"adverbly\"))))\n      (list word (string-index text word)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list (car (regexp-match #rx\"\\w+\" text)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text #rx\"\\W+\")))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (let* ([words (string-split text #\\space)]\n         [adverbs (filter (lambda (word) (regexp-match #rx\"ly$\" word)) words)])\n    (list (first adverbs) (string-index text (first adverbs)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (string-suffix? \"ally\" word)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (regexp-match #rx\"ly$\" word)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (not (string-contains word \"lyly\"))))\n      (list word (string-index text word)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find_adverb text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) (list (string-index (car text) text))))\n          (else (find_adverb (cdr text)))))\n  (find_adverb (string-split text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (member word (string-split (get-pos-tagged-string text) #:separator \" \"))\n                            (string-contains? (get-pos-tagged-string text) word)))\n      (list word (string-index text word)))))\n",
    "  (regexp-match* #rx\"(\\w+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (find-adverb text)\n    (cond\n      [(empty? text) empty]\n      [(regexp-match #rx\"ly\\b\" (first text)) (cons (first text) (rest text))]\n      [else (find-adverb (rest text))]))\n  (define (find-adverbs text)\n    (cond\n      [(empty? text) empty]\n      [(regexp-match #rx\"ly\\b\" (first text)) (cons (first text) (find-adverbs (rest text)))]\n      [else (find-adverbs (rest text))]))\n  (define (find-adverb-positions text)\n    (cond\n      [(empty? text) empty]\n      [(regexp-match #rx\"ly\\b\" (first text)) (cons (regexp-match-positions #rx\"ly\\b\" (first text)) (find-adverb-positions (rest text)))]\n      [else (find-adverb-positions (rest text))]))\n  (values (find-adverb text) (find-adverbs text) (find-adverb-positions text)))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ely\" word))))\n  (define (find-adverb-helper text position)\n    (if (string-empty? text)\n        (list)\n        (let ((word (first (string-tokenize text))))\n          (if (is_adverb? word)\n              (list word position)\n              (find-adverb-helper (substring text (+ 1 (string-length word))) (+ position 1 (string-length word)))))))\n  (find-adverb-helper text 0))\n",
    "  (define (find_adverb text)\n    (cond ((empty? text) '())\n          ((regexp-match? #rx\"ly$\" (car text)) (list (car text) (list (car (regexp-match #rx\"ly$\" (car text))))))\n          (else (find_adverb (cdr text)))))\n  (find_adverb (string-split text #\\space)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-contains word #\\ly)\n         (string-contains word #\\ly (string-length word))))\n  (define (find_adverb text)\n    (if (string-empty? text)\n        #f\n        (let ((word (string-tokenize text)))\n          (if (is_adverb? word)\n              word\n              (find_adverb (string-drop text (string-length word)))))))\n  (define (find_adverb_positions text)\n    (if (string-empty? text)\n        #f\n        (let ((word (string-tokenize text)))\n          (if (is_adverb? word)\n              (list (string-length word))\n              (append (find_adverb_positions (string-drop text (string-length word)))\n                      (list (string-length word)))))))\n  (let ((adverb (find_adverb text)))\n    (if adverb\n        (list adverb (find_adverb_positions text))\n        #f)))\n",
    "  (define (is_adverb? word)\n    (and (string-contains word #\\ly)\n         (string-contains word #\\ly)\n         (string-contains word #\\ly)))\n  (define (find_adverb words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (list (car (string-indexes (car words) #\\ly)))))\n          (else (find_adverb (cdr words)))))\n  (find_adverb (string-split text #\\space)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (member word (string-split \"adverbs.txt\"))))\n      (list word (position word words)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #px\"\\\\b\\\\w+ly\\\\b\" text))\n",
    "  (regexp-match* #px\"\\\\b\\\\w+ly\\\\b\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb-helper text)\n    (cond ((empty? text) '())\n          ((is_adverb? (first text)) (cons (first text) (cons (position (first text) text) '())))\n          (else (find-adverb-helper (rest text)))))\n  (find-adverb-helper (string-split text)))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-suffix? \"ly\" (string-downcase word))))\n  (define (find_adverb text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) (list (string-index (car text) text))))\n          (else (find_adverb (cdr text)))))\n  (find_adverb (string-split text)))\n",
    "  (let loop ([text (string-split text #\\space)])\n    (cond\n      [(empty? text) empty]\n      [(regexp-match #rx\"ly$\" (first text))\n       (list (first text) (regexp-match-positions #rx\"ly$\" (first text)))]\n      [else (loop (rest text))])))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"sly\" word))\n         (not (string-suffix? \"uly\" word))\n         (not (string-suffix? \"bly\" word))\n         (not (string-suffix? \"dly\" word))\n         (not (string-suffix? \"fly\" word))\n         (not (string-suffix? \"gly\" word))\n         (not (string-suffix? \"jly\" word))\n         (not (string-suffix? \"kly\" word))\n         (not (string-suffix? \"nly\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"qly\" word))\n         (not (string-suffix? \"rly\" word))\n         (not (string-suffix? \"tly\" word))\n         (not (string-suffix? \"vly\" word))\n         (not (string-suffix? \"wly\" word))\n         (not (string-suffix? \"xly\" word))\n         (not (string-suffix? \"zly\" word))\n         (not (string-suffix? \"bly\" word))\n         (not (string-suffix? \"cly\" word))\n         (not (string-suffix? \"dly\" word))\n         (not (string-suffix? \"ely\" word))\n         (not (string-suffix? \"fly\" word))\n         (not (string-suffix? \"gly\" word))\n         (not (string-suffix? \"hly\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"jly\" word))\n         (not (string-suffix? \"kly\" word))\n         (not (string-suffix? \"lly\" word))\n        ",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (member word (string-split \"adverbly\"))))\n      (list word (string-index text word)))))\n",
    "  (regexp-match* #px\"\\\\b[a-zA-Z]+ly\\\\b\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #px\"\\\\b[a-zA-Z]+ly\\\\b\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word #\\ly)\n                            (string-contains word #\\.)))\n      (list word (string-index word #\\ly)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text #\\space)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]*ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ((adverbs (regexp-match* #rx\"\\w+ly\" text)))\n    (for/list ([adverb adverbs])\n      (list (regexp-match #rx\"\\w+ly\" adverb)\n            (regexp-match-positions #rx\"\\w+ly\" text)))))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find_adverb words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (list (string-index text (car words)))))\n          (else (find_adverb (cdr words)))))\n  (find_adverb (string-split text)))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"really\" \"actually\" \"basically\" \"literally\")))))\n  (define (find-adverb-helper text pos)\n    (cond ((string-empty? text) '())\n          ((is-adverb? text) (list pos))\n          (else (append (find-adverb-helper (string-tail text) (+ pos 1))\n                        (find-adverb-helper (string-drop-right text 1) (+ pos 1))))))\n  (find-adverb-helper text 0))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (string-prefix? \"ly\" word)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (string-contains? word #\\a)))\n      (list word (string-index word #\\a)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list (string-index text (car words)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text)))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx(regexp adverb) text)))))\n",
    "  (regexp-match* #px\"\\\\b\\\\w+ly\\\\b\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-prefix? \"r\" word)))\n  (define (find_adverb text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) (list (car (cdr text)))))\n          (else (find_adverb (cdr text)))))\n  (find_adverb (string-tokenize text)))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))))\n  (define (find-adverb-helper text index)\n    (cond ((string-empty? text) '())\n          ((is-adverb? text) (list text index))\n          (else (find-adverb-helper (string-tail text) (+ index 1)))))\n  (find-adverb-helper text 0))\n",
    "  (let loop ([text (string-split text #\\space)]\n             [result '()])\n    (cond [(empty? text) (reverse result)]\n          [(string-suffix? \"ly\" (first text))\n           (loop (rest text) (cons (list (first text) (string-index text (first text))) result))]\n          [else (loop (rest text) result)])))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (find_adverb text)\n    (define (is_adverb? word)\n      (and (string-suffix? \"ly\" word)\n           (not (string-suffix? \"ally\" word))\n           (not (string-suffix? \"ply\" word))\n           (not (string-suffix? \"bly\" word))))\n    (define (find-adverb-helper text)\n      (cond ((string-empty? text) '())\n            ((is_adverb? text) (list text))\n            (else (find-adverb-helper (substring text 1)))))\n    (find-adverb-helper text))\n  (define (find-adverb-positions text)\n    (define (find-adverb-positions-helper text)\n      (cond ((string-empty? text) '())\n            ((is_adverb? text) (list (string-length text)))\n            (else (cons (string-length text) (find-adverb-positions-helper (substring text 1))))))\n    (find-adverb-positions-helper text))\n  (list (find_adverb text) (find-adverb-positions text)))\n",
    "  (let loop ([text (string-split text)]\n             [pos 0]\n             [result '()])\n    (cond [(empty? text) result]\n          [(string-suffix? \"ly\" (car text))\n           (cons (list (car text) pos) result)]\n          [else (loop (cdr text) (+ 1 pos) result)])))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" (sub1 (string-length word)))))\n      (list word (string-index text word)))))\n",
    "  (let ([words (string-split text)])\n    (let loop ([words words] [result '()])\n      (cond [(empty? words) result]\n            [(string-suffix? \"ly\" (first words))\n             (loop (rest words) (cons (list (first words) (string-index text (first words))) result))]\n            [else (loop (rest words) result)]))))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find_adverb words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (list (car (regexp-match #rx\"\\w+\" text)))))\n          (else (find_adverb (cdr words)))))\n  (find_adverb (string-split text #rx\"\\s+\")))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" (sub1 (string-length word)))))\n      (list word (string-index text word)))))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"really\" \"actually\" \"basically\" \"obviously\")))))\n  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) (list (string-index text (car text)))))\n          (else (find-adverb (cdr text)))))\n  (find-adverb (string-split text #\\space)))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word)\n                            (and (string-suffix? \"ly\" word)\n                                 (not (string-suffix? \"ally\" word))))\n                          words)])\n    (map (lambda (adverb)\n           (list adverb (string-index text adverb)))\n         adverbs)))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (member word (string-split text #\\space))))\n  (define (find_adverb-helper text adverbs)\n    (cond\n      [(empty? text) adverbs]\n      [(is_adverb? (first text))\n       (find_adverb-helper (rest text) (cons (first text) adverbs))]\n      [else (find_adverb-helper (rest text) adverbs)]))\n  (find_adverb-helper (string-split text #\\space) '()))\n",
    "  (regexp-match* #px\"\\\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-contains word \"ly\")\n         (not (string-contains word \"lyly\"))))\n  (define (find-adverb-helper text)\n    (cond ((empty? text) '())\n          ((is_adverb? (first text)) (list (first text) (list (string-index (first text) text))))\n          (else (find-adverb-helper (rest text)))))\n  (find-adverb-helper (string-split text #\\space)))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"really\" \"actually\" \"currently\" \"basically\" \"obviously\" \"clearly\" \"simply\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"obviously\" \"clearly\" \"basically\" \"generally\" \"specifically\" \"essentially\" \"literally\" \"actually\" \"really\" \"ob",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"really\" \"actually\" \"probably\" \"hopefully\")))))\n  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) 0))\n          (else (let ((result (find-adverb (cdr text))))\n                  (if (null? result) '()\n                      (cons (car result) (cons (+ 1 (cadr result)) (cddr result)))))))\n    (find-adverb (string-split text)))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let* ([tokens (tokenize text)]\n         [adverbs (filter (lambda (token) (and (adverb? token) (string-suffix? \"ly\" token))) tokens)])\n    (map (lambda (adverb) (list adverb (find-positions adverb tokens))) adverbs)))\n",
    "  (let loop ([text text] [pos 0])\n    (cond\n      [(empty? text) '()]\n      [(regexp-match #rx\"ly$\" (first text)) (list (first text) pos)]\n      [else (loop (rest text) (+ pos 1))])))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text (string-split text)])\n    (cond\n      [(empty? text) empty]\n      [(regexp-match #rx\"ly$\" (first text)) (list (first text) (string-index text (first text)))]\n      [else (loop (rest text))])))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"bly\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (member word (list-of-words text))))\n  (define (find_adverb text)\n    (cond ((is_adverb? text)\n           (list text 0))\n          ((string-empty? text)\n           '())\n          (else\n           (let ((rest (find_adverb (substring text 1))))\n             (if (empty? rest)\n                 '()\n                 (cons (list (first rest) (+ (second rest) 1))\n                       (rest rest)))))))\n  (find_adverb text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (member word (list-of-words text))))\n  (define (find_adverb text)\n    (cond ((is_adverb? text) text)\n          ((string-empty? text) \"\")\n          (else (find_adverb (string-drop-right text 1)))))\n  (define (find_adverb_positions text)\n    (cond ((string-empty? text) '())\n          ((string=? (find_adverb text) text) (list (string-length text)))\n          (else (append (list (string-length text))\n                        (find_adverb_positions (string-drop-right text 1))))))\n  (list (find_adverb text) (find_adverb_positions text)))\n",
    "  (regexp-match* #rx\"([^ ]+)ly\" text))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (member word (list \"quickly\" \"slowly\" \"happily\" \"sadly\"))))\n  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((is-adverb? (car text)) (list (car text) (list (string-index text (car text)))))\n          (else (find-adverb (cdr text)))))\n  (find-adverb (string-split text)))\n",
    "  (regexp-match* #rx\"([^ ]*ly)\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #px\"\\\\b[a-zA-Z]+ly\\\\b\" text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"really\" \"actually\" \"basically\" \"obviously\")))))\n  (define (find-adverb-helper text pos)\n    (if (empty? text)\n        '()\n        (let ((word (first text)))\n          (if (is-adverb? word)\n              (list word pos)\n              (find-adverb-helper (rest text) (+ pos (string-length word) 1))))))\n  (find-adverb-helper (string-split text #\\space) 0))\n",
    "  (define (is-adverb? word)\n    (and (string-contains word \"ly\")\n         (not (string-contains word \"lyly\"))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list-ref (string-split text) (car words))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text)))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverbs-helper words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words))\n           (list (car words) (list-ref (string-split text #\\space) (length words))))\n          (else (find-adverbs-helper (cdr words)))))\n  (find-adverbs-helper (string-split text #\\space)))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-suffix? \"ly\" (string-downcase word))))\n  (define (find-adverb-helper text adverbs)\n    (cond\n      [(empty? text) adverbs]\n      [(is-adverb? (first text))\n       (find-adverb-helper (rest text) (cons (first text) adverbs))]\n      [else (find-adverb-helper (rest text) adverbs)]))\n  (find-adverb-helper (string-split text) '()))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (and (string-suffix? \"ly\" word) (not (string-prefix? \"ly\" word)))) words)]\n         [positions (map (lambda (word) (list-position words word)) adverbs)])\n    (list adverbs positions)))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (let loop ([text text]\n             [positions '()])\n    (cond\n      [(empty? text) (reverse positions)]\n      [(regexp-match #rx\"ly$\" (first text))\n       (loop (rest text) (cons (first text) positions))]\n      [else (loop (rest text) positions)])))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (regexp-match? #rx\"ly$\" word))\n      (list word (string-index text word)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (define (is-adverb word)\n      (and (string-suffix? \"ly\" word)\n           (not (string-suffix? \"ally\" word))\n           (not (string-suffix? \"ely\" word))))\n    (define (find-adverb words)\n      (cond\n        [(empty? words) empty]\n        [(is-adverb (first words)) (cons (first words) (cons (first (string-indexes text (first words))) empty))]\n        [else (find-adverb (rest words))]))\n    (find-adverb words)))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-prefix? \"r\" word)))\n  (define (find-adverb-helper text pos)\n    (cond ((string-empty? text) '())\n          ((is_adverb? text) (list pos (string-length text)))\n          (else (find-adverb-helper (string-tail text) (+ pos 1)))))\n  (find-adverb-helper text 0))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (member word (string-split (string-append (file->string \"adverbs.txt\") \"\\n\"))))\n                #:collect (list word (string-index text word)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text]\n             [positions '()])\n    (cond\n      [(empty? text) positions]\n      [(regexp-match #rx\"ly$\" (first text))\n       (loop (rest text) (cons (list (first text) (regexp-match-positions #rx\"ly$\" (first text))) positions))]\n      [else (loop (rest text) positions)])))\n",
    "  (define (find_adverbs_helper text pos)\n    (cond\n      [(empty? text) empty]\n      [(regexp-match #rx\"ly$\" text) (cons (list (substring text pos (string-length text)) pos) (find_adverbs_helper (substring text 1 (string-length text)) (+ pos 1)))]\n      [else (find_adverbs_helper (substring text 1 (string-length text)) (+ pos 1))]))\n  (find_adverbs_helper text 0))\n",
    "  (regexp-match* #px\"\\\\b\\\\w+ly\\\\b\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #px\"\\\\b\\\\w+ly\\\\b\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (string-contains? \"ly\" word)))\n      (list word (string-index word \"ly\")))))\n",
    "  (let ((adverbs (regexp-match* #rx\"\\w+ly\" text)))\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index adverb text)))))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"([a-zA-Z]+ly)\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-suffix? \"ly\" word)\n               (not (member word result)))\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (string-contains word #\\e)))\n      (list word (string-index word #\\e)))))\n",
    "  (regexp-match* #px\"\\\\b\\\\w+ly\\\\b\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-suffix? \"ly\" word)\n                            (member word (string-split \"adverbly\"))))\n      (list word (string-index text word)))))\n",
    "  (let loop ([text text] [pos 0])\n    (cond\n      [(empty? text) '()]\n      [(regexp-match #rx\"ly$\" (first text))\n       (cons (list (first text) pos) (loop (rest text) (+ pos 1)))]\n      [else (loop (rest text) (+ pos 1))])))\n",
    "  (define (is_adverb word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find-adverb-helper words)\n    (cond ((null? words) '())\n          ((is_adverb (car words)) (list (car words) (list (car (regexp-match #rx\"\\w+ly\" text)))))\n          (else (find-adverb-helper (cdr words)))))\n  (find-adverb-helper (regexp-match #rx\"\\w+\" text)))\n",
    "  (define (find_adverbs_helper text pos)\n    (cond ((empty? text) '())\n          ((string-suffix? \"ly\" (first text))\n           (cons (list (first text) pos) (find_adverbs_helper (rest text) (+ pos 1))))\n          (else (find_adverbs_helper (rest text) (+ pos 1)))))\n  (find_adverbs_helper (string-split text) 0))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (string-suffix? \"ly\" (string-downcase word))))\n  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((is_adverb? (car text)) (list (car text) (list (string-index text (car text)))))\n          (else (find-adverb (cdr text)))))\n  (find-adverb (string-split text)))\n",
    "  (let loop ([text (string-split text)])\n    (cond [(empty? text) '()]\n          [(string-suffix? \"ly\" (first text)) (list (first text) (sub1 (length text)))]\n          [else (loop (rest text))])))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list (string-index text (car words)))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n"
  ]
}