{
  "name": "mbpp_584_find_adverbs",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the first adverb ending with ly and its positions in a given string.\n(define (find_adverbs text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverbs))\n    (check-equal? (candidate \"Clearly, he has no excuse for such behavior.\") \"0-7: Clearly\")\n    (check-equal? (candidate \"Please handle the situation carefuly\") \"28-36: carefuly\")\n    (check-equal? (candidate \"Complete the task quickly\") \"18-25: quickly\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (member word '(\"early\" \"only\" \"slowly\" \"friendly\" \"carefully\" \"slightly\" \"sadly\" \"happily\" \"loudly\" \"quietly\" \"angrily\" \"quickly\" \"finally\" \"badly\" \"hardly\" \"nearly\" \"really\" \"clearly\" \"honestly\" \"gently\" \"obviously\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"carefully\" \"care",
    "  (let loop ((text text)\n             (positions '()))\n    (cond ((empty? text) (reverse positions))\n          ((regexp-match #rx\"ly$\" (first text))\n           (loop (rest text) (cons (first text) positions)))\n          (else (loop (rest text) positions)))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word (in-list words)])\n      (and (string-suffix? \"ly\" word)\n           (list word (position word words))))))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ply\" word))))\n  (define (find-adverb-helper words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words))\n           (cons (car words) (cons (string-index text (car words)) '())))\n          (else (find-adverb-helper (cdr words)))))\n  (find-adverb-helper (string-split text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (let loop ([text text] [pos 0])\n    (cond [(empty? text) '()]\n          [(string-suffix? \"ly\" (first text))\n           (list (first text) pos)]\n          [else (loop (rest text) (+ 1 pos))])))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (find_adverbs-helper text pos)\n    (if (string-empty? text)\n        '()\n        (if (and (string-suffix? \"ly\" text)\n                 (member (string-ref text (- (string-length text) 2))\n                         '(#\\a #\\e #\\i #\\o #\\u)))\n            (cons (list (substring text 0 (- (string-length text) 2)) pos)\n                  (find_adverbs-helper (substring text 1) (+ pos 1)))\n            (find_adverbs-helper (substring text 1) (+ pos 1)))))\n  (find_adverbs-helper text 0))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n",
    "  (define (is_adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is_adverb? (car words)) (list (car words) (string-index text (car words))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-split text #\\space)))\n",
    "  (let loop ([text text]\n             [pos 0])\n    (cond [(empty? text) '()]\n          [(regexp-match #rx\"ly$\" (first text))\n           (list (list (first text) pos))]\n          [else (loop (rest text) (+ pos 1))])))\n",
    "  (let loop ([text text]\n             [positions '()])\n    (cond\n      [(empty? text) (list (reverse positions))]\n      [(regexp-match #rx\"ly$\" (first text))\n       (loop (rest text) (cons (first text) positions))]\n      [else (loop (rest text) positions)])))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx(regexp adverb) text)))))\n",
    "  (define (is-adverb? word)\n    (and (string-suffix? \"ly\" word)\n         (not (string-suffix? \"ally\" word))\n         (not (string-suffix? \"ily\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (string-suffix? \"ply\" word))\n         (not (",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word \"ly\")\n                            (string-contains word \"ly\" (sub1 (string-length word)))))\n      (list word (string-index text word)))))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (and (string-contains word #\\ly)\n                            (string-contains word #\\.)))\n      (list word (string-index word #\\.)))))\n",
    "  (define (is-adverb? word)\n    (and (string-contains word \"ly\")\n         (not (string-contains word \"lyly\"))))\n  (define (find-adverb words)\n    (cond ((null? words) '())\n          ((is-adverb? (car words)) (list (car words) (list-ref (string-tokenize text) (car words))))\n          (else (find-adverb (cdr words)))))\n  (find-adverb (string-tokenize text)))\n",
    "  (regexp-match* #rx\"\\w+ly\" text))\n"
  ]
}