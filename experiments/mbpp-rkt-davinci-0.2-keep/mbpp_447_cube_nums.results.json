{
  "name": "mbpp_447_cube_nums",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (n) (* n n n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (expt x 3)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (n) (* n n n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map cube nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "/tmp/tmpu2zmx_7d.rkt:5:7: cube: unbound identifier\n  in: cube\n  location...:\n   /tmp/tmpu2zmx_7d.rkt:5:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (n) (* n n n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (lambda (x) (* x x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000))\n    (check-equal? (candidate (list 10 20 30)) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15)) (list 1728 3375))\n))\n\n(test-humaneval)",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}