{
  "name": "mbpp_781_count_divisors",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n(define (count_divisors n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_divisors))\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate 100) #f)\n    (check-equal? (candidate 125) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count-divisors-iter n i)\n    (cond ((= i n) 1)\n          ((divides? i n) (+ 1 (count-divisors-iter n (+ i 1))))\n          (else (count-divisors-iter n (+ i 1)))))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond [(= i n) 1]\n          [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n          [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter i)\n    (if (&gt; i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count-divisors-iter (+ i 1)))\n            (count-divisors-iter (+ i 1)))))\n  (count-divisors-iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(zero? (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i)\n    (cond ((= i n) 0)\n          ((divides? n i) (+ 1 (count-divisors-iter n (+ i 1))))\n          (else (count-divisors-iter n (+ i 1)))))\n  (count-divisors-iter n 1))\n",
    "  (define (count-divisors-iter i count)\n    (cond ((&gt; i n) count)\n          ((= (remainder n i) 0) (count-divisors-iter (+ i 1) (+ count 1)))\n          (else (count-divisors-iter (+ i 1) count))))\n  (count-divisors-iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count-divisors-iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count-divisors-iter n (+ i 1) (+ count 1))]\n      [else (count-divisors-iter n (+ i 1) count)]))\n  (count-divisors-iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (count_divisors_iter (/ n i) (+ i 1))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(zero? (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (let loop ([i 1] [count 0])\n    (cond [(> i n) count]\n          [(zero? (modulo n i)) (loop (+ i 1) (+ count 1))]\n          [else (loop (+ i 1) count)])))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(zero? (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= n 1)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter (/ n i) i))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 2))\n",
    "  (define (count_divisors_iter n i count)\n    (cond [(= i n) count]\n          [(= (remainder n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n          [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond [(= i n) count]\n          [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n          [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (iter i)\n    (cond ((= i n) 0)\n          ((divides? i n) (+ 1 (iter (+ i 1))))\n          (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (count-divisors-helper n i)\n    (cond\n      [(= i n) 0]\n      [(zero? (modulo n i)) (+ 1 (count-divisors-helper n (+ i 1)))]\n      [else (count-divisors-helper n (+ i 1))]))\n  (count-divisors-helper n 1))\n",
    "  (define (iter i count)\n    (cond [(= i n) count]\n          [(zero? (modulo n i)) (iter (+ i 1) (+ count 1))]\n          [else (iter (+ i 1) count)]))\n  (iter 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (divisors n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (divisors n (+ i 1))))\n          (else (divisors n (+ i 1)))))\n  (divisors n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1)))]\n      [else (count_divisors-iter n (+ i 1))]))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1)))]\n      [else (count_divisors-iter n (+ i 1))]))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (&lt; i n)\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))\n        0))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        0\n        (if (= (remainder n i) 0)\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond [(= i n) count]\n          [(zero? (modulo n i)) (count_divisors_iter (+ i 1) (+ count 1))]\n          [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond [(= i n) 1]\n          [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n          [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (divisors n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ 1 (divisors n (+ i 1))))\n          (else (divisors n (+ i 1)))))\n  (divisors n 1))\n",
    "  (define (count-divisors-iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count-divisors-iter n (+ i 1) (+ count 1)))\n          (else (count-divisors-iter n (+ i 1) count))))\n  (count-divisors-iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1))))\n          (else (count-divisors-iter n (+ i 1)))))\n  (count-divisors-iter n 1))\n",
    "  (define (count-divisors-iter n i)\n    (if (= n 1)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count-divisors-iter (/ n i) i))\n            (count-divisors-iter n (+ i 1)))))\n  (count-divisors-iter n 2))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (remainder n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond [(= i n) count]\n          [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n          [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (remainder n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i)\n    (if (= i n)\n        1\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors_iter (+ i 1)))\n            (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (count_divisors_iter (/ n i) (+ i 1))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter i)\n    (if (&gt; i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors-iter (+ i 1)))\n            (count_divisors-iter (+ i 1)))))\n  (count_divisors-iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count-divisors-iter n (+ i 1) (+ count 1)))\n          (else (count-divisors-iter n (+ i 1) count))))\n  (count-divisors-iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((zero? (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond [(= i n) 1]\n          [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n          [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(zero? (modulo n i)) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1))))\n          (else (count_divisors-iter n (+ i 1)))))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count-divisors-iter n (+ i 1) (+ count 1))]\n      [else (count-divisors-iter n (+ i 1) count)]))\n  (count-divisors-iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        1\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n divisors)\n    (if (= n 1)\n        divisors\n        (if (zero? (modulo n divisors))\n            (count_divisors_iter n (+ divisors 1))\n            (count_divisors_iter n (+ divisors 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count-divisors-iter (+ i 1) (+ count 1))]\n      [else (count-divisors-iter (+ i 1) count)]))\n  (count-divisors-iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond [(= i n) 1]\n          [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n          [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((zero? (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond [(= i n) 1]\n          [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n          [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (count_divisors_iter (/ n i) (+ i 1))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 2))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(zero? (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond [(= i n) count]\n          [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n          [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= 0 (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1)))]\n      [else (count_divisors-iter n (+ i 1))]))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter count n)\n    (if (= n 0)\n        count\n        (if (= (remainder n 2) 0)\n            (count_divisors-iter (+ count 1) (/ n 2))\n            (count_divisors-iter count (/ n 2)))))\n  (count_divisors-iter 0 n))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond ((&gt; n i) (count_divisors-iter n (+ i 1)))\n          ((= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1))))\n          (else (count_divisors-iter n (+ i 1)))))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (length (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n)))))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors-iter n (+ i 1) (+ count 1))]\n      [else (count_divisors-iter n (+ i 1) count)]))\n  (count_divisors-iter n 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1))))\n          (else (count-divisors-iter n (+ i 1)))))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i count)\n    (cond\n      [(= i n) count]\n      [(zero? (modulo n i)) (count-divisors-iter n (+ i 1) (+ count 1))]\n      [else (count-divisors-iter n (+ i 1) count)]))\n  (count-divisors-iter n 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (cond [(= i n) 0]\n          [(= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1)))]\n          [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors-iter n i)\n    (cond ((&gt; i n) 0)\n          ((= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1))))\n          (else (count_divisors-iter n (+ i 1)))))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors-iter i count)\n    (cond\n      [(> i n) count]\n      [(zero? (modulo n i)) (count_divisors-iter (+ i 1) (+ count 1))]\n      [else (count_divisors-iter (+ i 1) count)]))\n  (count_divisors-iter 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count-divisors-iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count-divisors-iter n (+ i 1) (+ count 1))]\n      [else (count-divisors-iter n (+ i 1) count)]))\n  (count-divisors-iter n 1 0))\n",
    "  (define (count-divisors-iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count-divisors-iter n (+ i 1) (+ count 1))]\n      [else (count-divisors-iter n (+ i 1) count)]))\n  (count-divisors-iter n 1 0))\n",
    "  (let loop ((i 1) (count 0))\n    (cond ((> i n) count)\n          ((zero? (modulo n i)) (loop (+ i 1) (+ count 1)))\n          (else (loop (+ i 1) count)))))\n",
    "  (define (divisors n i)\n    (cond\n      [(= i n) 1]\n      [(zero? (modulo n i)) (+ 1 (divisors n (+ i 1)))]\n      [else (divisors n (+ i 1))]))\n  (divisors n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1)))]\n      [else (count_divisors-iter n (+ i 1))]))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond ((= i n) count)\n          ((zero? (modulo n i)) (count_divisors_iter n (+ i 1) (+ count 1)))\n          (else (count_divisors_iter n (+ i 1) count))))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(divides? i n) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (remainder n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (divisors n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ 1 (divisors n (+ i 1))))\n          (else (divisors n (+ i 1)))))\n  (divisors n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (+ n 1))])\n      (if (= (modulo n i) 0)\n          i)))\n  (length (divisors n)))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond [(= i n) 1]\n          [(= (remainder n i) 0) (+ 1 (count_divisors-iter n (+ i 1)))]\n          [else (count_divisors-iter n (+ i 1))]))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n acc)\n    (if (= n 1)\n        acc\n        (if (= (remainder n 2) 0)\n            (count_divisors_iter (/ n 2) (+ acc 1))\n            (count_divisors_iter (- n 1) acc))))\n  (count_divisors_iter n 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1)))]\n      [else (count_divisors-iter n (+ i 1))]))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond ((= i n) count)\n          ((divides? i n) (count_divisors_iter (+ i 1) (+ count 1)))\n          (else (count_divisors_iter (+ i 1) count))))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= (remainder n i) 0) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (length (divisors n)))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (remainder n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (length (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n)))))\n",
    "  (define (count-divisors-iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count-divisors-iter n (+ i 1) (+ count 1))]\n      [else (count-divisors-iter n (+ i 1) count)]))\n  (count-divisors-iter n 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count-divisors-iter n (+ i 1)))\n            (count-divisors-iter n (+ i 1)))))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (remainder n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond [(= i n) 1]\n          [(zero? (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1)))]\n          [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count-divisors-iter n (+ i 1) (+ count 1))]\n      [else (count-divisors-iter n (+ i 1) count)]))\n  (count-divisors-iter n 1 0))\n",
    "  (define (count_divisors_iter i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter (+ i 1) (+ count 1))]\n      [else (count_divisors_iter (+ i 1) count)]))\n  (count_divisors_iter 1 0))\n",
    "  (define (count_divisors-iter i count)\n    (cond ((&gt; i n) count)\n          ((= (modulo n i) 0) (count_divisors-iter (+ i 1) (+ count 1)))\n          (else (count_divisors-iter (+ i 1) count))))\n  (count_divisors-iter 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond ((= i n) 1)\n          ((zero? (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1))))\n          (else (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i)\n    (if (> i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (count_divisors_iter (+ i 1)))))\n  (count_divisors_iter 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter i)\n    (cond\n      [(= i n) 0]\n      [(zero? (modulo n i)) (+ 1 (count_divisors_iter (+ i 1)))]\n      [else (count_divisors_iter (+ i 1))]))\n  (count_divisors_iter 1))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(even? n) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (length (filter (lambda (x) (= 0 (modulo n x))) (range 1 n))))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond [(= i n) 1]\n          [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n          [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1)))]\n      [else (count_divisors-iter n (+ i 1))]))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= 0 (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i count)\n    (cond [(= i n) count]\n          [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n          [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors-iter n i)\n    (if (= n 1)\n        i\n        (if (zero? (modulo n i))\n            (count_divisors-iter (/ n i) (+ i 1))\n            (count_divisors-iter n (+ i 1)))))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (count_divisors_iter n (+ i 1)))\n            (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(zero? (modulo n i)) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (remainder n i) 0) (+ 1 (count_divisors-iter n (+ i 1)))]\n      [else (count_divisors-iter n (+ i 1))]))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i count)\n    (cond\n      [(= i n) count]\n      [(= (modulo n i) 0) (count_divisors_iter n (+ i 1) (+ count 1))]\n      [else (count_divisors_iter n (+ i 1) count)]))\n  (count_divisors_iter n 1 0))\n",
    "  (define (count_divisors_iter n i)\n    (if (&gt; i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (count_divisors_iter n (+ i 1)))))\n  (count_divisors_iter n 1))\n",
    "  (define (count-divisors-iter i count)\n    (cond ((= i n) count)\n          ((zero? (modulo n i)) (count-divisors-iter (+ i 1) (+ count 1)))\n          (else (count-divisors-iter (+ i 1) count))))\n  (count-divisors-iter 1 0))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 0]\n      [(zero? (modulo n i)) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter n divisor count)\n    (cond ((= n 1) count)\n          ((= (remainder n divisor) 0) (count_divisors_iter (/ n divisor) divisor (+ count 1)))\n          (else (count_divisors_iter n (+ divisor 1) count))))\n  (count_divisors_iter n 2 0))\n",
    "  (define (count_divisors-iter n i)\n    (if (&lt; i n)\n        (if (zero? (modulo n i))\n            (+ 1 (count_divisors-iter n (+ i 1)))\n            (count_divisors-iter n (+ i 1)))\n        0))\n  (count_divisors-iter n 1))\n",
    "  (define (count-divisors-iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count-divisors-iter n (+ i 1)))]\n      [else (count-divisors-iter n (+ i 1))]))\n  (count-divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 0]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n",
    "  (define (count_divisors-iter n i)\n    (cond ((= i n) 1)\n          ((= (modulo n i) 0) (+ 1 (count_divisors-iter n (+ i 1))))\n          (else (count_divisors-iter n (+ i 1)))))\n  (count_divisors-iter n 1))\n",
    "  (define (count_divisors_iter n i)\n    (cond\n      [(= i n) 1]\n      [(= (modulo n i) 0) (+ 1 (count_divisors_iter n (+ i 1)))]\n      [else (count_divisors_iter n (+ i 1))]))\n  (count_divisors_iter n 1))\n"
  ]
}