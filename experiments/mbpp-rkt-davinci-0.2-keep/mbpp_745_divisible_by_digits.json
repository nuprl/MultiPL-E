{
  "name": "mbpp_745_divisible_by_digits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n(define (divisible_by_digits startnum endnum)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divisible_by_digits))\n    (check-equal? (candidate 1 22) (list 1 2 3 4 5 6 7 8 9 11 12 15 22))\n    (check-equal? (candidate 1 15) (list 1 2 3 4 5 6 7 8 9 11 12 15))\n    (check-equal? (candidate 20 25) (list 22 24))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d)))\n                (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (list->set (string->list (number->string i))))\n        i)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (filter\n   (lambda (x)\n     (andmap\n      (lambda (y)\n        (zero? (remainder x y)))\n      (string->list (number->string x))))\n   (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (= (modulo n d) 0)) (string->list (number->string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (zero? (modulo i d))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (number->list i))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)]\n             #:when (every? (\u03bb (x) (zero? (remainder i x))) (string->list (number->string i)))))\n  i)\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (number->list i))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)]\n             #:when (and (not (zero? (modulo i 10)))\n                         (andmap (lambda (d) (zero? (modulo i d)))\n                                 (map string->number (string-&gt;list (number-&gt;string i))))))\n    i))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (= (modulo i x) 0)) (number->list i))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (\u03bb (x) (= 0 (modulo i x))) (string-&gt;list (number-&gt;string i)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (remainder i x))) (list->set (string->list (number->string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (list->set (string->list (number->string i))))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (for/and ([d (in-list (string->list (number->string i)))]\n                  #:when (not (zero? (modulo i d))))\n                #t)\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (list->set (string->list (number->string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (lambda (d) (= (modulo i d) 0))\n            (string->list (number->string i)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (number->list i))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (map string->number (string-&gt;list (number-&gt;string i))))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (lambda (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x (string->number (string y)))))\n                    (string-&gt;list (number-&gt;string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (zero? (modulo x y))) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (= 0 (modulo i x))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        '())))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (list->set (string-&gt;list (number-&gt;string i))))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d)))\n                (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([x (in-range startnum endnum)])\n    (if (andmap (\u03bb (y) (= (modulo x y) 0)) (string->list (number->string x)))\n        x\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (lambda (x) (zero? (modulo i x)))\n                (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo n d)))\n            (string->list (number->string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x)))\n                (list->set (string->list (number->string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0))\n                (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x)))\n                (list->set (string->list (number->string i))))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)]\n             #:when (every? (\u03bb (x) (zero? (modulo i x))) (string-&gt;list (number-&gt;string i))))\n    i))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (define (divisible? n)\n    (define (divisible-by-digit? n d)\n      (if (= d 0)\n          #t\n          (if (zero? (modulo n d))\n              (divisible-by-digit? n (- d 1))\n              #f)))\n    (divisible-by-digit? n (modulo n 10)))\n  (define (loop n)\n    (if (= n endnum)\n        '()\n        (if (divisible? n)\n            (cons n (loop (+ n 1)))\n            (loop (+ n 1)))))\n  (loop startnum))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (x) (= (modulo i x) 0)) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        '())))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (remainder x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (x) (zero? (modulo i x))) (list->set (string-&gt;list (number-&gt;string i))))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (= (modulo n d) 0)) (string->list (number->string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (x) (zero? (modulo i (string->number (number->string x))))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)]\n             #:when (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i))))\n    i))\n",
    "  (define (divisible_by_digits_helper startnum endnum acc)\n    (if (&gt; startnum endnum)\n        acc\n        (if (divisible_by_digits_helper_2 startnum)\n            (divisible_by_digits_helper (+ startnum 1) endnum (cons startnum acc))\n            (divisible_by_digits_helper (+ startnum 1) endnum acc))))\n  (divisible_by_digits_helper startnum endnum '()))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x)))\n                (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (= (modulo i x) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (= (modulo i d) 0)) (number->list i))\n        i\n        '())))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= 0 (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)]\n             #:when (every? (\u03bb (x) (zero? (modulo i x))) (string-&gt;list (number-&gt;string i))))\n    i))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo n d))) (string->list (number->string n)))))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo n d))) (string->list (number->string n)))))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo n d)))\n            (string->list (number->string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (remainder i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (define (divisible? n)\n    (define (divisible-by-digit? n d)\n      (if (zero? (modulo n d))\n          #t\n          (divisible-by-digit? n (- d 1))))\n    (divisible-by-digit? n (number->string n)))\n  (filter divisible? (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)]\n             #:when (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i))))\n    i))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (n)\n            (andmap (lambda (d)\n                      (zero? (modulo n d)))\n                    (string->list (number->string n))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (\u03bb (d) (= (modulo i d) 0))\n            (string->list (number->string i)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d)))\n                (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo n d))) (string->list (number->string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (number->list i))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (list->set (string->list (number->string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (list->vector (string->list (number->string i))))\n        i\n        #f)))\n",
    "  (define (divisible? n)\n    (let loop ([n n] [d 10])\n      (cond\n        [(zero? n) #t]\n        [(zero? (modulo n d)) #f]\n        [else (loop (quotient n 10) (add1 d))])))\n  (for/list ([n (in-range startnum endnum)])\n    (when (divisible? n) n)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (list->set (string->list (number->string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (define (divisible_by_digits_helper startnum endnum acc)\n    (cond\n      [(> startnum endnum) acc]\n      [(divisible_by_digits_helper (+ startnum 1) endnum\n                                   (if (divisible_by_digits_p startnum)\n                                       (cons startnum acc)\n                                       acc))]))\n  (divisible_by_digits_helper startnum endnum '()))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i (string->number (number->string x))))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo n d))) (string->list (number->string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= 0 (remainder i d))) (string-&gt;list (number-&gt;string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (define (divisible_by_digits_helper startnum endnum)\n    (cond\n      [(> startnum endnum) '()]\n      [(divisible_by_digits_helper_2 startnum) (cons startnum (divisible_by_digits_helper (+ startnum 1) endnum))]\n      [else (divisible_by_digits_helper (+ startnum 1) endnum)]))\n  (divisible_by_digits_helper startnum endnum))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (lambda (d)\n              (zero? (modulo n d)))\n            (string->list (number->string n)))))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (remainder i x))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (filter (lambda (n)\n            (andmap (lambda (d)\n                      (= (modulo n d) 0))\n                    (string->list (number->string n))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string-&gt;list (number-&gt;string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)]\n             #:when (every? (\u03bb (d) (zero? (modulo i d)))\n                            (string->list (number->string i)))))\n    i))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (x) (zero? (modulo i (string->number (number->string x))))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (number->list i))\n        i\n        '())))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d)))\n                (list->set (string->list (number->string i))))\n        i)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)]\n             #:when (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i))))\n    i))\n",
    "  (for/list ([num (in-range startnum endnum)])\n    (andmap (\u03bb (digit) (zero? (modulo num digit)))\n            (string-&gt;list (number-&gt;string num)))))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (define (divisible-by-digit? n d)\n                (zero? (modulo n d)))\n              (andmap divisible-by-digit? (digits n)))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (= 0 (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x)))\n                (list->set (string->list (number->string i))))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        '())))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (x) (zero? (modulo i x)))\n                (list->set (string->list (number->string i))))\n        i\n        '())))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (= 0 (modulo i x))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (remainder n d))) (string->list (number->string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (= 0 (modulo i x)))\n                (list->set (string->list (number->string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x) (every (lambda (y) (zero? (modulo x y))) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo n d)))\n            (string->list (number->string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (define (divisible-by-digits-helper startnum endnum)\n    (if (&gt; startnum endnum)\n        '()\n        (if (every (lambda (x) (zero? (modulo startnum x))) (map string-&gt;number (string-&gt;list (number-&gt;string startnum))))\n            (cons startnum (divisible-by-digits-helper (+ startnum 1) endnum))\n            (divisible-by-digits-helper (+ startnum 1) endnum))))\n  (divisible-by-digits-helper startnum endnum))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (= (modulo i d) 0))\n                (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (cond\n      [(divisible? i) i]\n      [else #f])))\n",
    "  (filter (\u03bb (x) (every (\u03bb (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (number->list i))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)]\n             #:when (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))))\n  )\n",
    "  (filter (\u03bb (x) (every (\u03bb (y) (zero? (modulo x y))) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (= (modulo i d) 0)) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (string-&gt;list (number-&gt;string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (digits i))\n        i\n        #f)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo n d))) (string-&gt;list (number-&gt;string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (when (and (every (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n               (not (zero? i)))\n      i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (lambda (d) (zero? (modulo i d)))\n            (string->list (number->string i)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string-&gt;list (number-&gt;string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d)\n                  (zero? (remainder i d)))\n                (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (= (modulo i x) 0)) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (lambda (digit)\n              (zero? (modulo i digit)))\n            (string->list (number->string i)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d)))\n                (string->list (number->string i)))\n        i)))\n"
  ]
}