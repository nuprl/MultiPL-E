{
  "name": "mbpp_745_divisible_by_digits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n(define (divisible_by_digits startnum endnum)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divisible_by_digits))\n    (check-equal? (candidate 1 22) (list 1 2 3 4 5 6 7 8 9 11 12 15 22))\n    (check-equal? (candidate 1 15) (list 1 2 3 4 5 6 7 8 9 11 12 15))\n    (check-equal? (candidate 20 25) (list 22 24))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d)))\n                (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (list->set (string->list (number->string i))))\n        i)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (filter\n   (lambda (x)\n     (andmap\n      (lambda (y)\n        (zero? (remainder x y)))\n      (string->list (number->string x))))\n   (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([n (in-range startnum endnum)])\n    (andmap (\u03bb (d) (= (modulo n d) 0)) (string->list (number->string n)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (lambda (d) (zero? (modulo i d))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n"
  ]
}