{
  "name": "mbpp_131_reverse_vowels",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n(define (reverse_vowels str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_vowels))\n    (check-equal? (candidate \"Python\") \"Python\")\n    (check-equal? (candidate \"USA\") \"ASU\")\n    (check-equal? (candidate \"ab\") \"ab\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is-vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) str2))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is-vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1 (string-length str1))\n                                   (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1 (string-length str1))\n                                   (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (null? str1)\n        str2\n        (if (is_vowel? (car str1))\n            (reverse_vowels-helper (cdr str1) (cons (car str1) str2))\n            (reverse_vowels-helper (cdr str1) str2))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond [(empty? str1) str2]\n          [(is_vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n          [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1)) (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons #\\_ str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (string-join\n   (reverse\n    (filter (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\u)))\n            (string->list str1)))\n   \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) str2))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is-vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is-vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) str2))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is-vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is-vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (cons (first str1) str2)))\n          (else (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels-helper (substring str1 1)\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1)) (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (cons (first str1) str2)))\n          (else (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) str2))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (rev_vowels str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (rev_vowels (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (rev_vowels (substring str1 1) str2))))\n  (rev_vowels str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (cons (first str1) str2)))\n          (else (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1)\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels-helper (string-tail str1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels-helper (string-tail str1) (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is-vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is-vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons #\\_ str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels-helper (cdr str1) (cons #\\_ str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (append (list (first str1)) str2))]\n      [else (reverse-vowels-helper (rest str1) (append (list (first str1)) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_iter str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_iter (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_iter (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_iter str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is-vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (let ([str2 (string-append str1)])\n    (define (reverse_vowels_helper str1 str2 i j)\n      (cond\n        [(> i j) str2]\n        [(or (char=? (string-ref str1 i) #\\a)\n             (char=? (string-ref str1 i) #\\e)\n             (char=? (string-ref str1 i) #\\i)\n             (char=? (string-ref str1 i) #\\o)\n             (char=? (string-ref str1 i) #\\u))\n         (reverse_vowels_helper str1 str2 (+ i 1) j)]\n        [(or (char=? (string-ref str1 j) #\\a)\n             (char=? (string-ref str1 j) #\\e)\n             (char=? (string-ref str1 j) #\\i)\n             (char=? (string-ref str1 j) #\\o)\n             (char=? (string-ref str1 j) #\\u))\n         (reverse_vowels_helper str1 str2 i (- j 1))]\n        [else\n         (begin\n           (string-set! str2 i (string-ref str1 j))\n           (string-set! str2 j (string-ref str1 i))\n           (reverse_vowels_helper str1 str2 (+ i 1) (- j 1)))]))\n    (reverse_vowels_helper str1 str2 0 (- (string-length str1) 1))))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1)) (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is-vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) str2))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (member (first str1) '(#\\a #\\e #\\i #\\o #\\u))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is-vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (cons (first str1) str2)))\n          (else (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) str2))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is-vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (let ([str2 (string-append str1)])\n    (let loop ([i 0] [j (sub1 (string-length str1))])\n      (cond\n        [(or (= i j) (&gt; i j)) str2]\n        [(vowel? (string-ref str1 i))\n         (cond\n           [(vowel? (string-ref str1 j))\n            (string-set! str2 i (string-ref str1 j))\n            (string-set! str2 j (string-ref str1 i))\n            (loop (add1 i) (sub1 j))]\n           [else (loop i (sub1 j))])]\n        [else (loop (add1 i) j)]))))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (cons (first str1) str2)))\n          (else (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond [(empty? str1) str2]\n          [(is_vowel? (first str1))\n           (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n          [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is-vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                   (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                   (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is-vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a) (char=? ch #\\e) (char=? ch #\\i) (char=? ch #\\o) (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is-vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond [(empty? str1) str2]\n          [(is-vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n          [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) str2))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (string-join\n   (reverse\n    (filter (lambda (x) (member x '(#\\a #\\e #\\i #\\o #\\u)))\n            (string->list str1)))\n   \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (cons (first str1) str2)))\n          (else (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? char)\n    (or (char=? char #\\a)\n        (char=? char #\\e)\n        (char=? char #\\i)\n        (char=? char #\\o)\n        (char=? char #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) str2))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1)\n                                   (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1)\n                                   (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels-helper (rest str1) (cons #\\_ str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond [(empty? str1) str2]\n          [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n          [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (null? str1)\n        str2\n        (if (is_vowel? (car str1))\n            (reverse_vowels_helper (cdr str1) (cons (car str1) str2))\n            (reverse_vowels_helper (cdr str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1)) (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1)\n                                   (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-null? str1)\n        str2\n        (if (is-vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                   (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                   (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                  (string-append (string-append str2 (string-ref str1 0)))))\n          (else (reverse_vowels_helper (substring str1 1 (string-length str1))\n                                       (string-append str2 (string-ref str1 0))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (null? str1)\n        str2\n        (if (is-vowel? (car str1))\n            (reverse-vowels-helper (cdr str1) (cons (car str1) str2))\n            (reverse-vowels-helper (cdr str1) (cons #\\_ str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_iter str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_iter (substring str1 1 (string-length str1))\n                                 (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_iter (substring str1 1 (string-length str1))\n                                 (string-append (string-ref str1 0) str2)))))\n  (reverse_vowels_iter str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-null? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is-vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (let ([vowels (string-&gt;list \"aeiouAEIOU\")])\n    (string-join\n     (reverse\n      (filter (lambda (x) (member x vowels))\n              (string-&gt;list str1)))\n     \"\")))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons #\\_ str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n</code>\nBut I get the following error:\n<code>reverse_vowels.rkt:14:0: reverse_vowels-helper: unbound identifier in module in: reverse_vowels-helper\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're trying to use <code>reverse_vowels-helper</code> before it's defined. You need to define it first.\n<code>(define (reverse_vowels str1)\n  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels-helper str1 '()))\n</code>\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (define (is-vowel? c)\n    (member c vowels))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is-vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (null? str1)\n        str2\n        (if (is_vowel? (car str1))\n            (reverse_vowels_helper (cdr str1) (cons (car str1) str2))\n            (reverse_vowels_helper (cdr str1) str2))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1)\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse-vowels-helper (rest str1) (cons (first str1) str2)))\n          (else (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond [(empty? str1) str2]\n          [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n          [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (list->string (reverse_vowels_helper (string->list str1) '())))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-null? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-null? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2 i)\n    (if (= i (string-length str1))\n        str2\n        (if (is_vowel? (string-ref str1 i))\n            (reverse_vowels_helper str1 (string-append (string (string-ref str1 i)) str2) (+ i 1))\n            (reverse_vowels_helper str1 str2 (+ i 1)))))\n  (reverse_vowels_helper str1 \"\" 0))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2))\n            (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (null? str1)\n        str2\n        (if (is-vowel? (car str1))\n            (reverse-vowels-helper (cdr str1) (cons (car str1) str2))\n            (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1)\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1)\n                                       (string-append (string #\\.) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0)) (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_iter str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels_iter (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_iter (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_iter str1 '()))\n",
    "  (define (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse-vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse-vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse-vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse-vowels-helper (substring str1 1) str2))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1 (string-length str1)) (string-append str2 (string (string-ref str1 0)))))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1))\n       (reverse_vowels-helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels-helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(is_vowel? (first str1)) (reverse_vowels_helper (rest str1) (cons (first str1) str2))]\n      [else (reverse_vowels_helper (rest str1) (cons (first str1) str2))]))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse_vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels-helper (cdr str1) str2))))\n  (reverse_vowels-helper str1 '()))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is-vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1)\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (null? str1)\n        str2\n        (if (is_vowel? (car str1))\n            (reverse-vowels-helper (cdr str1) (cons (car str1) str2))\n            (reverse-vowels-helper (cdr str1) (cons #\\_ str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels-helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels-helper (substring str1 1) str2))))\n  (reverse_vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1))\n           (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse-vowels-helper (cdr str1) (cons (car str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((is_vowel? (first str1))\n           (reverse_vowels_helper (rest str1) (cons (first str1) str2)))\n          (else (reverse_vowels_helper (rest str1) (cons (first str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (is_vowel? (string-ref str1 0))\n            (reverse_vowels_helper (substring str1 1) (string-append (string (string-ref str1 0)) str2))\n            (reverse_vowels_helper (substring str1 1) (string-append (string #\\_) str2)))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((is-vowel? (string-ref str1 0))\n           (reverse-vowels-helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse-vowels-helper (substring str1 1)\n                                       (string-append (string (string-ref str1 0)) str2)))))\n  (reverse-vowels-helper str1 \"\"))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (reverse-vowels-helper str1 str2)\n    (if (empty? str1)\n        str2\n        (if (is_vowel? (first str1))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2))\n            (reverse-vowels-helper (rest str1) (cons (first str1) str2)))))\n  (reverse-vowels-helper str1 '()))\n",
    "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((is_vowel? (string-ref str1 0))\n           (reverse_vowels_helper (substring str1 1)\n                                  (string-append (string (string-ref str1 0)) str2)))\n          (else (reverse_vowels_helper (substring str1 1) str2))))\n  (reverse_vowels_helper str1 \"\"))\n",
    "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (string-join\n     (reverse\n      (filter (lambda (x) (member x vowels))\n              (string-&gt;list str1)))\n     \"\")))\n",
    "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (reverse_vowels_helper str1 str2)\n    (cond ((null? str1) str2)\n          ((is_vowel? (car str1)) (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))\n          (else (reverse_vowels_helper (cdr str1) (cons (car str1) str2)))))\n  (reverse_vowels_helper str1 '()))\n"
  ]
}