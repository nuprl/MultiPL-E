{
  "name": "mbpp_479_first_Digit",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the first digit of a given number.\n(define (first_Digit n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond [(zero? n) 0]\n        [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond ((&lt; n 10) n)\n        (else (first_Digit (quotient n 10)))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (/ n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (/ n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n",
    "  (if (zero? n)\n      0\n      (first_Digit (quotient n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (/ n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) #f]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (first_Digit (quotient n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(>= n 10) (first_Digit (/ n 10))]\n    [else n]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (negative? n)\n      (first_Digit (- n))\n      (if (zero? n)\n          0\n          (if (zero? (modulo n 10))\n              (first_Digit (quotient n 10))\n              (modulo n 10)))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (string-&gt;number (string-ref (number-&gt;string n) 0)))\n",
    "  (cond\n    [(zero? n) n]\n    [(< n 0) (first_Digit (- n))]\n    [(<= n 9) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond ((< n 10) n)\n        ((> n 10) (first_Digit (quotient n 10)))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      n\n      (first_Digit (quotient n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (first_Digit (- n))\n          (if (&lt; n 10)\n              n\n              (first_Digit (quotient n 10))))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond [(zero? n) 0]\n        [(< n 10) n]\n        [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      n\n      (first_Digit (quotient n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (/ n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(< 10 n) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (first_Digit (- n))\n          (if (&lt; n 10)\n              n\n              (first_Digit (quotient n 10))))))\n",
    "  (cond\n    [(zero? n) n]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      n\n      (first_Digit (quotient n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond ((< n 10) n)\n        (else (first_Digit (quotient n 10)))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond [(zero? n) 0]\n        [(< n 0) (first_Digit (- n))]\n        [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      n\n      (first_Digit (quotient n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) n]\n    [(negative? n) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 0) (first_Digit (- n))]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond [(< n 10) n]\n        [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (&lt; n 10)\n      n\n      (first_Digit (quotient n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (first_Digit (quotient n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (/ n 10))))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      n\n      (first_Digit (quotient n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) \"0\"]\n    [(< n 0) (first_Digit (- n))]\n    [(< n 10) (number->string n)]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) n]\n    [(< n 0) (first_Digit (- n))]\n    [(> n 0) (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 0) (first_Digit (- n))]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n"
  ]
}