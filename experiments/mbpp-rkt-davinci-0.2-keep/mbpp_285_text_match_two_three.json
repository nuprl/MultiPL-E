{
  "name": "mbpp_285_text_match_two_three",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n(define (text_match_two_three text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_two_three))\n    (check-equal? (candidate \"ac\") #f)\n    (check-equal? (candidate \"dc\") #f)\n    (check-equal? (candidate \"abbbba\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"a(bb){2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'a')\n     (cond\n       [(and (equal? (second text) 'b') (equal? (third text) 'b')) #t]\n       [(and (equal? (second text) 'b') (equal? (third text) 'b') (equal? (fourth text) 'b')) #t]\n       [else #f])]\n    [else (text_match_two_three (rest text))]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(char=? (first text) 'a')\n     (cond\n       [(and (char=? (second text) 'b') (char=? (third text) 'b')) #t]\n       [(and (char=? (second text) 'b') (char=? (third text) 'b') (char=? (fourth text) 'b')) #t]\n       [else #f])]\n    [else (text_match_two_three (rest text))]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(regexp-match? #rx\"ab{2,3}\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"a(bb){2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) 'a')\n     (cond\n       [(and (equal? (second text) 'b') (equal? (third text) 'b')) true]\n       [(and (equal? (second text) 'b') (equal? (third text) 'b') (equal? (fourth text) 'b')) true]\n       [else false])]\n    [else (text_match_two_three (rest text))]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (string-contains text \"abb\"))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"a(bb){2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (and (string-contains text \"ab\")\n       (string-contains text \"abb\")))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) 'a')\n     (cond\n       [(equal? (second text) 'b')\n        (cond\n          [(equal? (third text) 'b')\n           (cond\n             [(equal? (fourth text) 'b') true]\n             [else false])]\n          [else false])]\n       [else false])]\n    [else (text_match_two_three (rest text))]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(regexp-match #rx\"ab{2,3}\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (and (string-contains text \"a\")\n       (string-contains text \"bbb\")\n       (string-contains text \"bbbb\")))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (first text) 'a')\n     (cond\n       [(equal? (second text) 'b')\n        (cond\n          [(equal? (third text) 'b')\n           (cond\n             [(equal? (fourth text) 'b') #t]\n             [else #f])]\n          [else #f])]\n       [else #f])]\n    [else (text_match_two_three (rest text))]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (let ([a-pos (string-index text #\\a)])\n    (and a-pos\n         (let ([b-pos (string-index text #\\b (+ a-pos 1))])\n           (and b-pos\n                (let ([c-pos (string-index text #\\b (+ b-pos 1))])\n                  (and c-pos\n                       (let ([d-pos (string-index text #\\b (+ c-pos 1))])\n                         (and (not d-pos)\n                              (string-index text #\\b (+ b-pos 1))\n                              (string-index text #\\b (+ c-pos 1)))))))))))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (define (match-helper text)\n    (cond\n      [(empty? text) #f]\n      [(char=? (first text) #\\a) (match-helper (rest text))]\n      [(char=? (first text) #\\b) (match-helper (rest text))]\n      [(char=? (first text) #\\c) #f]\n      [else (match-helper (rest text))]))\n  (match-helper text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (let ([a-index (string-index text #\\a)])\n    (and a-index\n         (let ([b-index (string-index text #\\b (+ a-index 1))])\n           (and b-index\n                (let ([c-index (string-index text #\\b (+ b-index 1))])\n                  (and c-index\n                       (let ([d-index (string-index text #\\b (+ c-index 1))])\n                         (and (not d-index)\n                              (and (>= (- c-index b-index) 2)\n                                   (>= (- c-index b-index) 3)))))))))))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? (regexp \"ab{2,3}\") text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(regexp-match? #rx\"ab{2,3}\" text) #t]\n    [else #f]))\n",
    "  (define (match-helper text)\n    (cond [(empty? text) #f]\n          [(equal? (first text) 'a')\n           (cond [(equal? (second text) 'b')\n                  (cond [(equal? (third text) 'b')\n                         (cond [(equal? (fourth text) 'b')\n                                (cond [(equal? (fifth text) 'b')\n                                       #f]\n                                       [else #t])]\n                               [else #t])]\n                         [else #f])]\n                 [else #f])]\n          [else (match-helper (rest text))]))\n  (match-helper (string->list text)))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"a(bb){2,3}\" text))\n",
    "  (and (string-contains text #\\a)\n       (string-contains text #\\b)\n       (string-contains text #\\b)\n       (or (string-contains text #\\b)\n           (not (string-contains text #\\b)))))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n"
  ]
}