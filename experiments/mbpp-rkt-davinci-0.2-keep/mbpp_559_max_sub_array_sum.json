{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the sum of the largest contiguous sublist in the given list.\n(define (max_sub_array_sum a size)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum))\n    (check-equal? (candidate (list -2 -3 4 -1 -2 1 5 -3) 8) 7)\n    (check-equal? (candidate (list -3 -4 5 -2 -3 2 6 -4) 8) 8)\n    (check-equal? (candidate (list -4 -5 6 -3 -4 3 7 -5) 8) 10)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((new_sum (+ sum (list-ref a (- size 1)))))\n          (if (&lt; new_sum 0)\n              (max_sub_array_sum_helper a (- size 1) 0 max_sum)\n              (max_sub_array_sum_helper a (- size 1) new_sum (max new_sum max_sum))))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 1) (max max_sum (first a))]\n      [else\n       (define (sum_of_first_n a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (first a) (sum_of_first_n (rest a) (- n 1)))]))\n       (define (sum_of_last_n a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (last a) (sum_of_last_n (rest a) (- n 1)))]))\n       (define (sum_of_all_n a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (first a) (sum_of_all_n (rest a) (- n 1)))]))\n       (define (sum_of_all_n_except_first a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (last a) (sum_of_all_n_except_first (rest a) (- n 1)))]))\n       (define (sum_of_all_n_except_last a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (first a) (sum_of_all_n_except_last (rest a) (- n 1)))]))\n       (define (sum_of_all_n_except_first_and_last a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (second a) (sum_of_all_n_except_first_and_last (rest a) (- n 1)))]))\n       (define (sum_of_all_n_except_last_and_first a n)\n         (cond\n           [(empty? a) 0]\n           [(",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size current-max)\n    (cond\n      [(= size 0) current-max]\n      [(> (car a) (+ (car a) current-max)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) current-max))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (max-sum 0) (max-start 0) (max-end 0) (current-sum 0) (current-start 0))\n    (cond ((= i size) (list max-sum max-start max-end))\n          ((>= (+ current-sum (list-ref a i)) 0)\n           (loop (+ i 1)\n                 (if (> (+ current-sum (list-ref a i)) max-sum)\n                     (+ current-sum (list-ref a i))\n                     max-sum)\n                 (if (> (+ current-sum (list-ref a i)) max-sum)\n                     current-start\n                     max-start)\n                 (if (> (+ current-sum (list-ref a i)) max-sum)\n                     i\n                     max-end)\n                 (+ current-sum (list-ref a i))\n                 current-start))\n          (else (loop (+ i 1)\n                      max-sum\n                      max-start\n                      max-end\n                      0\n                      (+ i 1))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(< max_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 1) (max max_sum (first a))]\n      [else\n       (max_sub_array_sum_helper (rest a) (- size 1) (max max_sum (apply + (take size a))))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (+ (car a) max_sum)])\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> sum max-sum)\n       (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&lt; max_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a))))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(> (sum a) max_sum) (max_sub_array_sum_helper (rest a) size (sum a))]\n      [else (max_sub_array_sum_helper (rest a) size max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(< size (length a))\n       (let ([sub_sum (apply + (take size a))])\n         (if (> sub_sum max_sum)\n             (max_sub_array_sum_helper (rest a) size sub_sum)\n             (max_sub_array_sum_helper (rest a) size max_sum)))]\n      [else (max_sub_array_sum_helper (rest a) size max_sum)]))\n  (max_sub_array_sum_helper a size (apply + (take size a))))\n",
    "  (let ([max-sum 0]\n        [curr-sum 0])\n    (for ([i (in-range size)])\n      (set! curr-sum (+ curr-sum (list-ref a i)))\n      (when (&lt; curr-sum 0)\n        (set! curr-sum 0))\n      (when (&gt; curr-sum max-sum)\n        (set! max-sum curr-sum)))\n    max-sum))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_aux a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([max_sum_ending_here (max 0 (+ (list-ref a (- size 1)) max_sum_ending_here))])\n          (max_sub_array_sum_aux a (- size 1) (max max_sum_ending_here max_sum)))))\n  (max_sub_array_sum_aux a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum))\n       (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond ((= size 0) max-so-far)\n          ((&gt; max-ending-here 0)\n           (max_sub_array_sum_helper (cdr a) (- size 1)\n                                     (max max-so-far max-ending-here)\n                                     (+ max-ending-here (car a))))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1)\n                                          (max max-so-far max-ending-here)\n                                          (car a)))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([current_sum (+ (car a) max_sum)]\n               [new_max_sum (if (&gt; current_sum max_sum)\n                                current_sum\n                                max_sum)])\n          (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([sum (apply + a)])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ((sum_of_sub_array (apply + (sublist a 0 size)))\n               (new_max_sum (if (&gt; sum_of_sub_array max_sum)\n                                sum_of_sub_array\n                                max_sum)))\n          (max_sub_array_sum_helper (rest a) (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size i max_sum)\n    (if (= i size)\n        max_sum\n        (let ((sum (apply + (sublist a i (+ i size)))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper a size (+ i 1) sum)\n              (max_sub_array_sum_helper a size (+ i 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0 0))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((new_max_sum (if (&gt;= (+ (car a) max_sum) (car a))\n                               (+ (car a) max_sum)\n                               (car a))))\n          (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + (take a size))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) size sum)\n              (max_sub_array_sum_helper (rest a) size max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (sum (sublist a 0 size)) max_sum)\n       (max_sub_array_sum_helper a (- size 1) (sum (sublist a 0 size)))]\n      [else (max_sub_array_sum_helper a (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a (- (length a) 1) -1))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (sum_sub_array a start end)\n    (if (= start end)\n        0\n        (+ (list-ref a start) (sum_sub_array a (+ start 1) end))))\n  (define (max_sub_array_sum_helper a size start end max)\n    (if (= start size)\n        max\n        (let ((sum (sum_sub_array a start end)))\n          (if (&gt; sum max)\n              (max_sub_array_sum_helper a size start (+ end 1) sum)\n              (max_sub_array_sum_helper a size start (+ end 1) max)))))\n  (max_sub_array_sum_helper a size 0 0 0))\n</code>\nI am not sure if this is the most efficient way to do it. I would appreciate any feedback.\n\n\nA:\n\nI think you're on the right track, but there are a couple of things that can be improved.\nFirst, you can use <code>foldl</code> to compute the sum of a sublist.\n<code>(define (sum-sublist lst start end)\n  (foldl + 0 (sublist lst start end)))\n</code>\nSecond, you can use <code>foldl</code> to find the maximum sublist sum.\n<code>(define (max-sublist-sum lst)\n  (foldl (lambda (x max)\n           (let ((sum (sum-sublist lst 0 (+ x 1))))\n             (if (&gt; sum max) sum max)))\n         0\n         (range (length lst))))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(> sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size current-max)\n    (if (= size 0)\n        current-max\n        (let ([current-element (car a)])\n          (max_sub_array_sum_helper (cdr a) (- size 1)\n                                    (if (&gt; current-element (+ current-element current-max))\n                                        current-element\n                                        (+ current-element current-max))))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (helper a size i sum max)\n    (if (= i size)\n        max\n        (let ([new-sum (+ sum (list-ref a i))])\n          (if (&lt; new-sum 0)\n              (helper a size (+ i 1) 0 max)\n              (helper a size (+ i 1) new-sum (max new-sum max))))))\n  (helper a size 0 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> max_sum (+ max_sum (car a))) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + (take a size))])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) size sum)\n              (max_sub_array_sum_helper (rest a) size max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_so_far max_ending_here)\n    (cond\n      [(= size 0) max_so_far]\n      [else\n       (define max_ending_here (+ max_ending_here (list-ref a size)))\n       (define max_so_far (max max_so_far max_ending_here))\n       (max_sub_array_sum_helper a (- size 1) max_so_far max_ending_here)]))\n  (max_sub_array_sum_helper a (- size 1) (list-ref a 0) 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(< max_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([max_sum_ending_here (+ (list-ref a (- size 1)) (if (&lt; max_sum_ending_here 0) 0 max_sum_ending_here))]\n               [max_sum (if (&gt; max_sum_ending_here max_sum) max_sum_ending_here max_sum)])\n          (max_sub_array_sum_helper a (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size (list-ref a 0)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size i max_sum)\n    (if (= i size)\n        max_sum\n        (let ((sum (apply + (sublist a i (+ i size)))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper a size (+ i 1) sum)\n              (max_sub_array_sum_helper a size (+ i 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0 0))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([current_sum (apply + a)])\n          (if (&gt; current_sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) current_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n</code>\nI'm not sure if I'm doing this right. I'm not sure if I'm using the right approach. I'm not sure if I'm using the right language. I'm not sure if I'm using the right editor. I'm not sure if I'm using the right OS. I'm not sure if I'm using the right computer. I'm not sure if I'm using the right brain.\nI'm not sure if I'm using the right question.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure if I'm using the right answer.\nI'm not sure",
    "  (let loop ((i 0) (max-sum 0) (current-sum 0))\n    (cond ((= i size) max-sum)\n          ((&gt; (+ current-sum (list-ref a i)) 0)\n           (loop (+ i 1)\n                 (if (&gt; (+ current-sum (list-ref a i)) max-sum)\n                     (+ current-sum (list-ref a i))\n                     max-sum)\n                 (+ current-sum (list-ref a i))))\n          (else (loop (+ i 1) max-sum 0)))))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + (sublist a 0 size)) max_sum)\n           (max_sub_array_sum_helper a (- size 1) (apply + (sublist a 0 size))))\n          (else (max_sub_array_sum_helper a (- size 1) max_sum))))\n  (max_sub_array_sum_helper a (- size 1) (apply + (sublist a 0 size))))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum max-sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(> (sum (take a size)) max_sum) (max_sub_array_sum_helper (rest a) size (sum (take a size)))]\n      [else (max_sub_array_sum_helper (rest a) size max_sum)]))\n  (max_sub_array_sum_helper a size (sum (take a size))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let ([sum (apply + a)])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (+ (car a) max_sum)))\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond [(= size 0) max_sum]\n          [else\n           (let ([sum (+ sum (list-ref a (- size 1)))])\n             (cond [(&gt; sum max_sum) (max_sub_array_sum_helper a (- size 1) sum sum)]\n                   [else (max_sub_array_sum_helper a (- size 1) sum max_sum)]))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_so_far max_ending_here)\n    (cond\n      [(= size 0) max_so_far]\n      [else\n       (define max_ending_here (+ max_ending_here (list-ref a size)))\n       (define max_so_far (max max_so_far max_ending_here))\n       (define max_ending_here (max 0 max_ending_here))\n       (max_sub_array_sum_helper a (- size 1) max_so_far max_ending_here)]))\n  (max_sub_array_sum_helper a (- size 1) (list-ref a 0) 0))\n",
    "  (define (max_sub_array_sum_helper a size i max_sum)\n    (cond\n      [(= i size) max_sum]\n      [(> (+ a i) max_sum) (max_sub_array_sum_helper a size (+ i 1) (+ a i))]\n      [else (max_sub_array_sum_helper a size (+ i 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let* ([sum (sum_of_sub_array a size)]\n              [max_sum (if (&gt; sum max_sum) sum max_sum)])\n         (max_sub_array_sum_helper a (- size 1) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum)\n       (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max_sum)\n       (max_sub_array_sum_helper (cdr a) (- size 1) sum max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum)\n           (max_sub_array_sum_helper (rest a) (- size 1) (+ max_sum (first a))))\n          (else (max_sub_array_sum_helper (rest a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (apply + (take a size))])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) size sum)\n              (max_sub_array_sum_helper (rest a) size max_sum)))))\n  (max_sub_array_sum_helper a size (apply + (take a size))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond [(= size 0) max_sum]\n          [(<= (apply + a) max_sum) max_sum]\n          [else (max_sub_array_sum_helper (cdr a) (- size 1) (apply + a))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 1)\n        max_sum\n        (let ([sum (apply + (take a size))])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) (- size 1) sum)\n              (max_sub_array_sum_helper (rest a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + (take a size))))\n",
    "  (let loop ((i 0) (j 0) (max-sum 0) (sum 0))\n    (cond ((= i size) max-sum)\n          ((&gt; sum 0)\n           (loop (+ i 1) (+ j 1) (max max-sum sum) (+ sum (list-ref a i))))\n          (else (loop (+ i 1) (+ j 1) (max max-sum sum) (list-ref a i))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([cur_sum (if (&lt; max_sum 0) 0 (+ max_sum (list-ref a (- size 1))))]\n               [new_max_sum (if (&gt; cur_sum max_sum) cur_sum max_sum)])\n          (max_sub_array_sum_helper a (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum curr_sum)\n    (if (zero? size)\n        max_sum\n        (let ((curr_sum (+ curr_sum (list-ref a size))))\n          (if (&lt; curr_sum 0)\n              (max_sub_array_sum_helper a (- size 1) max_sum 0)\n              (max_sub_array_sum_helper a (- size 1) (max max_sum curr_sum) curr_sum)))))\n  (max_sub_array_sum_helper a (- size 1) (list-ref a 0) 0))\n",
    "  (define (helper a size sum max)\n    (cond ((= size 0) max)\n          ((> sum max) (helper (cdr a) (- size 1) sum sum))\n          ((< sum 0) (helper (cdr a) (- size 1) 0 max))\n          (else (helper (cdr a) (- size 1) (+ sum (car a)) max))))\n  (helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (cond\n      [(= size 0) max]\n      [(> sum max) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) sum max)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_so_far max_ending_here)\n    (cond\n      [(= size 0) max_so_far]\n      [(> max_ending_here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1)\n                                 (max max_so_far max_ending_here)\n                                 (+ max_ending_here (car a)))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1)\n                                 (max max_so_far max_ending_here)\n                                 (car a))]))\n  (max_sub_array_sum_helper a size (car a) (car a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size curr-sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(>= curr-sum 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ curr-sum (car a)) (max max-sum (+ curr-sum (car a))))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (car a) (max max-sum (car a)))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (sum 0) (max-sum 0))\n    (cond ((= i size) max-sum)\n          ((= j size) (loop (+ i 1) i 0 max-sum))\n          (else (let ((new-sum (+ sum (list-ref a j))))\n                  (if (&lt; new-sum 0)\n                      (loop i (+ j 1) 0 max-sum)\n                      (loop i (+ j 1) new-sum (max max-sum new-sum))))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max-so-far max-ending-here) (+ max-ending-here (car a)))\n       ]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max-so-far max-ending-here) (car a))\n       ]\n      )\n    )\n  (max_sub_array_sum_helper a size (car a) (car a))\n  )\n",
    "  (let loop ((i 0) (j 0) (max 0) (sum 0))\n    (cond ((= i size) max)\n          ((&gt; sum 0) (loop (+ i 1) (+ j 1) (max sum) (+ sum (list-ref a j))))\n          (else (loop (+ i 1) (+ i 1) (max sum) (list-ref a i))))))\n",
    "  (define (max_sub_array_sum_helper a size current-max)\n    (if (= size 0)\n        current-max\n        (let ([current-sum (sum a size)])\n          (if (&gt; current-sum current-max)\n              (max_sub_array_sum_helper a (- size 1) current-sum)\n              (max_sub_array_sum_helper a (- size 1) current-max)))))\n  (max_sub_array_sum_helper a size (sum a size)))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond ((= size 0) max-sum)\n          ((> sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum))\n          ((> sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max-sum))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max-sum))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([current_sum (+ (car a) max_sum)])\n          (if (&lt; current_sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) current_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (sum 0) (max-sum 0))\n    (if (= i size)\n        max-sum\n        (let ((new-sum (+ sum (list-ref a j))))\n          (if (&lt; new-sum 0)\n              (loop (+ i 1) (+ i 1) 0 max-sum)\n              (loop i (+ j 1) new-sum (max new-sum max-sum)))))))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (if (= size 0)\n        max\n        (let ((new-sum (+ sum (list-ref a (- size 1)))))\n          (if (&lt; new-sum 0)\n              (max_sub_array_sum_helper a (- size 1) 0 max)\n              (max_sub_array_sum_helper a (- size 1) new-sum (max new-sum max))))))\n  (max_sub_array_sum_helper a size 0 0))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max-sum)\n    (if (zero? size)\n        max-sum\n        (let* ([current-sum (apply + (take a size))]\n               [max-sum (if (&gt; current-sum max-sum) current-sum max-sum)])\n          (max_sub_array_sum_helper (rest a) (- size 1) max-sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (max_sum 0) (current_sum 0))\n    (cond ((= i size) max_sum)\n          ((&gt; current_sum 0)\n           (loop (+ i 1)\n                 (if (&gt; current_sum max_sum)\n                     current_sum\n                     max_sum)\n                 (+ current_sum (list-ref a i))))\n          (else (loop (+ i 1) max_sum (list-ref a i))))))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (+ max-ending-here (car a)))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (car a))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 1) (max max_sum (first a))]\n      [else (max_sub_array_sum_helper (rest a) (- size 1) (max max_sum (apply + (take size a))))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + (take a size))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) (- size 1) sum)\n              (max_sub_array_sum_helper (rest a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (max-sum 0) (sum 0))\n    (cond ((= i size) max-sum)\n          ((= j size) (loop (+ i 1) i max-sum 0))\n          (else (let ((new-sum (+ sum (list-ref a j))))\n                  (if (&lt; new-sum 0)\n                      (loop i (+ j 1) max-sum 0)\n                      (loop i (+ j 1) (max max-sum new-sum) new-sum)))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((max_sum_ending_here (+ (list-ref a (- size 1)) (if (&lt; max_sum_ending_here 0) 0 max_sum_ending_here))))\n          (max_sub_array_sum_helper a (- size 1) (max max_sum max_sum_ending_here)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + (sublist a 0 size))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper a (- size 1) sum)\n              (max_sub_array_sum_helper a (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a (- size 1) 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([sum (apply + (take a size))])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (rest a) size sum)\n             (max_sub_array_sum_helper (rest a) size max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [else\n       (let* ([sub_sum (apply + (take size a))]\n              [new_max_sum (if (&gt; sub_sum max_sum) sub_sum max_sum)])\n         (max_sub_array_sum_helper (rest a) size new_max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 1) (max max_sum (first a))]\n      [else (max_sub_array_sum_helper (rest a) (- size 1) (max max_sum (apply + (take size a))))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((current_sum (apply + a)))\n          (if (&gt; current_sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) current_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(< size 0) max-sum]\n      [else\n       (let ([sum (apply + (sublist a 0 size))])\n         (cond\n           [(> sum max-sum) (max_sub_array_sum_helper a (- size 1) sum)]\n           [else (max_sub_array_sum_helper a (- size 1) max-sum)]))]))\n  (max_sub_array_sum_helper a (- size 1) 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (> sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ((max_sum_ending_here (+ (car a) max_sum))\n               (max_sum_so_far (if (&gt; max_sum_ending_here 0) max_sum_ending_here 0)))\n          (max_sub_array_sum_helper (cdr a) (- size 1) max_sum_so_far))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(<= (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(>= (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 0) max_sum]\n      [else\n       (let ([sum (apply + (take a size))])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (rest a) size sum)\n             (max_sub_array_sum_helper (rest a) size max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ([i 0] [j 0] [max 0] [sum 0])\n    (cond [(= i size) max]\n          [(>= sum 0)\n           (loop (+ i 1) (+ j 1) (max max sum) (+ sum (list-ref a i)))]\n          [else\n           (loop (+ i 1) (+ j 1) (max max sum) (list-ref a i))])))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (+ (car a) max_sum)))\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(< sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max-sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) (max sum max-sum))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(> (sum a) max_sum) (max_sub_array_sum_helper (rest a) size (sum a))]\n      [else (max_sub_array_sum_helper (rest a) size max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([new_max_sum (+ (car a) max_sum)]\n               [new_max_sum (if (&lt; new_max_sum 0) 0 new_max_sum)])\n          (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum-helper a size max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> (sum a) max-sum) (max_sub_array_sum-helper (cdr a) (- size 1) (sum a))]\n      [else (max_sub_array_sum-helper (cdr a) (- size 1) max-sum)]))\n  (max_sub_array_sum-helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) 0 max-sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_so_far max_ending_here)\n    (cond\n      [(= size 0) max_so_far]\n      [(> max_ending_here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max_so_far max_ending_here) (+ max_ending_here (car a)))\n      ]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max_so_far max_ending_here) (car a))\n      ]\n    )\n  )\n  (max_sub_array_sum_helper a size (- (car a) 1) (car a))\n)\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((max_sum_ending_here (+ (list-ref a size) (max max_sum_ending_here 0))))\n          (max_sub_array_sum_helper a (- size 1) (max max_sum max_sum_ending_here)))))\n  (max_sub_array_sum_helper a (- size 1) 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond [(= size 0) max_sum]\n          [(= size 1) (max max_sum (car a))]\n          [else (max_sub_array_sum_helper (cdr a) (- size 1) (max max_sum (apply + a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size i max_sum)\n    (if (= i size)\n        max_sum\n        (let ((sum (apply + (sublist a i (+ i 1)))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper a size (+ i 1) sum)\n              (max_sub_array_sum_helper a size (+ i 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (if (= size 0)\n        max\n        (let ((new-sum (+ sum (list-ref a (- size 1)))))\n          (if (&lt; new-sum 0)\n              (max_sub_array_sum_helper a (- size 1) 0 max)\n              (max_sub_array_sum_helper a (- size 1) new-sum (max new-sum max))))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (let loop ((i 0) (j 0) (max 0) (sum 0))\n    (cond ((= i size) max)\n          ((= j size) (loop (+ i 1) i max 0))\n          (else (let ((new-sum (+ sum (list-ref a j))))\n                  (cond ((&gt; new-sum max) (loop i (+ j 1) new-sum new-sum))\n                        ((&gt; new-sum 0) (loop i (+ j 1) max new-sum))\n                        (else (loop i (+ j 1) max 0))))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(zero? size) max_sum]\n      [(< (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ((current_sum (+ (car a) max_sum))\n               (new_max_sum (if (&gt; current_sum max_sum)\n                                current_sum\n                                max_sum)))\n          (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (sum 0) (max-sum 0))\n    (cond ((= i size) max-sum)\n          ((= j size) (loop (+ i 1) i 0 max-sum))\n          (else (let ((new-sum (+ sum (list-ref a j))))\n                  (if (&lt; new-sum 0)\n                      (loop i (+ j 1) 0 max-sum)\n                      (loop i (+ j 1) new-sum (max max-sum new-sum))))))))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size start end max_sum)\n    (cond [(= start end) max_sum]\n          [else\n           (define sum (for/sum ([i (in-range start end)]) (list-ref a i)))\n           (max_sub_array_sum_helper a size (+ start 1) (+ end 1) (max sum max_sum))]))\n  (max_sub_array_sum_helper a size 0 size (list-ref a 0)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((new_sum (+ (car a) max_sum)))\n          (if (&lt; new_sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) new_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([sum (apply + (sublist a 0 size))])\n         (max_sub_array_sum_helper (rest a) (- size 1) (max sum max_sum)))]))\n  (max_sub_array_sum_helper a size (apply + (sublist a 0 size))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((new_max_sum (if (&gt;= max_sum 0)\n                               (+ max_sum (list-ref a size))\n                               (list-ref a size))))\n          (max_sub_array_sum_helper a (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a (- size 1) 0))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond ((= size 0) max-so-far)\n          ((&gt; max-ending-here 0)\n           (max_sub_array_sum_helper (rest a) (- size 1) max-so-far (+ max-ending-here (first a))))\n          (else\n           (max_sub_array_sum_helper (rest a) (- size 1) (max max-so-far max-ending-here) (first a)))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (let loop ((i 0) (max-sum 0) (sum 0))\n    (cond ((= i size) max-sum)\n          ((&lt; sum 0) (loop (+ i 1) max-sum 0))\n          (else (loop (+ i 1) (max max-sum sum) (+ sum (list-ref a i)))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ([i 0] [j 0] [max-sum 0] [sum 0])\n    (if (= i size)\n        max-sum\n        (if (&gt;= sum 0)\n            (loop (+ i 1) j (max max-sum sum) (+ sum (list-ref a i)))\n            (loop (+ i 1) (+ j 1) max-sum (- sum (list-ref a j)))))))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let ([sum (apply + a)])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond [(= size 0) max_sum]\n          [(> (sum (sublist a 0 size)) max_sum) (max_sub_array_sum_helper a (- size 1) (sum (sublist a 0 size)))]\n          [else (max_sub_array_sum_helper a (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a (- size 1) (sum (sublist a 0 size))))\n",
    "  (define (helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> sum max-sum) (helper (cdr a) (- size 1) sum sum)]\n      [else (helper (cdr a) (- size 1) sum max-sum)]))\n  (helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ((new_max_sum (+ (car a) max_sum))\n               (new_max_sum (if (&lt; new_max_sum 0) 0 new_max_sum)))\n          (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum)\n           (max_sub_array_sum_helper (cdr a) (- size 1) (+ (apply + a) max_sum)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let ([current_sum (apply + a)])\n         (cond\n           [(> current_sum max_sum)\n            (max_sub_array_sum_helper (cdr a) (- size 1) current_sum)]\n           [else\n            (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (helper a size sum max)\n    (if (= size 0)\n        max\n        (if (&gt; sum max)\n            (helper (cdr a) (- size 1) (+ sum (car a)) sum)\n            (helper (cdr a) (- size 1) (+ sum (car a)) max))))\n  (helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let* ([current_sum (apply + a)]\n               [new_sum (if (&gt; current_sum max_sum)\n                            current_sum\n                            max_sum)])\n          (max_sub_array_sum_helper (cdr a) (- size 1) new_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(zero? size) max_sum]\n      [else\n       (let* ([current_sum (+ (car a) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))]\n              [new_max_sum (max current_sum max_sum)])\n         (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum))\n       (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size current-sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> current-sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) current-sum current-sum)]\n      [(< current-sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) current-sum max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [else\n       (let ([sum (apply + (take a size))])\n         (max_sub_array_sum_helper (rest a) size (max sum max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([current_sum (if (&lt; max_sum 0) 0 max_sum)]\n               [new_sum (+ current_sum (list-ref a (- size 1)))]\n               [new_max_sum (if (&gt; new_sum current_sum) new_sum current_sum)])\n          (max_sub_array_sum_helper a (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (+ max-ending-here (car a)))\n       ]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (car a))\n       ]\n      )\n    )\n  (max_sub_array_sum_helper a size 0 0)\n  )\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (+ (car a) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n          (if (&gt; sum max_sum)\n              sum\n              max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([sum (apply + (take a size))])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (rest a) size sum)\n             (max_sub_array_sum_helper (rest a) size max_sum)))]))\n  (max_sub_array_sum_helper a size (apply + (take a size))))\n",
    "  (let loop ((i 0) (j 0) (max 0) (sum 0))\n    (cond\n      [(= i size) max]\n      [(= j size) (loop (+ i 1) i max sum)]\n      [else (loop i (+ j 1) (max (max sum (- sum (list-ref a i)))) (+ sum (list-ref a j)))])))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      ((= size 0) max_sum)\n      ((&gt; (apply + a) max_sum)\n       (max_sub_array_sum_helper (cdr a) (- size 1) (apply + a)))\n      (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size i max_sum curr_sum)\n    (cond\n      [(= i size) max_sum]\n      [(> (+ curr_sum (list-ref a i)) 0)\n       (max_sub_array_sum_helper a size (+ i 1) (max max_sum (+ curr_sum (list-ref a i))) (+ curr_sum (list-ref a i)))]\n      [else\n       (max_sub_array_sum_helper a size (+ i 1) (max max_sum 0) 0)]))\n  (max_sub_array_sum_helper a size 0 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (> sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (let ([max-sum 0]\n        [max-sum-so-far 0])\n    (for ([i (in-range size)])\n      (set! max-sum-so-far (+ max-sum-so-far (list-ref a i)))\n      (if (&lt; max-sum-so-far 0)\n          (set! max-sum-so-far 0))\n      (if (&gt; max-sum max-sum-so-far)\n          (set! max-sum max-sum-so-far)))\n    max-sum))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (apply + (sublist a 0 size)) max_sum) (max_sub_array_sum_helper a (- size 1) (apply + (sublist a 0 size)))]\n      [else (max_sub_array_sum_helper a (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a (- size 1) (apply + (sublist a 0 size))))\n",
    "  (define (max_sub_array_sum_helper a size sum)\n    (cond\n      [(= size 0) sum]\n      [(> (car a) (+ (car a) sum))\n       (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum current_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (+ current_sum (list-ref a size)) current_sum)\n       (max_sub_array_sum_helper a (- size 1)\n                                 (max max_sum (+ current_sum (list-ref a size)))\n                                 (+ current_sum (list-ref a size)))]\n      [else (max_sub_array_sum_helper a (- size 1)\n                                      (max max_sum current_sum)\n                                      current_sum)]))\n  (max_sub_array_sum_helper a (- size 1) (list-ref a 0) (list-ref a 0)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((= size 1) (max max_sum (car a)))\n          (else\n           (let* ((sum (apply + a))\n                  (new_max_sum (max max_sum sum)))\n             (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([sum (apply + (take a size))])\n         (max_sub_array_sum_helper (rest a) (- size 1) (max sum max_sum)))]))\n  (max_sub_array_sum_helper a (length a) 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (+ (car a) max_sum)])\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let ([sum (apply + a)])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size i sum max)\n    (if (= i size)\n        max\n        (let ([sum (+ sum (list-ref a i))])\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper a size (+ i 1) 0 max)\n              (max_sub_array_sum_helper a size (+ i 1) sum (max sum max))))))\n  (max_sub_array_sum_helper a size 0 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_aux a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (+ (car a) (max_sub_array_sum_aux (cdr a) (- size 1) max_sum))])\n          (if (&gt; sum max_sum)\n              sum\n              max_sum))))\n  (max_sub_array_sum_aux a size 0))\n",
    "  (let loop ((i 0) (max-sum 0) (max-sum-here 0))\n    (if (= i size)\n        max-sum\n        (let ((max-sum-here (+ max-sum-here (list-ref a i))))\n          (if (&lt; max-sum-here 0)\n              (loop (+ i 1) max-sum 0)\n              (loop (+ i 1) (max max-sum max-sum-here) max-sum-here))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far)\n    (if (= size 0)\n        max-so-far\n        (let ([curr-max (max (list-ref a 0) (+ (list-ref a 0) (list-ref a (- size 1))))])\n          (max_sub_array_sum_helper (cdr a) (- size 1) (max curr-max max-so-far)))))\n  (max_sub_array_sum_helper a size (list-ref a 0)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([current_sum (+ (car a) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))])\n          (if (&gt; current_sum max_sum)\n              current_sum\n              max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(> sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(> sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (let loop ((i 0) (j 0) (max 0) (sum 0))\n    (cond ((= i size) max)\n          ((= j size) (loop (+ i 1) i max 0))\n          (else (let ((new-sum (+ sum (list-ref a j))))\n                  (loop i (+ j 1) (max max new-sum) new-sum))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([current_sum (+ (car a) max_sum)]\n               [new_max_sum (if (&gt; current_sum max_sum) current_sum max_sum)])\n          (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (if (zero? size)\n        max\n        (let ([new-sum (+ sum (list-ref a 0))])\n          (if (&lt; new-sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0 max)\n              (max_sub_array_sum_helper (cdr a) (- size 1) new-sum (max new-sum max))))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(< max_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size i max_sum)\n    (cond\n      [(= i size) max_sum]\n      [else (max_sub_array_sum_helper a size (+ i 1) (max max_sum (+ max_sum (list-ref a i))))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size i sum max-sum)\n    (cond\n      [(= i size) max-sum]\n      [else\n       (define new-sum (+ sum (list-ref a i)))\n       (define new-max-sum (max new-sum max-sum))\n       (define new-sum (if (&lt; new-sum 0) 0 new-sum))\n       (max_sub_array_sum_helper a size (+ i 1) new-sum new-max-sum)]))\n  (max_sub_array_sum_helper a size 0 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let ([max_sum_here (apply + a)])\n         (if (&gt; max_sum max_sum_here)\n             (max_sub_array_sum_helper (rest a) (- size 1) max_sum)\n             (max_sub_array_sum_helper (rest a) (- size 1) max_sum_here)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ((max_sum_ending_here (+ (car a) max_sum))\n               (max_sum_so_far (if (&gt; max_sum_ending_here 0) max_sum_ending_here 0)))\n          (max_sub_array_sum_helper (cdr a) (- size 1) max_sum_so_far))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([new_sum (+ sum (list-ref a (- size 1)))])\n         (if (&lt; new_sum 0)\n             (max_sub_array_sum_helper a (- size 1) 0 max_sum)\n             (max_sub_array_sum_helper a (- size 1) new_sum (max new_sum max_sum))))]))\n  (max_sub_array_sum_helper a size 0 0))\n"
  ]
}