{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the sum of the largest contiguous sublist in the given list.\n(define (max_sub_array_sum a size)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum))\n    (check-equal? (candidate (list -2 -3 4 -1 -2 1 5 -3) 8) 7)\n    (check-equal? (candidate (list -3 -4 5 -2 -3 2 6 -4) 8) 8)\n    (check-equal? (candidate (list -4 -5 6 -3 -4 3 7 -5) 8) 10)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((new_sum (+ sum (list-ref a (- size 1)))))\n          (if (&lt; new_sum 0)\n              (max_sub_array_sum_helper a (- size 1) 0 max_sum)\n              (max_sub_array_sum_helper a (- size 1) new_sum (max new_sum max_sum))))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 1) (max max_sum (first a))]\n      [else\n       (define (sum_of_first_n a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (first a) (sum_of_first_n (rest a) (- n 1)))]))\n       (define (sum_of_last_n a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (last a) (sum_of_last_n (rest a) (- n 1)))]))\n       (define (sum_of_all_n a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (first a) (sum_of_all_n (rest a) (- n 1)))]))\n       (define (sum_of_all_n_except_first a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (last a) (sum_of_all_n_except_first (rest a) (- n 1)))]))\n       (define (sum_of_all_n_except_last a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (first a) (sum_of_all_n_except_last (rest a) (- n 1)))]))\n       (define (sum_of_all_n_except_first_and_last a n)\n         (cond\n           [(empty? a) 0]\n           [(= n 0) 0]\n           [else (+ (second a) (sum_of_all_n_except_first_and_last (rest a) (- n 1)))]))\n       (define (sum_of_all_n_except_last_and_first a n)\n         (cond\n           [(empty? a) 0]\n           [(",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size current-max)\n    (cond\n      [(= size 0) current-max]\n      [(> (car a) (+ (car a) current-max)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) current-max))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (max-sum 0) (max-start 0) (max-end 0) (current-sum 0) (current-start 0))\n    (cond ((= i size) (list max-sum max-start max-end))\n          ((>= (+ current-sum (list-ref a i)) 0)\n           (loop (+ i 1)\n                 (if (> (+ current-sum (list-ref a i)) max-sum)\n                     (+ current-sum (list-ref a i))\n                     max-sum)\n                 (if (> (+ current-sum (list-ref a i)) max-sum)\n                     current-start\n                     max-start)\n                 (if (> (+ current-sum (list-ref a i)) max-sum)\n                     i\n                     max-end)\n                 (+ current-sum (list-ref a i))\n                 current-start))\n          (else (loop (+ i 1)\n                      max-sum\n                      max-start\n                      max-end\n                      0\n                      (+ i 1))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(< max_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 1) (max max_sum (first a))]\n      [else\n       (max_sub_array_sum_helper (rest a) (- size 1) (max max_sum (apply + (take size a))))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (+ (car a) max_sum)])\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> sum max-sum)\n       (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&lt; max_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a))))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(> (sum a) max_sum) (max_sub_array_sum_helper (rest a) size (sum a))]\n      [else (max_sub_array_sum_helper (rest a) size max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(< size (length a))\n       (let ([sub_sum (apply + (take size a))])\n         (if (> sub_sum max_sum)\n             (max_sub_array_sum_helper (rest a) size sub_sum)\n             (max_sub_array_sum_helper (rest a) size max_sum)))]\n      [else (max_sub_array_sum_helper (rest a) size max_sum)]))\n  (max_sub_array_sum_helper a size (apply + (take size a))))\n",
    "  (let ([max-sum 0]\n        [curr-sum 0])\n    (for ([i (in-range size)])\n      (set! curr-sum (+ curr-sum (list-ref a i)))\n      (when (&lt; curr-sum 0)\n        (set! curr-sum 0))\n      (when (&gt; curr-sum max-sum)\n        (set! max-sum curr-sum)))\n    max-sum))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_aux a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([max_sum_ending_here (max 0 (+ (list-ref a (- size 1)) max_sum_ending_here))])\n          (max_sub_array_sum_aux a (- size 1) (max max_sum_ending_here max_sum)))))\n  (max_sub_array_sum_aux a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum))\n       (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n"
  ]
}