{
  "name": "mbpp_802_count_rotation",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n(define (count_rotation arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_rotation))\n    (check-equal? (candidate (list 3 2 1)) 1)\n    (check-equal? (candidate (list 4 5 1 2 3)) 2)\n    (check-equal? (candidate (list 7 8 9 1 2 3)) 3)\n    (check-equal? (candidate (list 1 2 3)) 0)\n    (check-equal? (candidate (list 1 3 2)) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([i 0] [j (add1 (length arr))])\n    (if (&lt; i j)\n        (if (&lt; (vector-ref arr i) (vector-ref arr (add1 i)))\n            (loop (add1 i) j)\n            (loop 0 (sub1 i)))\n        i)))\n",
    "  (define (count_rotation_helper arr count)\n    (if (and (not (null? arr)) (not (null? (cdr arr))))\n        (if (&lt; (car arr) (cadr arr))\n            (count_rotation_helper (cdr arr) (+ count 1))\n            (count_rotation_helper (cdr arr) count))\n        count))\n  (count_rotation_helper arr 0))\n",
    "  (define (count_rotation_helper arr i)\n    (cond\n      [(= i (length arr)) 0]\n      [(< (vector-ref arr i) (vector-ref arr (+ i 1))) (count_rotation_helper arr (+ i 1))]\n      [else i]))\n  (count_rotation_helper arr 0))\n",
    "  (let loop ([i 0] [j (length arr)])\n    (if (= i j)\n        i\n        (if (< (vector-ref arr i) (vector-ref arr (- j 1)))\n            (loop (+ i 1) j)\n            (loop i (- j 1))))))\n",
    "  (define (count_rotation-iter arr i)\n    (if (and (not (null? arr)) (not (null? (cdr arr))))\n        (if (< (car arr) (cadr arr))\n            (count_rotation-iter (cdr arr) (+ i 1))\n            i)\n        i))\n  (count_rotation-iter arr 0))\n",
    "  (define (count_rotation_helper arr count)\n    (if (and (not (null? arr)) (not (null? (cdr arr))))\n        (if (&lt; (car arr) (cadr arr))\n            (count_rotation_helper (cdr arr) (+ count 1))\n            (count_rotation_helper (cdr arr) count))\n        count))\n  (count_rotation_helper arr 0))\n",
    "  (define (count_rotation_helper arr start end)\n    (if (and (<= start end) (not (equal? start end)))\n        (if (and (< (vector-ref arr start) (vector-ref arr (+ start 1)))\n                 (< (vector-ref arr start) (vector-ref arr end)))\n            (count_rotation_helper arr (+ start 1) end)\n            (count_rotation_helper arr start (- end 1)))\n        start))\n  (count_rotation_helper arr 0 (- (vector-length arr) 1)))\n",
    "  (define (helper arr i)\n    (cond [(= i (length arr)) 0]\n          [(< (vector-ref arr i) (vector-ref arr (+ i 1))) (helper arr (+ i 1))]\n          [else i]))\n  (helper arr 0))\n",
    "  (let loop ((i 0) (j (add1 (length arr))))\n    (cond\n      [(= i j) i]\n      [(> (vector-ref arr i) (vector-ref arr (add1 i))) i]\n      [else (loop (add1 i) j)])))\n",
    "  (define (count_rotation_helper arr i)\n    (cond\n      [(= i (length arr)) 0]\n      [(> (vector-ref arr i) (vector-ref arr (+ i 1))) i]\n      [else (count_rotation_helper arr (+ i 1))]))\n  (count_rotation_helper arr 0))\n",
    "  (define (helper arr i)\n    (cond\n      [(= i (length arr)) 0]\n      [(< (vector-ref arr i) (vector-ref arr (+ i 1))) (helper arr (+ i 1))]\n      [else i]))\n  (helper arr 0))\n",
    "  (let loop ((i 0) (j (sub1 (length arr))))\n    (cond\n      [(= i j) i]\n      [(> (vector-ref arr i) (vector-ref arr (add1 i))) i]\n      [else (loop (add1 i) j)])))\n",
    "  (define (count_rotation_iter arr i)\n    (cond [(= i (length arr)) 0]\n          [(< (vector-ref arr i) (vector-ref arr (+ i 1))) (count_rotation_iter arr (+ i 1))]\n          [else i]))\n  (count_rotation_iter arr 0))\n",
    "  (let loop ([i 0] [j (add1 (length arr))])\n    (if (&lt; i j)\n        (if (&lt; (vector-ref arr i) (vector-ref arr (add1 i)))\n            (loop (add1 i) j)\n            (loop 0 (add1 i)))\n        (sub1 i))))\n",
    "  (define (count_rotation_iter arr i)\n    (cond [(empty? arr) i]\n          [(< (first arr) (second arr)) i]\n          [else (count_rotation_iter (rest arr) (+ i 1))]))\n  (count_rotation_iter arr 0))\n",
    "  (let loop ((i 0) (j (add1 (length arr))))\n    (if (&lt; i j)\n        (if (&lt; (vector-ref arr i) (vector-ref arr (add1 i)))\n            (loop (add1 i) j)\n            (loop 0 (add1 i)))\n        (sub1 i))))\n",
    "  (let loop ((i 0) (j (length arr)))\n    (if (&lt; i j)\n        (if (&lt; (vector-ref arr i) (vector-ref arr (+ i 1)))\n            (loop (+ i 1) j)\n            i)\n        0)))\n",
    "  (define (count-rotation-helper arr low high)\n    (cond\n      [(= low high) low]\n      [(= (add1 low) high) (if (&lt; (vector-ref arr low) (vector-ref arr high)) low high)]\n      [else\n       (let* ([mid (quotient (+ low high) 2)]\n              [next (add1 mid)]\n              [prev (sub1 mid)])\n         (cond\n           [(and (&gt; (vector-ref arr mid) (vector-ref arr next)) (&gt; (vector-ref arr mid) (vector-ref arr prev))) mid]\n           [(and (&lt; (vector-ref arr mid) (vector-ref arr next)) (&lt; (vector-ref arr mid) (vector-ref arr prev))) (count-rotation-helper arr next high)]\n           [(and (&lt; (vector-ref arr low) (vector-ref arr mid)) (&lt; (vector-ref arr mid) (vector-ref arr high))) low]\n           [else (count-rotation-helper arr low mid)]))]))\n  (count-rotation-helper arr 0 (sub1 (vector-length arr))))\n",
    "  (define (count_rotation_helper arr i)\n    (cond\n      [(= i (length arr)) 0]\n      [(and (< (vector-ref arr i) (vector-ref arr (+ i 1)))\n            (< (vector-ref arr (+ i 1)) (vector-ref arr (+ i 2)))) (+ i 1)]\n      [else (count_rotation_helper arr (+ i 1))]))\n  (count_rotation_helper arr 0))\n",
    "  (define (count_rotation-iter arr i)\n    (cond\n      [(= i (length arr)) 0]\n      [(< (vector-ref arr i) (vector-ref arr (+ i 1))) (count_rotation-iter arr (+ i 1))]\n      [else i]))\n  (count_rotation-iter arr 0))\n"
  ]
}