{
  "name": "mbpp_555_difference",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n(define (difference n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate difference))\n    (check-equal? (candidate 3) 30)\n    (check-equal? (candidate 5) 210)\n    (check-equal? (candidate 2) 6)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ((sum-of-cubes (sum-of-cubes n))\n        (sum-of-numbers (sum-of-numbers n)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ n 1))]) (* i i i))])\n    (- sum-of-cubes (* n n))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n n n (+ n 1) (+ n 1))\n     (* (+ n 1) (+ n 1) (+ n 1) n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (- (sum-of-cubes n) (* n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-numbers (sum-of-numbers n)])\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ 1 n))])\n                        (expt i 3))])\n    (- sum-of-cubes (* n (+ n 1) (/ (+ n 2) 2)))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-cubes n) (sum n))))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ n 1))])\n                        (* i i i))])\n    (- sum-of-cubes (* n n))))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum n) sum-of-cubes)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-nums (sum-of-nums n)])\n    (- sum-of-cubes sum-of-nums)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-n n) sum-of-cubes)))\n",
    "  (let* ([sum-of-cubes (apply + (map (lambda (x) (* x x x)) (range 1 (+ n 1))))]\n         [sum-of-numbers (apply + (range 1 (+ n 1)))]\n         [difference (- sum-of-cubes sum-of-numbers)])\n    difference))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes (sum-of-cubes n))\n        (sum-of-numbers (sum-of-numbers n)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes (sum-of-cubes n))\n        (sum-of-numbers (sum-of-numbers n)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (* n n n (+ n 1) (+ n 1))\n     (* (+ n 1) (+ n 1) (+ n 1) n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3)\n                                  (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n)\n       (* n (+ n 1) (/ n 2)))))\n",
    "  (- (sum-of-cubes n) (sum-of-numbers n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-numbers (sum-of-numbers n)])\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i n])\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes (* sum-of-numbers sum-of-numbers))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-n n) sum-of-cubes)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum (sum n))\n        (sum-of-cubes (sum-of-cubes n)))\n    (- sum-of-cubes sum)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i n)\n        (- (* sum sum sum) (* sum sum))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (let* ([sum-of-cubes (apply + (map (lambda (x) (* x x x)) (range 1 (+ n 1))))]\n         [sum-of-nums (apply + (range 1 (+ n 1)))]\n         [diff (- sum-of-cubes sum-of-nums)])\n    diff))\n",
    "  (let loop ([i n] [sum 0])\n    (if (= i 0)\n        (- (sum-of-cubes n) sum)\n        (loop (- i 1) (+ sum i)))))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-n n) sum-of-cubes)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-cubes n) (sum-n n))))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ n 1))]) (* i i i))])\n    (- sum-of-cubes (* n n))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3)\n                                  (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n)\n       (* n (+ n 1) (/ n 2)))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-n n) sum-of-cubes)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-n n) sum-of-cubes)))\n",
    "  (let ((sum-of-cubes (sum-of-cubes n))\n        (sum-of-numbers (sum-of-numbers n)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ((i 1 (+ i 1)))\n      (< i n)\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-n (sum-of-n n)])\n    (- sum-of-cubes sum-of-n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let* ([sum-of-cubes (sum-of-cubes n)]\n         [sum-of-numbers (sum-of-numbers n)])\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (* n (+ n 1) (/ (+ n 1) 2))\n     (* n (+ n 1) (+ n 2) (/ (+ n 1) 2) (/ (+ n 2) 3) (/ (+ n 3) 4))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n)\n       (* n (+ n 1) (/ n 2)))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&gt; i n)\n        (- (* sum sum) (sum-of-cubes n))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (let* ([sum-of-cubes (sum-of-cubes n)]\n         [sum-of-nums (sum-of-nums n)])\n    (- sum-of-cubes sum-of-nums)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 0)\n                               0\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i n)\n        (- (* sum sum sum) (* sum sum))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range n)])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes (* sum-of-numbers sum-of-numbers))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let ([sum-of-cubes (apply + (map (lambda (x) (* x x x)) (range 1 (+ n 1))))])\n    (- (expt n 2) sum-of-cubes)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (* n n n) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (- (sum-of-cubes n) (* n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-nums (sum-of-nums n)])\n    (- sum-of-cubes sum-of-nums)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum (sum n)])\n    (- sum-of-cubes sum)))\n",
    "  (let loop ([n n] [sum 0])\n    (if (= n 0)\n        sum\n        (loop (- n 1) (+ sum (* n n n))))))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-n n) sum-of-cubes)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-n (sum-of-n n)])\n    (- sum-of-cubes sum-of-n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum (sum n))\n        (sum-of-cubes (sum-of-cubes n)))\n    (- sum-of-cubes sum)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-nums (sum-of-nums n)])\n    (- sum-of-cubes sum-of-nums)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ((i 1 (+ i 1)))\n      (< i n)\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 0)\n        0\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (sum-cubes n) (sum n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-n n) sum-of-cubes)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum n) sum-of-cubes)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let loop ([n n] [sum 0])\n    (if (= n 0)\n        (- (* n n n) sum)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (apply + (map (lambda (x) (* x x x)) (range 1 (+ n 1))))])\n    (- (sum-of-cubes n) (sum-of-cubes n))))\n",
    "  (let* ([sum-of-cubes (apply + (map (lambda (x) (* x x x)) (range 1 (+ n 1))))]\n         [sum-of-numbers (apply + (range 1 (+ n 1)))]\n         [difference (- sum-of-cubes sum-of-numbers)])\n    difference))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum n) sum-of-cubes)))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ n 1))])\n                         (expt i 3))])\n    (- sum-of-cubes (* n (+ n 1) (/ n 2)))))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i n)\n        (- (* i i i) sum)\n        (loop (+ i 1) (+ sum (* i i i))))))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ n 1))]) (* i i i))])\n    (- sum-of-cubes (* n n))))\n",
    "  (let loop ((n n) (sum 0))\n    (if (= n 0)\n        (- (* sum sum sum) sum)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i n)\n        (- (* sum sum sum) sum)\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let* ([sum-of-cubes (apply + (map (lambda (x) (* x x x)) (range 1 (+ n 1))))]\n         [sum-of-numbers (apply + (range 1 (+ n 1)))]\n         [difference (- sum-of-cubes sum-of-numbers)])\n    difference))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ n 1))])\n                         (expt i 3))])\n    (- sum-of-cubes (* n (+ n 1) (/ (+ n 1) 2)))))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-numbers (sum-of-numbers n)])\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-cubes n) (sum-n n))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)]\n        [sum-of-n (sum-of-n n)])\n    (- sum-of-cubes sum-of-n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let loop ((i 1) (sum 0) (sum-of-cubes 0))\n    (if (= i n)\n        (- sum-of-cubes sum)\n        (loop (+ i 1) (+ sum i) (+ sum-of-cubes (* i i i))))))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-n n) sum-of-cubes)))\n",
    "  (- (* n n n (+ n 1) (+ n 1)) (* (+ n 1) (+ n 1) (+ n 1) n n)))\n",
    "  (letrec ([sum-of-cubes (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (expt n 3) (sum-of-cubes (- n 1)))))])\n    (- (sum-of-cubes n) (* n n))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let* ([sum-of-cubes (sum-of-cubes n)]\n         [sum-of-numbers (sum-of-numbers n)])\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes (sum-of-cubes n))\n        (sum-of-numbers (sum-of-numbers n)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (* n (+ n 1) (/ (+ n 2) 3))\n     (* n (/ (+ n 1) 2))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range n)])\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let loop ([n n] [sum 0])\n    (if (zero? n)\n        (- sum (* sum sum))\n        (loop (- n 1) (+ sum n)))))\n",
    "  (let ((sum-of-cubes 0) (sum 0))\n    (for ((i 1 (+ i 1)))\n      (< i n)\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let loop ((i 1) (sum 0) (sum-of-cubes 0))\n    (if (= i n)\n        (- sum-of-cubes sum)\n        (loop (+ i 1) (+ sum i) (+ sum-of-cubes (* i i i))))))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ 1 n))]) (* i i i))])\n    (- sum-of-cubes (* n n))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (- (* n n n (+ n 1) (/ (+ n 1) 2))\n     (* (+ n 1) (/ (+ n 1) 2) (/ (+ n 1) 2))))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ([sum-of-cubes (apply + (map (lambda (x) (* x x x)) (range 1 (+ n 1))))])\n    (- (expt n 2) sum-of-cubes)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range n)])\n      (set! sum-of-cubes (+ sum-of-cubes (* i i i)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes (* sum-of-numbers sum-of-numbers))))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ n 1))]) (* i i i))])\n    (- sum-of-cubes (* n n))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum 0))\n    (for ([i (in-range 1 (+ 1 n))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum (+ sum i)))\n    (- sum-of-cubes sum)))\n",
    "  (let loop ([n n] [sum 0])\n    (if (= n 0)\n        (- (* sum sum sum) sum)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ 1 n))]) (* i i i))]\n        [sum (for/sum ([i (in-range 1 (+ 1 n))]) i)])\n    (- sum-of-cubes sum)))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i (add1 n))\n        (- (* i i i) sum)\n        (loop (add1 i) (+ sum (* i i i))))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ((sum-of-cubes 0)\n        (sum-of-numbers 0))\n    (for ([i (in-range 1 (+ n 1))])\n      (set! sum-of-cubes (+ sum-of-cubes (expt i 3)))\n      (set! sum-of-numbers (+ sum-of-numbers i)))\n    (- sum-of-cubes sum-of-numbers)))\n",
    "  (let loop ([n n] [sum 0])\n    (if (= n 0)\n        (- (* sum sum sum) sum)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (define (sum-of-cubes n)\n    (if (= n 1)\n        1\n        (+ (expt n 3) (sum-of-cubes (- n 1)))))\n  (define (sum-of-n n)\n    (if (= n 1)\n        1\n        (+ n (sum-of-n (- n 1)))))\n  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let ([sum-of-cubes (for/sum ([i (in-range 1 (+ 1 n))]) (* i i i))])\n    (- sum-of-cubes (* n (+ n 1) (/ (+ n 1) 2)))))\n",
    "  (let ([sum-of-cubes (sum-of-cubes n)])\n    (- (sum-of-cubes n) (sum-n n))))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (- (sum-of-cubes n) (sum-of-n n)))\n",
    "  (let loop ([n n] [sum 0])\n    (if (= n 0)\n        (- (* sum sum sum) sum)\n        (loop (- n 1) (+ sum n)))))\n"
  ]
}