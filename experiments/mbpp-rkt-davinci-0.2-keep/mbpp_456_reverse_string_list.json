{
  "name": "mbpp_456_reverse_string_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to reverse each string in a given list of string values.\n(define (reverse_string_list stringlist)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_string_list))\n    (check-equal? (candidate (list \"Red\" \"Green\" \"Blue\" \"White\" \"Black\")) (list \"deR\" \"neerG\" \"eulB\" \"etihW\" \"kcalB\"))\n    (check-equal? (candidate (list \"john\" \"amal\" \"joel\" \"george\")) (list \"nhoj\" \"lama\" \"leoj\" \"egroeg\"))\n    (check-equal? (candidate (list \"jack\" \"john\" \"mary\")) (list \"kcaj\" \"nhoj\" \"yram\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (string) (string-reverse string)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n",
    "  (map (lambda (x) (string-reverse x)) stringlist))\n"
  ]
}