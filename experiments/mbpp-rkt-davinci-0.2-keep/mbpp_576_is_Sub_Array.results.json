{
  "name": "mbpp_576_is_Sub_Array",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8kdkn5bt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8kdkn5bt.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8kdkn5bt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8kdkn5bt.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (empty? B)\n      #t\n      (if (equal? (first A) (first B))\n          (is_Sub_Array (rest A) (rest B))\n          (is_Sub_Array A (rest B)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcki6aih.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcki6aih.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (define (is_Sub_Array_Helper A B)\n    (if (null? A)\n        #t\n        (if (null? B)\n            #f\n            (if (equal? (car A) (car B))\n                (is_Sub_Array_Helper (cdr A) (cdr B))\n                (is_Sub_Array_Helper A (cdr B))))))\n  (is_Sub_Array_Helper A B))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ((i 0) (j 0))\n    (cond ((= i (length A)) #t)\n          ((= j (length B)) #f)\n          ((= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1)))\n          (else (loop i (+ j 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([A A] [B B])\n    (cond\n      [(null? A) #t]\n      [(null? B) #f]\n      [(equal? (car A) (car B)) (loop (cdr A) (cdr B))]\n      [else (loop A (cdr B))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([A A] [B B])\n    (if (null? A)\n        #t\n        (if (null? B)\n            #f\n            (if (equal? (car A) (car B))\n                (loop (cdr A) (cdr B))\n                (loop A (cdr B)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0])\n    (if (= i (length A))\n        #t\n        (if (member (list-ref A i) B)\n            (loop (+ i 1))\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0])\n    (if (&lt; i (length A))\n        (if (member (list-ref A i) B)\n            (loop (+ i 1))\n            #f)\n        #t)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124095,
      "stdout": "",
      "stderr": "/tmp/tmpyqqs3scm.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([A A] [B B])\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n      [else (loop A (rest B))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0])\n    (cond\n      [(= i (length B)) #t]\n      [(= i (length A)) #f]\n      [(equal? (list-ref A i) (list-ref B i)) (loop (+ i 1))]\n      [else #f])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0] [j 0])\n    (cond\n      [(= i (length A)) #t]\n      [(= j (length B)) #f]\n      [(= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1))]\n      [else (loop i (+ j 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([A A] [B B])\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n      [else (loop A (rest B))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (define (is_Sub_Array_Helper A B)\n    (if (null? A)\n        #t\n        (if (null? B)\n            #f\n            (if (equal? (car A) (car B))\n                (is_Sub_Array_Helper (cdr A) (cdr B))\n                (is_Sub_Array_Helper A (cdr B))))))\n  (is_Sub_Array_Helper A B))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(and (not (empty? B)) (equal? (first A) (first B)))\n     (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjhdr1atw.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjhdr1atw.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond [(empty? A) #t]\n        [(empty? B) #f]\n        [else (or (equal? A B)\n                  (is_Sub_Array (rest A) B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqp9wim29.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqp9wim29.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([A A] [B B])\n    (cond [(empty? A) #t]\n          [(empty? B) #f]\n          [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n          [else (loop A (rest B))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8kdkn5bt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8kdkn5bt.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ((A A) (B B) (i 0))\n    (cond\n      ((null? A) #t)\n      ((null? B) #f)\n      ((equal? (car A) (car B)) (loop (cdr A) (cdr B) (+ i 1)))\n      (else (loop A (cdr B) (+ i 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond ((null? A) #t)\n        ((null? B) #f)\n        ((equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B)))\n        (else (is_Sub_Array A (cdr B)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ((i 0) (j 0))\n    (cond\n      ((= i (length A)) #t)\n      ((= j (length B)) #f)\n      ((= (list-ref A i) (list-ref B j))\n       (loop (+ i 1) (+ j 1)))\n      (else (loop i (+ j 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0] [j 0])\n    (cond\n      [(= i (length A)) #t]\n      [(= j (length B)) #f]\n      [(= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1))]\n      [else (loop i (+ j 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0])\n    (cond [(= i (length A)) #t]\n          [(not (member (list-ref A i) B)) #f]\n          [else (loop (+ i 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0])\n    (cond [(= i (length A)) #t]\n          [(= i (length B)) #f]\n          [(equal? (list-ref A i) (list-ref B i)) (loop (+ i 1))]\n          [else #f])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8kdkn5bt.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8kdkn5bt.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (empty? B)\n      #t\n      (if (empty? A)\n          #f\n          (if (equal? (first A) (first B))\n              (is_Sub_Array (rest A) (rest B))\n              (is_Sub_Array (rest A) B)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ((i 0))\n    (cond\n      ((= i (length A)) #t)\n      ((not (member (list-ref A i) B)) #f)\n      (else (loop (+ i 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([A A] [B B])\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n      [else (loop A (rest B))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (define (is_Sub_Array_helper A B i j)\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(= (first A) (first B)) (is_Sub_Array_helper (rest A) (rest B) (+ i 1) (+ j 1))]\n      [(> i (length B)) #f]\n      [else (is_Sub_Array_helper A (rest B) i (+ j 1))]))\n  (is_Sub_Array_helper A B 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ((A A) (B B))\n    (cond\n      ((null? A) #t)\n      ((null? B) #f)\n      ((equal? (car A) (car B)) (loop (cdr A) (cdr B)))\n      (else (loop A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8p7mhca5.rkt:15:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8p7mhca5.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzqiez0q2.rkt:15:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzqiez0q2.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0] [j 0])\n    (cond [(= i (length A)) #t]\n          [(= j (length B)) #f]\n          [(= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1))]\n          [else (loop i (+ j 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? B)\n      #t\n      (if (equal? A B)\n          #t\n          (is_Sub_Array A (cdr B)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkpxd7avj.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkpxd7avj.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0] [j 0])\n    (cond [(= i (length A)) #t]\n          [(= j (length B)) #f]\n          [(= (list-ref A i) (list-ref B j))\n           (loop (+ i 1) (+ j 1))]\n          [else (loop i (+ j 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B))\n     (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (define (is_Sub_Array_Helper A B i)\n    (cond\n      [(empty? B) #t]\n      [(empty? A) #f]\n      [(equal? (first A) (first B))\n       (if (is_Sub_Array_Helper (rest A) (rest B) (+ i 1))\n           #t\n           (is_Sub_Array_Helper (rest A) B (+ i 1)))]\n      [else (is_Sub_Array_Helper (rest A) B (+ i 1))]))\n  (is_Sub_Array_Helper A B 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (empty? A)\n      #t\n      (if (member (first A) B)\n          (is_Sub_Array (rest A) B)\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0] [j 0])\n    (cond [(= i (length A)) #t]\n          [(= j (length B)) #f]\n          [(= (list-ref A i) (list-ref B j))\n           (loop (+ i 1) (+ j 1))]\n          [else (loop i (+ j 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0])\n    (if (= i (length A))\n        #t\n        (if (member (list-ref A i) B)\n            (loop (+ i 1))\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([A A] [B B])\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n      [else (loop A (rest B))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (define (is_Sub_Array_helper A B)\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (is_Sub_Array_helper (rest A) (rest B))]\n      [else (is_Sub_Array_helper A (rest B))]))\n  (is_Sub_Array_helper A B))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ((i 0))\n    (if (= i (length A))\n        #t\n        (if (member (list-ref A i) B)\n            (loop (+ i 1))\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #f]\n    [(sublist? A B) #t]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "/tmp/tmpzawwtupw.rkt:7:6: sublist?: unbound identifier\n  in: sublist?\n  location...:\n   /tmp/tmpzawwtupw.rkt:7:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ((i 0) (j 0))\n    (cond\n      ((= i (length A)) #t)\n      ((= j (length B)) #f)\n      ((= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1)))\n      (else (loop i (+ j 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ([i 0] [j 0])\n    (cond\n      [(or (= i (length A)) (= j (length B))) #f]\n      [(= (list-ref A i) (list-ref B j))\n       (if (= i (- (length A) 1))\n           #t\n           (loop (+ i 1) (+ j 1)))]\n      [else (loop i (+ j 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(equal? A B) #t]\n    [(equal? A (rest B)) #t]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkicwwf2y.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkicwwf2y.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond ((null? A) #t)\n        ((null? B) #f)\n        ((equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B)))\n        (else (is_Sub_Array A (cdr B)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond ((null? A) #t)\n        ((null? B) #f)\n        ((equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B)))\n        (else (is_Sub_Array A (cdr B)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124096,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}