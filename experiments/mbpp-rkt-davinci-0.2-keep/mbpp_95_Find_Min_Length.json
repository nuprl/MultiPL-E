{
  "name": "mbpp_95_Find_Min_Length",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the length of the smallest list in a list of lists.\n(define (Find_Min_Length lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Min_Length))\n    (check-equal? (candidate (list (list 1) (list 1 2))) 1)\n    (check-equal? (candidate (list (list 1 2) (list 1 2 3) (list 1 2 3 4))) 2)\n    (check-equal? (candidate (list (list 3 3 3) (list 4 4 4 4))) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? lst)\n      0\n      (if (null? (cdr lst))\n          (length (car lst))\n          (min (length (car lst)) (Find_Min_Length (cdr lst))))))\n",
    "  (if (null? lst)\n      0\n      (min (length (car lst))\n           (Find_Min_Length (cdr lst)))))\n",
    "  (if (null? lst)\n      0\n      (let ([min (length (car lst))])\n        (for ([i (cdr lst)])\n          (if (< (length i) min)\n              (set! min (length i))))\n        min)))\n",
    "  (cond\n    [(empty? lst) 0]\n    [(empty? (rest lst)) (length (first lst))]\n    [else (min (length (first lst)) (Find_Min_Length (rest lst)))]))\n",
    "  (if (null? lst)\n      0\n      (let ([min (length (car lst))])\n        (for ([i (cdr lst)])\n          (if (< (length i) min)\n              (set! min (length i))))\n        min)))\n",
    "  (cond\n    [(null? lst) 0]\n    [(null? (cdr lst)) (length (car lst))]\n    [else (min (length (car lst)) (Find_Min_Length (cdr lst)))]))\n",
    "  (cond\n    [(empty? lst) 0]\n    [(empty? (rest lst)) (length (first lst))]\n    [else (min (length (first lst)) (Find_Min_Length (rest lst)))]))\n",
    "  (if (null? lst)\n      0\n      (min (length (car lst))\n           (Find_Min_Length (cdr lst)))))\n",
    "  (cond\n    [(null? lst) 0]\n    [(null? (cdr lst)) (length (car lst))]\n    [else (min (length (car lst)) (Find_Min_Length (cdr lst)))]))\n",
    "  (apply min (map length lst)))\n",
    "  (if (null? lst)\n      0\n      (let ((min (length (car lst))))\n        (for ((i (cdr lst)))\n          (if (< (length i) min)\n              (set! min (length i))))\n        min)))\n",
    "  (if (null? lst)\n      0\n      (let ([min (length (car lst))])\n        (for ([i (cdr lst)])\n          (if (< (length i) min)\n              (set! min (length i))))\n        min)))\n",
    "  (if (null? lst)\n      0\n      (let ((min (length (car lst))))\n        (for ((x (cdr lst)))\n          (if (< (length x) min)\n              (set! min (length x))))\n        min)))\n",
    "  (cond\n    [(empty? lst) 0]\n    [(empty? (rest lst)) (length (first lst))]\n    [else (min (length (first lst)) (Find_Min_Length (rest lst)))]))\n",
    "  (if (null? lst)\n      0\n      (min (length (car lst))\n           (Find_Min_Length (cdr lst)))))\n",
    "  (if (null? lst)\n      0\n      (let ([min (length (car lst))])\n        (for ([i (cdr lst)])\n          (if (< (length i) min)\n              (set! min (length i))))\n        min)))\n",
    "  (apply min (map length lst)))\n",
    "  (apply min (map length lst)))\n",
    "  (apply min (map length lst)))\n",
    "  (cond\n    [(null? lst) 0]\n    [(null? (cdr lst)) (length (car lst))]\n    [else\n     (let* ([len1 (length (car lst))]\n            [len2 (Find_Min_Length (cdr lst))])\n       (if (< len1 len2) len1 len2))]))\n"
  ]
}