{
  "name": "mbpp_20_is_woodall",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given number is woodball or not.\n(define (is_woodall x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_woodall))\n    (check-equal? (candidate 383) #t)\n    (check-equal? (candidate 254) #f)\n    (check-equal? (candidate 200) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (is-prime? (next-odd n) 2))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (",
    "  (define (is-prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter n)\n    (cond ((= n x) #t)\n          ((is-prime n)\n           (if (= (expt n 2) x)\n               #t\n               (iter (+ n 1))))\n          (else (iter (+ n 1)))))\n  (iter 2))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime x) (is_woodall? (* 2 x))))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-helper x (- n 1)))))\n  (cond ((is_prime x) #f)\n        ((= (remainder x 2) 0) #f)\n        (else (is_woodall-helper x (- x 1)))))\n",
    "  (define (is_prime x)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor x 2) x))\n  (define (is_woodall? x)\n    (and (is_prime x)\n         (is_prime (+ x 1))\n         (is_prime (+ x 2))\n         (is_prime (+ x 3))))\n  (is_woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is-power-of-2? x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is-power-of-2? (/ x 2)))\n          (else #f)))\n  (and (is-prime? x) (is-power-of-2? x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) (iter (/ n 2)))\n            (else #f)))\n    (iter x))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (if (= n 1)\n        #t\n        (if (= (remainder x (* n n)) 1)\n            (iter (- n 1))\n            #f)))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (iter (+ i 1)))))\n  (and (is-prime? x) (iter 2)))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else\n           (define (iter i)\n             (cond ((&gt; i (sqrt x)) #t)\n                   ((= (remainder x i) 0) #f)\n                   (else (iter (+ i 1)))))\n           (iter 3))))\n  (define (is_woodall-iter x i)\n    (cond ((&gt; x i) #f)\n          ((= (remainder x i) 0)\n           (and (is_prime i)\n                (is_woodall-iter (/ x i) i)))\n          (else (is_woodall-iter x (+ i 1)))))\n  (is_woodall-iter x 2))\n",
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (is-prime? (next-prime n)))))\n  (define (next-prime n)\n    (cond ((is-prime? (+ n 1)) (+ n 1))\n          (else (next-prime (+ n 1)))))\n  (define (is-woodall? n)\n    (cond ((= n 1) #t)\n          ((= n 2) #f)\n          ((= n 3) #f)\n          ((= n 4) #f)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #f)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #f)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #f)\n          ((= n 33) #f)\n          ((= n 34) #f)\n          ((= n 35) #f)\n          ((= n 36) #f)\n          ((= n 37) #f)\n          ((= n 38) #f)\n          ((= n 39) #f)\n          ((= n 40) #f",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [(is_prime i) (is_woodall-iter x (+ i 1))]\n      [else (is_woodall-iter x (+ i 1))]))\n  (is_woodall-iter x 2))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (= (remainder x i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall? x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (is_prime? i)\n              (if (= (expt i 2) x) #t\n                  (iter (+ i 1)))\n              (iter (+ i 1)))))\n    (iter 2))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_square x)\n    (define (iter n)\n      (cond ((= n x) #t)\n            ((&gt; n x) #f)\n            (else (iter (+ n 1)))))\n    (iter 1))\n  (and (is_prime x) (is_square (* x 2 1))))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((&lt; i n) (if (is-prime? i)\n                         (if (= (expt 2 i) (+ n (* 2 (expt i 2))))\n                             #t\n                             (iter (+ i 1)))\n                         (iter (+ i 1))))\n            (else #f)))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (modulo x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_two? x)\n    (if (= x 1)\n        #t\n        (if (= (modulo x 2) 0)\n            (is_power_of_two? (/ x 2))\n            #f)))\n  (and (is_prime? x) (is_power_of_two? x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime x)\n       (is_prime (* 2 x))\n       (is_prime (* 3 x))))\n",
    "  (define (is_prime x)\n    (define (iter y)\n      (cond\n        [(= y 1) #t]\n        [(= (modulo x y) 0) #f]\n        [else (iter (- y 1))]))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (cond\n      [(= x 1) #t]\n      [(= (modulo x 2) 0) (is_power_of_2 (/ x 2))]\n      [else #f]))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(not (is_prime? i)) #f]\n        [(not (= (expt 2 i) (+ n (* i i)))) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is_woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (iter (- n 1)))))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) (is-prime? i))\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) (is_power? (/ x n)))\n            (else (iter (- n 1)))))\n    (iter x))\n  (and (is_prime? x) (is_power? x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-square? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((&gt; n x) #f)\n            ((= (remainder x n) 0) #t)\n            (else (iter (+ n 1)))))\n    (iter 1))\n  (and (is-prime? x) (is-square? (* x 2))))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((&gt; i (sqrt x)) #t)\n                   ((= (modulo x i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (is_woodall-helper x n)\n    (cond ((&gt; n (sqrt x)) #t)\n          ((= (modulo x n) 0) (and (is_prime n) (is_woodall-helper x (+ n 2))))\n          (else (is_woodall-helper x (+ n 2)))))\n  (and (is_prime x) (is_woodall-helper x 3)))\n</code>\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (cond ((is_prime? x) #f)\n        ((is_woodall? x) #t)\n        (else #f)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) (iter (/ x n)))\n            (else #f)))\n    (iter 2))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (is_woodall-iter x (+ i 1)))))\n  (is_woodall-iter x 2))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond ((= i x) #t)\n          ((= (modulo x i) 0) #f)\n          (else (is_woodall-iter x (+ i 1)))))\n  (and (is_prime x) (is_woodall-iter (* x x) 1)))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is_woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) (is-prime? i))\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((not (is-prime? i)) #f)\n            ((= (remainder x i) 0) (iter (+ i 1)))\n            (else #f)))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (iter (- n 1)))))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x i)\n    (cond ((= i 1) #t)\n          ((= (remainder x i) 0) #f)\n          ((is_prime i) (is_woodall-iter x (- i 1)))\n          (else (is_woodall-iter x (- i 1)))))\n  (is_woodall-iter x (- x 1)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (if (= n 1)\n        #t\n        (if (is_prime x)\n            (is_woodall-helper (* x x) (- n 1))\n            #f)))\n  (is_woodall-helper x 2))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-power-of-2? x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is-power-of-2? (/ x 2)))\n          (else #f)))\n  (and (is-prime? x) (is-power-of-2? x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x i)\n    (cond ((= i 1) #t)\n          ((= (modulo x i) 0) #f)\n          (else (is_woodall-helper x (- i 1)))))\n  (and (is_prime x) (is_woodall-helper (* x x) x)))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (if (= n 1)\n        #t\n        (if (is-prime? n)\n            (if (= (remainder x (* n n)) 1)\n                (iter (- n 1))\n                #f)\n            (iter (- n 1)))))\n  (iter (- x 1)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (= (modulo x i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i x)\n        #t\n        (if (is_prime i)\n            (if (= (expt i x) x)\n                (iter (+ i 1))\n                #f)\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [(is_prime i) (iter (+ i 1))]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(not (is-prime? i)) #f]\n      [(not (= (expt x i) (remainder (+ 1 (expt x i)) i))) #f]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (if (= n 1)\n        #t\n        (if (is_prime n)\n            (if (= (expt n x) x)\n                (is_woodall-helper x (- n 1))\n                #f)\n            (is_woodall-helper x (- n 1)))))\n  (is_woodall-helper x x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo x i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (cond\n      [(= x 1) #t]\n      [(= (modulo x 2) 0) (is_power_of_2 (/ x 2))]\n      [else #f]))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is_prime x)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((is-divisible? x n) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-power-of-2? x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is-power-of-2? (/ x 2)))\n          (else #f)))\n  (and (is_prime x) (is-power-of-2? x)))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          (else (not (any (lambda (y) (= (remainder x y) 0))\n                          (range 2 x))))))\n  (and (is_prime x)\n       (is_prime (expt 2 x))\n       (is_prime (expt 3 x))\n       (is_prime (expt 4 x))\n       (is_prime (expt 5 x))\n       (is_prime (expt 6 x))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((not (is-prime? n)) #f)\n            ((not (= (expt n 2) (+ x 1))) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond\n      [(= n 1) #t]\n      [(= (remainder x n) 0) #f]\n      [else (is_woodall-helper x (- n 1))]))\n  (is_woodall-helper x (* x 2)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) (iter (/ x n)))\n            (else #f)))\n    (iter 2))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [else (iter (+ i 1))]))\n  (and (is_prime? x) (iter 2)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (/ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (modulo n 2) 0) #f)\n          ((= (modulo n 3) 0) #f)\n          ((= (modulo n 5) 0) #f)\n          ((= (modulo n 7) 0) #f)\n          ((= (modulo n 11) 0) #f)\n          ((is-prime? n) #f)\n          (else (iter (+ n 1)))))\n  (iter x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((&gt; (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor x 2) x))\n  (define (is-woodall? x)\n    (define (is-woodall-helper x n)\n      (cond ((&gt; n x) #t)\n            ((not (is-prime? n)) #f)\n            (else (is-woodall-helper x (+ n 1)))))\n    (is-woodall-helper x 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (if (= (remainder x 2) 0)\n        #f\n        (if (is-prime? x)\n            #f\n            (let loop ((n 1))\n              (if (= (expt 2 n) x)\n                  #t\n                  (if (&lt; (expt 2 n) x)\n                      (loop (+ n 1))\n                      #f)))))))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_square? x)\n    (define (iter n)\n      (if (= n x)\n          #t\n          (if (&lt; n x)\n              (iter (+ n 1))\n              #f)))\n    (iter 1))\n  (if (and (is_prime? x) (is_square? (* x 2)))\n      #t\n      #f))\n</code>\n",
    "  (define (pow x n)\n    (if (= n 0)\n        1\n        (* x (pow x (- n 1)))))\n  (define (sum-digits x)\n    (if (= x 0)\n        0\n        (+ (remainder x 10) (sum-digits (quotient x 10)))))\n  (= x (sum-digits (pow x 2))))\n",
    "  (cond\n    [(= x 1) #t]\n    [(= x 0) #f]\n    [(= (remainder x 2) 0) (is_woodall (/ x 2))]\n    [else (is_woodall (+ x 1))]))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (remainder x n) 0)\n                  (iter (- n 1))\n                  #f)\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (is_woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (if (is-prime? x)\n      (is-woodall? x)\n      #f))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((and (is-prime? i) (is-prime? (+ n (* i i)))) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((not (is-prime? i)) #f)\n            ((not (= (expt 2 i) (+ n (* i i)))) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter y)\n      (cond\n        [(= y 1) #t]\n        [(= (modulo x y) 0) #f]\n        [else (iter (- y 1))]))\n    (iter (- x 1)))\n  (define (is_woodall-iter x y)\n    (cond\n      [(= y 1) #t]\n      [(= (modulo x y) 0) #f]\n      [else (is_woodall-iter x (- y 1))]))\n  (is_woodall-iter x (* x 2)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 0) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is_power_of_2 (/ x 2)))\n          (else #f)))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((is-prime? i)\n             (if (= (expt n i) (+ n (* i i)))\n                 (iter (- i 1))\n                 #f))\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x n)\n    (if (= n 1)\n        #t\n        (if (is_prime n)\n            (if (= (expt n 2) x)\n                #t\n                (is_woodall-iter x (- n 1)))\n            (is_woodall-iter x (- n 1)))))\n  (is_woodall-iter x x))\n",
    "  (define (is-prime x)\n    (define (iter y)\n      (cond ((= y 1) #t)\n            ((= (modulo x y) 0) #f)\n            (else (iter (- y 1)))))\n    (iter (- x 1)))\n  (define (iter x y)\n    (cond ((= x 1) #t)\n          ((= (modulo y x) 0) (is-prime x))\n          (else (iter (- x 1) y))))\n  (iter (- x 1) x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (if (= n 0)\n        #t\n        (if (is_prime? n)\n            (iter (- n 1))\n            #f)))\n  (iter x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (if (= n 1)\n        #t\n        (if (is-prime? n)\n            (if (= (remainder (* x n) (+ n 1)) 0)\n                (iter (- n 1))\n                #f)\n            (iter (- n 1)))))\n  (iter (- x 1)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1) #t\n          (if (= (remainder x n) 0) #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (if (= (remainder x 2) 0) #f\n        (if (= (remainder x 5) 0) #f\n            (if (= (remainder x 3) 0) #f\n                (if (= (remainder x 7) 0) #f\n                    (if (= (remainder x 11) 0) #f\n                        (if (= (remainder x 13) 0) #f\n                            (if (= (remainder x 17) 0) #f\n                                (if (= (remainder x 19) 0) #f\n                                    (if (= (remainder x 23) 0) #f\n                                        (if (= (remainder x 29) 0) #f\n                                            (if (= (remainder x 31) 0) #f\n                                                (if (= (remainder x 37) 0) #f\n                                                    (if (= (remainder x 41) 0) #f\n                                                        (if (= (remainder x 43) 0) #f\n                                                            (if (= (remainder x 47) 0) #f\n                                                                (if (= (remainder x 53) 0) #f\n                                                                    (if (= (remainder x 59) 0) #f\n                                                                        (if (= (remainder x 61) 0) #f\n                                                                            (if (= (remainder x 67) 0) #f\n                                                                                (if (= (remainder x 71) 0) #f\n                                                                                    (if (= (remainder x 73) 0) #f\n                                                                                        (if (= (remainder x 79) 0) #f\n                                                                                            (if (= (remainder x 83) 0) #f\n                                                                                                (if (= (remainder x 89) 0) #f\n                                                ",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((zero? (modulo x n)) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= n 1) #t)\n          ((zero? (modulo x n)) #f)\n          (else (is_woodall-helper x (- n 1)))))\n  (and (is_prime x)\n       (is_woodall-helper x (- x 1))))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          ((is_prime i) (iter (+ i 1)))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-helper x (- n 1)))))\n  (cond ((is_prime x) #f)\n        ((is_woodall-helper x (- x 1)) #t)\n        (else #f)))\n",
    "  (let loop ([n x] [i 2])\n    (cond [(= n 1) #t]\n          [(= (modulo n i) 0) #f]\n          [else (loop (quotient n i) (+ i 1))])))\n",
    "  (define (is-prime? x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else (is-prime? (next-odd x 2)))))\n  (define (next-odd x n)\n    (cond ((= n x) #t)\n          ((even? n) (next-odd x (+ n 1)))\n          (else (is-prime? (/ x n)))))\n  (is-prime? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is-prime? n)\n              (if (= (expt n 2) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter x))\n  (is-woodall? x))\n",
    "  (and (integer? x)\n       (and (= (expt (expt 2 x) 2) (+ 1 (* 2 x)))\n            (= (expt (expt 2 (+ x 1)) 2) (+ 1 (* 2 (+ x 1)))))))\n",
    "  (define (is-prime x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime x) (is-woodall x)))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x)\n       (is_prime? (* x 2))\n       (is_prime? (* x 3))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is_prime x)\n    (cond\n      [(= x 1) #f]\n      [(= x 2) #t]\n      [(= (remainder x 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(= i (sqrt x)) #t]\n           [(= (remainder x i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter x)\n    (cond\n      [(= x 1) #t]\n      [(= (remainder x 2) 0) #f]\n      [(not (is_prime x)) #f]\n      [else (iter (/ x 2))]))\n  (iter x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (= (remainder x i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_power_of_2 x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (= (remainder x i) 0) (iter (* i 2)) #f)))\n    (iter 2))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((is-prime? n) (iter (- n 1)))\n            (else (and (is-prime? (* n n x)) (iter (- n 1))))))\n    (iter x))\n  (is-woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (= (modulo x i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (if (= i x)\n        #t\n        (if (and (is_prime i) (= (expt x i) x))\n            (is_woodall-iter x (+ i 1))\n            #f)))\n  (is_woodall-iter x 2))\n",
    "  (let loop ((n x) (i 1))\n    (if (= n 1)\n        #t\n        (if (= (modulo n i) 0)\n            (loop (/ n i) i)\n            (loop n (+ i 1))))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0)\n             (and (is-prime? i) (iter (/ x i))))\n            (else (iter (- i 1)))))\n    (iter x))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? (* 2 x))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is-prime? n)\n              (if (= (expt n n) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (if (= x 1)\n      #t\n      (let ([y (expt 2 x)])\n        (if (= y (expt x 2))\n            #t\n            (is_woodall (- x 1))))))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (remainder x n) 0)\n                  (iter (- n 1))\n                  #f)\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (is_woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x)\n       (is-prime? (* 2 x))\n       (is-prime? (* 3 x))\n       (is-prime? (* 4 x))\n       (is-prime? (* 5 x))\n       (is-prime? (* 6 x))))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (if (= n 1)\n        #t\n        (if (is_prime n)\n            (if (= (expt n x) x)\n                (is_woodall-helper x (- n 1))\n                #f)\n            (is_woodall-helper x (- n 1)))))\n  (is_woodall-helper x x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x i)\n    (cond ((= i 1) #t)\n          ((= (remainder x i) 0) (is_woodall-iter x (- i 1)))\n          ((is_prime i) #f)\n          (else (is_woodall-iter x (- i 1)))))\n  (is_woodall-iter x (- x 1)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) (is-prime? i))\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          ((not (is_prime i)) (is_woodall-iter x (+ i 1)))\n          (else (is_woodall-iter (* x i) (+ i 1)))))\n  (is_woodall-iter x 2))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else (let loop ((i 3))\n                  (cond ((&gt; i (sqrt x)) #t)\n                        ((= (modulo x i) 0) #f)\n                        (else (loop (+ i 2))))))))\n  (define (is_woodall-helper x)\n    (cond ((= x 1) #t)\n          ((not (is_prime x)) #f)\n          (else (is_woodall-helper (/ x 2)))))\n  (is_woodall-helper x))\n</code>\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0)\n             (and (is_prime? i) (iter (- i 1))))\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (is_woodall? x))\n",
    "  (if (= x 1)\n      #t\n      (if (= (modulo x 2) 0)\n          (is_woodall (/ x 2))\n          (is_woodall (* x 3) (+ x 1)))))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) (and (is-prime? i) (iter (- i 1))))\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (and (is_prime? x)\n       (is_prime? (* x 2))\n       (is_prime? (* x 3))))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is-power-of-2? n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 0)\n            (is-power-of-2? (/ n 2))\n            #f)))\n  (define (is-prime? n)\n    (if (= n 1)\n        #f\n        (if (= n 2)\n            #t\n            (if (= (remainder n 2) 0)\n                #f\n                (let loop ((i 3))\n                  (if (&lt; i n)\n                      (if (= (remainder n i) 0)\n                          #f\n                          (loop (+ i 2)))\n                      #t))))))\n  (and (is-power-of-2? x) (is-prime? x)))\n</code>\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond\n      [(= i x) #t]\n      [(and (is_prime i) (is_prime (+ i 1)) (is_prime (+ i 2)))\n       (is_woodall-iter x (+ i 1))]\n      [else #f]))\n  (is_woodall-iter x 1))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((not (is_prime i)) #f)\n          ((not (= (expt i 2) (+ x 1))) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (if (= n 1)\n        #t\n        (if (is-prime? n)\n            (if (= (expt n 2) x)\n                #t\n                (iter (- n 1)))\n            (iter (- n 1)))))\n  (iter x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (if (and (is_prime? x) (is_woodall? x))\n      #t\n      #f))\n",
    "  (define (is-prime? x)\n    (define (divides? a b) (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (define (is-woodall? x)\n    (define (is-woodall-iter x n)\n      (cond ((= x 1) #t)\n            ((= x n) #f)\n            ((is-prime? n)\n             (is-woodall-iter (- x 1) (+ n 1)))\n            (else (is-woodall-iter x (+ n 1)))))\n    (is-woodall-iter x 1))\n  (is-woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) (and (is-prime? i) (iter (- i 1))))\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is-prime? n)\n              (if (= (expt n n) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((not (is-prime? i)) #f)\n            ((not (= (expt i n) n)) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter y)\n      (if (= y 1)\n          #t\n          (if (= (remainder x y) 0)\n              #f\n              (iter (- y 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x y)\n    (if (= y 1)\n        #t\n        (if (is_prime y)\n            (if (= (expt y x) x)\n                (is_woodall-helper x (- y 1))\n                #f)\n            (is_woodall-helper x (- y 1)))))\n  (is_woodall-helper x x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          ((is_prime i) (is_woodall-iter (+ i 1)))\n          (else (is_woodall-iter (+ i 1)))))\n  (is_woodall-iter 1))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (modulo x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (modulo x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (let loop ([x x])\n    (cond\n      [(zero? x) #t]\n      [(not (integer? (expt x 1/2))) #f]\n      [else (loop (sub1 x))])))\n",
    "  (define (is-woodall-iter x n)\n    (if (= x 1)\n        #t\n        (if (= (expt n 2) x)\n            #t\n            (is-woodall-iter x (+ n 1)))))\n  (is-woodall-iter x 1))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_power? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) (is_power? (/ x i)))\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_power? x)))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (= (remainder x i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i x)\n        #t\n        (if (is_prime? i)\n            (if (= (expt i 2) x)\n                #t\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x)\n       (is_woodall? (* x 2))))\n",
    "  (define (is-prime? n)\n    (define (iter divisor)\n      (cond ((&gt; divisor (sqrt n)) #t)\n            ((= (modulo n divisor) 0) #f)\n            (else (iter (+ divisor 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter divisor)\n      (cond ((&gt; divisor (sqrt n)) #t)\n            ((= (modulo n divisor) 0)\n             (and (= (expt divisor 2) n)\n                  (is-prime? divisor)))\n            (else (iter (+ divisor 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter y)\n      (cond ((= y 1) #t)\n            ((= (modulo x y) 0) #f)\n            (else (iter (- y 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x y)\n    (cond ((= x 1) #t)\n          ((= (modulo y x) 0) (is-woodall-helper (- x 1) (/ y x)))\n          (else #f)))\n  (is_woodall-helper x x))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (if (&lt; i x)\n          (if (zero? (modulo x i))\n              #f\n              (iter (+ i 1)))\n          #t))\n    (iter 2))\n  (define (iter i)\n    (if (&lt; i x)\n        (if (is-prime? i)\n            (if (is-prime? (* x i))\n                (iter (+ i 1))\n                #f)\n            (iter (+ i 1)))\n        #t))\n  (iter 2))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (= (remainder x i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i x)\n        #t\n        (if (is_prime i)\n            (if (= (expt i 2) x)\n                #t\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- (expt 2 x) 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? x)\n    (cond [(= x 1) #f]\n          [(= x 2) #t]\n          [(even? x) #f]\n          [else (define (iter n)\n                  (cond [(= n x) #t]\n                        [(zero? (modulo x n)) #f]\n                        [else (iter (+ n 1))]))\n                (iter 3)]))\n  (define (is-woodall? x)\n    (cond [(= x 1) #t]\n          [(= x 2) #t]\n          [(= x 3) #f]\n          [(= x 4) #f]\n          [(= x 5) #t]\n          [(= x 6) #f]\n          [(= x 7) #t]\n          [(= x 8) #f]\n          [(= x 9) #f]\n          [(= x 10) #f]\n          [(= x 11) #t]\n          [(= x 12) #f]\n          [(= x 13) #t]\n          [(= x 14) #f]\n          [(= x 15) #f]\n          [(= x 16) #f]\n          [(= x 17) #t]\n          [(= x 18) #f]\n          [(= x 19) #t]\n          [(= x 20) #f]\n          [(= x 21) #f]\n          [(= x 22) #f]\n          [(= x 23) #t]\n          [(= x 24) #f]\n          [(= x 25) #f]\n          [(= x 26) #f]\n          [(= x 27) #f]\n          [(= x 28) #f]\n          [(= x 29) #t]\n          [(= x 30) #f]\n          [(= x 31) #t]\n          [(= x 32) #f]\n          [(= x 33) #f]\n          [(= x 34) #f]\n          [(= x 35) #f]\n          [(= x 36) #f]\n          [(= x 37) #t]\n          [(= x 38) #f]\n          [(= x 39) #f]\n          [(= x 40) #f]",
    "  (if (zero? x)\n      #t\n      (let ([y (quotient x 2)])\n        (if (zero? y)\n            #f\n            (is_woodall y)))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (expt n 2 (* n 2)) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter x))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (modulo x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (and (is_prime x)\n       (is_prime (* x 2 1))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (modulo x n) 0) #f)\n          (else (iter (- n 1)))))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          ((is-prime? i) (iter (+ i 1)))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is-prime? n)\n    (cond\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n      [(= n 11) #t]\n      [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19) #t]\n      [(= n 23) #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n      [(= n 37) #t]\n      [(= n 41) #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n      [(= n 53) #t]\n      [(= n 59) #t]\n      [(= n 61) #t]\n      [(= n 67) #t]\n      [(= n 71) #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n      [(= n 83) #t]\n      [(= n 89) #t]\n      [(= n 97) #t]\n      [else #f]))\n  (define (is-woodall? n)\n    (if (is-prime? n)\n        (if (= (expt n 2) (+ 1 (* n (expt 2 n))))\n            #t\n            #f)\n        #f))\n  (is-woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(is-prime? i) (iter (+ i 1))]\n      [else #f]))\n  (iter 2))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) (is-prime? i))\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime x) (is-woodall x)))\n",
    "  (define (is-prime? x)\n    (cond\n      [(= x 1) #f]\n      [(= x 2) #t]\n      [(even? x) #f]\n      [else (define (iter i)\n              (cond\n                [(= i x) #t]\n                [(= (remainder x i) 0) #f]\n                [else (iter (+ i 1))]))\n            (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(not (is-prime? i)) #f]\n      [(= (expt x i) (+ 1 (* i x))) (iter (+ i 1))]\n      [else #f]))\n  (iter 2))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((not (is_prime? i)) #f)\n          ((= (remainder (* x i) (+ i 1)) 0) (iter (+ i 1)))\n          (else #f)))\n  (iter 1))\n",
    "  (cond\n    [(= x 1) #t]\n    [(= x 2) #t]\n    [(= x 3) #t]\n    [(= x 4) #t]\n    [(= x 5) #t]\n    [(= x 6) #t]\n    [(= x 7) #t]\n    [(= x 8) #t]\n    [(= x 9) #t]\n    [(= x 10) #t]\n    [(= x 11) #t]\n    [(= x 12) #t]\n    [(= x 13) #t]\n    [(= x 14) #t]\n    [(= x 15) #t]\n    [(= x 16) #t]\n    [(= x 17) #t]\n    [(= x 18) #t]\n    [(= x 19) #t]\n    [(= x 20) #t]\n    [(= x 21) #t]\n    [(= x 22) #t]\n    [(= x 23) #t]\n    [(= x 24) #t]\n    [(= x 25) #t]\n    [(= x 26) #t]\n    [(= x 27) #t]\n    [(= x 28) #t]\n    [(= x 29) #t]\n    [(= x 30) #t]\n    [(= x 31) #t]\n    [(= x 32) #t]\n    [(= x 33) #t]\n    [(= x 34) #t]\n    [(= x 35) #t]\n    [(= x 36) #t]\n    [(= x 37) #t]\n    [(= x 38) #t]\n    [(= x 39) #t]\n    [(= x 40) #t]\n    [(= x 41) #t]\n    [(= x 42) #t]\n    [(= x 43) #t]\n    [(= x 44) #t]\n    [(= x 45) #t]\n    [(= x 46) #t]\n    [(= x 47) #t]\n    [(= x 48) #t]\n    [(= x 49) #t]\n    [(= x 50) #t]\n    [(= x 51) #",
    "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((not (is-prime i)) #f)\n            ((not (= (expt i n) n)) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((&lt; n x) (if (zero? (modulo x n)) #f (iter (+ n 1))))\n            ((= n x) #t)))\n    (iter 2))\n  (define (is_power_of_2 x)\n    (cond ((= x 1) #t)\n          ((even? x) (is_power_of_2 (/ x 2)))\n          (else #f)))\n  (and (is_prime x) (is_power_of_2 x)))\n</code>\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (zero? (modulo x i))\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_square? x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (&gt; i x)\n              #f\n              (iter (+ i 1)))))\n    (iter 1))\n  (define (is_woodall? x)\n    (if (and (is_prime? x) (is_square? (* x x)))\n        #t\n        #f))\n  (is_woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(not (is-prime? i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((not (is-prime? i)) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x (* n n)) 1) (is_woodall-iter (- n 1)))\n          (else #f)))\n  (and (is_prime x) (is_woodall-iter (- x 1))))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (= (remainder x i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (if (= x i) #t\n        (if (is_prime x) #f\n            (is_woodall-iter x (+ i 1)))))\n  (is_woodall-iter x 1))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 0) #t)\n            ((is-prime? i) #f)\n            (else (iter (- i 1)))))\n    (iter n))\n  (is-woodall? x))\n",
    "  (define (is-woodall-iter x n)\n    (cond ((= n 1) #t)\n          ((= (expt n 2) x) #t)\n          (else (is-woodall-iter x (- n 1)))))\n  (is-woodall-iter x x))\n",
    "  (define (is-prime? n)\n    (define (iter x)\n      (cond\n        [(= x 1) #t]\n        [(= (modulo n x) 0) #f]\n        [else (iter (- x 1))]))\n    (iter (- n 1)))\n  (define (iter x)\n    (cond\n      [(= x 1) #t]\n      [(= (modulo x 2) 0) #f]\n      [(is-prime? x) #f]\n      [else (iter (/ x 2))]))\n  (iter x))\n",
    "  (define (is-prime? x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else (not (any (lambda (y) (= (remainder x y) 0))\n                          (in-range 3 (sqrt x) 2))))))\n\n  (define (is-woodall? x)\n    (cond ((< x 1) #f)\n          ((= x 1) #t)\n          ((= x 2) #t)\n          ((= x 3) #t)\n          ((= x 4) #t)\n          ((= x 5) #t)\n          ((= x 6) #t)\n          ((= x 7) #t)\n          ((= x 8) #t)\n          ((= x 9) #t)\n          ((= x 10) #t)\n          ((= x 11) #t)\n          ((= x 12) #t)\n          ((= x 13) #t)\n          ((= x 14) #t)\n          ((= x 15) #t)\n          ((= x 16) #t)\n          ((= x 17) #t)\n          ((= x 18) #t)\n          ((= x 19) #t)\n          ((= x 20) #t)\n          ((= x 21) #t)\n          ((= x 22) #t)\n          ((= x 23) #t)\n          ((= x 24) #t)\n          ((= x 25) #t)\n          ((= x 26) #t)\n          ((= x 27) #t)\n          ((= x 28) #t)\n          ((= x 29) #t)\n          ((= x 30) #t)\n          ((= x 31) #t)\n          ((= x 32) #t)\n          ((= x 33) #t)\n          ((= x 34) #t)\n          ((= x 35) #t)\n          ((= x 36) #t)\n          ((= x 37) #t)\n          ((= x 38) #t)\n          ((= x 39) #t)\n          ((= x 40) #t)\n          ((= x 41",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2? x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is_power_of_2? (/ x 2)))\n          (else #f)))\n  (and (is_prime? x) (is_power_of_2? x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(not (is-prime? i)) #f]\n        [(not (= (expt i n) n)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_pow x)\n    (define (iter i)\n      (cond\n        [(= i x) #f]\n        [(= (expt 2 i) x) #t]\n        [else (iter (+ i 1))]))\n    (iter 1))\n  (and (is_prime x) (is_pow x)))\n",
    "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else (define (iter i)\n              (cond\n                [(= i n) #t]\n                [(= (remainder n i) 0) #f]\n                [else (iter (+ i 2))]))\n            (iter 3)]))\n  (define (is-woodall? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #f]\n      [else (and (is-prime? n)\n                 (is-prime? (* 2 n))\n                 (is-prime? (* 3 n)))]))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter y)\n      (if (= y 1)\n          #t\n          (if (= (remainder x y) 0)\n              #f\n              (iter (- y 1)))))\n    (iter (- x 1)))\n  (define (iter x y)\n    (if (= x 0)\n        #t\n        (if (is-prime? (+ y 1))\n            (iter (- x 1) (+ y 1))\n            (iter x (+ y 1)))))\n  (iter x 1))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((zero? (modulo x n)) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((zero? (modulo x n)) #f)\n          (else (iter (- n 1)))))\n  (and (is-prime? x)\n       (iter (- (* x x) 1))))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) (is_power? (/ x n)))\n            (else (iter (- n 1)))))\n    (iter x))\n  (and (is_prime? x) (is_power? x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((&gt; n (/ x 2)) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (+ n 1)))))\n    (iter 2))\n  (define (iter n)\n    (cond ((&gt; n (/ x 2)) #t)\n          ((= (modulo x n) 0) (and (is_prime n) (iter (+ n 1))))\n          (else (iter (+ n 1)))))\n  (iter 2))\n</code>\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (= (modulo x i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (is-prime? i)\n              (if (= (expt i x) x)\n                  (iter (+ i 1))\n                  #f)\n              (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x)\n       (is_prime? (* x 2))\n       (is_prime? (* x 3))))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) (is_power? (/ x n)))\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_power? x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x n)\n    (cond ((= x 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-iter (- x 1) n))))\n  (is_woodall-iter x x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (and (integer? x)\n       (andmap (lambda (y) (= (expt y 2) x))\n               (range 1 (expt x 0.5)))))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_square x)\n    (define (iter n)\n      (cond ((= n x) #t)\n            ((&gt; n x) #f)\n            (else (iter (+ n 1)))))\n    (iter 1))\n  (and (is_prime x) (is_square (* x 2 1))))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond\n      [(= x i) #t]\n      [(= (remainder x i) 0) #f]\n      [else (is_woodall-iter x (+ i 1))]))\n  (is_woodall-iter x 1))\n",
    "  (define (is_prime? x)\n    (define (iter count)\n      (if (= count x)\n          #t\n          (if (= (remainder x count) 0)\n              #f\n              (iter (+ count 1)))))\n    (iter 2))\n  (define (iter count)\n    (if (= count x)\n        #t\n        (if (is_prime? count)\n            (if (= (expt count 2) (+ x 1))\n                #t\n                (iter (+ count 1)))\n            (iter (+ count 1)))))\n  (iter 2))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x)\n       (is_prime? (* x 2))\n       (is_prime? (* x 3))))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((zero? (modulo n i)) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((and (is-prime? i) (zero? (modulo n i))) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else (is-prime-helper x 3))))\n  (define (is-prime-helper x n)\n    (cond ((= n x) #t)\n          ((= (modulo x n) 0) #f)\n          (else (is-prime-helper x (+ n 2)))))\n  (define (is-woodall-helper x n)\n    (cond ((= n x) #t)\n          ((= (modulo x n) 0) #f)\n          (else (is-woodall-helper x (+ n 1)))))\n  (is-woodall-helper x 1))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? (* x 2))))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (expt n 2) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (is_woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x i)\n    (cond ((= i 1) #t)\n          ((= (modulo x i) 0) (is_woodall-iter x (- i 1)))\n          ((is_prime i) #f)\n          (else (is_woodall-iter x (- i 1)))))\n  (is_woodall-iter x x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-helper x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) #f)\n          ((is_prime x) #f)\n          (else (is_woodall-helper (- x 1)))))\n  (is_woodall-helper x))\n",
    "  (define (is_prime? x)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (next-prime n)\n      (if (is-divisible? n 2)\n          (next-prime (+ n 1))\n          n))\n    (define (iter n)\n      (if (= n 2)\n          #t\n          (if (is-divisible? x n)\n              #f\n              (iter (next-prime (+ n 1))))))\n    (iter 2))\n  (define (is-power-of-2? x)\n    (if (= x 1)\n        #t\n        (if (= (remainder x 2) 0)\n            (is-power-of-2? (/ x 2))\n            #f)))\n  (and (is_prime? x) (is-power-of-2? x)))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (= (modulo x i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (= (modulo x i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (let loop ((x x))\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (loop (/ x 2)))\n          ((= (remainder x 3) 0) (loop (/ x 3)))\n          ((= (remainder x 5) 0) (loop (/ x 5)))\n          (else #f))))\n",
    "  (define (is_woodall-iter x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-woodall-iter (/ x n) n)\n            (is-woodall-iter x (+ n 1)))))\n  (is-woodall-iter x 2))\n"
  ]
}