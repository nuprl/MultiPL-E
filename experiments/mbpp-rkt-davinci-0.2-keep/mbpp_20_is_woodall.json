{
  "name": "mbpp_20_is_woodall",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given number is woodball or not.\n(define (is_woodall x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_woodall))\n    (check-equal? (candidate 383) #t)\n    (check-equal? (candidate 254) #f)\n    (check-equal? (candidate 200) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (is-prime? (next-odd n) 2))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (modulo n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (next-odd n)\n    (if (even? n) (+ n 1) (+ n 2)))\n  (define (",
    "  (define (is-prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter n)\n    (cond ((= n x) #t)\n          ((is-prime n)\n           (if (= (expt n 2) x)\n               #t\n               (iter (+ n 1))))\n          (else (iter (+ n 1)))))\n  (iter 2))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime x) (is_woodall? (* 2 x))))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-helper x (- n 1)))))\n  (cond ((is_prime x) #f)\n        ((= (remainder x 2) 0) #f)\n        (else (is_woodall-helper x (- x 1)))))\n",
    "  (define (is_prime x)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor x 2) x))\n  (define (is_woodall? x)\n    (and (is_prime x)\n         (is_prime (+ x 1))\n         (is_prime (+ x 2))\n         (is_prime (+ x 3))))\n  (is_woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is-power-of-2? x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is-power-of-2? (/ x 2)))\n          (else #f)))\n  (and (is-prime? x) (is-power-of-2? x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) (iter (/ n 2)))\n            (else #f)))\n    (iter x))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (if (= n 1)\n        #t\n        (if (= (remainder x (* n n)) 1)\n            (iter (- n 1))\n            #f)))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (iter (+ i 1)))))\n  (and (is-prime? x) (iter 2)))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else\n           (define (iter i)\n             (cond ((&gt; i (sqrt x)) #t)\n                   ((= (remainder x i) 0) #f)\n                   (else (iter (+ i 1)))))\n           (iter 3))))\n  (define (is_woodall-iter x i)\n    (cond ((&gt; x i) #f)\n          ((= (remainder x i) 0)\n           (and (is_prime i)\n                (is_woodall-iter (/ x i) i)))\n          (else (is_woodall-iter x (+ i 1)))))\n  (is_woodall-iter x 2))\n",
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (is-prime? (next-prime n)))))\n  (define (next-prime n)\n    (cond ((is-prime? (+ n 1)) (+ n 1))\n          (else (next-prime (+ n 1)))))\n  (define (is-woodall? n)\n    (cond ((= n 1) #t)\n          ((= n 2) #f)\n          ((= n 3) #f)\n          ((= n 4) #f)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #f)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #f)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #f)\n          ((= n 33) #f)\n          ((= n 34) #f)\n          ((= n 35) #f)\n          ((= n 36) #f)\n          ((= n 37) #f)\n          ((= n 38) #f)\n          ((= n 39) #f)\n          ((= n 40) #f",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [(is_prime i) (is_woodall-iter x (+ i 1))]\n      [else (is_woodall-iter x (+ i 1))]))\n  (is_woodall-iter x 2))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (= (remainder x i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall? x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (is_prime? i)\n              (if (= (expt i 2) x) #t\n                  (iter (+ i 1)))\n              (iter (+ i 1)))))\n    (iter 2))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_square x)\n    (define (iter n)\n      (cond ((= n x) #t)\n            ((&gt; n x) #f)\n            (else (iter (+ n 1)))))\n    (iter 1))\n  (and (is_prime x) (is_square (* x 2 1))))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((&lt; i n) (if (is-prime? i)\n                         (if (= (expt 2 i) (+ n (* 2 (expt i 2))))\n                             #t\n                             (iter (+ i 1)))\n                         (iter (+ i 1))))\n            (else #f)))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (modulo x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_two? x)\n    (if (= x 1)\n        #t\n        (if (= (modulo x 2) 0)\n            (is_power_of_two? (/ x 2))\n            #f)))\n  (and (is_prime? x) (is_power_of_two? x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime x)\n       (is_prime (* 2 x))\n       (is_prime (* 3 x))))\n",
    "  (define (is_prime x)\n    (define (iter y)\n      (cond\n        [(= y 1) #t]\n        [(= (modulo x y) 0) #f]\n        [else (iter (- y 1))]))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (cond\n      [(= x 1) #t]\n      [(= (modulo x 2) 0) (is_power_of_2 (/ x 2))]\n      [else #f]))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(not (is_prime? i)) #f]\n        [(not (= (expt 2 i) (+ n (* i i)))) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is_woodall? x))\n"
  ]
}