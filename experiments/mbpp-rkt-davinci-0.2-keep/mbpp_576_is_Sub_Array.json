{
  "name": "mbpp_576_is_Sub_Array",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n",
    "  (if (empty? B)\n      #t\n      (if (equal? (first A) (first B))\n          (is_Sub_Array (rest A) (rest B))\n          (is_Sub_Array A (rest B)))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (define (is_Sub_Array_Helper A B)\n    (if (null? A)\n        #t\n        (if (null? B)\n            #f\n            (if (equal? (car A) (car B))\n                (is_Sub_Array_Helper (cdr A) (cdr B))\n                (is_Sub_Array_Helper A (cdr B))))))\n  (is_Sub_Array_Helper A B))\n",
    "  (let loop ((i 0) (j 0))\n    (cond ((= i (length A)) #t)\n          ((= j (length B)) #f)\n          ((= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1)))\n          (else (loop i (+ j 1))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([A A] [B B])\n    (cond\n      [(null? A) #t]\n      [(null? B) #f]\n      [(equal? (car A) (car B)) (loop (cdr A) (cdr B))]\n      [else (loop A (cdr B))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([A A] [B B])\n    (if (null? A)\n        #t\n        (if (null? B)\n            #f\n            (if (equal? (car A) (car B))\n                (loop (cdr A) (cdr B))\n                (loop A (cdr B)))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length A))\n        #t\n        (if (member (list-ref A i) B)\n            (loop (+ i 1))\n            #f))))\n",
    "  (let loop ([i 0])\n    (if (&lt; i (length A))\n        (if (member (list-ref A i) B)\n            (loop (+ i 1))\n            #f)\n        #t)))\n",
    "  (let loop ([A A] [B B])\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n      [else (loop A (rest B))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length B)) #t]\n      [(= i (length A)) #f]\n      [(equal? (list-ref A i) (list-ref B i)) (loop (+ i 1))]\n      [else #f])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([i 0] [j 0])\n    (cond\n      [(= i (length A)) #t]\n      [(= j (length B)) #f]\n      [(= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1))]\n      [else (loop i (+ j 1))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([A A] [B B])\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n      [else (loop A (rest B))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n",
    "  (define (is_Sub_Array_Helper A B)\n    (if (null? A)\n        #t\n        (if (null? B)\n            #f\n            (if (equal? (car A) (car B))\n                (is_Sub_Array_Helper (cdr A) (cdr B))\n                (is_Sub_Array_Helper A (cdr B))))))\n  (is_Sub_Array_Helper A B))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(and (not (empty? B)) (equal? (first A) (first B)))\n     (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond [(empty? A) #t]\n        [(empty? B) #f]\n        [else (or (equal? A B)\n                  (is_Sub_Array (rest A) B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([A A] [B B])\n    (cond [(empty? A) #t]\n          [(empty? B) #f]\n          [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n          [else (loop A (rest B))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ((A A) (B B) (i 0))\n    (cond\n      ((null? A) #t)\n      ((null? B) #f)\n      ((equal? (car A) (car B)) (loop (cdr A) (cdr B) (+ i 1)))\n      (else (loop A (cdr B) (+ i 1))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond ((null? A) #t)\n        ((null? B) #f)\n        ((equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B)))\n        (else (is_Sub_Array A (cdr B)))))\n",
    "  (let loop ((i 0) (j 0))\n    (cond\n      ((= i (length A)) #t)\n      ((= j (length B)) #f)\n      ((= (list-ref A i) (list-ref B j))\n       (loop (+ i 1) (+ j 1)))\n      (else (loop i (+ j 1))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([i 0] [j 0])\n    (cond\n      [(= i (length A)) #t]\n      [(= j (length B)) #f]\n      [(= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1))]\n      [else (loop i (+ j 1))])))\n",
    "  (let loop ([i 0])\n    (cond [(= i (length A)) #t]\n          [(not (member (list-ref A i) B)) #f]\n          [else (loop (+ i 1))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([i 0])\n    (cond [(= i (length A)) #t]\n          [(= i (length B)) #f]\n          [(equal? (list-ref A i) (list-ref B i)) (loop (+ i 1))]\n          [else #f])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (if (empty? B)\n      #t\n      (if (empty? A)\n          #f\n          (if (equal? (first A) (first B))\n              (is_Sub_Array (rest A) (rest B))\n              (is_Sub_Array (rest A) B)))))\n",
    "  (let loop ((i 0))\n    (cond\n      ((= i (length A)) #t)\n      ((not (member (list-ref A i) B)) #f)\n      (else (loop (+ i 1))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([A A] [B B])\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n      [else (loop A (rest B))])))\n",
    "  (define (is_Sub_Array_helper A B i j)\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(= (first A) (first B)) (is_Sub_Array_helper (rest A) (rest B) (+ i 1) (+ j 1))]\n      [(> i (length B)) #f]\n      [else (is_Sub_Array_helper A (rest B) i (+ j 1))]))\n  (is_Sub_Array_helper A B 0 0))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ((A A) (B B))\n    (cond\n      ((null? A) #t)\n      ((null? B) #f)\n      ((equal? (car A) (car B)) (loop (cdr A) (cdr B)))\n      (else (loop A (cdr B))))))\n",
    "  (cond\n    [(empty? B) #t]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([i 0] [j 0])\n    (cond [(= i (length A)) #t]\n          [(= j (length B)) #f]\n          [(= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1))]\n          [else (loop i (+ j 1))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (if (null? B)\n      #t\n      (if (equal? A B)\n          #t\n          (is_Sub_Array A (cdr B)))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([i 0] [j 0])\n    (cond [(= i (length A)) #t]\n          [(= j (length B)) #f]\n          [(= (list-ref A i) (list-ref B j))\n           (loop (+ i 1) (+ j 1))]\n          [else (loop i (+ j 1))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B))\n     (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n",
    "  (define (is_Sub_Array_Helper A B i)\n    (cond\n      [(empty? B) #t]\n      [(empty? A) #f]\n      [(equal? (first A) (first B))\n       (if (is_Sub_Array_Helper (rest A) (rest B) (+ i 1))\n           #t\n           (is_Sub_Array_Helper (rest A) B (+ i 1)))]\n      [else (is_Sub_Array_Helper (rest A) B (+ i 1))]))\n  (is_Sub_Array_Helper A B 0))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (if (empty? A)\n      #t\n      (if (member (first A) B)\n          (is_Sub_Array (rest A) B)\n          #f)))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([i 0] [j 0])\n    (cond [(= i (length A)) #t]\n          [(= j (length B)) #f]\n          [(= (list-ref A i) (list-ref B j))\n           (loop (+ i 1) (+ j 1))]\n          [else (loop i (+ j 1))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length A))\n        #t\n        (if (member (list-ref A i) B)\n            (loop (+ i 1))\n            #f))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ([A A] [B B])\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (loop (rest A) (rest B))]\n      [else (loop A (rest B))])))\n",
    "  (define (is_Sub_Array_helper A B)\n    (cond\n      [(empty? A) #t]\n      [(empty? B) #f]\n      [(equal? (first A) (first B)) (is_Sub_Array_helper (rest A) (rest B))]\n      [else (is_Sub_Array_helper A (rest B))]))\n  (is_Sub_Array_helper A B))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ((i 0))\n    (if (= i (length A))\n        #t\n        (if (member (list-ref A i) B)\n            (loop (+ i 1))\n            #f))))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? B) #f]\n    [(sublist? A B) #t]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (let loop ((i 0) (j 0))\n    (cond\n      ((= i (length A)) #t)\n      ((= j (length B)) #f)\n      ((= (list-ref A i) (list-ref B j)) (loop (+ i 1) (+ j 1)))\n      (else (loop i (+ j 1))))))\n",
    "  (let loop ([i 0] [j 0])\n    (cond\n      [(or (= i (length A)) (= j (length B))) #f]\n      [(= (list-ref A i) (list-ref B j))\n       (if (= i (- (length A) 1))\n           #t\n           (loop (+ i 1) (+ j 1)))]\n      [else (loop i (+ j 1))])))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? B) #t]\n    [(equal? A B) #t]\n    [(equal? A (rest B)) #t]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond ((null? A) #t)\n        ((null? B) #f)\n        ((equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B)))\n        (else (is_Sub_Array A (cdr B)))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond ((null? A) #t)\n        ((null? B) #f)\n        ((equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B)))\n        (else (is_Sub_Array A (cdr B)))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n"
  ]
}