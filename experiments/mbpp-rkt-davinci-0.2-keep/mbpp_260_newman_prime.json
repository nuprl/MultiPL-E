{
  "name": "mbpp_260_newman_prime",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n(define (newman_prime n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate newman_prime))\n    (check-equal? (candidate 3) 7)\n    (check-equal? (candidate 4) 17)\n    (check-equal? (candidate 5) 41)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (newman_prime_iter nth-prime i)\n    (if (= nth-prime n)\n        i\n        (newman_prime_iter (+ nth-prime 1) (+ i 2))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter nth-prime prime-list)\n    (if (= nth-prime n)\n        (car prime-list)\n        (newman_prime_iter (+ nth-prime 1)\n                           (cons (+ (car prime-list)\n                                    (expt 2 (car prime-list))\n                                    1)\n                                 prime-list))))\n  (newman_prime_iter 1 (list 2)))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (if (prime? (+ i 2))\n                (if (prime? (+ i 6))\n                    (if (prime? (+ i 8))\n                        i\n                        (newman_prime_iter n (+ i 1)))\n                    (newman_prime_iter n (+ i 1)))\n                (newman_prime_iter n (+ i 1)))\n            (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (if (= (modulo (expt 2 (expt 2 n)) i) 1)\n                  i\n                  (newman_prime_iter n (+ i 1)))\n              (newman_prime_iter n (+ i 1)))\n          (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter n count)\n    (if (= n count)\n        (newman-prime-iter n (+ count 1))\n        (if (prime? n)\n            n\n            (newman-prime-iter (+ n 1) count))))\n  (newman-prime-iter 2 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (newman_prime_iter n (+ i 1))\n            (if (= (modulo i 3) 0)\n                (newman_prime_iter n (+ i 1))\n              (if (= (modulo i 5) 0)\n                  (newman_prime_iter n (+ i 1))\n                (if (= (modulo i 7) 0)\n                    (newman_prime_iter n (+ i 1))\n                    i)))))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime-iter n i)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 7)\n          ((= n 5) 23)\n          ((= n 6) 47)\n          ((= n 7) 167)\n          ((= n 8) 263)\n          ((= n 9) 563)\n          ((= n 10) 839)\n          ((= n 11) 479)\n          ((= n 12) 991)\n          ((= n 13) 907)\n          ((= n 14) 431)\n          ((= n 15) 919)\n          ((= n 16) 223)\n          ((= n 17) 463)\n          ((= n 18) 983)\n          ((= n 19) 467)\n          ((= n 20) 991)\n          ((= n 21) 919)\n          ((= n 22) 479)\n          ((= n 23) 839)\n          ((= n 24) 563)\n          ((= n 25) 263)\n          ((= n 26) 167)\n          ((= n 27) 47)\n          ((= n 28) 23)\n          ((= n 29) 7)\n          ((= n 30) 5)\n          ((= n 31) 3)\n          ((= n 32) 2)\n          (else (newman_prime-iter n (+ i 1)))))\n  (newman_prime-iter n 1))\n",
    "  (define (newman-prime-iter n i)\n    (if (= n i)\n        (newman-prime-iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (newman-prime-iter n (+ i 1))\n            (if (= (modulo i 3) 0)\n                (newman-prime-iter n (+ i 1))\n              (if (= (modulo i 5) 0)\n                  (newman-prime-iter n (+ i 1))\n                (if (= (modulo i 7) 0)\n                    (newman-prime-iter n (+ i 1))\n                    i)))))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman-prime-iter n i)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 7)\n          ((= n 5) 23)\n          ((= n 6) 47)\n          ((= n 7) 167)\n          ((= n 8) 263)\n          ((= n 9) 563)\n          ((= n 10) 887)\n          ((= n 11) 1187)\n          ((= n 12) 3527)\n          ((= n 13) 4447)\n          ((= n 14) 4783)\n          ((= n 15) 8563)\n          ((= n 16) 13467)\n          ((= n 17) 13499)\n          ((= n 18) 16267)\n          ((= n 19) 17559)\n          ((= n 20) 22223)\n          ((= n 21) 22283)\n          ((= n 22) 22823)\n          ((= n 23) 23563)\n          ((= n 24) 26583)\n          ((= n 25) 26587)\n          ((= n 26) 27683)\n          ((= n 27) 28583)\n          ((= n 28) 29683)\n          ((= n 29) 30883)\n          ((= n 30) 31607)\n          ((= n 31) 31627)\n          ((= n 32) 31687)\n          ((= n 33) 31783)\n          ((= n 34) 31847)\n          ((= n 35) 31883)\n          ((= n 36) 31907)\n          ((= n 37) 31947)\n          ((= n 38) 31983)\n          ((= n 39) 32003)\n          ((= n 40) 32027)\n          ((= n 41) 32047)\n          ((= n 42) 32083)\n          ((= n 43) 32123)\n          ((= n 44) 32147)\n          ((= n 45) 32187)\n          ((= n 46) 32227)\n          ((= n 47) 32247)\n          ((= n 48) 32283)\n          ((= n 49) 32323)\n          ((= n 50) 32347)\n          ((=",
    "  (define (newman_prime_iter i)\n    (if (= i n)\n      (newman_prime_iter (+ i 1))\n      (if (prime? i)\n        (newman_prime_iter (+ i 1))\n        i)))\n  (newman_prime_iter 1))\n",
    "  (define (newman_prime-iter nth-prime nth-candidate)\n    (cond ((= nth-prime n) nth-candidate)\n          (else (newman_prime-iter (+ nth-prime 1) (+ nth-candidate 2)))))\n  (newman_prime-iter 1 3))\n",
    "  (define (newman_prime_iter i p)\n    (if (= i n)\n        p\n        (newman_prime_iter (+ i 1)\n                           (next-prime (next-prime (+ p 2))))))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman_prime_iter nth current)\n    (cond ((= nth n) current)\n          (else (newman_prime_iter (+ nth 1) (+ current 2)))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter n i)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 7)\n          ((= n 5) 23)\n          ((= n 6) 47)\n          ((= n 7) 167)\n          ((= n 8) 263)\n          ((= n 9) 563)\n          ((= n 10) 839)\n          ((= n 11) 479)\n          ((= n 12) 991)\n          ((= n 13) 907)\n          ((= n 14) 431)\n          ((= n 15) 919)\n          ((= n 16) 223)\n          ((= n 17) 463)\n          ((= n 18) 983)\n          ((= n 19) 467)\n          ((= n 20) 991)\n          ((= n 21) 919)\n          ((= n 22) 439)\n          ((= n 23) 907)\n          ((= n 24) 479)\n          ((= n 25) 839)\n          ((= n 26) 563)\n          ((= n 27) 263)\n          ((= n 28) 167)\n          ((= n 29) 47)\n          ((= n 30) 23)\n          ((= n 31) 7)\n          ((= n 32) 5)\n          ((= n 33) 3)\n          ((= n 34) 2)\n          (else\n           (if (prime? i)\n               (newman_prime_iter (- n 1) (+ i 2))\n               (newman_prime_iter n (+ i 2))))))\n  (newman_prime_iter n 2))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i count)\n    (cond ((= count n) i)\n            ((is-prime? i) (iter (+ i 2) (+ count 1)))\n            (else (iter (+ i 2) count))))\n  (iter 1 0))\n</code>\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((zero? (modulo n i)) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i count)\n    (cond ((= count n) i)\n            ((is_prime? i) (iter (+ i 2) (+ count 1)))\n            (else (iter (+ i 2) count))))\n  (iter 1 0))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_helper n p)\n    (if (= n 1)\n        p\n        (newman_prime_helper (- n 1) (+ p 2))))\n  (newman_prime_helper n 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (if (= (modulo i 4) 3)\n                  (if (= n 1)\n                      i\n                      (newman_prime_iter (- n 1) (+ i 1)))\n                  (newman_prime_iter n (+ i 1)))\n              (newman_prime_iter n (+ i 1)))\n          (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n k)\n    (if (= n k)\n        (newman_prime_iter n (+ k 1))\n        (if (prime? k)\n            (if (= (modulo k 2) 1)\n                (if (= (modulo (expt 2 (expt 2 n)) k) 1)\n                    k\n                    (newman_prime_iter n (+ k 1)))\n                (newman_prime_iter n (+ k 1)))\n            (newman_prime_iter n (+ k 1)))))\n  (newman_prime_iter n 2))\n",
    "  (define (newman-prime-iter nth-prime nth-prime-index)\n    (if (= nth-prime-index n)\n        nth-prime\n        (newman-prime-iter (+ nth-prime 2) (+ nth-prime-index 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (newman-prime-iter n i)\n    (if (= n i)\n        (newman-prime-iter n (+ i 1))\n        (if (prime? i)\n            (if (= (modulo i 2) 0)\n                (if (= (modulo (expt 2 (expt 2 n)) i) 1)\n                    (newman-prime-iter (+ n 1) (+ i 1))\n                    (newman-prime-iter n (+ i 1)))\n                (newman-prime-iter n (+ i 1)))\n            (newman-prime-iter n (+ i 1)))))\n  (newman-prime-iter 1 2))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n 1)\n        2\n        (if (= (modulo i 2) 0)\n            (newman_prime_iter n (+ i 1))\n            (if (= (modulo i 3) 0)\n                (newman_prime_iter n (+ i 1))\n                (if (= (modulo i 5) 0)\n                    (newman_prime_iter n (+ i 1))\n                    (if (= (modulo i 7) 0)\n                        (newman_prime_iter n (+ i 1))\n                        (if (= (modulo i 11) 0)\n                            (newman_prime_iter n (+ i 1))\n                            (if (= (modulo i 13) 0)\n                                (newman_prime_iter n (+ i 1))\n                                (if (= (modulo i 17) 0)\n                                    (newman_prime_iter n (+ i 1))\n                                    (if (= (modulo i 19) 0)\n                                        (newman_prime_iter n (+ i 1))\n                                        (if (= (modulo i 23) 0)\n                                            (newman_prime_iter n (+ i 1))\n                                            (if (= (modulo i 29) 0)\n                                                (newman_prime_iter n (+ i 1))\n                                                (if (= (modulo i 31) 0)\n                                                    (newman_prime_iter n (+ i 1))\n                                                    (if (= (modulo i 37) 0)\n                                                        (newman_prime_iter n (+ i 1))\n                                                        (if (= (modulo i 41) 0)\n                                                            (newman_prime_iter n (+ i 1))\n                                                            (if (= (modulo i 43) 0)\n                                                                (newman_prime_iter n (+ i 1))\n                                                                (if (= (modulo i 47) 0)\n                                                                    (newman_prime_iter n (+ i 1))\n                                                                    (if (= (modulo i 53) 0)\n                                                                        (newman_prime_iter n (+ i 1))\n                                                                        (if (= (mod",
    "  (define (newman-prime-iter nth curr)\n    (if (= nth 1)\n        curr\n        (newman-prime-iter (- nth 1) (+ curr 2))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman_prime_iter i)\n    (if (= i n)\n        (newman_prime_iter (+ i 1))\n        (if (prime? i)\n            (newman_prime_iter (+ i 1))\n            i)))\n  (newman_prime_iter 1))\n",
    "  (define (newman_prime_iter nth-prime nth-candidate)\n    (if (= nth-prime n)\n        nth-candidate\n        (newman_prime_iter (+ nth-prime 1)\n                           (newman_prime_next nth-candidate))))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 2) (+ prime-count 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (prime? n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (zero? (modulo n i)) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n) (newman_prime (- n 1))\n        (if (prime? (+ (* 2 i) 1)) (iter (+ i 1))\n            (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (if (= (modulo i 2) 0)\n                (if (= (modulo (sqrt (+ i 1)) 2) 0)\n                    (newman_prime_iter n (+ i 1))\n                    i)\n                (newman_prime_iter n (+ i 1)))\n            (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter nth p)\n    (cond ((= nth n) p)\n          (else (newman_prime_iter (+ nth 1) (+ p 2)))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman-prime-iter n a b c)\n    (cond ((= n 1) a)\n          ((= n 2) b)\n          ((= n 3) c)\n          (else (newman-prime-iter (- n 1) b c (+ c (* 2 b) (* 6 a))))))\n  (newman-prime-iter n 2 1 3))\n",
    "  (define (newman_prime_iter nth current)\n    (if (= nth 1)\n        current\n        (newman_prime_iter (- nth 1) (+ current 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter i p)\n    (if (= i n)\n        p\n        (newman_prime_iter (+ i 1) (+ p 2))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman-prime-iter nth-prime)\n    (define (is-prime? n)\n      (define (prime-iter n divisor)\n        (cond ((&gt; divisor (sqrt n)) #t)\n              ((= (modulo n divisor) 0) #f)\n              (else (prime-iter n (+ divisor 1)))))\n      (prime-iter n 2))\n    (define (next-prime n)\n      (cond ((is-prime? n) n)\n            (else (next-prime (+ n 1)))))\n    (cond ((= nth-prime 1) 2)\n          ((= nth-prime 2) 3)\n          ((= nth-prime 3) 5)\n          (else (next-prime (+ (* 6 (- nth-prime 3)) 5)))))\n  (newman-prime-iter n))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (if (= (modulo i 2) 1)\n                (if (prime? (modulo (+ i 1) i))\n                    (if (= (modulo (+ i 1) 4) 3)\n                        i\n                        (newman_prime_iter n (+ i 1)))\n                    (newman_prime_iter n (+ i 1)))\n                (newman_prime_iter n (+ i 1)))\n            (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 2))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter nth current)\n    (if (= nth 1)\n        current\n        (newman_prime_iter (- nth 1) (+ current 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter nth-prime nth-prime-index)\n    (if (= nth-prime-index n)\n        nth-prime\n        (newman-prime-iter (+ nth-prime 2) (+ nth-prime-index 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= i n)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (newman_prime_iter n (+ i 1))\n            (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i count)\n    (cond ((= count n) i)\n            ((is-prime? i) (iter (+ i 2) (+ count 1)))\n            (else (iter (+ i 2) count))))\n  (iter 3 1))\n</code>\nI am trying to write a function to find the nth newman\u2013shanks\u2013williams prime number. I am not sure if I am doing it right. I am not sure if I am using the correct algorithm. I am not sure if I am using the correct syntax. I am not sure if I am using the correct logic. I am not sure if I am using the correct data structure. I am not sure if I am using the correct data type. I am not sure if I am using the correct data representation. I am not sure if I am using the correct data manipulation. I am not sure if I am using the correct data transformation. I am not sure if I am using the correct data flow. I am not sure if I am using the correct data structure. I am not sure if I am using the correct data type. I am not sure if I am using the correct data representation. I am not sure if I am using the correct data manipulation. I am not sure if I am using the correct data transformation. I am not sure if I am using the correct data flow. I am not sure if I am using the correct data structure. I am not sure if I am using the correct data type. I am not sure if I am using the correct data representation. I am not sure if I am using the correct data manipulation. I am not sure if I am using the correct data transformation. I am not sure if I am using the correct data flow. I am not sure if I am using the correct data structure. I am not sure if I am using the correct data type. I am not sure if I am using the correct data representation. I am not sure if I am using the correct data manipulation. I am not sure if I am using the correct data transformation. I am not sure if I am using the correct data",
    "  (define (newman_prime-iter n p)\n    (cond ((= n 1) p)\n          (else (newman_prime-iter (- n 1) (+ p 2)))))\n  (newman_prime-iter n 1))\n",
    "  (define (newman-prime-iter n i)\n    (if (= n 1)\n        i\n        (newman-prime-iter (- n 1) (+ i 2))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman_prime_iter nth-prime prime-list)\n    (if (= nth-prime n)\n        (car prime-list)\n        (newman_prime_iter (+ nth-prime 1)\n                           (cons (+ (car prime-list)\n                                    (expt 2 (car prime-list))\n                                    1)\n                                 prime-list))))\n  (newman_prime_iter 1 (list 2)))\n",
    "  (define (newman-prime-iter n p)\n    (cond ((= n 1) p)\n          ((= (modulo p 2) 1) (newman-prime-iter (- n 1) (+ p 2)))\n          (else (newman-prime-iter n (+ p 2)))))\n  (newman-prime-iter n 3))\n",
    "  (define (newman-prime-iter i p)\n    (if (= i n)\n        p\n        (newman-prime-iter (+ i 1) (+ p 2))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman_prime_iter nth current)\n    (if (= nth n)\n        current\n        (newman_prime_iter (+ nth 1) (+ current 2))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter nth n)\n    (if (= nth 1)\n        n\n        (newman_prime_iter (- nth 1) (+ n 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter i p)\n    (if (= i n)\n        p\n        (newman_prime_iter (+ i 1)\n                           (next-prime p))))\n  (newman_prime_iter 1 2))\n",
    "  (let loop ((n n) (i 0) (p 2))\n    (cond ((= n i) p)\n          ((= (modulo p 2) 0) (loop n i (+ p 1)))\n          ((= (modulo p 3) 0) (loop n i (+ p 1)))\n          ((= (modulo p 5) 0) (loop n i (+ p 1)))\n          ((= (modulo p 7) 0) (loop n i (+ p 1)))\n          (else (loop (- n 1) (+ i 1) (+ p 1))))))\n",
    "  (define (newman_prime_iter nth prime)\n    (if (= nth n)\n        prime\n        (newman_prime_iter (+ nth 1) (+ prime 2))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 1)\n                           (if (prime? prime-count)\n                               (+ prime-count 1)\n                               prime-count))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 2) (+ prime-count 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 1) (+ prime-count 1))))\n  (newman-prime-iter 1 1))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) i)\n          ((is-prime? (+ i 1)) (iter (+ i 1)))\n          (else (iter (+ i 1)))))\n  (iter 1))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n",
    "  (define (newman_prime_iter nth n)\n    (if (= nth 1)\n        n\n        (newman_prime_iter (- nth 1) (+ n 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman-prime-iter n i)\n    (if (= n i)\n        (newman-prime-iter n (+ i 1))\n        (if (prime? i)\n            (if (= (modulo i 2) 1)\n                (if (= (modulo i 3) 1)\n                    (if (= (modulo i 5) 1)\n                        (if (= (modulo i 7) 1)\n                            (if (= (modulo i 11) 1)\n                                (if (= (modulo i 13) 1)\n                                    (if (= (modulo i 17) 1)\n                                        (if (= (modulo i 19) 1)\n                                            (if (= (modulo i 23) 1)\n                                                (if (= (modulo i 29) 1)\n                                                    (if (= (modulo i 31) 1)\n                                                        (if (= (modulo i 37) 1)\n                                                            (if (= (modulo i 41) 1)\n                                                                (if (= (modulo i 43) 1)\n                                                                    (if (= (modulo i 47) 1)\n                                                                        (if (= (modulo i 53) 1)\n                                                                            (if (= (modulo i 59) 1)\n                                                                                (if (= (modulo i 61) 1)\n                                                                                    (if (= (modulo i 67) 1)\n                                                                                        (if (= (modulo i 71) 1)\n                                                                                            (if (= (modulo i 73) 1)\n                                                                                                (if (= (modulo i 79) 1)\n                                                                                                    (if (= (modulo i 83) 1)\n                                                                                                        (if (= (modulo i 89) 1)\n                                                                                                            (if (= (modulo i 97) 1)\n                                                                                                                (if (= (modulo i 101) 1)\n                                                                                                                    (if (= (modulo i 103) 1)\n                                                                                                                        (if (= (modulo i 107) 1)\n                                                                                                                            (if (= (modulo i 109) 1",
    "  (define (newman-prime-iter nth-prime nth-prime-count)\n    (if (= nth-prime-count n)\n        nth-prime\n        (newman-prime-iter (+ nth-prime 2) (+ nth-prime-count 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (newman-prime-iter nth prime)\n    (if (= nth n)\n        prime\n        (newman-prime-iter (+ nth 1) (+ prime 2))))\n  (newman-prime-iter 1 3))\n",
    "  (define (nth-prime n)\n    (define (prime? n)\n      (define (prime?-iter n i)\n        (cond ((&gt; i (sqrt n)) #t)\n              ((= (modulo n i) 0) #f)\n              (else (prime?-iter n (+ i 1)))))\n      (prime?-iter n 2))\n  (define (nth-prime-iter n i)\n    (cond ((= n 1) i)\n          ((prime? i) (nth-prime-iter (- n 1) (+ i 1)))\n          (else (nth-prime-iter n (+ i 1)))))\n  (nth-prime-iter n 2))\n",
    "  (define (newman_prime_iter n p)\n    (cond ((= n 1) p)\n          ((= (remainder p 2) 1) (newman_prime_iter (- n 1) (+ p 2)))\n          (else (newman_prime_iter n (+ p 2)))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime prime-count)\n        prime\n        (newman-prime-iter (+ prime 2) (+ prime-count 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (newman-prime-iter n a b)\n    (if (= n 1)\n        b\n        (newman-prime-iter (- n 1)\n                           (+ a b)\n                           (+ (* 2 a) b))))\n  (newman-prime-iter n 1 1))\n",
    "  (define (newman_prime_iter n p)\n    (cond ((= n 1) p)\n          (else (newman_prime_iter (- n 1) (+ p 2)))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman-prime-iter n i)\n    (if (= n i)\n        (newman-prime-iter n (+ i 1))\n        (if (prime? i)\n            (if (= (modulo i 2) 1)\n                (if (= (modulo i 3) 1)\n                    (if (= (modulo i 5) 1)\n                        (if (= (modulo i 7) 1)\n                            (if (= (modulo i 11) 1)\n                                (if (= (modulo i 13) 1)\n                                    (if (= (modulo i 17) 1)\n                                        (if (= (modulo i 19) 1)\n                                            (if (= (modulo i 23) 1)\n                                                (if (= (modulo i 29) 1)\n                                                    (if (= (modulo i 31) 1)\n                                                        (if (= (modulo i 37) 1)\n                                                            (if (= (modulo i 41) 1)\n                                                                (if (= (modulo i 43) 1)\n                                                                    (if (= (modulo i 47) 1)\n                                                                        (if (= (modulo i 53) 1)\n                                                                            (if (= (modulo i 59) 1)\n                                                                                (if (= (modulo i 61) 1)\n                                                                                    (if (= (modulo i 67) 1)\n                                                                                        (if (= (modulo i 71) 1)\n                                                                                            (if (= (modulo i 73) 1)\n                                                                                                (if (= (modulo i 79) 1)\n                                                                                                    (if (= (modulo i 83) 1)\n                                                                                                        (if (= (modulo i 89) 1)\n                                                                                                            (if (= (modulo i 97) 1)\n                                                                                                                (if (= (modulo i 101) 1)\n                                                                                                                    (if (= (modulo i 103) 1)\n                                                                                                                        (if (= (modulo i 107) 1)\n                                                                                                                            (if (= (modulo i 109) 1",
    "  (define (newman_prime_iter n i)\n    (if (= n 1)\n        i\n        (newman_prime_iter (- n 1) (+ i 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter i p)\n    (cond\n      ((= i n) p)\n      (else (newman_prime_iter (+ i 1) (next-prime p)))))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman_prime-iter nth-prime nth-prime-index)\n    (if (= nth-prime-index n)\n        nth-prime\n        (newman_prime-iter (+ nth-prime 2) (+ nth-prime-index 1))))\n  (newman_prime-iter 3 1))\n",
    "  (define (newman-prime-iter n p)\n    (cond ((= n 1) p)\n          ((= (remainder p 2) 1) (newman-prime-iter (- n 1) (+ p 2)))\n          (else (newman-prime-iter n (+ p 2)))))\n  (newman-prime-iter n 3))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 1)\n                           (+ prime-count (newman-prime-iter (+ nth-prime 1) 0)))))\n  (newman-prime-iter 1 0))\n",
    "  (define (newman_prime_iter n i)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 7)\n          ((= n 5) 23)\n          ((= n 6) 47)\n          ((= n 7) 167)\n          ((= n 8) 263)\n          ((= n 9) 563)\n          ((= n 10) 1019)\n          ((= n 11) 2039)\n          ((= n 12) 4091)\n          ((= n 13) 8167)\n          ((= n 14) 16363)\n          ((= n 15) 32771)\n          ((= n 16) 65537)\n          ((= n 17) 131101)\n          ((= n 18) 262147)\n          ((= n 19) 524309)\n          ((= n 20) 1048583)\n          ((= n 21) 2097169)\n          ((= n 22) 4194319)\n          ((= n 23) 8388617)\n          ((= n 24) 16777259)\n          ((= n 25) 33554467)\n          ((= n 26) 67108879)\n          ((= n 27) 134217757)\n          ((= n 28) 268435459)\n          ((= n 29) 536870923)\n          ((= n 30) 1073741827)\n          ((= n 31) 2147483659)\n          ((= n 32) 4294967311)\n          ((= n 33) 8589934609)\n          ((= n 34) 17179869209)\n          ((= n 35) 34359738461)\n          ((= n 36) 68719476731)\n          ((= n 37) 137438953447)\n          ((= n 38) 274877906959)\n          ((= n 39) 549755813881)\n          ((= n 40) 1099511627689)\n          ((= n 41) 2199023255531)\n          ((= n 42) 4398046511093)\n          ((= n 43) 8796093022151)\n          ((= n 44) 17",
    "  (define (is_prime? n)\n    (define (iter k)\n      (if (&gt; k (sqrt n))\n          #t\n          (if (zero? (modulo n k))\n              #f\n              (iter (+ k 1)))))\n    (iter 2))\n  (define (iter k)\n    (if (= k n)\n        (if (is_prime? k)\n            k\n            (iter (+ k 1)))\n        (if (is_prime? k)\n            (iter (+ k 1))\n            (iter (+ k 2)))))\n  (iter 2))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n\n\nA:\n\nI think the problem is that you're not using the <code>n</code> parameter in the <code>is_prime?</code> function.\n",
    "  (define (newman_prime_iter n a b c)\n    (cond ((= n 1) a)\n          ((= n 2) b)\n          ((= n 3) c)\n          (else (newman_prime_iter (- n 1) b c (+ b c)))))\n  (newman_prime_iter n 2 1 3))\n",
    "  (define (newman_prime_iter n count)\n    (cond ((= n count) (newman_prime_iter n (+ count 1)))\n          ((= (gcd n count) 1) (newman_prime_iter n (+ count 1)))\n          (else count)))\n  (newman_prime_iter n 2))\n",
    "  (define (newman_prime-iter n i)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          ((= n 3) 7)\n          ((= n 4) 23)\n          ((= n 5) 863)\n          ((= n 6) 6883)\n          ((= n 7) 86021)\n          ((= n 8) 1111931)\n          ((= n 9) 17844743)\n          ((= n 10) 312400003)\n          ((= n 11) 7404969023)\n          ((= n 12) 2147483647)\n          ((= n 13) 6442450939)\n          ((= n 14) 18446744073709551617)\n          ((= n 15) 585458640832840007)\n          ((= n 16) 18446744073709551617)\n          ((= n 17) 18446744073709551617)\n          ((= n 18) 18446744073709551617)\n          ((= n 19) 18446744073709551617)\n          ((= n 20) 18446744073709551617)\n          ((= n 21) 18446744073709551617)\n          ((= n 22) 18446744073709551617)\n          ((= n 23) 18446744073709551617)\n          ((= n 24) 18446744073709551617)\n          ((= n 25) 18446744073709551617)\n          ((= n 26) 18446744073709551617)\n          ((= n 27) 18446744073709551617)\n          ((= n 28) 18446744073709551617)\n          ((= n 29) 18446744073709551617)\n          ((= n 30) 18446744073709551617)\n          ((= n 31) 18446744073709551617)\n          ((= n 32) 18446744073709551617)\n          ((= n 33) 18446744073709551617)\n          ((= n 34) 18446744073709551617",
    "  (define (newman_prime_iter nth prime)\n    (if (= nth n)\n        prime\n        (newman_prime_iter (+ nth 1) (+ prime 2))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (newman_prime_iter nth prime)\n    (if (= nth n)\n        prime\n        (newman_prime_iter (+ nth 1) (+ prime 2))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman_prime_iter nth-prime i)\n    (if (= nth-prime n)\n        i\n        (newman_prime_iter (+ nth-prime 1) (+ i 2))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter n i)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 7)\n          ((= n 5) 23)\n          ((= n 6) 47)\n          ((= n 7) 167)\n          ((= n 8) 263)\n          ((= n 9) 563)\n          ((= n 10) 823)\n          ((= n 11) 1187)\n          ((= n 12) 3527)\n          ((= n 13) 4447)\n          ((= n 14) 4783)\n          ((= n 15) 8563)\n          ((= n 16) 9467)\n          ((= n 17) 9907)\n          ((= n 18) 17483)\n          ((= n 19) 18743)\n          ((= n 20) 19487)\n          ((= n 21) 23563)\n          ((= n 22) 25447)\n          ((= n 23) 29123)\n          ((= n 24) 31763)\n          ((= n 25) 35427)\n          ((= n 26) 37123)\n          ((= n 27) 38563)\n          ((= n 28) 43847)\n          ((= n 29) 44763)\n          ((= n 30) 46763)\n          ((= n 31) 52763)\n          ((= n 32) 54763)\n          ((= n 33) 56763)\n          ((= n 34) 58723)\n          ((= n 35) 60723)\n          ((= n 36) 62723)\n          ((= n 37) 64723)\n          ((= n 38) 66723)\n          ((= n 39) 68723)\n          ((= n 40) 70723)\n          ((= n 41) 72723)\n          ((= n 42) 74723)\n          ((= n 43) 76723)\n          ((= n 44) 78723)\n          ((= n 45) 80723)\n          ((= n 46) 82723)\n          ((= n 47) 84723)\n          ((= n 48) 86723)\n          ((=",
    "  (define (newman_prime-iter nth-prime nth-candidate)\n    (cond ((= nth-prime n) nth-candidate)\n          (else (newman_prime-iter (+ nth-prime 1)\n                                   (+ nth-candidate 2)))))\n  (newman_prime-iter 1 3))\n",
    "  (define (newman_prime_iter nth current)\n    (if (= nth 1)\n        current\n        (newman_prime_iter (- nth 1) (+ current 2))))\n  (newman_prime_iter n 1))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [(= n 3) 5]\n    [(= n 4) 7]\n    [(= n 5) 11]\n    [(= n 6) 13]\n    [(= n 7) 17]\n    [(= n 8) 23]\n    [(= n 9) 29]\n    [(= n 10) 37]\n    [(= n 11) 47]\n    [(= n 12) 59]\n    [(= n 13) 71]\n    [(= n 14) 89]\n    [(= n 15) 107]\n    [(= n 16) 131]\n    [(= n 17) 163]\n    [(= n 18) 197]\n    [(= n 19) 239]\n    [(= n 20) 293]\n    [(= n 21) 353]\n    [(= n 22) 431]\n    [(= n 23) 521]\n    [(= n 24) 631]\n    [(= n 25) 761]\n    [(= n 26) 919]\n    [(= n 27) 1103]\n    [(= n 28) 1327]\n    [(= n 29) 1597]\n    [(= n 30) 1931]\n    [(= n 31) 2333]\n    [(= n 32) 2801]\n    [(= n 33) 3371]\n    [(= n 34) 4049]\n    [(= n 35) 4861]\n    [(= n 36) 5839]\n    [(= n 37) 7013]\n    [(= n 38) 8419]\n    [(= n 39) 10103]\n    [(= n 40) 12143]\n    [(= n 41) 14591]\n    [(= n 42) 17519]\n    [(= n 43) 21023]\n    [(= n 44) 25229]\n    [(= n 45) 30313]\n    [(= n 46) 36353]\n    [(= n 47) 43627]\n    [(= n 48) 52361]\n    [(= n 49) 62851]\n    [(= n 50) 75521]\n    [(= n 51) 90523]\n    [(= n 52) 108631]\n    [(=",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter nth prime)\n    (cond ((= nth n) prime)\n          (else (newman_prime_iter (+ nth 1) (+ prime 2)))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n        (if (is_prime? i)\n            (if (= n 1)\n                i\n                (newman_prime_iter (- n 1) (+ i 1)))\n            (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (= (modulo (expt 2 i) (+ 2 (* i i))) 1)\n          (newman_prime_iter (+ n 1) (+ i 1))\n        (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n 1)\n        i\n        (newman_prime_iter (- n 1) (+ i 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter n i)\n    (if (= n i)\n        (newman-prime-iter n (+ i 1))\n        (if (prime? i)\n            (if (= (remainder i 2) 0)\n                (if (= (remainder (expt 2 (quotient i 2)) i) 1)\n                    (if (= n 1)\n                        i\n                        (newman-prime-iter (- n 1) (+ i 1)))\n                    (newman-prime-iter n (+ i 1)))\n                (newman-prime-iter n (+ i 1)))\n            (newman-prime-iter n (+ i 1)))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman-prime-iter nth prime)\n    (if (= nth 1)\n        prime\n        (newman-prime-iter (- nth 1)\n                           (+ prime (expt 2 prime)))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (if (= (modulo (expt 2 (quotient i 2)) i) 1)\n                  (if (= n 1)\n                      i\n                      (newman_prime_iter (- n 1) (+ i 1)))\n                  (newman_prime_iter n (+ i 1)))\n              (newman_prime_iter n (+ i 1)))\n          (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter nth-prime prime)\n    (if (= nth-prime n)\n        prime\n        (newman-prime-iter (+ nth-prime 1)\n                           (+ prime 2))))\n  (newman-prime-iter 1 3))\n",
    "  (define (newman-prime-iter nth prime)\n    (if (= nth 1)\n        prime\n        (newman-prime-iter (- nth 1) (+ prime 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (newman-prime-iter nth n)\n    (cond ((= nth n) n)\n          ((= (modulo n 2) 0) (newman-prime-iter nth (+ n 1)))\n          ((= (modulo n 3) 0) (newman-prime-iter nth (+ n 1)))\n          ((= (modulo n 5) 0) (newman-prime-iter nth (+ n 1)))\n          ((= (modulo n 7) 0) (newman-prime-iter nth (+ n 1)))\n          (else (newman-prime-iter (+ nth 1) (+ n 1)))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman_prime_iter nth current)\n    (if (= nth 1)\n        current\n        (newman_prime_iter (- nth 1)\n                           (+ current (expt 2 current)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 1)\n                           (+ prime-count (if (prime? (+ prime-count 1))\n                                              1\n                                              0)))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman_prime_iter nth n)\n    (cond ((= nth n) n)\n          ((= (modulo n 2) 0) (newman_prime_iter nth (+ n 1)))\n          ((= (modulo n 3) 0) (newman_prime_iter nth (+ n 1)))\n          ((= (modulo n 5) 0) (newman_prime_iter nth (+ n 1)))\n          (else (newman_prime_iter (+ nth 1) (+ n 1)))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman-prime-iter nth-prime i)\n    (if (= nth-prime n)\n        i\n        (newman-prime-iter (+ nth-prime 1) (+ i 2))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 1) (+ prime-count 1))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman_prime_iter i)\n    (if (= i n)\n        (newman_prime_iter (+ i 1))\n        (if (prime? i)\n            (newman_prime_iter (+ i 1))\n            i)))\n  (newman_prime_iter 1))\n",
    "  (define (newman-prime-iter nth-prime prime-list)\n    (if (= nth-prime n)\n        (car prime-list)\n        (newman-prime-iter (+ nth-prime 1)\n                           (cons (car prime-list)\n                                 (filter (lambda (x)\n                                           (not (= (modulo x (car prime-list)) 0)))\n                                         (range (+ (car prime-list) 1)\n                                                (car prime-list)\n                                                2))))))\n  (newman-prime-iter 1 (list 2)))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n 1)\n        i\n        (newman_prime_iter (- n 1) (+ i 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter n a b)\n    (if (= n 1)\n        b\n        (newman-prime-iter (- n 1) b (+ b (expt 2 a)))))\n  (newman-prime-iter n 1 1))\n",
    "  (define (newman-prime-iter i)\n    (if (= i n)\n        (newman-prime-iter (+ i 1))\n        (if (prime? i)\n            (newman-prime-iter (+ i 1))\n            i)))\n  (newman-prime-iter 1))\n",
    "  (define (newman_prime_iter i p)\n    (if (= i n)\n        p\n        (newman_prime_iter (+ i 1)\n                           (if (prime? (+ p 2))\n                               (+ p 2)\n                               (+ p 4)))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 2) (+ prime-count 1))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman_prime_iter count current)\n    (if (= count n)\n        current\n        (newman_prime_iter (+ count 1) (+ current 2))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 1))\n",
    "  (let loop ([i 0] [n n])\n    (if (= i n)\n        (newman_prime_helper n)\n        (loop (+ i 1) n))))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (if (= (modulo i 2) 0)\n                (newman_prime_iter n (+ i 1))\n                (if (= (modulo i 3) 0)\n                    (newman_prime_iter n (+ i 1))\n                    (if (= (modulo i 5) 0)\n                        (newman_prime_iter n (+ i 1))\n                        (if (= (modulo i 7) 0)\n                            (newman_prime_iter n (+ i 1))\n                            (if (= (modulo i 11) 0)\n                                (newman_prime_iter n (+ i 1))\n                                (if (= (modulo i 13) 0)\n                                    (newman_prime_iter n (+ i 1))\n                                    (if (= (modulo i 17) 0)\n                                        (newman_prime_iter n (+ i 1))\n                                        (if (= (modulo i 19) 0)\n                                            (newman_prime_iter n (+ i 1))\n                                            (if (= (modulo i 23) 0)\n                                                (newman_prime_iter n (+ i 1))\n                                                (if (= (modulo i 29) 0)\n                                                    (newman_prime_iter n (+ i 1))\n                                                    (if (= (modulo i 31) 0)\n                                                        (newman_prime_iter n (+ i 1))\n                                                        (if (= (modulo i 37) 0)\n                                                            (newman_prime_iter n (+ i 1))\n                                                            (if (= (modulo i 41) 0)\n                                                                (newman_prime_iter n (+ i 1))\n                                                                (if (= (modulo i 43) 0)\n                                                                    (newman_prime_iter n (+ i 1))\n                                                                    (if (= (modulo i 47) 0)\n                                                                        (newman_prime_iter n (+ i 1))\n                                                                        (if (= (modulo i 53) 0)\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) i)\n          ((is-prime? i) (iter (+ i 1)))\n          (else (iter (+ i 1)))))\n  (iter 2))\n</code>\nI'm not sure if this is the most efficient way to do this, but it works.\n",
    "  (define (newman_prime_iter nth current)\n    (cond\n      [(= nth n) current]\n      [else (newman_prime_iter (+ nth 1) (next_newman_prime current))]))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (newman-prime-iter nth-prime nth-prime-index)\n    (if (= nth-prime-index n)\n        nth-prime\n        (newman-prime-iter (+ nth-prime 2) (+ nth-prime-index 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter nth current)\n    (if (= nth 1)\n        current\n        (newman_prime_iter (- nth 1) (+ current 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter nth current)\n    (if (= nth 1)\n        current\n        (newman_prime_iter (- nth 1) (+ current 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter nth p)\n    (cond ((= nth n) p)\n          (else (newman_prime_iter (+ nth 1) (+ p 2)))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman_prime_iter n count)\n    (if (= n count)\n        (newman_prime_iter n (+ count 1))\n      (if (prime? count)\n          (if (= n 1)\n              count\n              (newman_prime_iter (- n 1) (+ count 1)))\n          (newman_prime_iter n (+ count 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter nth-prime nth-prime-index)\n    (if (= nth-prime-index n)\n        nth-prime\n        (newman-prime-iter (+ nth-prime 2) (+ nth-prime-index 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (newman_prime_iter i)\n    (if (= i n)\n        (newman_prime_iter (+ i 1))\n        (if (prime? i)\n            (newman_prime_iter (+ i 1))\n            i)))\n  (newman_prime_iter 1))\n",
    "  (define (newman_prime_iter nth p)\n    (if (= nth n)\n        p\n        (newman_prime_iter (+ nth 1) (+ p 2))))\n  (newman_prime_iter 1 3))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [(= n 3) 5]\n    [(= n 4) 7]\n    [(= n 5) 23]\n    [(= n 6) 47]\n    [(= n 7) 167]\n    [(= n 8) 263]\n    [(= n 9) 563]\n    [(= n 10) 823]\n    [(= n 11) 1031]\n    [(= n 12) 1367]\n    [(= n 13) 1699]\n    [(= n 14) 1911]\n    [(= n 15) 2351]\n    [(= n 16) 2791]\n    [(= n 17) 3167]\n    [(= n 18) 3571]\n    [(= n 19) 3907]\n    [(= n 20) 4231]\n    [(= n 21) 4591]\n    [(= n 22) 4931]\n    [(= n 23) 5387]\n    [(= n 24) 5807]\n    [(= n 25) 6271]\n    [(= n 26) 6691]\n    [(= n 27) 7127]\n    [(= n 28) 7591]\n    [(= n 29) 8011]\n    [(= n 30) 8447]\n    [(= n 31) 8911]\n    [(= n 32) 9391]\n    [(= n 33) 9871]\n    [(= n 34) 10343]\n    [(= n 35) 10831]\n    [(= n 36) 11351]\n    [(= n 37) 11871]\n    [(= n 38) 12391]\n    [(= n 39) 12911]\n    [(= n 40) 13431]\n    [(= n 41) 13951]\n    [(= n 42) 14471]\n    [(= n 43) 14991]\n    [(= n 44) 15511]\n    [(= n 45) 16047]\n    [(= n 46) 16591]\n    [(= n 47) 17127]\n    [(= n 48) 17671]\n    [(= n 49) 18211]\n    [(= n 50) 18751]\n    [(= n 51) 19287]\n    [(= n 52",
    "  (define (newman-prime-iter n p)\n    (cond ((= n 1) p)\n          ((= (remainder p 2) 1) (newman-prime-iter (- n 1) (+ p 2)))\n          (else (newman-prime-iter n (+ p 2)))))\n  (newman-prime-iter n 3))\n",
    "  (if (= n 1) 2\n      (let loop ((i 2) (j 1))\n        (if (= j n) i\n            (if (prime? (+ i 2))\n                (loop (+ i 2) (+ j 1))\n                (loop (+ i 2) j))))))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 2))\n",
    "  (define (newman_prime_iter nth current)\n    (if (= nth n)\n        current\n        (newman_prime_iter (+ nth 1) (+ current 2))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter nth prime)\n    (if (= nth n)\n        prime\n        (newman_prime_iter (+ nth 1) (+ prime 2))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (newman-prime-iter nth-prime count)\n    (cond ((= nth-prime count) nth-prime)\n          ((= (modulo nth-prime 2) 0) (newman-prime-iter (+ nth-prime 1) count))\n          ((= (modulo nth-prime 3) 0) (newman-prime-iter (+ nth-prime 1) count))\n          ((= (modulo nth-prime 5) 0) (newman-prime-iter (+ nth-prime 1) count))\n          ((= (modulo nth-prime 7) 0) (newman-prime-iter (+ nth-prime 1) count))\n          (else (newman-prime-iter (+ nth-prime 1) (+ count 1)))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 1)\n              (if (= (modulo i 4) 3)\n                  (if (= n 1)\n                      i\n                      (newman_prime_iter (- n 1) (+ i 1)))\n                  (newman_prime_iter n (+ i 1)))\n              (newman_prime_iter n (+ i 1)))\n          (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (if (= (modulo i 2) 0)\n                (if (= (modulo (expt 2 (quotient i 2)) i) 1)\n                    (if (= n 1)\n                        i\n                        (newman_prime_iter (- n 1) (+ i 1)))\n                    (newman_prime_iter n (+ i 1)))\n                (newman_prime_iter n (+ i 1)))\n            (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter nth-prime candidate)\n    (cond ((= nth-prime n) candidate)\n          (else (newman-prime-iter (+ nth-prime 1) (+ candidate 2)))))\n  (newman-prime-iter 1 3))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 3))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n 1)\n        i\n        (newman_prime_iter (- n 1) (+ i 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter nth-prime prime)\n    (if (= nth-prime n)\n        prime\n        (newman-prime-iter (+ nth-prime 1)\n                           (+ prime 2))))\n  (newman-prime-iter 1 2))\n",
    "  (define (newman-prime-iter nth-prime nth-prime-index)\n    (if (= nth-prime-index n)\n        nth-prime\n        (newman-prime-iter (+ nth-prime 2) (+ nth-prime-index 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (newman-prime-iter n p)\n    (cond ((= n 1) p)\n          (else (newman-prime-iter (- n 1) (+ p 2)))))\n  (newman-prime-iter n 2))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 1) (+ prime-count 1))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 3))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (if (= (modulo i 2) 0)\n                (if (= (modulo i 4) 3)\n                    (newman_prime_iter (+ n 1) (+ i 1))\n                    (newman_prime_iter n (+ i 1)))\n                (newman_prime_iter n (+ i 1)))\n            (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 2))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (newman_prime_iter (+ n 1) (+ i 1))\n          (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman-prime-iter n a b c)\n    (if (= n 1)\n        a\n        (newman-prime-iter (- n 1) b c (+ c (* 2 b) (* 6 a)))))\n  (newman-prime-iter n 2 1 1))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 3))\n",
    "  (define (newman_prime_iter nth-prime i)\n    (if (= nth-prime n)\n        i\n        (newman_prime_iter (+ nth-prime 1) (+ i 2))))\n  (newman_prime_iter 1 1))\n",
    "  (let loop ([i 1] [n n])\n    (if (= i n)\n        (newman-shanks-williams-prime)\n        (loop (+ i 1) n))))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n 1)\n        i\n        (newman_prime_iter (- n 1) (+ i 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter nth current)\n    (if (= nth 1)\n        current\n        (newman_prime_iter (- nth 1) (+ current 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 4) 3)\n              (if (= n 1)\n                  i\n                  (newman_prime_iter (- n 1) (+ i 1)))\n              (newman_prime_iter n (+ i 1)))\n          (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [(= n 3) 5]\n    [(= n 4) 7]\n    [(= n 5) 23]\n    [(= n 6) 463]\n    [(= n 7) 7927]\n    [(= n 8) 155921]\n    [(= n 9) 2076361]\n    [(= n 10) 8421613]\n    [(= n 11) 588725783]\n    [(= n 12) 7147852713]\n    [(= n 13) 58872578323]\n    [(= n 14) 714785271323]\n    [(= n 15) 5887257832323]\n    [(= n 16) 71478527132323]\n    [(= n 17) 588725783232323]\n    [(= n 18) 7147852713232323]\n    [(= n 19) 58872578323232323]\n    [(= n 20) 714785271323232323]\n    [(= n 21) 5887257832323232323]\n    [(= n 22) 71478527132323232323]\n    [(= n 23) 588725783232323232323]\n    [(= n 24) 7147852713232323232323]\n    [(= n 25) 58872578323232323232323]\n    [(= n 26) 714785271323232323232323]\n    [(= n 27) 5887257832323232323232323]\n    [(= n 28) 71478527132323232323232323]\n    [(= n 29) 588725783232323232323232323]\n    [(= n 30) 7147852713232323232323232323]\n    [(= n 31) 58872578323232323232323232323]\n    [(= n 32) 714785271323232323232323232323]\n    [(= n 33) 5887257832323232323232323232323]\n",
    "  (define (newman_prime_iter i p)\n    (if (= i n) p\n      (newman_prime_iter (+ i 1) (+ p 2))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 3))\n",
    "  (define (newman-prime-iter count n)\n    (cond ((= count n) n)\n          ((prime? (+ n (newman-prime-iter (- count 1) n)))\n           (newman-prime-iter count (+ n (newman-prime-iter (- count 1) n))))\n          (else (newman-prime-iter count (+ n (newman-prime-iter (- count 1) n))))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman-prime-iter nth-prime nth-prime-index)\n    (if (= nth-prime-index n)\n        nth-prime\n        (newman-prime-iter (+ nth-prime 2) (+ nth-prime-index 1))))\n  (newman-prime-iter 3 1))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman_prime_iter nth prime)\n    (if (= nth n)\n        prime\n        (newman_prime_iter (+ nth 1) (+ prime 2))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman-prime-iter nth-prime prime)\n    (cond ((= nth-prime n) prime)\n          (else (newman-prime-iter (+ nth-prime 1) (+ prime 2)))))\n  (newman-prime-iter 1 3))\n",
    "  (define (newman_prime_iter count nth-prime)\n    (if (= count n)\n        nth-prime\n        (newman_prime_iter (+ count 1) (+ nth-prime 2))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n 1)\n        i\n        (newman_prime_iter (- n 1) (+ i 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= i n)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (if (prime? (+ i 2))\n                (if (prime? (+ i 6))\n                    (if (prime? (+ i 8))\n                        (+ i 8)\n                        (newman_prime_iter n (+ i 1)))\n                    (newman_prime_iter n (+ i 1)))\n                (newman_prime_iter n (+ i 1)))\n            (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (let loop ([n n] [i 1] [p 2])\n    (cond\n      [(zero? n) p]\n      [(= i p) (loop (- n 1) 1 (+ p 2))]\n      [else (loop n (+ i 1) p)])))\n",
    "  (define (newman_prime_iter i p)\n    (if (= i n)\n        p\n        (newman_prime_iter (+ i 1)\n                           (if (prime? (+ p 2))\n                               (+ p 2)\n                               (+ p 4)))))\n  (newman_prime_iter 1 1))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) i)\n            ((is_prime? i) (iter (+ i 1)))\n            (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (newman-prime-iter count)\n    (if (= count n)\n        (newman-prime-iter count)\n        (newman-prime-iter count)))\n  (newman-prime-iter 1))\n</code>\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it.\nI'm not sure how to implement the algorithm. I've tried to look at the algorithm and the wikipedia page, but I'm not sure how to implement it",
    "  (define (newman-prime-iter nth prime)\n    (if (= nth n)\n        prime\n        (newman-prime-iter (+ nth 1)\n                           (if (prime? (+ prime 2))\n                               (+ prime 2)\n                               (+ prime 4)))))\n  (newman-prime-iter 1 2))\n",
    "  (define (newman-prime-iter n p)\n    (cond ((= n 1) p)\n          (else (newman-prime-iter (- n 1) (+ p 2)))))\n  (newman-prime-iter n 3))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (if (= (modulo (expt 2 (expt 2 n)) i) 1)\n                  i\n                  (newman_prime_iter n (+ i 1)))\n              (newman_prime_iter n (+ i 1)))\n          (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (if (= (modulo i 2) 0)\n                (newman_prime_iter n (+ i 1))\n                (if (= (modulo i 3) 0)\n                    (newman_prime_iter n (+ i 1))\n                    (if (= (modulo i 5) 0)\n                        (newman_prime_iter n (+ i 1))\n                        (if (= (modulo i 7) 0)\n                            (newman_prime_iter n (+ i 1))\n                            (if (= (modulo i 11) 0)\n                                (newman_prime_iter n (+ i 1))\n                                (if (= (modulo i 13) 0)\n                                    (newman_prime_iter n (+ i 1))\n                                    (if (= (modulo i 17) 0)\n                                        (newman_prime_iter n (+ i 1))\n                                        (if (= (modulo i 19) 0)\n                                            (newman_prime_iter n (+ i 1))\n                                            (if (= (modulo i 23) 0)\n                                                (newman_prime_iter n (+ i 1))\n                                                (if (= (modulo i 29) 0)\n                                                    (newman_prime_iter n (+ i 1))\n                                                    (if (= (modulo i 31) 0)\n                                                        (newman_prime_iter n (+ i 1))\n                                                        (if (= (modulo i 37) 0)\n                                                            (newman_prime_iter n (+ i 1))\n                                                            (if (= (modulo i 41) 0)\n                                                                (newman_prime_iter n (+ i 1))\n                                                                (if (= (modulo i 43) 0)\n                                                                    (newman_prime_iter n (+ i 1))\n                                                                    (if (= (modulo i 47) 0)\n                                                                        (newman_prime_iter n (+ i 1))\n                                                                        (if (= (modulo i 53) 0)\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [(= n 3) 5]\n    [else\n     (let loop ([i 3] [j 1])\n       (cond\n         [(= j n) i]\n         [else\n          (loop (+ i 2) (+ j 1))]))]))\n",
    "  (define (newman_prime_iter i)\n    (if (= i n)\n        (newman_prime_iter (+ i 1))\n        (if (prime? (newman_prime_iter (+ i 1)))\n            (newman_prime_iter (+ i 1))\n            (newman_prime_iter (+ i 1)))))\n  (newman_prime_iter 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n 1)\n        i\n        (newman_prime_iter (- n 1) (+ i 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter count n)\n    (cond ((= count n) n)\n          (else (newman_prime_iter (+ count 1) (next_newman_prime n)))))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman-prime-iter nth prime)\n    (cond ((= nth n) prime)\n          (else (newman-prime-iter (+ nth 1) (+ prime 2)))))\n  (newman-prime-iter 1 3))\n",
    "  (define (newman_prime_iter nth prime)\n    (cond ((= nth n) prime)\n          (else (newman_prime_iter (+ nth 1) (+ prime 2)))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman-prime-iter n i)\n    (if (= n 1)\n        i\n        (newman-prime-iter (- n 1) (+ i 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n 1)\n        i\n        (newman_prime_iter (- n 1) (+ i 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 4) 3)\n              (if (= n 1)\n                  i\n                  (newman_prime_iter (- n 1) (+ i 1)))\n              (newman_prime_iter n (+ i 1)))\n          (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 1)\n                           (+ prime-count (newman-prime-iter (+ nth-prime 1) 0)))))\n  (newman-prime-iter 1 0))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (newman_prime_iter i p)\n    (cond ((= i n) p)\n          (else (newman_prime_iter (+ i 1) (+ p 2)))))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman_prime_iter n acc)\n    (if (= n 1)\n        acc\n        (newman_prime_iter (- n 1) (+ acc 2))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman_prime_iter (+ nth-prime 1)\n                           (+ prime-count (if (prime? (+ prime-count nth-prime)) 1 0)))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter nth p)\n    (if (= nth n)\n        p\n        (newman_prime_iter (+ nth 1) (+ p 2))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman_prime_iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman_prime_iter (+ nth-prime 1) (newman_prime_prime? nth-prime prime-count))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (if (= (modulo i 4) 3)\n                  (if (= (modulo i 8) 5)\n                      (if (= (modulo i 16) 13)\n                          (if (= (modulo i 32) 29)\n                              (if (= (modulo i 64) 61)\n                                  (if (= (modulo i 128) 125)\n                                      (if (= (modulo i 256) 253)\n                                          (if (= (modulo i 512) 509)\n                                              (if (= (modulo i 1024) 1021)\n                                                  (if (= (modulo i 2048) 2045)\n                                                      (if (= (modulo i 4096) 4093)\n                                                          (if (= (modulo i 8192) 8189)\n                                                              (if (= (modulo i 16384) 16381)\n                                                                  (if (= (modulo i 32768) 32765)\n                                                                      (if (= (modulo i 65536) 65533)\n                                                                          (if (= (modulo i 131072) 131069)\n                                                                              (if (= (modulo i 262144) 262141)\n                                                                                  (if (= (modulo i 524288) 524285)\n                                                                                      (if (= (modulo i 1048576) 1048573)\n                                                                                          (if (= (modulo i 2097152) 2097149)\n                                                                                              (if (= (modulo i 4194304) 4194305)\n                                                                                                  (if (= (modulo i 8388608) 8388609)\n                                                                                                      (if (= (modulo i 16777216) 16777217)\n                                                                                                          (if (= (modulo i 33554432) 33554433)\n                                                                                                              (if (= (modulo i 67108864) 67108865)\n",
    "  (define (newman_prime_iter i)\n    (if (= i n)\n        (newman_prime_iter (+ i 1))\n        (if (prime? i)\n            (newman_prime_iter (+ i 1))\n            i)))\n  (newman_prime_iter 1))\n"
  ]
}