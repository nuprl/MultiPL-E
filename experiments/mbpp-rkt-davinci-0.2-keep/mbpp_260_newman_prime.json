{
  "name": "mbpp_260_newman_prime",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n(define (newman_prime n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate newman_prime))\n    (check-equal? (candidate 3) 7)\n    (check-equal? (candidate 4) 17)\n    (check-equal? (candidate 5) 41)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (newman_prime_iter nth-prime i)\n    (if (= nth-prime n)\n        i\n        (newman_prime_iter (+ nth-prime 1) (+ i 2))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter nth-prime prime-list)\n    (if (= nth-prime n)\n        (car prime-list)\n        (newman_prime_iter (+ nth-prime 1)\n                           (cons (+ (car prime-list)\n                                    (expt 2 (car prime-list))\n                                    1)\n                                 prime-list))))\n  (newman_prime_iter 1 (list 2)))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n        (if (prime? i)\n            (if (prime? (+ i 2))\n                (if (prime? (+ i 6))\n                    (if (prime? (+ i 8))\n                        i\n                        (newman_prime_iter n (+ i 1)))\n                    (newman_prime_iter n (+ i 1)))\n                (newman_prime_iter n (+ i 1)))\n            (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (if (= (modulo (expt 2 (expt 2 n)) i) 1)\n                  i\n                  (newman_prime_iter n (+ i 1)))\n              (newman_prime_iter n (+ i 1)))\n          (newman_prime_iter n (+ i 1)))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman-prime-iter n count)\n    (if (= n count)\n        (newman-prime-iter n (+ count 1))\n        (if (prime? n)\n            n\n            (newman-prime-iter (+ n 1) count))))\n  (newman-prime-iter 2 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (newman_prime_iter n (+ i 1))\n            (if (= (modulo i 3) 0)\n                (newman_prime_iter n (+ i 1))\n              (if (= (modulo i 5) 0)\n                  (newman_prime_iter n (+ i 1))\n                (if (= (modulo i 7) 0)\n                    (newman_prime_iter n (+ i 1))\n                    i)))))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime-iter n i)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 7)\n          ((= n 5) 23)\n          ((= n 6) 47)\n          ((= n 7) 167)\n          ((= n 8) 263)\n          ((= n 9) 563)\n          ((= n 10) 839)\n          ((= n 11) 479)\n          ((= n 12) 991)\n          ((= n 13) 907)\n          ((= n 14) 431)\n          ((= n 15) 919)\n          ((= n 16) 223)\n          ((= n 17) 463)\n          ((= n 18) 983)\n          ((= n 19) 467)\n          ((= n 20) 991)\n          ((= n 21) 919)\n          ((= n 22) 479)\n          ((= n 23) 839)\n          ((= n 24) 563)\n          ((= n 25) 263)\n          ((= n 26) 167)\n          ((= n 27) 47)\n          ((= n 28) 23)\n          ((= n 29) 7)\n          ((= n 30) 5)\n          ((= n 31) 3)\n          ((= n 32) 2)\n          (else (newman_prime-iter n (+ i 1)))))\n  (newman_prime-iter n 1))\n",
    "  (define (newman-prime-iter n i)\n    (if (= n i)\n        (newman-prime-iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (newman-prime-iter n (+ i 1))\n            (if (= (modulo i 3) 0)\n                (newman-prime-iter n (+ i 1))\n              (if (= (modulo i 5) 0)\n                  (newman-prime-iter n (+ i 1))\n                (if (= (modulo i 7) 0)\n                    (newman-prime-iter n (+ i 1))\n                    i)))))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman-prime-iter n i)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 7)\n          ((= n 5) 23)\n          ((= n 6) 47)\n          ((= n 7) 167)\n          ((= n 8) 263)\n          ((= n 9) 563)\n          ((= n 10) 887)\n          ((= n 11) 1187)\n          ((= n 12) 3527)\n          ((= n 13) 4447)\n          ((= n 14) 4783)\n          ((= n 15) 8563)\n          ((= n 16) 13467)\n          ((= n 17) 13499)\n          ((= n 18) 16267)\n          ((= n 19) 17559)\n          ((= n 20) 22223)\n          ((= n 21) 22283)\n          ((= n 22) 22823)\n          ((= n 23) 23563)\n          ((= n 24) 26583)\n          ((= n 25) 26587)\n          ((= n 26) 27683)\n          ((= n 27) 28583)\n          ((= n 28) 29683)\n          ((= n 29) 30883)\n          ((= n 30) 31607)\n          ((= n 31) 31627)\n          ((= n 32) 31687)\n          ((= n 33) 31783)\n          ((= n 34) 31847)\n          ((= n 35) 31883)\n          ((= n 36) 31907)\n          ((= n 37) 31947)\n          ((= n 38) 31983)\n          ((= n 39) 32003)\n          ((= n 40) 32027)\n          ((= n 41) 32047)\n          ((= n 42) 32083)\n          ((= n 43) 32123)\n          ((= n 44) 32147)\n          ((= n 45) 32187)\n          ((= n 46) 32227)\n          ((= n 47) 32247)\n          ((= n 48) 32283)\n          ((= n 49) 32323)\n          ((= n 50) 32347)\n          ((=",
    "  (define (newman_prime_iter i)\n    (if (= i n)\n      (newman_prime_iter (+ i 1))\n      (if (prime? i)\n        (newman_prime_iter (+ i 1))\n        i)))\n  (newman_prime_iter 1))\n",
    "  (define (newman_prime-iter nth-prime nth-candidate)\n    (cond ((= nth-prime n) nth-candidate)\n          (else (newman_prime-iter (+ nth-prime 1) (+ nth-candidate 2)))))\n  (newman_prime-iter 1 3))\n",
    "  (define (newman_prime_iter i p)\n    (if (= i n)\n        p\n        (newman_prime_iter (+ i 1)\n                           (next-prime (next-prime (+ p 2))))))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman_prime_iter nth current)\n    (cond ((= nth n) current)\n          (else (newman_prime_iter (+ nth 1) (+ current 2)))))\n  (newman_prime_iter 1 1))\n",
    "  (define (newman_prime_iter n i)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 7)\n          ((= n 5) 23)\n          ((= n 6) 47)\n          ((= n 7) 167)\n          ((= n 8) 263)\n          ((= n 9) 563)\n          ((= n 10) 839)\n          ((= n 11) 479)\n          ((= n 12) 991)\n          ((= n 13) 907)\n          ((= n 14) 431)\n          ((= n 15) 919)\n          ((= n 16) 223)\n          ((= n 17) 463)\n          ((= n 18) 983)\n          ((= n 19) 467)\n          ((= n 20) 991)\n          ((= n 21) 919)\n          ((= n 22) 439)\n          ((= n 23) 907)\n          ((= n 24) 479)\n          ((= n 25) 839)\n          ((= n 26) 563)\n          ((= n 27) 263)\n          ((= n 28) 167)\n          ((= n 29) 47)\n          ((= n 30) 23)\n          ((= n 31) 7)\n          ((= n 32) 5)\n          ((= n 33) 3)\n          ((= n 34) 2)\n          (else\n           (if (prime? i)\n               (newman_prime_iter (- n 1) (+ i 2))\n               (newman_prime_iter n (+ i 2))))))\n  (newman_prime_iter n 2))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 2))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i count)\n    (cond ((= count n) i)\n            ((is-prime? i) (iter (+ i 2) (+ count 1)))\n            (else (iter (+ i 2) count))))\n  (iter 1 0))\n</code>\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((zero? (modulo n i)) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i count)\n    (cond ((= count n) i)\n            ((is_prime? i) (iter (+ i 2) (+ count 1)))\n            (else (iter (+ i 2) count))))\n  (iter 1 0))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n"
  ]
}