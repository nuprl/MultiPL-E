{
  "name": "mbpp_623_nth_nums",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (* x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpst3jntee.rkt:13:4\nactual:     '(100 400 900)\nexpected:   '(1000 8000 27000)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpst3jntee.rkt:14:4\nactual:     '(144 225)\nexpected:   '(248832 759375)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (num) (expt num n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (* x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpst3jntee.rkt:13:4\nactual:     '(100 400 900)\nexpected:   '(1000 8000 27000)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpst3jntee.rkt:14:4\nactual:     '(144 225)\nexpected:   '(248832 759375)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (* x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82omrdqz.rkt:12:4\nactual:     '(2 4 6 8 10 12 14 16 18 20)\nexpected:   '(1 4 9 16 25 36 49 64 81 100)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82omrdqz.rkt:13:4\nactual:     '(30 60 90)\nexpected:   '(1000 8000 27000)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82omrdqz.rkt:14:4\nactual:     '(60 75)\nexpected:   '(248832 759375)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (* x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpst3jntee.rkt:13:4\nactual:     '(100 400 900)\nexpected:   '(1000 8000 27000)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpst3jntee.rkt:14:4\nactual:     '(144 225)\nexpected:   '(248832 759375)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (* x x)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509922,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpst3jntee.rkt:13:4\nactual:     '(100 400 900)\nexpected:   '(1000 8000 27000)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpst3jntee.rkt:14:4\nactual:     '(144 225)\nexpected:   '(248832 759375)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x)\n         (expt x n))\n       nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1666124135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100))\n    (check-equal? (candidate (list 10 20 30) 3) (list 1000 8000 27000))\n    (check-equal? (candidate (list 12 15) 5) (list 248832 759375))\n))\n\n(test-humaneval)",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}