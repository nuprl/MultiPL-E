{
  "name": "mbpp_267_square_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n(define (square_Sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_Sum))\n    (check-equal? (candidate 2) 10)\n    (check-equal? (candidate 3) 35)\n    (check-equal? (candidate 4) 84)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (square x) (* x x))\n  (define (odd? x) (= 1 (remainder x 2)))\n  (define (sum_of_odd_squares n)\n    (if (= n 0)\n        0\n        (+ (square (if (odd? n) n (- n 1)))\n           (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (cond ((= n 0) 0)\n        ((= n 1) 1)\n        (else (+ (square n) (square_Sum (- n 1))))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (modulo n 2) 0)\n            #f\n            (odd? (- n 1)))))\n  (define (sum_of_odd_squares n)\n    (if (= n 1)\n        (if (odd? n)\n            (square n)\n            0)\n        (if (odd? n)\n            (+ (square n) (sum_of_odd_squares (- n 1)))\n            (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 0)\n            #f\n            (odd? (- n 1)))))\n  (define (odd_sum n)\n    (if (= n 1)\n        1\n        (if (odd? n)\n            (+ n (odd_sum (- n 1)))\n            (odd_sum (- n 1)))))\n  (sum_of_squares (odd_sum n)))\n",
    "  (cond ((= n 0) 0)\n        ((= n 1) 1)\n        (else (+ (square (+ n 1)) (square_Sum (- n 1))))))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum-of-squares n)\n    (if (= n 0)\n        0\n        (+ (square (odd-numbers n))\n           (sum-of-squares (- n 1)))))\n  (define (odd-numbers n)\n    (if (= n 0)\n        0\n        (if (odd? n)\n            n\n            (odd-numbers (- n 1)))))\n  (sum-of-squares n))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 0)\n            #f\n            (odd? (- n 1)))))\n  (define (sum_of_odds n)\n    (if (= n 1)\n        1\n        (if (odd? n)\n            (+ n (sum_of_odds (- n 1)))\n            (sum_of_odds (- n 1)))))\n  (sum_of_squares (sum_of_odds n)))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [else (square_Sum_helper (- n 1) (+ sum (* n n)))]))\n  (square_Sum_helper n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n"
  ]
}