{
  "name": "mbpp_267_square_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n(define (square_Sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_Sum))\n    (check-equal? (candidate 2) 10)\n    (check-equal? (candidate 3) 35)\n    (check-equal? (candidate 4) 84)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (square x) (* x x))\n  (define (odd? x) (= 1 (remainder x 2)))\n  (define (sum_of_odd_squares n)\n    (if (= n 0)\n        0\n        (+ (square (if (odd? n) n (- n 1)))\n           (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (cond ((= n 0) 0)\n        ((= n 1) 1)\n        (else (+ (square n) (square_Sum (- n 1))))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (modulo n 2) 0)\n            #f\n            (odd? (- n 1)))))\n  (define (sum_of_odd_squares n)\n    (if (= n 1)\n        (if (odd? n)\n            (square n)\n            0)\n        (if (odd? n)\n            (+ (square n) (sum_of_odd_squares (- n 1)))\n            (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 0)\n            #f\n            (odd? (- n 1)))))\n  (define (odd_sum n)\n    (if (= n 1)\n        1\n        (if (odd? n)\n            (+ n (odd_sum (- n 1)))\n            (odd_sum (- n 1)))))\n  (sum_of_squares (odd_sum n)))\n",
    "  (cond ((= n 0) 0)\n        ((= n 1) 1)\n        (else (+ (square (+ n 1)) (square_Sum (- n 1))))))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum-of-squares n)\n    (if (= n 0)\n        0\n        (+ (square (odd-numbers n))\n           (sum-of-squares (- n 1)))))\n  (define (odd-numbers n)\n    (if (= n 0)\n        0\n        (if (odd? n)\n            n\n            (odd-numbers (- n 1)))))\n  (sum-of-squares n))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 0)\n            #f\n            (odd? (- n 1)))))\n  (define (sum_of_odds n)\n    (if (= n 1)\n        1\n        (if (odd? n)\n            (+ n (sum_of_odds (- n 1)))\n            (sum_of_odds (- n 1)))))\n  (sum_of_squares (sum_of_odds n)))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_helper n sum)\n    (cond\n      [(= n 0) sum]\n      [else (square_Sum_helper (- n 1) (+ sum (* n n)))]))\n  (square_Sum_helper n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_helper (- n 1) (+ sum (* n n)))))\n  (square_Sum_helper n 0))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum_of_odd_squares n)\n    (if (= n 0)\n        0\n        (+ (square (if (odd? n) n (+ n 1)))\n           (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (define (square x)\n    (* x x))\n  (define (odd? x)\n    (and (not (zero? x))\n         (not (even? x))))\n  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square (odd-numbers n))\n           (sum_of_squares (- n 1)))))\n  (define (odd-numbers n)\n    (if (= n 1)\n        1\n        (+ 2 (odd-numbers (- n 1)))))\n  (sum_of_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (* n n) (square_Sum (- n 2)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (if (= n 1)\n      1\n      (+ (square_Sum (- n 1)) (sum_of_squares n))))\n",
    "  (define (square x)\n    (* x x))\n  (define (sum_of_squares n)\n    (cond ((= n 1) (square 1))\n          (else (+ (square n) (sum_of_squares (- n 1))))))\n  (define (odd? x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 1) #t)\n          (else #f)))\n  (define (sum_of_odd_squares n)\n    (cond ((odd? n) (sum_of_squares n))\n          (else (+ (sum_of_squares n) (sum_of_odd_squares (- n 1))))))\n  (sum_of_odd_squares n))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum_of_odds n)\n    (cond ((= n 0) 0)\n          ((odd? n) (+ n (sum_of_odds (- n 1))))\n          (else (sum_of_odds (- n 1)))))\n  (square (sum_of_odds n)))\n",
    "  (if (= n 1)\n      1\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter counter sum)\n    (cond ((= counter n) sum)\n          (else (square_Sum_iter (+ counter 1) (+ sum (* counter counter))))))\n  (square_Sum_iter 1 0))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (and (integer? x) (odd? x)))\n  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square (car (filter odd? (range 1 n))))\n           (sum_of_squares (- n 1)))))\n  (sum_of_squares n))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n i sum)\n    (cond ((= i n) sum)\n          ((= (modulo i 2) 1) (square_Sum_iter n (+ i 1) (+ sum (* i i))))\n          (else (square_Sum_iter n (+ i 1) sum))))\n  (square_Sum_iter n 1 0))\n",
    "  (if (= n 1)\n      1\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (define (square x)\n    (* x x))\n  (define (odd? x)\n    (= (remainder x 2) 1))\n  (define (sum_of_squares x)\n    (if (= x 1)\n        (square x)\n        (+ (square x) (sum_of_squares (- x 1)))))\n  (define (sum_of_odd_squares x)\n    (if (odd? x)\n        (sum_of_squares x)\n        (sum_of_odd_squares (- x 1))))\n  (sum_of_odd_squares n))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum_odd_squares n)\n    (if (= n 0)\n        0\n        (+ (square (if (odd? n) n (- n 1))) (sum_odd_squares (- n 1)))))\n  (sum_odd_squares n))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 0)\n        #f\n        (if (= n 1)\n            #t\n            (odd? (- n 2)))))\n  (define (odd_sum n)\n    (if (= n 1)\n        1\n        (if (odd? n)\n            (+ n (odd_sum (- n 1)))\n            (odd_sum (- n 1)))))\n  (sum_of_squares (odd_sum n)))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square x)\n    (* x x))\n  (define (odd? x)\n    (and (not (zero? x))\n         (not (odd? (sub1 x)))))\n  (define (sum_of_squares n)\n    (if (zero? n)\n        0\n        (+ (square n)\n           (sum_of_squares (sub1 n)))))\n  (define (sum_of_odd_squares n)\n    (if (zero? n)\n        0\n        (if (odd? n)\n            (+ (square n)\n               (sum_of_odd_squares (sub1 n)))\n            (sum_of_odd_squares (sub1 n)))))\n  (sum_of_odd_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square x)\n    (* x x))\n  (define (odd? x)\n    (and (not (zero? x)) (not (even? x))))\n  (define (sum_of_squares n)\n    (if (= n 1)\n        (square 1)\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (sum_of_odd_squares n)\n    (if (= n 1)\n        (if (odd? n)\n            (square n)\n            0)\n        (+ (if (odd? n)\n               (square n)\n               0)\n           (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (and (not (zero? x)) (even? (- x 1))))\n  (define (sum-of-squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum-of-squares (- n 1)))))\n  (sum-of-squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond ((= n 0) 0)\n        (else (+ (* n n) (square_Sum (- n 1))))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= (remainder n 2) 1)\n        #t\n        #f))\n  (define (first_n_odds n)\n    (if (= n 1)\n        (list 1)\n        (cons n (first_n_odds (- n 1)))))\n  (sum_of_squares (length (filter odd? (first_n_odds n)))))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (and (not (zero? x)) (odd? x)))\n  (define (sum-of-squares x)\n    (if (zero? x)\n        0\n        (+ (square x) (sum-of-squares (- x 1)))))\n  (sum-of-squares n))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum_of_odd_squares n)\n    (if (= n 1)\n        (square 1)\n        (+ (square n) (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square (* 2 (- n 1) 1)) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (* n n) (sum_of_squares (- n 1)))))\n  (define (sum_of_odd n)\n    (if (= n 1)\n        1\n        (+ n (sum_of_odd (- n 2)))))\n  (sum_of_squares (sum_of_odd n)))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (remainder i 2) 1) (square_Sum_iter n (+ i 1) (+ sum (* i i)))]\n      [else (square_Sum_iter n (+ i 1) sum)]))\n  (square_Sum_iter n 1 0))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (define (helper n sum)\n    (if (= n 0)\n        sum\n        (helper (- n 1) (+ sum (* n n)))))\n  (helper n 0))\n",
    "  (define (square x) (* x x))\n  (define (sum_of_squares n)\n    (if (= n 1)\n        (square 1)\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (sum_of_squares n))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (square_Sum_iter (- n 1) (+ sum (* n n))))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square x)\n    (* x x))\n  (define (odd? x)\n    (and (not (zero? x))\n         (even? (- x 1))))\n  (define (sum-of-squares n)\n    (if (= n 0)\n        0\n        (+ (square n)\n           (sum-of-squares (- n 1)))))\n  (define (sum-of-odd-squares n)\n    (if (= n 0)\n        0\n        (if (odd? n)\n            (+ (square n)\n               (sum-of-odd-squares (- n 1)))\n            (sum-of-odd-squares (- n 1)))))\n  (sum-of-odd-squares n))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond ((= n 1) 1)\n        (else (+ (square (+ n 1)) (square_Sum (- n 1))))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= (remainder n 2) 1)\n        #t\n        #f))\n  (define (odd_natural_numbers n)\n    (if (= n 0)\n        0\n        (+ (if (odd? n)\n               n\n               0)\n           (odd_natural_numbers (- n 1)))))\n  (sum_of_squares (odd_natural_numbers n)))\n",
    "  (cond ((= n 0) 0)\n        ((= n 1) 1)\n        (else (+ (square (+ n 1)) (square_Sum (- n 1))))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n)\n           (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 0)\n        #f\n        (if (= (remainder n 2) 1)\n            #t\n            #f)))\n  (define (odd_sum n)\n    (if (= n 0)\n        0\n        (+ (if (odd? n)\n               n\n               0)\n           (odd_sum (- n 1)))))\n  (sum_of_squares (odd_sum n)))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= 1 (remainder x 2)))\n  (define (sum_of_squares_of_odds n)\n    (if (= n 0)\n        0\n        (+ (square (if (odd? n) n 0))\n           (sum_of_squares_of_odds (- n 1)))))\n  (sum_of_squares_of_odds n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (* n n) (sum_of_squares (- n 1)))))\n  (define (sum_of_odds n)\n    (if (= n 1)\n        1\n        (+ n (sum_of_odds (- n 2)))))\n  (sum_of_squares (sum_of_odds n)))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 0)\n            #f\n            (odd? (- n 1)))))\n  (if (= n 1)\n      1\n      (if (odd? n)\n          (+ (square n) (square_Sum (- n 1)))\n          (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square x)\n    (* x x))\n  (define (sum_odd_squares n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          (else (+ (square (+ n 1)) (sum_odd_squares (- n 2))))))\n  (sum_odd_squares n))\n",
    "  (define (square n)\n    (* n n))\n  (define (sum_of_squares n)\n    (if (= n 1)\n        (square 1)\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 0)\n            #f\n            (odd? (- n 1)))))\n  (define (sum_of_odd_squares n)\n    (if (= n 1)\n        (square 1)\n        (if (odd? n)\n            (+ (square n) (sum_of_odd_squares (- n 1)))\n            (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum_of_squares x)\n    (if (= x 1)\n        (square x)\n        (+ (square x) (sum_of_squares (- x 1)))))\n  (define (odd_sum x)\n    (if (= x 1)\n        (if (odd? x)\n            (sum_of_squares x)\n            0)\n        (if (odd? x)\n            (+ (sum_of_squares x) (odd_sum (- x 1)))\n            (odd_sum (- x 1)))))\n  (odd_sum n))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square x)\n    (* x x))\n  (define (sum_odd_squares n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          (else (+ (square (+ n 1)) (sum_odd_squares (- n 2))))))\n  (sum_odd_squares n))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (= (remainder n 2) 1))\n  (define (odd_natural_numbers n)\n    (if (= n 1)\n        1\n        (if (odd? n)\n            (+ n (odd_natural_numbers (- n 1)))\n            (odd_natural_numbers (- n 1)))))\n  (sum_of_squares (odd_natural_numbers n)))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter n i sum)\n    (cond\n      [(= i n) sum]\n      [(= (remainder i 2) 1) (square_Sum_iter n (+ i 1) (+ sum (* i i)))]\n      [else (square_Sum_iter n (+ i 1) sum)]))\n  (square_Sum_iter n 1 0))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 0)\n        #f\n        (even? (- n 1))))\n  (define (even? n)\n    (if (= n 0)\n        #t\n        (odd? (- n 1))))\n  (define (sum_of_odd_squares n)\n    (if (= n 1)\n        (square 1)\n        (+ (square n) (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (define (square_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 1) (square_Sum_iter (- n 1) (+ sum (* n n))))\n          (else (square_Sum_iter (- n 1) sum))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= (remainder n 2) 1)\n        #t\n        #f))\n  (define (first_n_odds n)\n    (if (= n 1)\n        (list 1)\n        (cons n (first_n_odds (- n 1)))))\n  (define (sum_of_first_n_odds n)\n    (if (= n 1)\n        (car (first_n_odds n))\n        (+ (car (first_n_odds n)) (sum_of_first_n_odds (- n 1)))))\n  (sum_of_squares (sum_of_first_n_odds n)))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_helper n count sum)\n    (if (= count n)\n        sum\n        (square_Sum_helper n (+ count 1) (+ sum (* count count)))))\n  (square_Sum_helper n 1 1))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt n 2) (square_Sum (- n 1)))]))\n",
    "  (define (square n)\n    (* n n))\n  (define (sum_of_squares n)\n    (if (= n 0)\n        0\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (sum_of_squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (if (zero? n)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (* n n) (square_Sum (- n 2)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square x) (* x x))\n  (define (sum_of_squares x)\n    (if (= x 1)\n        (square 1)\n        (+ (square x) (sum_of_squares (- x 1)))))\n  (sum_of_squares n))\n",
    "  (define (square x)\n    (* x x))\n  (define (sum_of_squares n)\n    (if (= n 1)\n        (square 1)\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (sum_of_squares n))\n",
    "  (if (= n 1)\n      1\n      (+ (square n) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (2*n-1) 2) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (define (square x) (* x x))\n  (define (sum_of_squares n)\n    (if (= n 1)\n        (square 1)\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (sum_of_squares n))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum_of_squares n)\n    (cond\n      [(= n 0) 0]\n      [(odd? n) (+ (square n) (sum_of_squares (- n 1)))]\n      [else (sum_of_squares (- n 1))]))\n  (sum_of_squares n))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (odd? n)\n    (if (= n 0)\n        #f\n        (if (= (remainder n 2) 0)\n            #f\n            #t)))\n  (define (sum_of_odd_squares n)\n    (if (= n 0)\n        0\n        (+ (square (car (filter odd? (range 1 n))))\n           (sum_of_odd_squares (- n 1)))))\n  (sum_of_odd_squares n))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 2) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (expt n 2) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (* n n) (square_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 1) (square_Sum_iter (- n 1) (+ sum (* n n))))\n          (else (square_Sum_iter (- n 1) sum))))\n  (square_Sum_iter n 0))\n",
    "  (define (square_Sum_iter i sum)\n    (if (= i n)\n        sum\n        (square_Sum_iter (+ i 1) (+ sum (* i i)))))\n  (square_Sum_iter 1 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (if (= n 1)\n        #t\n        (if (= (remainder n 2) 0)\n            #f\n            (odd? (- n 1)))))\n  (if (= n 1)\n      1\n      (if (odd? n)\n          (+ (square n) (square_Sum (- n 1)))\n          (square_Sum (- n 1)))))\n",
    "  (define (helper n sum)\n    (if (= n 0)\n        sum\n        (helper (- n 1) (+ sum (* n n)))))\n  (helper n 0))\n",
    "  (define (odd? n)\n    (and (integer? n)\n         (odd? n)))\n  (define (sum-of-squares n)\n    (if (odd? n)\n        (+ (square n) (sum-of-squares (- n 1)))\n        0))\n  (sum-of-squares n))\n",
    "  (let loop ((n n) (sum 0))\n    (if (= n 0)\n        sum\n        (loop (- n 1) (+ sum (* n n))))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1))\n         (square_Sum (- n 1)))))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (square_Sum_iter (- n 1) (+ sum (* n n))))))\n  (square_Sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square n) (square_Sum (- n 1)))]))\n",
    "  (define (square_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (square_Sum_iter (- n 1) (+ sum (* n n)))))\n  (square_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= (remainder x 2) 1))\n  (define (sum_of_squares x)\n    (if (= x 0)\n        0\n        (+ (square x) (sum_of_squares (- x 1)))))\n  (define (sum_of_odd_squares x)\n    (if (= x 0)\n        0\n        (+ (square x) (sum_of_odd_squares (- x 1)))))\n  (define (sum_of_odd_squares_up_to x)\n    (if (= x 0)\n        0\n        (+ (sum_of_odd_squares x) (sum_of_odd_squares_up_to (- x 1)))))\n  (sum_of_odd_squares_up_to n))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (square (+ n 1)) (square_Sum (- n 1)))]))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (square n) (sum_of_squares (- n 1)))))\n  (define (square n)\n    (* n n))\n  (define (odd? n)\n    (= (remainder n 2) 1))\n  (define (sum_of_odds n)\n    (if (= n 1)\n        1\n        (+ (if (odd? n)\n               n\n               0)\n           (sum_of_odds (- n 1)))))\n  (sum_of_squares (sum_of_odds n)))\n",
    "  (define (square_Sum_helper n acc)\n    (if (= n 0)\n        acc\n        (square_Sum_helper (- n 1) (+ acc (* n n)))))\n  (square_Sum_helper n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (square (+ n 1)) (square_Sum (- n 1)))))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square n) (square_Sum (- n 1)))]))\n",
    "  (define (square x) (* x x))\n  (define (odd? x) (= 1 (remainder x 2)))\n  (define (sum_odd_squares n)\n    (if (= n 0)\n        0\n        (+ (square (if (odd? n) n (- n 1)))\n           (sum_odd_squares (- n 1)))))\n  (sum_odd_squares n))\n",
    "  (define (sum_of_squares n)\n    (if (= n 1)\n        1\n        (+ (* n n) (sum_of_squares (- n 1)))))\n  (define (odd_sum n)\n    (if (= n 1)\n        1\n        (+ (sum_of_squares n) (odd_sum (- n 2)))))\n  (odd_sum n))\n",
    "  (cond ((= n 0) 0)\n        ((= n 1) 1)\n        (else (+ (square (+ n 1)) (square_Sum (- n 1))))))\n",
    "  (if (= n 1)\n      1\n      (+ (* n n) (square_Sum (- n 2)))))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (square n) (square_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n) (square_Sum (- n 1)))))\n"
  ]
}