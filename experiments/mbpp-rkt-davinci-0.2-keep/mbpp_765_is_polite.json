{
  "name": "mbpp_765_is_polite",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n(define (is_polite n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_polite))\n    (check-equal? (candidate 7) 11)\n    (check-equal? (candidate 4) 7)\n    (check-equal? (candidate 9) 13)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_prime n)\n    (define (helper i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper (- i 1)))))\n    (helper (- n 1)))\n  (define (is_power_of_2 n)\n    (define (helper i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) (helper (/ i 2)))\n            (else #f)))\n    (helper n))\n  (and (is_prime n) (is_power_of_2 n)))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n           (define (iter i)\n             (cond ((> i (/ n 2)) #t)\n                   ((= (modulo n i) 0) #f)\n                   (else (iter (+ i 1)))))\n           (iter 3))))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_prime i) (iter (+ i 1)))\n          (else #f)))\n  (iter 1))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (is_sum_of_two_primes? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #f]\n        [(and (is_prime? i) (is_prime? (- n i))) #t]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (cond\n    [(is_prime? n) #t]\n    [(is_sum_of_two_primes? n) #t]\n    [else #f]))\n",
    "  (define (is_polite-iter n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n          (else (is_polite-iter n (+ i 1)))))\n  (is_polite-iter n 1))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= (remainder n 2) 0) (is_polite (/ n 2))]\n    [(= (remainder n 3) 0) (is_polite (/ n 3))]\n    [else #f]))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) (is_prime i))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= (modulo n 2) 0) (is_polite (/ n 2))]\n    [(= (modulo n 3) 0) (is_polite (/ n 3))]\n    [(= (modulo n 5) 0) (is_polite (/ n 5))]\n    [else #f]))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (zero? (modulo n i))\n            (if (is_polite i)\n                #t\n                (loop (+ i 1)))\n            (loop (+ i 1))))))\n",
    "  (let loop ((i 2) (n n))\n    (if (= n 1)\n        #t\n        (if (= (remainder n i) 0)\n            (loop (+ i 1) (/ n i))\n            (loop (+ i 1) n)))))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) (is_prime i))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n)\n        #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0)\n                (iter (+ i 1))\n                #f)\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (let loop ([n n] [i 2])\n    (if (= n 1)\n        #t\n        (if (zero? (modulo n i))\n            (loop (/ n i) i)\n            (loop n (+ i 1))))))\n",
    "  (define (is_polite-helper n i)\n    (cond\n      [(= i n) #t]\n      [(zero? (modulo n i)) #f]\n      [else (is_polite-helper n (+ i 1))]))\n  (is_polite-helper n 2))\n",
    "  (let loop ([i 2])\n    (cond [(= i n) #t]\n          [(= (remainder n i) 0) #f]\n          [else (loop (+ i 1))])))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is_power_of_2? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) (iter (/ n i)))\n            (else #f)))\n    (iter n))\n  (and (is_prime? n) (is_power_of_2? n)))\n",
    "  (let loop ([n n] [i 2])\n    (cond\n      [(= n 1) #t]\n      [(= 0 (modulo n i)) (loop (/ n i) i)]\n      [else (loop n (+ i 1))])))\n",
    "  (define (is_prime n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((is_divisible? n i) #f)\n            (else (iter (+ i 1)))))\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          (else (iter 2))))\n  (define (iter i)\n    (cond ((= i n) #t)\n          ((is_prime i) #f)\n          (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (is_divisible? a b)\n      (= (modulo a b) 0))\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((is_divisible? n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) #t)\n            ((is_prime (+ n i)) #f)\n            (else (iter (+ i 1)))))\n  (iter 1))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (cond ((= n 1) #t)\n        ((is_prime n) #f)\n        (else (is_polite (+ n 1)))))\n",
    "  (define (is_prime n)\n    (define (is_prime-iter n i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (is_prime-iter n (- i 1)))))\n    (is_prime-iter n (- n 1)))\n  (define (polite-iter n i)\n    (cond ((= i n) #f)\n          ((= (remainder n i) 0) (is_prime i))\n          (else (polite-iter n (+ i 1)))))\n  (polite-iter n 1))\n"
  ]
}