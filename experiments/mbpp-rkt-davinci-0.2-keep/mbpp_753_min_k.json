{
  "name": "mbpp_753_min_k",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n(define (min_k test_list K)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_k))\n    (check-equal? (candidate (list (list \"Manjeet\" 10) (list \"Akshat\" 4) (list \"Akash\" 2) (list \"Nikhil\" 8)) 2) (list (list \"Akash\" 2) (list \"Akshat\" 4)))\n    (check-equal? (candidate (list (list \"Sanjeev\" 11) (list \"Angat\" 5) (list \"Akash\" 3) (list \"Nepin\" 9)) 3) (list (list \"Akash\" 3) (list \"Angat\" 5) (list \"Nepin\" 9)))\n    (check-equal? (candidate (list (list \"tanmay\" 14) (list \"Amer\" 11) (list \"Ayesha\" 9) (list \"SKD\" 16)) 1) (list (list \"Ayesha\" 9)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))))\n  (take test_list K))\n",
    "  (sort (take test_list K) <))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) (sub1 K)))\n",
    "  (sort (take test_list K)\n        (lambda (a b)\n          (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (cadr a) (cadr b)))))\n",
    "  (sort (lambda (x y) (< (cdr x) (cdr y))) test_list))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (cadr a) (cadr b))))\n  (take K (sort test_list (lambda (a b) (< (cadr a) (cadr b))))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list (lambda (a b) (< (cadr a) (cadr b)))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (lambda (a b) (< (car a) (car b))) test_list))\n",
    "  (sort (take test_list K) < #:key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n"
  ]
}