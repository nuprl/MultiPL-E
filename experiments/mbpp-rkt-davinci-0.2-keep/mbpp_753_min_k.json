{
  "name": "mbpp_753_min_k",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n(define (min_k test_list K)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_k))\n    (check-equal? (candidate (list (list \"Manjeet\" 10) (list \"Akshat\" 4) (list \"Akash\" 2) (list \"Nikhil\" 8)) 2) (list (list \"Akash\" 2) (list \"Akshat\" 4)))\n    (check-equal? (candidate (list (list \"Sanjeev\" 11) (list \"Angat\" 5) (list \"Akash\" 3) (list \"Nepin\" 9)) 3) (list (list \"Akash\" 3) (list \"Angat\" 5) (list \"Nepin\" 9)))\n    (check-equal? (candidate (list (list \"tanmay\" 14) (list \"Amer\" 11) (list \"Ayesha\" 9) (list \"SKD\" 16)) 1) (list (list \"Ayesha\" 9)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))))\n  (take test_list K))\n",
    "  (sort (take test_list K) <))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) (sub1 K)))\n",
    "  (sort (take test_list K)\n        (lambda (a b)\n          (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (cadr a) (cadr b)))))\n",
    "  (sort (lambda (x y) (< (cdr x) (cdr y))) test_list))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (cadr a) (cadr b))))\n  (take K (sort test_list (lambda (a b) (< (cadr a) (cadr b))))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list (lambda (a b) (< (cadr a) (cadr b)))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (lambda (a b) (< (car a) (car b))) test_list))\n",
    "  (sort (take test_list K) < #:key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) K))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (lambda (a b) (< (car a) (car b))) test_list))\n",
    "  (sort test_list\n        <\n        (lambda (x y)\n          (if (< (car x) (car y))\n              #t\n              #f))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) K))\n",
    "  (sort (take K test_list) < :key second))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(empty? test_list) empty]\n      [(= K 0) empty]\n      [else (cons (min_k_helper (rest test_list) (- K 1)) (list (first test_list)))]))\n  (min_k_helper test_list K))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list < :key second))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y)\n          (cond\n            [(> (car x) (car y)) #t]\n            [(< (car x) (car y)) #f]\n            [else (< (cadr x) (cadr y))]))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y)\n          (if (= (car x) (car y))\n              (if (= (cadr x) (cadr y))\n                  (if (= (caddr x) (caddr y))\n                      (if (= (cadddr x) (cadddr y))\n                          (if (= (caddddr x) (caddddr y))\n                              (if (= (cadddddr x) (cadddddr y))\n                                  (if (= (caddddddr x) (caddddddr y))\n                                      (if (= (cadddddddr x) (cadddddddr y))\n                                          (if (= (caddddddddr x) (caddddddddr y))\n                                              (if (= (cadddddddddr x) (cadddddddddr y))\n                                                  (if (= (caddddddddddr x) (caddddddddddr y))\n                                                      (if (= (cadddddddddddr x) (cadddddddddddr y))\n                                                          (if (= (caddddddddddddr x) (caddddddddddddr y))\n                                                              (if (= (cadddddddddddddr x) (cadddddddddddddr y))\n                                                                  (if (= (caddddddddddddddr x) (caddddddddddddddr y))\n                                                                      (if (= (cadddddddddddddddr x) (cadddddddddddddddr y))\n                                                                          (if (= (caddddddddddddddddr x) (caddddddddddddddddr y))\n                                                                              (if (= (cadddddddddddddddddr x) (cadddddddddddddddddr y))\n                                                                                  (if (= (caddddddddddddddddddr x) (caddddddddddddd",
    "  (sort test_list (lambda (x y) (< (car x) (car y))))\n  (take K test_list))\n",
    "  (sort test_list (lambda (a b)\n                    (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list (lambda (x y) (< (cadr x) (cadr y)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key second))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min-from-list min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (sort test_list (lambda (x y) (< (cadr x) (cadr y))))\n  (take test_list K))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key cadr))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (x y) (< (cadr x) (cadr y)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < #:key second))\n",
    "  (define (min_k_helper test_list K result)\n    (if (or (null? test_list) (= K 0))\n        result\n        (min_k_helper (cdr test_list) (- K 1) (cons (car test_list) result))))\n  (min_k_helper test_list K '()))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) K))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (a b)\n          (andmap (lambda (x) (< (cdr x) (cdr y)))\n                  (zip (range (length a)) a)\n                  (zip (range (length b)) b)))))\n",
    "  (sort (take test_list K) <))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < #:key second))\n",
    "  (sort test_list #:key (lambda (x) (car x)) #:cmp < #:count K))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) K))\n",
    "  (sort (take test_list K) < #:key second))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (a b) (apply min (map (lambda (x y) (abs (- x y))) a b)))))\n",
    "  (sort test_list\n        (lambda (a b)\n          (if (< (car a) (car b))\n              #t\n              #f))))\n",
    "  (define (min_k_helper test_list K acc)\n    (if (or (null? test_list) (= K 0))\n        acc\n        (min_k_helper (cdr test_list) (- K 1) (cons (car test_list) acc))))\n  (min_k_helper test_list K '()))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y)))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (zero? K)\n        min_list\n        (min_k_helper (cdr test_list) (- K 1) (append min_list (list (car test_list))))))\n  (min_k_helper test_list K '()))\n",
    "  (sort (take test_list K) < #:key second))\n",
    "  (sort test_list (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort test_list\n        (lambda (a b)\n          (< (car a) (car b)))))\n",
    "  (sort test_list (lambda (x y) (< (cadr x) (cadr y))))\n  (take test_list K))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (zero? K)\n        min_list\n        (let* ([min_val (apply min (map car test_list))]\n               [min_list (cons min_val min_list)]\n               [test_list (filter (lambda (x) (not (equal? (car x) min_val))) test_list)])\n          (min_k_helper test_list (- K 1) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (null? test_list)\n        '()\n        (if (= K 0)\n            '()\n            (cons (apply min (map car test_list))\n                  (min_k_helper (map cdr test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y) (apply < x y))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < #:key first))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y)\n          (cond\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [(< (cadr x) (cadr y)) #t]\n            [(> (cadr x) (cadr y)) #f]\n            [(< (caddr x) (caddr y)) #t]\n            [(> (caddr x) (caddr y)) #f]\n            [else #f]))))\n",
    "  (define (min_k_helper test_list K)\n    (if (null? test_list)\n        '()\n        (if (= K 0)\n            '()\n            (let ([min (apply min (map first test_list))])\n              (cons (list min (length (filter (lambda (x) (= min (first x))) test_list)))\n                    (min_k_helper (filter (lambda (x) (not (= min (first x)))) test_list) (- K (length (filter (lambda (x) (= min (first x))) test_list)))))))))\n  (min_k_helper test_list K))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y)\n          (cond\n            [(> (car x) (car y)) #t]\n            [(< (car x) (car y)) #f]\n            [(= (car x) (car y))\n             (cond\n               [(> (cadr x) (cadr y)) #t]\n               [(< (cadr x) (cadr y)) #f]\n               [(= (cadr x) (cadr y))\n                (cond\n                  [(> (caddr x) (caddr y)) #t]\n                  [(< (caddr x) (caddr y)) #f]\n                  [(= (caddr x) (caddr y)) #f])])])])))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) (sub1 K)))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key first))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b))))\n  (take K test_list))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y)\n          (if (equal? (car x) (car y))\n              (if (equal? (cadr x) (cadr y))\n                  (if (equal? (caddr x) (caddr y))\n                      (if (equal? (cadddr x) (cadddr y))\n                          (if (equal? (caddddr x) (caddddr y))\n                              (if (equal? (cadddddr x) (cadddddr y))\n                                  (if (equal? (caddddddr x) (caddddddr y))\n                                      (if (equal? (cadddddddr x) (cadddddddr y))\n                                          (if (equal? (caddddddddr x) (caddddddddr y))\n                                              (if (equal? (cadddddddddr x) (cadddddddddr y))\n                                                  (if (equal? (caddddddddddr x) (caddddddddddr y))\n                                                      (if (equal? (cadddddddddddr x) (cadddddddddddr y))\n                                                          (if (equal? (caddddddddddddr x) (caddddddddddddr y))\n                                                              (if (equal? (cadddddddddddddr x) (cadddddddddddddr y))\n                                                                  (if (equal? (caddddddddddddddr x) (caddddddddddddddr y))\n                                                                      (if (equal? (cadddddddddddddddr x) (cadddddddddddddddr y))\n                                                                          (if (equal? (caddddddddddddddddr x) (caddddddddddddddddr y))\n                                                                              (if (equal? (cadddddddddddddddddr x) (caddddddddddddddd",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) <))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key first))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y)\n          (cond\n            [(< (second x) (second y)) #t]\n            [(> (second x) (second y)) #f]\n            [(< (first x) (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [else #f]))))\n",
    "  (sort test_list\n        (lambda (a b)\n          (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (lambda (x y) (< (car x) (car y))) test_list))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key second))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) K))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (x y) (< (cdr x) (cdr y))))\n  (take test_list K))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (a b)\n          (andmap (lambda (x) (< (cdr x) (cdr y)))\n                  (zip (range K) test_list)))))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y)\n          (if (equal? (car x) (car y))\n              (if (equal? (cadr x) (cadr y))\n                  (if (equal? (caddr x) (caddr y))\n                      (if (equal? (cadddr x) (cadddr y))\n                          (if (equal? (caddddr x) (caddddr y))\n                              (if (equal? (cadddddr x) (cadddddr y))\n                                  (if (equal? (caddddddr x) (caddddddr y))\n                                      (if (equal? (cadddddddr x) (cadddddddr y))\n                                          (if (equal? (caddddddddr x) (caddddddddr y))\n                                              (if (equal? (cadddddddddr x) (cadddddddddr y))\n                                                  (if (equal? (caddddddddddr x) (caddddddddddr y))\n                                                      (if (equal? (cadddddddddddr x) (cadddddddddddr y))\n                                                          (if (equal? (caddddddddddddr x) (caddddddddddddr y))\n                                                              (if (equal? (cadddddddddddddr x) (cadddddddddddddr y))\n                                                                  (if (equal? (caddddddddddddddr x) (caddddddddddddddr y))\n                                                                      (if (equal? (cadddddddddddddddr x) (cadddddddddddddddr y))\n                                                                          (if (equal? (caddddddddddddddddr x) (caddddddddddddddddr y))\n                                                                              (if (equal? (cadddddddddddddddddr x) (caddddddddddddddd",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list (lambda (x y) (< (cadr x) (cadr y)))))\n",
    "  (sort (take test_list K) < #:key (lambda (x) (car x))))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key second))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) (sub1 K)))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y)\n          (if (equal? (car x) (car y))\n              (if (equal? (cadr x) (cadr y))\n                  (if (equal? (caddr x) (caddr y))\n                      (if (equal? (cadddr x) (cadddr y))\n                          (if (equal? (caddddr x) (caddddr y))\n                              (if (equal? (cadddddr x) (cadddddr y))\n                                  (if (equal? (caddddddr x) (caddddddr y))\n                                      (if (equal? (cadddddddr x) (cadddddddr y))\n                                          (if (equal? (caddddddddr x) (caddddddddr y))\n                                              (if (equal? (cadddddddddr x) (cadddddddddr y))\n                                                  (if (equal? (caddddddddddr x) (caddddddddddr y))\n                                                      (if (equal? (cadddddddddddr x) (cadddddddddddr y))\n                                                          (if (equal? (caddddddddddddr x) (caddddddddddddr y))\n                                                              (if (equal? (cadddddddddddddr x) (cadddddddddddddr y))\n                                                                  (if (equal? (caddddddddddddddr x) (caddddddddddddddr y))\n                                                                      (if (equal? (cadddddddddddddddr x) (cadddddddddddddddr y))\n                                                                          (if (equal? (caddddddddddddddddr x) (caddddddddddddddddr y))\n                                                                              (if (equal? (cadddddddddddddddddr x) (caddddddddddddddd",
    "  (sort test_list\n        (lambda (x y)\n          (< (car x) (car y)))))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))))\n  (take test_list K))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort test_list < :key (lambda (x) (cadr x))))\n",
    "  (sort test_list < :key second))\n",
    "  (sort test_list < :key (lambda (x) (vector-ref x 1))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort test_list < :key (lambda (x) (vector-ref x 1))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list (lambda (x y) (< (cdr x) (cdr y))))\n  (take test_list K))\n",
    "  (sort test_list\n        (lambda (x y)\n          (< (car x) (car y)))))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y) (first x))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take K test_list) < :key second))\n",
    "  (sort (lambda (x y) (&lt; (car x) (car y))) test_list))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) K))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key second))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (sort test_list (lambda (a b) (< (car a) (car b))))\n  (take K test_list))\n",
    "  (sort test_list (lambda (x y) (< (cadr x) (cadr y)))))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y) (cdr x))))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y))) K))\n",
    "  (sort (take test_list K) < :key second))\n",
    "  (sort test_list < :key second))\n",
    "  (sort test_list (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y) (apply < (cdr x) (cdr y)))))\n",
    "  (sort (take test_list K)\n        <\n        (lambda (x y)\n          (cond [(< (car x) (car y)) #t]\n                [(> (car x) (car y)) #f]\n                [(= (car x) (car y)) (< (cadr x) (cadr y))]))))\n"
  ]
}