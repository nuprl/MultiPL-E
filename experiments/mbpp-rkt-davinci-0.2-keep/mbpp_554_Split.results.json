{
  "name": "mbpp_554_Split",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(odd? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) '()]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(odd? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond ((null? list) '())\n        ((odd? (car list)) (cons (car list) (Split (cdr list))))\n        (else (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (odd? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(odd? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (odd? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(odd? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(odd? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph28oofkz.rkt:15:4\nactual:     '(2 4 6)\nexpected:   '(1 3 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph28oofkz.rkt:16:4\nactual:     '(10 12)\nexpected:   '(11 13)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph28oofkz.rkt:17:4\nactual:     '(8)\nexpected:   '(7 9 1)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (odd? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (odd? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(odd? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (odd? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (if (null? list)\n      '()\n      (cons (car list) (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp35d3epx8.rkt:14:4\nactual:     '(1 2 3 4 5 6)\nexpected:   '(1 3 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp35d3epx8.rkt:15:4\nactual:     '(10 11 12 13)\nexpected:   '(11 13)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp35d3epx8.rkt:16:4\nactual:     '(7 8 9 1)\nexpected:   '(7 9 1)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph28oofkz.rkt:15:4\nactual:     '(2 4 6)\nexpected:   '(1 3 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph28oofkz.rkt:16:4\nactual:     '(10 12)\nexpected:   '(11 13)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph28oofkz.rkt:17:4\nactual:     '(8)\nexpected:   '(7 9 1)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond [(null? list) '()]\n        [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n        [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph28oofkz.rkt:15:4\nactual:     '(2 4 6)\nexpected:   '(1 3 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph28oofkz.rkt:16:4\nactual:     '(10 12)\nexpected:   '(11 13)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph28oofkz.rkt:17:4\nactual:     '(8)\nexpected:   '(7 9 1)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (if (null? list)\n      '()\n      (if (odd? (car list))\n          (cons (car list) (Split (cdr list)))\n          (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond ((null? list) '())\n        ((odd? (car list)) (cons (car list) (Split (cdr list))))\n        (else (Split (cdr list)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(null? list) '()]\n    [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(odd? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond\n    [(empty? list) empty]\n    [(odd? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a python function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n  (cond [(empty? list) empty]\n        [(odd? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) (list 1 3 5))\n    (check-equal? (candidate (list 10 11 12 13)) (list 11 13))\n    (check-equal? (candidate (list 7 8 9 1)) (list 7 9 1))\n))\n\n(test-humaneval)",
      "timestamp": 1665510258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}