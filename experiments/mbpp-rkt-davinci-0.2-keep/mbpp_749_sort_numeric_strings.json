{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n(define (sort_numeric_strings nums_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numeric_strings))\n    (check-equal? (candidate (list \"4\" \"12\" \"45\" \"7\" \"0\" \"100\" \"200\" \"-12\" \"-500\")) (list -500 -12 0 4 7 12 45 100 200))\n    (check-equal? (candidate (list \"2\" \"3\" \"8\" \"4\" \"7\" \"9\" \"8\" \"2\" \"6\" \"5\" \"1\" \"6\" \"1\" \"2\" \"3\" \"4\" \"6\" \"9\" \"1\" \"2\")) (list 1 1 1 2 2 2 2 3 3 4 4 5 6 6 6 7 8 8 9 9))\n    (check-equal? (candidate (list \"1\" \"3\" \"5\" \"7\" \"1\" \"3\" \"13\" \"15\" \"17\" \"5\" \"7 \" \"9\" \"1\" \"11\")) (list 1 1 1 3 3 5 5 7 7 9 11 13 15 17))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) < nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (a b) (< (string->number a) (string->number b))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (\u03bb (x y) (&lt; (string-&gt;number x) (string-&gt;number y)))))\n",
    "  (sort nums_str <))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) < nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) <))\n",
    "  (sort (lambda (a b) (< (string->number a) (string->number b))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) <))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (&lt; (string-&gt;number x) (string-&gt;number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) < nums_str))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str (\u03bb (x y) (&lt; (string-&gt;number x) (string-&gt;number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (a b) (&lt; (string-&gt;number a) (string-&gt;number b)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) <))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (a b) (&lt; (string-&gt;number a) (string-&gt;number b)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (a b)\n          (string<? a b))\n        nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (&lt; (string-&gt;number x) (string-&gt;number y))) nums_str))\n",
    "  (sort (string->number nums_str) < nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort (string->number nums_str) <))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (a b) (< (string-&gt;number a) (string-&gt;number b)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (a b) (&lt; (string-&gt;number a) (string-&gt;number b)))))\n",
    "  (sort (string->number nums_str) nums_str))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort (lambda (a b) (&lt; (string-&gt;number a) (string-&gt;number b))) nums_str))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str (lambda (a b) (&lt; (string-&gt;number a) (string-&gt;number b)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (a b) (< (string->number a) (string->number b))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str <))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (\u03bb (a b) (&lt; (string-&gt;number a) (string-&gt;number b)))))\n</code>\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (a b) (< (string->number a) (string->number b))) nums_str))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (&lt; (string-&gt;number x) (string-&gt;number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) <))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (a b) (< (string->number a) (string->number b))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (a b) (< (string->number a) (string->number b))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (a b) (< (string->number a) (string->number b))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (a b) (< (string->number a) (string->number b)))))\n",
    "  (sort nums_str (lambda (a b) (< (string->number a) (string->number b)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (a b) (&lt; (string-&gt;number a) (string-&gt;number b)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) <))\n",
    "  (sort nums_str\n        (lambda (a b)\n          (< (string->number a) (string->number b)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string->number nums_str) < nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort (lambda (a b) (< (string->number a) (string->number b))) nums_str))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str\n        (lambda (x y)\n          (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (&lt; (string-&gt;number x) (string-&gt;number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (\u03bb (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (&lt; (string-&gt;number x) (string-&gt;number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str (lambda (x y) (&lt; (string-&gt;number x) (string-&gt;number y)))))\n",
    "  (sort (string-&gt;number nums_str) &lt;))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (a b) (< (string->number a) (string->number b))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (lambda (x y) (< (string->number x) (string->number y))) nums_str))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str (lambda (x y) (&lt; (string-&gt;number x) (string-&gt;number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str string<?))\n",
    "  (sort nums_str (lambda (x y) (< (string->number x) (string->number y)))))\n",
    "  (sort nums_str string<?))\n",
    "  (sort (string-&gt;number nums_str) &lt;))\n"
  ]
}