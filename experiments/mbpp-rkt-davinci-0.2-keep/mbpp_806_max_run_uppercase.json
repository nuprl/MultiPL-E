{
  "name": "mbpp_806_max_run_uppercase",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find maximum run of uppercase characters in the given string.\n(define (max_run_uppercase test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_run_uppercase))\n    (check-equal? (candidate \"GeMKSForGERksISBESt\") 5)\n    (check-equal? (candidate \"PrECIOusMOVemENTSYT\") 6)\n    (check-equal? (candidate \"GooGLEFluTTER\") 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (max_run_uppercase-helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase-helper (rest test_str) (max max_run (+ cur_run 1)) (+ cur_run 1))]\n      [else (max_run_uppercase-helper (rest test_str) max_run 0)]))\n  (max_run_uppercase-helper test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 current_run))\n             (add1 current_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (current_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; current_run max_run) current_run max_run)\n                 (+ current_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ 1 cur_run))\n                 (+ 1 cur_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (if (string-empty? str)\n        max_run\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1)\n                  (if (&gt; cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ cur_run 1))\n            (loop (substring str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ 1 cur_run)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [curr_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 curr_run))\n                 (add1 curr_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (if (&lt; i (string-length test_str))\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (+ j 1) (if (&gt; j max) j max))\n            (loop (+ i 1) 0 (if (&gt; j max) j max)))\n        max)))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str)\n                               (max max_run (add1 cur_run))\n                               (add1 cur_run))]\n      [else (max_run_uppercase_iter (rest test_str) max_run 0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      (if (> run max_run) run max_run)\n                                      (+ run 1))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      max_run\n                                      0))))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (&lt; i (string-length test_str))\n        (let ([c (string-ref test_str i)])\n          (if (char-upper-case? c)\n              (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n              (loop (+ i 1) max_run 0)))\n        max_run)))\n",
    "  (let loop ([i 0] [j 0] [max-run 0])\n    (cond\n      [(= i (string-length test_str)) max-run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (max max-run j))]\n      [else (loop (+ i 1) 0 (max max-run j))])))\n",
    "  (let loop ((i 0) (max-run 0) (cur-run 0))\n    (if (&lt; i (string-length test_str))\n        (let ((cur-char (string-ref test_str i)))\n          (if (char-upper-case? cur-char)\n              (loop (+ i 1) (max max-run (+ cur-run 1)) (+ cur-run 1))\n              (loop (+ i 1) max-run 0)))\n        max-run)))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str]\n               [max_run 0]\n               [cur_run 0])\n      (cond [(empty? test_str) max_run]\n            [(char-upper-case? (car test_str))\n             (loop (cdr test_str)\n                   (max max_run (add1 cur_run))\n                   (add1 cur_run))]\n            [else (loop (cdr test_str)\n                        max_run\n                        0)]))))\n",
    "  (let loop ([str test_str]\n             [max-run 0]\n             [cur-run 0])\n    (if (empty? str)\n        max-run\n        (if (char-upper-case? (first str))\n            (loop (rest str)\n                  (max max-run (+ cur-run 1))\n                  (+ cur-run 1))\n            (loop (rest str)\n                  max-run\n                  0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n</code>\n",
    "  (let loop ([str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? str) max_run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1))]\n          [else (loop (rest str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      (max max_run (add1 cur_run))\n                                      (add1 cur_run))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      max_run\n                                      0))))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ cur_run 1))\n                 (+ cur_run 1))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let ([max_run 0]\n        [current_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! current_run (+ current_run 1))\n          (set! current_run 0))\n      (if (&gt; current_run max_run)\n          (set! max_run current_run)))\n    max_run))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (max-run-helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_upper? (first test_str))\n       (max-run-helper (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max-run-helper (rest test_str) max_run 0)]))\n  (max-run-helper test_str 0 0))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (+ cur_run 1))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (loop (substring test_str 1)\n                  (if (> current_run max_run)\n                      current_run\n                      max_run)\n                  (+ current_run 1))\n            (loop (substring test_str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (null? test_str)\n        max_run\n        (if (char-upper-case? (car test_str))\n            (loop (cdr test_str)\n                  (max max_run (add1 cur_run))\n                  (add1 cur_run))\n            (loop (cdr test_str)\n                  max_run\n                  0)))))\n",
    "  (define (max_run_uppercase_helper test_str max_run curr_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (add1 curr_run))\n                                 (add1 curr_run))]\n      [else\n       (max_run_uppercase_helper (rest test_str)\n                                 max_run\n                                 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (current_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1)))\n          (else (loop (cdr str)\n                      max_run\n                      0)))))\n",
    "  (define (iter str count max)\n    (cond\n      [(empty? str) max]\n      [(char-upper-case? (first str)) (iter (rest str) (+ count 1) (max count max))]\n      [else (iter (rest str) 0 (max count max))]))\n  (iter test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (> cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([test_str test_str] [max_run 0] [current_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (if (> (+ current_run 1) max_run)\n                 (+ current_run 1)\n                 max_run)\n             (+ current_run 1))]\n      [else\n       (loop (rest test_str) max_run 0)])))\n",
    "  (define (helper str max_run curr_run)\n    (if (empty? str)\n        max_run\n        (if (char-upper-case? (first str))\n            (helper (rest str) (max max_run (add1 curr_run)) (add1 curr_run))\n            (helper (rest str) max_run 0))))\n  (helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (loop (substring test_str 1)\n                  (max max_run (add1 cur_run))\n                  (add1 cur_run))\n            (loop (substring test_str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let ([str (string->list test_str)])\n    (let loop ([str str] [max_run 0] [cur_run 0])\n      (cond [(null? str) max_run]\n            [(char-upper-case? (car str))\n             (loop (cdr str)\n                   (if (&gt; cur_run max_run) cur_run max_run)\n                   (+ cur_run 1))]\n            [else (loop (cdr str) max_run 0)]))))\n",
    "  (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str) (max max_run (+ 1 cur_run)) (+ 1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ((str test_str) (max-run 0) (cur-run 0))\n    (cond ((null? str) max-run)\n          ((char-upper-case? (car str))\n           (loop (cdr str) (max max-run (add1 cur-run)) (add1 cur-run)))\n          (else (loop (cdr str) max-run 0)))))\n",
    "  (let loop ((str test_str) (max_run 0) (cur_run 0))\n    (cond\n      [(empty? str) max_run]\n      [(char-upper-case? (first str))\n       (loop (rest str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (loop (rest str) max_run 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (+ cur_run 1)) (+ cur_run 1))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (if (&gt; cur max) cur max) (+ cur 1))]\n      [else (loop (+ i 1) max 0)])))\n",
    "  (let loop ([str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (string-empty? str)\n        max_run\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1)\n                  (if (&gt; cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ cur_run 1))\n            (loop (substring str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (cond\n      [(= i (string-length test_str)) max_run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (loop (+ i 1) max_run 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (current_run 0))\n    (cond ((null? test_str) max_run)\n          ((char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1)))\n          (else (loop (cdr test_str)\n                      max_run\n                      0)))))\n",
    "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (max_run_uppercase-helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_upper? (first test_str))\n       (if (&gt; cur_run max_run)\n           (max_run_uppercase-helper (rest test_str) cur_run (+ cur_run 1))\n           (max_run_uppercase-helper (rest test_str) max_run (+ cur_run 1)))]\n      [else (max_run_uppercase-helper (rest test_str) max_run 0)]))\n  (max_run_uppercase-helper test_str 0 0))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str)\n                               (if (&gt; cur_run max_run) cur_run max_run)\n                               (+ cur_run 1))]\n      [else (max_run_uppercase_iter (rest test_str) max_run 0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([i 0] [j 0] [max_run 0])\n    (cond\n      [(= i (string-length test_str)) max_run]\n      [(char-upcase? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (max max_run j))]\n      [else (loop (+ i 1) 0 (max max_run j))])))\n",
    "  (define (is_uppercase? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (max_run_uppercase-helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_uppercase? (first test_str))\n       (max_run_uppercase-helper (rest test_str)\n                                 (if (&gt; cur_run max_run) cur_run max_run)\n                                 (+ cur_run 1))]\n      [else (max_run_uppercase-helper (rest test_str) max_run 0)]))\n  (max_run_uppercase-helper test_str 0 0))\n",
    "  (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([str test_str] [len 0] [max_len 0])\n    (cond [(empty? str) max_len]\n          [(char-upper-case? (first str))\n           (loop (rest str) (+ len 1) (if (&gt; len max_len) len max_len))]\n          [else (loop (rest str) 0 max_len)])))\n",
    "  (let loop ((i 0) (j 0) (max_run 0))\n    (cond\n      [(>= i (string-length test_str)) max_run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (max max_run j))]\n      [else (loop (+ i 1) 0 (max max_run j))])))\n",
    "  (let ([str (string->list test_str)]\n        [max_run 0]\n        [cur_run 0])\n    (for ([c str])\n      (if (char-upper-case? c)\n          (set! cur_run (+ 1 cur_run))\n        (set! cur_run 0))\n      (if (> cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (let loop ([i 0] [max_run 0] [run 0])\n    (if (&gt;= i (string-length test_str))\n        max_run\n        (let ([ch (string-ref test_str i)])\n          (if (char-upper-case? ch)\n              (loop (+ i 1) (max max_run (add1 run)) (add1 run))\n              (loop (+ i 1) max_run 0))))))\n",
    "  (let loop ((str test_str)\n             (max-run 0)\n             (cur-run 0))\n    (cond ((null? str) max-run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur-run max-run) cur-run max-run)\n                 (+ cur-run 1)))\n          (else (loop (cdr str) max-run 0)))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ((i 0) (j 0) (max 0))\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (max j max))]\n      [else (loop (+ i 1) 0 (max j max))])))\n",
    "  (let loop ((str test_str)\n             (max-run 0)\n             (run 0))\n    (cond ((null? str) max-run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; run max-run) run max-run)\n                 (+ run 1)))\n          (else (loop (cdr str) max-run 0)))))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (&lt; i (string-length test_str))\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n            (loop (+ i 1) max_run 0))\n        max_run)))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 current_run))\n             (add1 current_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (if (empty? test_str)\n        max_run\n        (let ([first_char (first test_str)])\n          (if (char-upper-case? first_char)\n              (loop (rest test_str)\n                    (max max_run (add1 current_run))\n                    (add1 current_run))\n              (loop (rest test_str)\n                    max_run\n                    0))))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 cur_run))\n             (add1 cur_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; run max_run) run max_run)\n                 (+ run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([str test_str] [max_run 0] [cur_run 0])\n    (cond\n      [(empty? str) max_run]\n      [(char-upper-case? (first str))\n       (loop (rest str)\n             (if (&gt; cur_run max_run) cur_run max_run)\n             (+ cur_run 1))]\n      [else\n       (loop (rest str) max_run 0)])))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (if (&gt; j max) j max))]\n      [else (loop (+ i 1) 0 (if (&gt; j max) j max))])))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (max max (+ cur 1)) (+ cur 1))]\n      [else (loop (+ i 1) max 0)])))\n",
    "  (let ([acc 0]\n        [max_acc 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! acc (add1 acc))\n          (set! acc 0))\n      (if (&gt; acc max_acc)\n          (set! max_acc acc)))\n    max_acc))\n</code>\n",
    "  (let ([max_run 0]\n        [curr_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! curr_run (add1 curr_run))\n        (set! curr_run 0))\n      (if (&gt; curr_run max_run)\n          (set! max_run curr_run)))\n    max_run))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (if (> (+ cur_run 1) max_run)\n                 (+ cur_run 1)\n                 max_run)\n             (+ cur_run 1))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (define (is_upper? c)\n    (char-upper-case? c))\n  (define (max_run_uppercase-helper test_str max_run current_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_upper? (first test_str))\n       (max_run_uppercase-helper (rest test_str)\n                                 (max max_run (add1 current_run))\n                                 (add1 current_run))]\n      [else (max_run_uppercase-helper (rest test_str)\n                                      max_run\n                                      0)]))\n  (max_run_uppercase-helper test_str 0 0))\n",
    "  (let loop ([i 0]\n             [max-run 0]\n             [cur-run 0])\n    (if (&lt; i (string-length test_str))\n        (let ([c (string-ref test_str i)])\n          (if (char-upper-case? c)\n              (loop (+ i 1)\n                    (if (&gt; cur-run max-run)\n                        cur-run\n                        max-run)\n                    (+ cur-run 1))\n              (loop (+ i 1)\n                    max-run\n                    0)))\n        max-run)))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n            (loop (+ i 1) max_run 0)))))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n      (cond [(empty? test_str) max_run]\n            [(char-upper-case? (car test_str))\n             (loop (cdr test_str)\n                   (if (> cur_run max_run) cur_run max_run)\n                   (+ cur_run 1))]\n            [else (loop (cdr test_str) max_run 0)]))))\n",
    "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (max_run_uppercase-iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_upper? (first test_str))\n       (if (&gt; cur_run max_run)\n           (max_run_uppercase-iter (rest test_str) cur_run (+ 1 cur_run))\n           (max_run_uppercase-iter (rest test_str) max_run (+ 1 cur_run)))]\n      [else (max_run_uppercase-iter (rest test_str) max_run 0)]))\n  (max_run_uppercase-iter test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (if (> cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ cur_run 1))]\n          [else\n           (loop (cdr test_str)\n                 max_run\n                 0)])))\n",
    "  (define (max_run_uppercase-helper test_str max_run cur_run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (max_run_uppercase-helper (substring test_str 1) (max max_run (add1 cur_run)) (add1 cur_run))\n            (max_run_uppercase-helper (substring test_str 1) max_run 0))))\n  (max_run_uppercase-helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [count 0]\n             [max_count 0])\n    (cond [(empty? test_str) max_count]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (+ count 1)\n                 (if (&gt; count max_count) count max_count))]\n          [else (loop (rest test_str) 0 max_count)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (+ cur_run 1))\n                                 (+ cur_run 1))]\n      [else\n       (max_run_uppercase_helper (rest test_str)\n                                 max_run\n                                 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 cur_run))\n             (add1 cur_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str]\n               [max_run 0]\n               [cur_run 0])\n      (cond [(empty? test_str) max_run]\n            [(char-upper-case? (car test_str))\n             (loop (cdr test_str)\n                   (max max_run (+ cur_run 1))\n                   (+ cur_run 1))]\n            [else (loop (cdr test_str)\n                        max_run\n                        0)]))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; (+ cur_run 1) max_run)\n                     (+ cur_run 1)\n                     max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [else\n           (let ([cur_char (first test_str)])\n             (if (char-upper-case? cur_char)\n                 (loop (rest test_str)\n                       (max max_run (add1 cur_run))\n                       (add1 cur_run))\n                 (loop (rest test_str)\n                       max_run\n                       0)))])))\n",
    "  (let loop ([str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? str) max_run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else\n           (loop (rest str)\n                 max_run\n                 0)])))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (cond [(= i (string-length test_str)) max]\n          [(char-upper-case? (string-ref test_str i))\n           (loop (+ i 1) (max cur (add1 cur)) 0)]\n          [else (loop (+ i 1) max (add1 cur))])))\n",
    "  (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (if (> cur_run max_run)\n                 cur_run\n                 max_run)\n             (+ cur_run 1))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (if (&gt;= i (string-length test_str))\n        max\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (+ j 1) (if (&gt; j max) j max))\n            (loop (+ i 1) 0 max)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (loop (substring test_str 1)\n                  (if (> cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ cur_run 1))\n            (loop (substring test_str 1)\n                  max_run\n                  0)))))\n",
    "  (define (iter str max_run cur_run)\n    (cond\n      [(empty? str) max_run]\n      [(char-upper-case? (first str)) (iter (rest str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (iter (rest str) max_run 0)]))\n  (iter test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (max max_run (+ 1 cur_run))\n                 (+ 1 cur_run)))\n          (else (loop (cdr str)\n                      max_run\n                      0)))))\n",
    "  (let loop ([test_str test_str]\n             [current_run 0]\n             [max_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (add1 current_run)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run))]\n          [else (loop (rest test_str) 0 max_run)])))\n</code>\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (if (= i (string-length test_str))\n        max\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max (add1 cur)) (add1 cur))\n            (loop (+ i 1) max 0)))))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (max_run_uppercase_helper (substring test_str 1) (max max_run (add1 cur_run)) (add1 cur_run))\n            (max_run_uppercase_helper (substring test_str 1) max_run 0))))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (run 0))\n    (cond ((null? test_str) max_run)\n          ((char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (max max_run (add1 run))\n                 (add1 run)))\n          (else\n           (loop (cdr test_str)\n                 max_run\n                 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (define (is_uppercase? c)\n    (and (char-alphabetic? c)\n         (char-upper-case? c)))\n\n  (define (max_run_uppercase_iter test_str max_run current_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_uppercase? (first test_str))\n       (max_run_uppercase_iter (rest test_str)\n                               (max max_run (add1 current_run))\n                               (add1 current_run))]\n      [else\n       (max_run_uppercase_iter (rest test_str)\n                               max_run\n                               0)]))\n\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([str test_str] [max-run 0] [cur-run 0])\n    (cond [(empty? str) max-run]\n          [(char-upper-case? (first str))\n           (loop (rest str) (max max-run (+ 1 cur-run)) (+ 1 cur-run))]\n          [else (loop (rest str) max-run 0)])))\n",
    "  (let loop ([i 0] [max-run 0] [cur-run 0])\n    (cond\n      [(= i (string-length test_str)) max-run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (max max-run (+ cur-run 1)) (+ cur-run 1))]\n      [else (loop (+ i 1) max-run 0)])))\n",
    "  (define (helper test_str max_run)\n    (if (string-empty? test_str)\n        max_run\n        (let ([first_char (string-ref test_str 0)]\n              [rest_str (substring test_str 1)])\n          (if (char-upper-case? first_char)\n              (helper rest_str (+ 1 max_run))\n              (helper rest_str 0)))))\n  (helper test_str 0))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? test_str) max_run)\n          ((char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (if (> cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ 1 cur_run)))\n          (else (loop (cdr test_str)\n                      max_run\n                      0)))))\n",
    "  (let loop ([i 0] [j 0] [max_run 0])\n    (cond\n      [(= i (string-length test_str)) max_run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (max max_run j))]\n      [else (loop (+ i 1) 0 (max max_run j))])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ cur_run 1))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_count 0]\n             [curr_count 0])\n    (cond [(empty? test_str) max_count]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; curr_count max_count)\n                     curr_count\n                     max_count)\n                 (+ 1 curr_count))]\n          [else (loop (rest test_str)\n                      max_count\n                      0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (current_run 0))\n    (if (string-empty? str)\n        max_run\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1)\n                  (max max_run (add1 current_run))\n                  (add1 current_run))\n            (loop (substring str 1)\n                  max_run\n                  0)))))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (if (&gt; (+ cur_run 1) max_run)\n                                     (+ cur_run 1)\n                                     max_run)\n                                 (+ cur_run 1))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (> cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (add1 cur_run))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (define (max_run_uppercase_helper test_str max_run curr_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (+ 1 curr_run)) (+ 1 curr_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ((str test_str) (max_run 0) (cur_run 0))\n    (if (null? str)\n        max_run\n        (let ((c (car str)))\n          (if (char-upper-case? c)\n              (loop (cdr str) (max max_run (add1 cur_run)) (add1 cur_run))\n              (loop (cdr str) max_run 0))))))\n",
    "  (let loop ([str test_str] [count 0] [max 0])\n    (cond [(empty? str) max]\n          [(char-upper-case? (first str)) (loop (rest str) (+ count 1) (if (&gt; count max) count max))]\n          [else (loop (rest str) 0 (if (&gt; count max) count max))])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 current_run))\n                 (add1 current_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (&lt; i (string-length test_str))\n        (let ([ch (string-ref test_str i)])\n          (if (char-upper-case? ch)\n              (loop (+ i 1)\n                    (if (&gt; cur_run max_run) cur_run max_run)\n                    (+ cur_run 1))\n              (loop (+ i 1) max_run 0)))\n        max_run)))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ((i 0) (max_run 0) (run 0))\n    (if (= i (string-length test_str))\n        max_run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max_run (+ run 1)) (+ run 1))\n            (loop (+ i 1) max_run 0)))))\n",
    "  (cond\n    [(empty? test_str) 0]\n    [(char-upper-case? (first test_str))\n     (max (max_run_uppercase (rest test_str))\n          (+ 1 (max_run_uppercase (rest test_str))))]\n    [else (max_run_uppercase (rest test_str))]))\n",
    "  (let loop ([test_str test_str]\n             [max_count 0]\n             [count 0])\n    (cond [(empty? test_str) max_count]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_count (add1 count))\n                 (add1 count))]\n          [else (loop (rest test_str)\n                      max_count\n                      0)])))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str)\n                               (max max_run (add1 cur_run))\n                               (add1 cur_run))]\n      [else (max_run_uppercase_iter (rest test_str)\n                                    max_run\n                                    0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (current_run 0)\n             (max_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str) (+ current_run 1) (max current_run max_run)))\n          (else (loop (cdr str) 0 (max current_run max_run))))))\n",
    "  (let loop ([i 0] [max-run 0] [run 0])\n    (cond\n      [(= i (string-length test_str)) max-run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (max max-run (+ run 1)) (+ run 1))]\n      [else (loop (+ i 1) max-run 0)])))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (+ cur_run 1))\n        (set! cur_run 0))\n      (when (&gt; cur_run max_run)\n        (set! max_run cur_run)))\n    max_run))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (&gt;= i (string-length test_str))\n        max_run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))\n            (loop (+ i 1) max_run 0)))))\n",
    "  (define (count_run_uppercase test_str count)\n    (if (empty? test_str)\n        count\n        (if (char-upper-case? (first test_str))\n            (count_run_uppercase (rest test_str) (+ count 1))\n            count)))\n  (define (max_run_uppercase_helper test_str max_count)\n    (if (empty? test_str)\n        max_count\n        (let ((count (count_run_uppercase test_str 0)))\n          (if (&gt; count max_count)\n              (max_run_uppercase_helper (rest test_str) count)\n              (max_run_uppercase_helper (rest test_str) max_count)))))\n  (max_run_uppercase_helper test_str 0))\n",
    "  (let loop ((i 0) (j 0) (max 0))\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (if (&gt; j max) j max))]\n      [else (loop (+ i 1) 0 max)])))\n",
    "  (define (max_run_uppercase_helper test_str curr_max curr_run)\n    (cond\n      [(empty? test_str) curr_max]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max curr_max (add1 curr_run))\n                                 (add1 curr_run))]\n      [else (max_run_uppercase_helper (rest test_str)\n                                      curr_max\n                                      0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str)\n                      max_run\n                      0)))))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (max_run_uppercase_iter (substring test_str 1)\n                                    (if (&gt; cur_run max_run) cur_run max_run)\n                                    (+ cur_run 1))\n            (max_run_uppercase_iter (substring test_str 1)\n                                    max_run\n                                    0))))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (null? test_str)\n        max_run\n        (if (char-upper-case? (car test_str))\n            (loop (cdr test_str)\n                  (if (&gt; cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ cur_run 1))\n            (loop (cdr test_str)\n                  max_run\n                  0)))))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (+ cur_run 1))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (let loop ((str test_str)\n             (max-run 0)\n             (cur-run 0))\n    (cond ((null? str) max-run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur-run max-run) cur-run max-run)\n                 (+ cur-run 1)))\n          (else (loop (cdr str) max-run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [else\n           (let ([current_char (first test_str)])\n             (cond [(char-upper-case? current_char)\n                    (loop (rest test_str)\n                          (max max_run (add1 current_run))\n                          (add1 current_run))]\n                   [else\n                    (loop (rest test_str)\n                          max_run\n                          0)]))])))\n",
    "  (let loop ([str test_str] [max 0] [cur 0])\n    (cond [(empty? str) max]\n          [(char-upper-case? (first str))\n           (loop (rest str) (max cur max) (+ cur 1))]\n          [else (loop (rest str) max 0)])))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([ch (in-string test_str)])\n      (if (char-upper-case? ch)\n          (set! cur_run (add1 cur_run))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (let loop ((str test_str) (max_run 0) (cur_run 0))\n    (cond\n      [(empty? str) max_run]\n      [(char-upper-case? (first str))\n       (loop (rest str)\n             (if (&gt; cur_run max_run) cur_run max_run)\n             (+ cur_run 1))]\n      [else\n       (loop (rest str)\n             max_run\n             0)])))\n",
    "  (let ([max-run 0]\n        [cur-run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur-run (add1 cur-run))\n          (begin\n            (when (&gt; cur-run max-run)\n              (set! max-run cur-run))\n            (set! cur-run 0))))\n    (when (&gt; cur-run max-run)\n      (set! max-run cur-run))\n    max-run))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (loop (substring test_str 1)\n                  (if (> cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ cur_run 1))\n            (loop (substring test_str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 run))\n                 (add1 run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (local [(define (max-run-helper test-str max-run)\n            (cond [(empty? test-str) max-run]\n                  [(char-upper-case? (first test-str))\n                   (max-run-helper (rest test-str) (+ max-run 1))]\n                  [else (max-run-helper (rest test-str) 0)]))]\n    (max-run-helper test-str 0)))\n",
    "  (let ([len (string-length test_str)])\n    (let loop ([i 0] [max_run 0] [cur_run 0])\n      (cond\n        [(= i len) max_run]\n        [(char-upper-case? (string-ref test_str i))\n         (loop (+ i 1) (if (&gt; cur_run max_run) cur_run max_run) (+ cur_run 1))]\n        [else (loop (+ i 1) max_run 0)]))))\n</code>\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (+ 1 cur_run))\n                                 (+ 1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str)\n                                      max_run\n                                      0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (if (string-empty? str)\n        max_run\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1)\n                  (if (&gt; cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ cur_run 1))\n            (loop (substring str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ([test_str (string->list test_str)]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (max max_run (add1 current_run))\n                 (add1 current_run))]\n          [else (loop (cdr test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (cond [(= i (string-length test_str)) max]\n          [(char-upper-case? (string-ref test_str i))\n           (loop (+ i 1) (if (&gt; cur max) cur max) (+ cur 1))]\n          [else (loop (+ i 1) max 0)])))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (curr_run 0))\n    (cond ((null? test_str) max_run)\n          ((char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (if (&gt; curr_run max_run)\n                     curr_run\n                     max_run)\n                 (+ curr_run 1)))\n          (else (loop (cdr test_str)\n                      max_run\n                      0)))))\n",
    "  (let loop ([str test_str]\n             [max-run 0]\n             [cur-run 0])\n    (cond\n      [(empty? str) max-run]\n      [(char-upper-case? (first str))\n       (loop (rest str)\n             (max max-run (add1 cur-run))\n             (add1 cur-run))]\n      [else\n       (loop (rest str)\n             max-run\n             0)])))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (if (> j max) j max))]\n      [else (loop (+ i 1) 0 (if (> j max) j max))])))\n",
    "  (let loop ([str test_str] [max-run 0] [cur-run 0])\n    (cond\n      [(empty? str) max-run]\n      [(char-upper-case? (first str))\n       (loop (rest str)\n             (if (&gt; cur-run max-run) cur-run max-run)\n             (+ cur-run 1))]\n      [else\n       (loop (rest str) max-run 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (add1 cur_run))\n                                 (add1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str)\n                               (max max_run (add1 cur_run))\n                               (add1 cur_run))]\n      [else (max_run_uppercase_iter (rest test_str) max_run 0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (+ cur_run 1))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (define (max_run_helper test_str max_run current_run)\n    (if (empty? test_str)\n        max_run\n        (if (char-upper-case? (first test_str))\n            (max_run_helper (rest test_str) (max max_run (add1 current_run)) (add1 current_run))\n            (max_run_helper (rest test_str) max_run 0))))\n  (max_run_helper test_str 0 0))\n",
    "  (define (iter str count max)\n    (cond\n      [(empty? str) max]\n      [(char-upper-case? (first str)) (iter (rest str) (+ count 1) (max count max))]\n      [else (iter (rest str) 0 (max count max))]))\n  (iter test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (max max_run (inc cur_run))\n                 (inc cur_run)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([i 0] [max_run 0] [run 0])\n    (cond [(= i (string-length test_str)) max_run]\n          [(char-upper-case? (string-ref test_str i))\n           (loop (+ i 1) (max max_run (+ run 1)) (+ run 1))]\n          [else (loop (+ i 1) max_run 0)])))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (cond\n      [(= i (string-length test_str)) max_run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1)\n             (if (&gt; cur_run max_run) cur_run max_run)\n             (+ cur_run 1))]\n      [else\n       (loop (+ i 1)\n             max_run\n             0)])))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str]\n               [max_run 0]\n               [cur_run 0])\n      (cond\n        [(empty? test_str) max_run]\n        [(char-upper-case? (car test_str))\n         (loop (cdr test_str)\n               (max max_run (inc cur_run))\n               (inc cur_run))]\n        [else\n         (loop (cdr test_str)\n               max_run\n               0)]))))\n",
    "  (let ([max_run 0]\n        [current_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! current_run (add1 current_run))\n        (set! current_run 0))\n      (when (&gt; current_run max_run)\n        (set! max_run current_run)))\n    max_run))\n</code>\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (if (string-empty? test_str)\n        max_run\n        (let ([cur_char (string-ref test_str 0)])\n          (if (char-upper-case? cur_char)\n              (max_run_uppercase_helper (substring test_str 1) (max max_run (add1 cur_run)) (add1 cur_run))\n              (max_run_uppercase_helper (substring test_str 1) max_run 0)))))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (if (> current_run max_run)\n                 current_run\n                 max_run)\n             (+ current_run 1))]\n      [else (loop (rest test_str)\n                  max_run\n                  0)])))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (+ cur_run 1))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? test_str) max_run)\n          ((char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ 1 cur_run)))\n          (else (loop (cdr test_str) max_run 0)))))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (add1 cur_run))\n        (set! cur_run 0))\n      (when (&gt; cur_run max_run)\n        (set! max_run cur_run)))\n    max_run))\n",
    "  (define (max_run_uppercase_helper test_str max_run current_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (add1 current_run))\n                                 (add1 current_run))]\n      [else (max_run_uppercase_helper (rest test_str)\n                                      max_run\n                                      0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 current_run))\n             (add1 current_run))]\n      [else (loop (rest test_str)\n                  max_run\n                  0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (define (max_run_uppercase_iter test_str acc)\n    (cond\n      [(empty? test_str) acc]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str) (add1 acc))]\n      [else (max_run_uppercase_iter (rest test_str) 0)]))\n  (max_run_uppercase_iter test_str 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [else\n           (let ([c (first test_str)])\n             (cond [(char-upper-case? c)\n                    (loop (rest test_str)\n                          (max max_run (add1 current_run))\n                          (add1 current_run))]\n                   [else\n                    (loop (rest test_str)\n                          max_run\n                          0)]))])))\n",
    "  (let loop ([i 0] [max-run 0] [current-run 0])\n    (if (= i (string-length test_str))\n        max-run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max-run (+ current-run 1)) (+ current-run 1))\n            (loop (+ i 1) max-run 0)))))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n      (cond [(empty? test_str) max_run]\n            [(char-upper-case? (car test_str))\n             (loop (cdr test_str)\n                   (if (> cur_run max_run) cur_run max_run)\n                   (+ cur_run 1))]\n            [else (loop (cdr test_str) max_run 0)]))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (current_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1)))\n          (else\n           (loop (cdr str)\n                 max_run\n                 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upcase? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n</code>\n",
    "  (define (max_run_uppercase_helper test_str acc)\n    (cond\n      [(empty? test_str) acc]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (+ acc 1))]\n      [else (max_run_uppercase_helper (rest test_str) 0)]))\n  (max_run_uppercase_helper test_str 0))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 cur_run))\n             (add1 cur_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 current_run))\n                 (add1 current_run))]\n          [else\n           (loop (rest test_str) max_run 0)])))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_uppercase_iter (rest test_str) max_run 0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 current_run))\n                 (add1 current_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ 1 cur_run))\n                 (+ 1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (if (&gt; cur_run max_run) cur_run max_run)\n             (+ cur_run 1))]\n      [else\n       (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [current_run 0]\n             [max_run 0])\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (loop (substring test_str 1)\n                  (+ current_run 1)\n                  (if (&gt; current_run max_run)\n                      current_run\n                      max_run))\n            (loop (substring test_str 1)\n                  0\n                  max_run)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [curr_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ 1 curr_run))\n                 (+ 1 curr_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ((i 0) (max_run 0) (cur_run 0))\n    (if (&gt;= i (string-length test_str))\n        max_run\n        (let ((cur_char (string-ref test_str i)))\n          (if (char-upper-case? cur_char)\n              (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n              (loop (+ i 1) max_run 0))))))\n",
    "  (let loop ([test_str test_str] [max_run 0] [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 current_run))\n                 (add1 current_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (define (is_uppercase? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_uppercase? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (add1 cur_run))\n                                 (add1 cur_run))]\n      [else\n       (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (if (&lt; i (string-length test_str))\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max (add1 cur)) (add1 cur))\n            (loop (+ i 1) max 0))\n        max)))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c test_str])\n      (if (char-upper-case? c)\n          (set! cur_run (+ cur_run 1))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (curr_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (max max_run (add1 curr_run))\n                 (add1 curr_run)))\n          (else (loop (cdr str)\n                      max_run\n                      0)))))\n"
  ]
}