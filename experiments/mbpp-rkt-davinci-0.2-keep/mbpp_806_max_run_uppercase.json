{
  "name": "mbpp_806_max_run_uppercase",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find maximum run of uppercase characters in the given string.\n(define (max_run_uppercase test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_run_uppercase))\n    (check-equal? (candidate \"GeMKSForGERksISBESt\") 5)\n    (check-equal? (candidate \"PrECIOusMOVemENTSYT\") 6)\n    (check-equal? (candidate \"GooGLEFluTTER\") 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (max_run_uppercase-helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase-helper (rest test_str) (max max_run (+ cur_run 1)) (+ cur_run 1))]\n      [else (max_run_uppercase-helper (rest test_str) max_run 0)]))\n  (max_run_uppercase-helper test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 current_run))\n             (add1 current_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (current_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; current_run max_run) current_run max_run)\n                 (+ current_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ 1 cur_run))\n                 (+ 1 cur_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (if (string-empty? str)\n        max_run\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1)\n                  (if (&gt; cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ cur_run 1))\n            (loop (substring str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ 1 cur_run)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [curr_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 curr_run))\n                 (add1 curr_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (if (&lt; i (string-length test_str))\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (+ j 1) (if (&gt; j max) j max))\n            (loop (+ i 1) 0 (if (&gt; j max) j max)))\n        max)))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str)\n                               (max max_run (add1 cur_run))\n                               (add1 cur_run))]\n      [else (max_run_uppercase_iter (rest test_str) max_run 0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      (if (> run max_run) run max_run)\n                                      (+ run 1))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      max_run\n                                      0))))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (&lt; i (string-length test_str))\n        (let ([c (string-ref test_str i)])\n          (if (char-upper-case? c)\n              (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n              (loop (+ i 1) max_run 0)))\n        max_run)))\n",
    "  (let loop ([i 0] [j 0] [max-run 0])\n    (cond\n      [(= i (string-length test_str)) max-run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (max max-run j))]\n      [else (loop (+ i 1) 0 (max max-run j))])))\n",
    "  (let loop ((i 0) (max-run 0) (cur-run 0))\n    (if (&lt; i (string-length test_str))\n        (let ((cur-char (string-ref test_str i)))\n          (if (char-upper-case? cur-char)\n              (loop (+ i 1) (max max-run (+ cur-run 1)) (+ cur-run 1))\n              (loop (+ i 1) max-run 0)))\n        max-run)))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str]\n               [max_run 0]\n               [cur_run 0])\n      (cond [(empty? test_str) max_run]\n            [(char-upper-case? (car test_str))\n             (loop (cdr test_str)\n                   (max max_run (add1 cur_run))\n                   (add1 cur_run))]\n            [else (loop (cdr test_str)\n                        max_run\n                        0)]))))\n",
    "  (let loop ([str test_str]\n             [max-run 0]\n             [cur-run 0])\n    (if (empty? str)\n        max-run\n        (if (char-upper-case? (first str))\n            (loop (rest str)\n                  (max max-run (+ cur-run 1))\n                  (+ cur-run 1))\n            (loop (rest str)\n                  max-run\n                  0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n</code>\n",
    "  (let loop ([str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? str) max_run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1))]\n          [else (loop (rest str) max_run 0)])))\n"
  ]
}