{
  "name": "mbpp_88_freq_count",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n(define (freq_count list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate freq_count))\n    (check-equal? (candidate (list 10 10 10 10 20 20 20 20 40 40 50 50 30)) #hash((10 .  4) (20 .  4) (40 .  2) (50 .  2) (30 .  1)))\n    (check-equal? (candidate (list 1 2 3 4 3 2 4 1 3 1 4)) #hash((1 .  3) (2 .  2) (3 .  3) (4 .  3)))\n    (check-equal? (candidate (list 5 6 7 4 9 10 4 5 6 7 9 5)) #hash((10 .  1) (5 .  3) (6 .  2) (7 .  2) (4 .  2) (9 .  2)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (freq_count-iter list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else (freq_count-iter (rest list1) (add-to-dict (first list1) dict))]))\n  (freq_count-iter list1 (make-dict)))\n",
    "  (letrec ([freq (lambda (list1)\n                   (cond [(empty? list1) empty]\n                         [(member (first list1) (rest list1)) (cons (first list1) (freq (rest list1)))]\n                         [else (freq (rest list1))]))]\n           [count (lambda (list1)\n                    (cond [(empty? list1) empty]\n                          [(member (first list1) (rest list1)) (cons (list (first list1) (add1 (count (rest list1)))) (count (rest list1)))]\n                          [else (cons (list (first list1) 1) (count (rest list1)))]))]\n           [result (lambda (list1)\n                     (cond [(empty? list1) empty]\n                           [else (cons (list (first (first list1)) (second (first list1))) (result (rest list1)))]))])\n    (result (count (freq list1)))))\n",
    "  (define (freq_count_helper list1 dict)\n    (if (null? list1)\n        dict\n        (let ([key (car list1)]\n              [val (dict-ref dict key 0)])\n          (freq_count_helper (cdr list1) (dict-set dict key (+ val 1))))))\n  (freq_count_helper list1 (make-dict)))\n",
    "  (letrec ([freq (lambda (list1 dict)\n                   (cond [(empty? list1) dict]\n                         [else (freq (rest list1) (cons (cons (first list1)\n                                                             (add1 (dict-ref dict (first list1) 0)))\n                                                         dict))]))])\n    (freq list1 (make-dict))))\n",
    "  (define (freq_count_iter list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else (freq_count_iter (rest list1) (dict-set dict (first list1) (+ 1 (dict-ref dict (first list1) 0))))]))\n  (freq_count_iter list1 (make-dict)))\n",
    "  (define (freq_count-iter list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else (freq_count-iter (rest list1) (cond\n                                            [(dict-has-key? dict (first list1)) (dict-set dict (first list1) (+ 1 (dict-ref dict (first list1))))]\n                                            [else (dict-set dict (first list1) 1)]))]))\n  (freq_count-iter list1 (make-dict)))\n",
    "  (define (freq_count_iter list1 dict)\n    (if (null? list1)\n        dict\n        (if (dict-has-key? dict (car list1))\n            (freq_count_iter (cdr list1) (dict-set dict (car list1) (+ 1 (dict-ref dict (car list1)))))\n            (freq_count_iter (cdr list1) (dict-set dict (car list1) 1)))))\n  (freq_count_iter list1 (make-dict)))\n",
    "  (let ([freq (make-hash)])\n    (for ([i list1])\n      (hash-update! freq i add1 0))\n    freq))\n",
    "  (define (freq_count_helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [(dict-has-key? dict (first list1))\n       (freq_count_helper (rest list1) (dict-set dict (first list1) (+ 1 (dict-ref dict (first list1)))))]\n      [else (freq_count_helper (rest list1) (dict-set dict (first list1) 1))]))\n  (freq_count_helper list1 (make-dict)))\n",
    "  (define (freq_count_helper list1 dict)\n    (if (null? list1)\n        dict\n        (if (dict-has-key? dict (car list1))\n            (freq_count_helper (cdr list1) (dict-set dict (car list1) (+ 1 (dict-ref dict (car list1)))))\n            (freq_count_helper (cdr list1) (dict-set dict (car list1) 1)))))\n  (freq_count_helper list1 (make-dict)))\n",
    "  (define (freq_count_helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else\n       (define key (car list1))\n       (define value (dict-ref dict key 0))\n       (define new-dict (dict-set dict key (+ 1 value)))\n       (freq_count_helper (cdr list1) new-dict)]))\n  (freq_count_helper list1 (make-dict)))\n",
    "  (define (freq_count_helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else (freq_count_helper (rest list1) (dict-set dict (first list1) (+ 1 (dict-ref dict (first list1) 0))))]))\n  (freq_count_helper list1 (make-dict)))\n",
    "  (letrec ([freq (lambda (list1)\n                   (cond [(empty? list1) empty]\n                         [else (cons (cons (first list1) (count (first list1) list1))\n                                     (freq (remove (first list1) list1)))]))])\n    (freq list1)))\n",
    "  (letrec ([freq (lambda (list1)\n                   (cond [(empty? list1) empty]\n                         [else (cons (cons (first list1) (count (first list1) list1))\n                                     (freq (remove (first list1) list1)))]))])\n    (freq list1)))\n",
    "  (define (helper list1 dict)\n    (cond [(empty? list1) dict]\n          [else (define (add-or-increment key dict)\n                  (cond [(assoc key dict) (cons (list key (+ 1 (cadr (assoc key dict)))) (remove (assoc key dict) dict))]\n                        [else (cons (list key 1) dict)]))\n               (helper (rest list1) (add-or-increment (first list1) dict))]))\n  (helper list1 '()))\n",
    "  (let ([freq (make-hash)])\n    (for ([i list1])\n      (hash-update! freq i add1 0))\n    freq))\n",
    "  (let ([freq (make-hash)])\n    (for ([item list1])\n      (hash-update! freq item add1 0))\n    freq))\n",
    "  (define (freq_count_helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else\n       (define key (first list1))\n       (define value (dict-ref dict key 0))\n       (define new_dict (dict-set dict key (+ 1 value)))\n       (freq_count_helper (rest list1) new_dict)]))\n  (freq_count_helper list1 (make-dict)))\n",
    "  (let ([counts (make-hash)])\n    (for ([elem list1])\n      (hash-update counts elem add1 0))\n    counts))\n",
    "  (define (freq_count_helper list1 dict)\n    (cond\n      [(empty? list1) dict]\n      [else\n       (define key (car list1))\n       (define value (dict-ref dict key 0))\n       (define new-dict (dict-set dict key (+ 1 value)))\n       (freq_count_helper (cdr list1) new-dict)]))\n  (freq_count_helper list1 (make-dict)))\n"
  ]
}