{
  "name": "mbpp_733_find_first_occurrence",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the index of the first occurrence of a given number in a sorted array.\n(define (find_first_occurrence A x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_first_occurrence))\n    (check-equal? (candidate (list 2 5 5 5 6 6 8 9 9 9) 5) 1)\n    (check-equal? (candidate (list 2 3 5 5 6 6 8 9 9 9) 5) 2)\n    (check-equal? (candidate (list 2 4 1 5 6 6 8 9 9 9) 6) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ((lo 0) (hi (sub1 (vector-length A))))\n    (if (< lo hi)\n        (let ((mid (quotient (+ lo hi) 2)))\n          (cond\n            [(= (vector-ref A mid) x)\n             (if (= (vector-ref A (sub1 mid)) x)\n                 (loop lo mid)\n                 mid)]\n            [(< (vector-ref A mid) x)\n             (loop (add1 mid) hi)]\n            [else\n             (loop lo (sub1 mid))]))\n        (if (= (vector-ref A lo) x)\n            lo\n            -1))))\n",
    "  (define (find_first_occurrence_iter low high)\n    (if (< low high)\n        (let ([mid (quotient (+ low high) 2)])\n          (if (= (vector-ref A mid) x)\n              (if (or (= mid 0)\n                      (not (= (vector-ref A (- mid 1)) x)))\n                  mid\n                  (find_first_occurrence_iter low (- mid 1)))\n              (if (< (vector-ref A mid) x)\n                  (find_first_occurrence_iter (+ mid 1) high)\n                  (find_first_occurrence_iter low mid))))\n        -1))\n  (find_first_occurrence_iter 0 (vector-length A)))\n",
    "  (define (find_first_occurrence_iter A x low high)\n    (cond\n      [(= low high)\n       (if (= (vector-ref A low) x) low -1)]\n      [else\n       (let* ([mid (quotient (+ low high) 2)]\n              [mid-value (vector-ref A mid)])\n         (cond\n           [(= mid-value x)\n            (find_first_occurrence_iter A x low mid)]\n           [(< mid-value x)\n            (find_first_occurrence_iter A x mid high)]\n           [else\n            (find_first_occurrence_iter A x low (- mid 1))]))]))\n  (find_first_occurrence_iter A x 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_iter low high)\n    (cond [(= low high) (if (= (vector-ref A low) x) low #f)]\n          [(< (vector-ref A low) x) (find_first_occurrence_iter (+ low 1) high)]\n          [else (find_first_occurrence_iter low (- high 1))]))\n  (find_first_occurrence_iter 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x low high)\n    (if (&gt; low high)\n        -1\n        (let ([mid (quotient (+ low high) 2)])\n          (cond\n            [(= (vector-ref A mid) x)\n             (if (= mid 0)\n                 mid\n                 (find_first_occurrence_iter A x low (- mid 1)))]\n            [(&lt; (vector-ref A mid) x)\n             (find_first_occurrence_iter A x (+ mid 1) high)]\n            [else\n             (find_first_occurrence_iter A x low (- mid 1))]))))\n  (find_first_occurrence_iter A x 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x low high)\n    (if (= low high)\n        (-1)\n        (let* ([mid (quotient (+ low high) 2)]\n               [mid-val (vector-ref A mid)])\n          (cond\n            [(< x mid-val) (find_first_occurrence_iter A x low mid)]\n            [(> x mid-val) (find_first_occurrence_iter A x (+ mid 1) high)]\n            [else mid]))))\n  (find_first_occurrence_iter A x 0 (vector-length A)))\n",
    "  (define (find_first_occurrence_iter low high)\n    (if (> low high)\n        -1\n        (let ([mid (quotient (+ low high) 2)])\n          (cond\n           [(= (vector-ref A mid) x)\n            (if (and (&gt; mid 0) (= (vector-ref A (- mid 1)) x))\n                (find_first_occurrence_iter low (- mid 1))\n                mid)]\n           [(&lt; (vector-ref A mid) x)\n            (find_first_occurrence_iter (+ mid 1) high)]\n           [else\n            (find_first_occurrence_iter low (- mid 1))]))))\n  (find_first_occurrence_iter 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_helper A x low high)\n    (if (> low high)\n        -1\n        (let* ([mid (quotient (+ low high) 2)]\n               [mid-val (vector-ref A mid)])\n          (cond\n            [(= mid-val x)\n             (if (and (> mid 0)\n                      (= (vector-ref A (- mid 1)) x))\n                 (find_first_occurrence_helper A x low (- mid 1))\n                 mid)]\n            [(< mid-val x)\n             (find_first_occurrence_helper A x mid high)]\n            [else\n             (find_first_occurrence_helper A x low (- mid 1))]))))\n  (find_first_occurrence_helper A x 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x i j)\n    (cond [(= i j) #f]\n          [(= (vector-ref A i) x) i]\n          [else (find_first_occurrence_iter A x (+ i 1) j)]))\n  (find_first_occurrence_iter A x 0 (vector-length A)))\n",
    "  (define (find_first_occurrence_helper A x lo hi)\n    (if (>= lo hi)\n        -1\n        (let* ([mid (quotient (+ lo hi) 2)]\n               [mid-val (vector-ref A mid)])\n          (cond\n            [(= mid-val x)\n             (if (and (> mid 0) (= (vector-ref A (- mid 1)) x))\n                 (find_first_occurrence_helper A x lo mid)\n                 mid)]\n            [(< mid-val x)\n             (find_first_occurrence_helper A x (+ mid 1) hi)]\n            [else\n             (find_first_occurrence_helper A x lo mid)]))))\n  (find_first_occurrence_helper A x 0 (vector-length A)))\n",
    "  (define (find_first_occurrence_iter low high)\n    (if (> low high)\n        -1\n        (let ([mid (quotient (+ low high) 2)])\n          (cond\n            [(= (vector-ref A mid) x)\n             (if (= mid 0)\n                 mid\n                 (find_first_occurrence_iter low (- mid 1)))]\n            [(< (vector-ref A mid) x)\n             (find_first_occurrence_iter (+ mid 1) high)]\n            [else\n             (find_first_occurrence_iter low (- mid 1))]))))\n  (find_first_occurrence_iter 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x low high)\n    (if (&lt; low high)\n        (let ([mid (quotient (+ low high) 2)])\n          (if (= x (vector-ref A mid))\n              (if (or (= mid 0)\n                      (not (= x (vector-ref A (- mid 1)))))\n                  mid\n                  (find_first_occurrence_iter A x low mid))\n              (if (&lt; x (vector-ref A mid))\n                  (find_first_occurrence_iter A x low mid)\n                  (find_first_occurrence_iter A x (+ mid 1) high))))\n        (if (= x (vector-ref A low))\n            low\n            -1)))\n  (find_first_occurrence_iter A x 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x i)\n    (if (= i (length A))\n        -1\n        (if (= (vector-ref A i) x)\n            i\n            (find_first_occurrence_iter A x (+ i 1)))))\n  (find_first_occurrence_iter A x 0))\n",
    "  (define (find_first_occurrence_iter A x low high)\n    (if (<= low high)\n        (let ([mid (quotient (+ low high) 2)])\n          (cond\n            [(= (vector-ref A mid) x)\n             (if (= mid 0)\n                 mid\n                 (find_first_occurrence_iter A x low (- mid 1)))]\n            [(< (vector-ref A mid) x)\n             (find_first_occurrence_iter A x (+ mid 1) high)]\n            [else\n             (find_first_occurrence_iter A x low (- mid 1))]))\n        -1))\n  (find_first_occurrence_iter A x 0 (- (vector-length A) 1)))\n",
    "  (let loop ((lo 0) (hi (sub1 (vector-length A))))\n    (if (&gt; lo hi)\n        #f\n        (let ((mid (quotient (+ lo hi) 2)))\n          (cond\n            [(= (vector-ref A mid) x)\n             (if (= mid 0)\n                 mid\n                 (loop lo (sub1 mid)))]\n            [(&lt; (vector-ref A mid) x)\n             (loop (add1 mid) hi)]\n            [else\n             (loop lo (sub1 mid))])))))\n",
    "  (define (find_first_occurrence_iter A x i j)\n    (cond\n      [(= i j) (if (= (vector-ref A i) x) i -1)]\n      [(= (vector-ref A i) x) (find_first_occurrence_iter A x i (- j 1))]\n      [else (find_first_occurrence_iter A x (+ i 1) j)]))\n  (find_first_occurrence_iter A x 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x start end)\n    (if (&lt;= start end)\n        (let ([mid (quotient (+ start end) 2)])\n          (if (= x (vector-ref A mid))\n              (if (or (= mid 0)\n                      (not (= x (vector-ref A (- mid 1)))))\n                  mid\n                  (find_first_occurrence_iter A x start (- mid 1)))\n              (if (&lt; x (vector-ref A mid))\n                  (find_first_occurrence_iter A x start (- mid 1))\n                  (find_first_occurrence_iter A x (+ mid 1) end))))\n        -1))\n  (find_first_occurrence_iter A x 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_iter low high)\n    (if (&gt; low high)\n        #f\n        (let ([mid (quotient (+ low high) 2)])\n          (cond\n            [(= (vector-ref A mid) x)\n             (if (= mid 0)\n                 mid\n                 (find_first_occurrence_iter low (- mid 1)))]\n            [(&lt; (vector-ref A mid) x)\n             (find_first_occurrence_iter (+ mid 1) high)]\n            [(&gt; (vector-ref A mid) x)\n             (find_first_occurrence_iter low (- mid 1))]))))\n  (find_first_occurrence_iter 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x low high)\n    (if (> low high)\n        -1\n        (let ([mid (quotient (+ low high) 2)])\n          (cond\n            [(= (vector-ref A mid) x)\n             (if (and (> mid 0) (= (vector-ref A (- mid 1)) x))\n                 (find_first_occurrence_iter A x low (- mid 1))\n                 mid)]\n            [(< (vector-ref A mid) x)\n             (find_first_occurrence_iter A x (+ mid 1) high)]\n            [else\n             (find_first_occurrence_iter A x low (- mid 1))]))))\n  (find_first_occurrence_iter A x 0 (- (vector-length A) 1)))\n",
    "  (define (find_first_occurrence_helper A x i j)\n    (cond\n      [(= i j) (-1)]\n      [(= (vector-ref A i) x) i]\n      [(> (vector-ref A i) x) (-1)]\n      [else (find_first_occurrence_helper A x (+ i 1) j)]))\n  (find_first_occurrence_helper A x 0 (vector-length A)))\n"
  ]
}