{
  "name": "mbpp_759_is_decimal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (define (is_decimal_helper num)\n    (if (string-empty? num)\n        #t\n        (if (char-numeric? (string-ref num 0))\n            (is_decimal_helper (substring num 1))\n            #f)))\n  (if (string-empty? num)\n      #f\n      (if (char-numeric? (string-ref num 0))\n          (if (string-empty? (substring num 1))\n              #t\n              (if (string-empty? (substring num 2))\n                  (if (char-numeric? (string-ref num 1))\n                      #t\n                      #f)\n                  #f))\n          #f)))\n</code>\nI'm not sure why this doesn't work. Any help would be appreciated.\n\n\nA:\n\nYou can use <code>regexp-match</code> to check if a string matches a regular expression.\n<code>(regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" \"123.45\")\n=&gt; #f",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (cond\n    [(string-contains num #\\.)\n     (let ([parts (string-split num #\\.)])\n       (and (= (length parts) 2)\n            (andmap (\u03bb (x) (char-numeric? x)) (string-&gt;list (first parts)))\n            (andmap (\u03bb (x) (char-numeric? x)) (string-&gt;list (second parts)))\n            (= (length (first parts)) (length (string-&gt;list (first parts))))\n            (= (length (second parts)) 2)))]\n    [else #f]))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (let ([num (string-&gt;number num)])\n    (and (number? num)\n         (not (negative? num))\n         (not (exact? num)))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{3}$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]*\\\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]*\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^\\d+\\.\\d{2}$\" num))\n",
    "  (and (number? num)\n       (not (integer? num))\n       (not (negative? num))\n       (not (zero? num))\n       (not (positive? num))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string-&gt;number num)\n       (let ([num-parts (string-split num \".\")])\n         (and (= (length num-parts) 2)\n              (&lt;= (length (cadr num-parts)) 2)))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (if (string-contains num #\\.)\n      (let* ([decimal-index (string-index num #\\.)]\n             [decimal-length (sub1 (string-length num))]\n             [decimal-precision (sub1 (- decimal-length decimal-index))])\n        (if (&gt;= decimal-precision 2)\n            #t\n            #f))\n      #f))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num)\n       (not (string=? num \".\"))))\n",
    "  (and (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (string=? (substring num (string-index num #\\.)) \".\"))))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string-&gt;number num)\n       (equal? (string-length (string-after num #\\.)) 2)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (let ((len (string-length num)))\n    (and (string-contains num #\\.)\n         (string-contains num #\\e)\n         (string-contains num #\\E)\n         (string-contains num #\\+)\n         (string-contains num #\\-)\n         (string-contains num #\\0)\n         (string-contains num #\\1)\n         (string-contains num #\\2)\n         (string-contains num #\\3)\n         (string-contains num #\\4)\n         (string-contains num #\\5)\n         (string-contains num #\\6)\n         (string-contains num #\\7)\n         (string-contains num #\\8)\n         (string-contains num #\\9)\n         (string-contains num #\\.)\n         (string-contains num #\\e)\n         (string-contains num #\\E)\n         (string-contains num #\\+)\n         (string-contains num #\\-)\n         (string-contains num #\\0)\n         (string-contains num #\\1)\n         (string-contains num #\\2)\n         (string-contains num #\\3)\n         (string-contains num #\\4)\n         (string-contains num #\\5)\n         (string-contains num #\\6)\n         (string-contains num #\\7)\n         (string-contains num #\\8)\n         (string-contains num #\\9)\n         (string-contains num #\\.)\n         (string-contains num #\\e)\n         (string-contains num #\\E)\n         (string-contains num #\\+)\n         (string-contains num #\\-)\n         (string-contains num #\\0)\n         (string-contains num #\\1)\n         (string-contains num #\\2)\n         (string-contains num #\\3)\n         (string-contains num #\\4)\n         (string-contains num #\\5)\n         (string-contains num #\\6)\n         (",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (let ([decimal-regexp #rx\"^[0-9]+\\.[0-9]{2}$\"])\n    (regexp-match? decimal-regexp num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (number? num)\n       (not (integer? num))\n       (not (negative? num))\n       (not (zero? num))))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (define (is_decimal_helper num)\n    (if (string-empty? num)\n        #t\n        (if (char-numeric? (string-ref num 0))\n            (is_decimal_helper (substring num 1))\n            #f)))\n  (if (string-empty? num)\n      #f\n      (if (char-numeric? (string-ref num 0))\n          (if (string-empty? (substring num 1))\n              #t\n              (if (string-empty? (substring num 2))\n                  (if (char-numeric? (string-ref num 1))\n                      #t\n                      #f)\n                  #f))\n          #f)))\n</code>\nThe first part is to check whether the string contains only numbers. The second part is to check whether the string contains only one or two numbers.\nI think I can simplify the second part, but I don't know how.\n\n\nA:\n\nI think you can simplify the second part by using <code>string-length</code> and <code>string-ref</code> to check the length of the string and the characters at the last two positions.\n<code>(define (is_decimal num)\n  (define (is_decimal_helper num)\n    (if (string-empty? num)\n        #t\n        (if (char-numeric? (string-ref num 0))\n            (is_decimal_helper (substring num 1))\n            #f)))\n  (if (string-empty? num)\n      #f\n      (if (char-numeric? (string-ref num 0))\n          (if (= (string-length num) 1)\n              #t\n              (if (= (string-length num) 2)\n                  (if (char-numeric? (string-ref num 1))\n                      #t\n                      #f)\n                  #f))\n          #f)))\n</code>\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (number? num)\n       (not (integer? num))\n       (not (negative? num))\n       (not (zero? num))\n       (not (positive? num))))\n",
    "  (let ([decimal-regexp #rx\"(^[0-9]*\\\\.[0-9]{2}$)\"])\n    (regexp-match? decimal-regexp num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (number? num)\n       (not (integer? num))\n       (not (exact? num))\n       (not (negative? num))\n       (not (zero? num))\n       (not (positive? num))))\n",
    "  (and (number? num)\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (let ([dot-pos (string-index num #\\.)])\n    (and (not (null? dot-pos))\n         (let ([after-dot (substring num (+ dot-pos 1))])\n           (and (not (null? after-dot))\n                (not (null? (string-index after-dot #\\.)))\n                (string=? (substring after-dot 1) \"\"))))))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num)\n       (not (string=? \".\" num))))\n",
    "  (and (string-&gt;number num)\n       (string-&gt;number (substring num (string-index #\".\" num) (+ (string-index #\".\" num) 3)))))\n",
    "  (and (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match? #rx\"^[0-9]+(\\.[0-9]{3,})?$\" num))))\n",
    "  (and (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (string=? \".\" (substring num (string-length num) (- (string-length num) 1))))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (let ([decimal-regexp #rx\"^[0-9]+(\\.[0-9]{1,2})?$\"])\n    (regexp-match? decimal-regexp num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (let ([num-str (number->string num)])\n    (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num-str)\n         (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3,}$\" num-str)))))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string-&gt;number num)\n       (string-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (string=? (substring num (string-index num #\\.)) \".\"))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (not (empty? num))\n       (not (regexp-match #rx\"^[0-9]*$\" num))\n       (not (regexp-match #rx\"^[0-9]*\\\\.[0-9]*$\" num))\n       (regexp-match #rx\"^[0-9]*\\\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (define (is_decimal_helper num)\n    (if (empty? num)\n        #t\n        (if (or (char=? (first num) #\\.)\n                (char=? (first num) #\\0)\n                (char=? (first num) #\\1)\n                (char=? (first num) #\\2)\n                (char=? (first num) #\\3)\n                (char=? (first num) #\\4)\n                (char=? (first num) #\\5)\n                (char=? (first num) #\\6)\n                (char=? (first num) #\\7)\n                (char=? (first num) #\\8)\n                (char=? (first num) #\\9))\n            (is_decimal_helper (rest num))\n            #f)))\n  (if (is_decimal_helper num)\n      (if (char=? (first (reverse num)) #\\.)\n          #f\n          #t)\n      #f))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]*\\.[0-9]{2}$\" num)))\n",
    "  (let ([len (string-length num)])\n    (and (not (string-contains num #\\.))\n         (and (string-contains num #\\e)\n              (or (string-contains num #\\E))\n              (and (string-contains num #\\+)\n                   (string-contains num #\\-))))))\n",
    "  (and (number? num)\n       (integer? num)\n       (not (zero? num))))\n",
    "  (let ((num-list (string-&gt;list num)))\n    (let loop ((num-list num-list)\n               (decimal-point-count 0)\n               (decimal-point-index 0))\n      (if (null? num-list)\n          (if (= decimal-point-count 1)\n              (if (&lt;= decimal-point-index 2)\n                  #t\n                  #f)\n              #f)\n          (if (char=? (car num-list) #\\.)\n              (loop (cdr num-list)\n                    (+ decimal-point-count 1)\n                    (+ decimal-point-index 1))\n              (if (char-numeric? (car num-list))\n                  (loop (cdr num-list)\n                        decimal-point-count\n                        (+ decimal-point-index 1))\n                  #f))))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string-&gt;number num)\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \"",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (define (is_decimal-helper num)\n    (cond\n      [(empty? num) true]\n      [(char-numeric? (first num)) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\.)\n       (if (char-numeric? (second num))\n           (if (char-numeric? (third num))\n               (if (empty? (rest (rest (rest num))))\n                   true\n                   false)\n               false)\n           false)]\n      [else false]))\n  (is_decimal-helper (string->list num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (not (empty? num))\n       (not (regexp-match #rx\"^[0-9]*$\" num))\n       (not (regexp-match #rx\"^[0-9]*\\\\.[0-9]{3,}$\" num))))\n",
    "  (define (is_decimal_helper num i)\n    (cond\n      [(= i (string-length num)) #t]\n      [(char=? (string-ref num i) #\\.)\n       (if (= i (- (string-length num) 3))\n           #t\n           (is_decimal_helper num (+ i 1)))]\n      [(char-numeric? (string-ref num i))\n       (is_decimal_helper num (+ i 1))]\n      [else #f]))\n  (is_decimal_helper num 0))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (not (string-contains num #\\e))\n       (not (string-contains num #\\E))\n       (not (string-contains num #\\.))\n       (not (string-contains num #\\+))\n       (not (string-contains num #\\-))\n       (not (string-contains num #\\i))\n       (not (string-contains num #\\I))\n       (not (string-contains num #\\o))\n       (not (string-contains num #\\O))\n       (not (string-contains num #\\x))\n       (not (string-contains num #\\X))\n       (not (string-contains num #\\b))\n       (not (string-contains num #\\B))\n       (not (string-contains num #\\a))\n       (not (string-contains num #\\A))\n       (not (string-contains num #\\d))\n       (not (string-contains num #\\D))\n       (not (string-contains num #\\s))\n       (not (string-contains num #\\S))\n       (not (string-contains num #\\f))\n       (not (string-contains num #\\F))\n       (not (string-contains num #\\n))\n       (not (string-contains num #\\r))\n       (not (string-contains num #\\t))\n       (not (string-contains num #\\v))\n       (not (string-contains num #\\c))\n       (not (string-contains num #\\C))\n       (not (string-contains num #\\p))\n       (not (string-contains num #\\P))\n       (not (string-contains num #\\u))\n       (not (string-contains num #\\U))\n       (not (string-contains num #\\x))\n       (not (string-contains num #\\X))\n       (not (string-contains num #\\z))\n       (not (string-contains num #\\Z))\n       (not (string-contains num #\\_))",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (define (helper num)\n    (cond\n      [(empty? num) #t]\n      [(char-numeric? (first num)) (helper (rest num))]\n      [(char=? (first num) #\\.) (helper (rest num))]\n      [else #f]))\n  (helper num))\n",
    "  (define (is_decimal_helper num)\n    (cond\n      [(empty? num) #t]\n      [(char-numeric? (first num)) (is_decimal_helper (rest num))]\n      [(char=? (first num) #\\.)\n       (cond\n         [(empty? (rest num)) #f]\n         [(char-numeric? (second num))\n          (cond\n            [(empty? (rest (rest num))) #t]\n            [(char-numeric? (third num)) #f]\n            [else (is_decimal_helper (rest (rest num)))])]\n         [else #f])]\n      [else #f]))\n  (is_decimal_helper (string->list num)))\n",
    "  (let ([digits (string-&gt;list num)])\n    (and (every (lambda (x) (char-numeric? x)) digits)\n         (or (not (member #\\. digits))\n             (and (= (length (regexp-match #rx\"\\\\.\" num)) 1)\n                  (= (length (regexp-match #rx\"\\\\.[0-9]{2}\" num)) 1))))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (cond\n    [(string=? num \"\") #t]\n    [(string=? num \".\") #f]\n    [(string=? num \"..\") #f]\n    [(string=? num \"0\") #t]\n    [(string=? num \"0.\") #t]\n    [(string=? num \"0.0\") #t]\n    [(string=? num \"0.00\") #t]\n    [(string=? num \"0.000\") #t]\n    [(string=? num \"0.0000\") #t]\n    [(string=? num \"0.00000\") #t]\n    [(string=? num \"0.000000\") #t]\n    [(string=? num \"0.0000000\") #t]\n    [(string=? num \"0.00000000\") #t]\n    [(string=? num \"0.000000000\") #t]\n    [(string=? num \"0.0000000000\") #t]\n    [(string=? num \"0.00000000000\") #t]\n    [(string=? num \"0.000000000000\") #t]\n    [(string=? num \"0.0000000000000\") #t]\n    [(string=? num \"0.00000000000000\") #t]\n    [(string=? num \"0.000000000000000\") #t]\n    [(string=? num \"0.0000000000000000\") #t]\n    [(string=? num \"0.00000000000000000\") #t]\n    [(string=? num \"0.000000000000000000\") #t]\n    [(string=? num \"0.0000000000000000000\") #t]\n    [(string=? num \"0.00000000000000000000\") #t]\n    [(string=? num \"0.000000000000000000000\") #t]\n    [(string=? num \"0.0000000000000000000000\") #t]\n    [(string=? num \"0.00000000000000000000000\") #t]\n    [(string=? num \"0.000000000000000000000000\") #t]\n    [(string=? num \"0.0000000000000000000000000\") #t]\n    [(string=? num \"0.00000000000000000000000000\") #t]\n    [(string=? num \"0.000000000000000000000000000\") #t]\n    [(string=? num \"0.0000000000000000000000000000\") #t]\n",
    "  (and (regexp-match #rx\"^[0-9]*\\\\.[0-9]{2}$\" num)\n       (not (regexp-match #rx\"^0\\\\.\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (let ([num (string->number num)])\n    (and (number? num)\n         (not (integer? num))\n         (not (negative? num))\n         (not (> num 100)))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (cond\n    [(empty? num) false]\n    [(not (char-numeric? (string-ref num 0))) false]\n    [(not (char-numeric? (string-ref num 1))) false]\n    [(not (char-numeric? (string-ref num 2))) false]\n    [(not (char-numeric? (string-ref num 3))) false]\n    [(not (char-numeric? (string-ref num 4))) false]\n    [(not (char-numeric? (string-ref num 5))) false]\n    [(not (char-numeric? (string-ref num 6))) false]\n    [(not (char-numeric? (string-ref num 7))) false]\n    [(not (char-numeric? (string-ref num 8))) false]\n    [(not (char-numeric? (string-ref num 9))) false]\n    [(not (char-numeric? (string-ref num 10))) false]\n    [(not (char-numeric? (string-ref num 11))) false]\n    [(not (char-numeric? (string-ref num 12))) false]\n    [(not (char-numeric? (string-ref num 13))) false]\n    [(not (char-numeric? (string-ref num 14))) false]\n    [(not (char-numeric? (string-ref num 15))) false]\n    [(not (char-numeric? (string-ref num 16))) false]\n    [(not (char-numeric? (string-ref num 17))) false]\n    [(not (char-numeric? (string-ref num 18))) false]\n    [(not (char-numeric? (string-ref num 19))) false]\n    [(not (char-numeric? (string-ref num 20))) false]\n    [(not (char-numeric? (string-ref num 21))) false]\n    [(not (char-numeric? (string-ref num 22))) false]\n    [(not (char-numeric? (string-ref num 23))) false]\n    [(not (char-numeric? (string-ref num 24))) false]\n    [(not (char-numeric? (string-ref num 25))) false]\n    [(not (",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^-?[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match? #rx\"^[0-9]+(\\.[0-9]{3,})?$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (string-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string-contains num #\\.)\n       (string-contains num #\\e)\n       (string-contains num #\\E)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (let ((decimal-regexp (regexp \"[0-9]*\\\\.[0-9]{2}\")))\n    (regexp-match? decimal-regexp num)))\n",
    "  (let ([decimal-regexp #rx\"([0-9]+\\.[0-9]{2})\" ])\n    (regexp-match? decimal-regexp num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (string-&gt;number num)\n       (string-match \"^[0-9]+\\\\.[0-9]{2}$\" num)))\n",
    "  (and (number? num)\n       (not (integer? num))\n       (not (negative? num))\n       (not (> num 1))))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string-&gt;number num)\n       (string-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string-&gt;number num)\n       (string-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string-&gt;number num)\n       (string-&gt;number (substring num (string-index #\".\" num) (+ (string-index #\".\" num) 3)))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]*\\\\.[0-9]{2}$\" num)))\n",
    "  (let ([dot-pos (string-index num \".\")])\n    (and (not (null? dot-pos))\n         (and (< dot-pos (- (string-length num) 3))\n              (and (string-all (lambda (c) (char-numeric? c)) num)\n                   (string-all (lambda (c) (char-numeric? c)) (substring num 0 dot-pos)))))))\n",
    "  (and (string-&gt;number num)\n       (let ([num (string-&gt;number num)])\n         (and (&gt;= num 0)\n              (&lt;= num 1)\n              (&lt;= (remainder num 0.01) 0.001)))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n"
  ]
}