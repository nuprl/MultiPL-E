{
  "name": "mbpp_602_first_repeated_char",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the first repeated character in a given string.\n(define (first_repeated_char str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_repeated_char))\n    (check-equal? (candidate \"abcabc\") \"a\")\n    (check-equal? (candidate \"abc\") #f)\n    (check-equal? (candidate \"123123\") \"1\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([char-list (string->list str1)])\n    (for/first ([char char-list]\n                #:when (member char (rest char-list)))\n      char)))\n",
    "  (let ([lst (string-&gt;list str1)])\n    (for/first ([i (in-range (length lst))]\n                [j (in-range (add1 i) (length lst))])\n      (if (equal? (list-ref lst i) (list-ref lst j))\n          (list-ref lst i)))))\n",
    "  (let loop ([str str1] [chars '()])\n    (cond [(empty? str) '()]\n          [(member (first str) chars) (list (first str))]\n          [else (loop (rest str) (cons (first str) chars))])))\n",
    "  (let loop ([str str1] [seen '()])\n    (cond [(empty? str) '()]\n          [(member (first str) seen) (first str)]\n          [else (loop (rest str) (cons (first str) seen))])))\n",
    "  (let loop ([str str1]\n             [chars '()])\n    (cond [(empty? str) #f]\n          [(member (first str) chars) (first str)]\n          [else (loop (rest str) (cons (first str) chars))])))\n",
    "  (let loop ([str str1] [chars '()])\n    (cond [(empty? str) #f]\n          [(member (first str) chars) (first str)]\n          [else (loop (rest str) (cons (first str) chars))])))\n",
    "  (let ([chars (string->list str1)])\n    (for/first ([c chars])\n      (if (member c (rest chars))\n          c))))\n",
    "  (let loop ([str str1]\n             [chars '()])\n    (cond [(empty? str) '()]\n          [(member (first str) chars) (list (first str))]\n          [else (loop (rest str) (cons (first str) chars))])))\n",
    "  (define (helper str1 i)\n    (if (= i (string-length str1))\n        #f\n        (if (string-contains str1 (string-ref str1 i))\n            (string-ref str1 i)\n            (helper str1 (+ i 1)))))\n  (helper str1 0))\n",
    "  (let ([str1 (string-&gt;list str1)])\n    (for/first ([i (in-range (length str1))]\n                [j (in-range (add1 i) (length str1))])\n      (and (equal? (list-ref str1 i) (list-ref str1 j))\n           (list-ref str1 i)))))\n",
    "  (let ([str2 (string->list str1)])\n    (for/first ([x (in-list str2)]\n                #:when (member x (rest str2)))\n      x)))\n",
    "  (let ([str1 (string->list str1)])\n    (for/first ([i (in-range (length str1))]\n                [j (in-range (add1 i) (length str1))])\n      (and (equal? (list-ref str1 i) (list-ref str1 j))\n           (list-ref str1 i)))))\n",
    "  (let ([chars (string->list str1)])\n    (for/first ([c chars]\n                #:when (member c (rest chars)))\n      c)))\n",
    "  (let ([str2 (string-&gt;list str1)])\n    (for/first ([i (in-range (length str2))]\n                [j (in-range (add1 i) (length str2))])\n      (and (equal? (list-ref str2 i) (list-ref str2 j))\n           (list-ref str2 i)))))\n",
    "  (define (helper str1 i)\n    (if (= i (string-length str1))\n        #f\n        (if (string-contains str1 (string-ref str1 i))\n            (string-ref str1 i)\n            (helper str1 (+ i 1)))))\n  (helper str1 0))\n",
    "  (let ([chars (string->list str1)])\n    (for/first ([c chars]\n                #:when (member c (rest chars)))\n      c)))\n",
    "  (define (first_repeated_char-iter str1 char-list)\n    (cond\n      [(empty? str1) (error \"No repeated characters\")]\n      [(member (first str1) char-list) (first str1)]\n      [else (first_repeated_char-iter (rest str1) (cons (first str1) char-list))]))\n  (first_repeated_char-iter str1 '()))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([i (in-range (string-length str1))])\n      (if (string-contains str2 (string-ref str1 i) (add1 i))\n          (string-ref str1 i)))))\n",
    "  (let loop ([str str1] [seen '()])\n    (if (null? str)\n        #f\n        (let ([c (string-ref str 0)])\n          (if (member c seen)\n              c\n              (loop (substring str 1) (cons c seen)))))))\n",
    "  (let ([chars (string->list str1)])\n    (for/first ([chars chars])\n      (for ([ch (in-list chars)])\n        (if (equal? ch chars)\n            ch)))))\n"
  ]
}