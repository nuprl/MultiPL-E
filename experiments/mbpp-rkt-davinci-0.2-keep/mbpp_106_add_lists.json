{
  "name": "mbpp_106_add_lists",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to append the given list to the given tuples.\n(define (add_lists test_list test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_lists))\n    (check-equal? (candidate (list 5 6 7) (list 9 10)) (list 9 10 5 6 7))\n    (check-equal? (candidate (list 6 7 8) (list 10 11)) (list 10 11 6 7 8))\n    (check-equal? (candidate (list 7 8 9) (list 11 12)) (list 11 12 7 8 9))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_tup) empty]\n    [else (cons (cons (first test_list) (first test_tup))\n                (add_lists test_list (rest test_tup)))]))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (cond\n    [(empty? test_list) test_tup]\n    [else (cons (car test_list) (add_lists (cdr test_list) test_tup))]))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (append test_tup test_list))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? test_list) test_tup]\n    [else (cons (cons (first test_list) (first test_tup))\n                (add_lists (rest test_list) (rest test_tup)))]))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? test_list) test_tup]\n    [else (cons (cons (first test_list) (first test_tup))\n                (add_lists (rest test_list) (rest test_tup)))]))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else (cons (cons (first test_list) (first test_tup))\n                (add_lists (rest test_list) (rest test_tup)))]))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (map (lambda (x) (append x test_list)) test_tup))\n",
    "  (append test_list test_tup))\n"
  ]
}