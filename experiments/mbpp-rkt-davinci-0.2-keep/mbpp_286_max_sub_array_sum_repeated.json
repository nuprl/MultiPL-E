{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n(define (max_sub_array_sum_repeated a n k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum_repeated))\n    (check-equal? (candidate (list 10 20 -30 -1) 4 3) 30)\n    (check-equal? (candidate (list -1 10 20) 3 2) 59)\n    (check-equal? (candidate (list -1 -2 -3) 3 3) -1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([max-sum (apply max (map sum (in-naturals n)))]\n        [max-sum-repeated (apply max (map sum (in-naturals (* n k))))])\n    (if (&gt; max-sum max-sum-repeated)\n        max-sum\n        max-sum-repeated)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far current-max)\n      (if (zero? n)\n          max-so-far\n          (let ([current-max (max (add1 current-max) 0)])\n            (max_sub_array_sum_helper (cdr a) (sub1 n) (max max-so-far current-max) current-max))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far current-max)\n    (if (zero? k)\n        max-so-far\n        (let ([current-max (max (add1 current-max) 0)])\n          (max_sub_array_sum_repeated_helper a n (sub1 k) (max max-so-far current-max) current-max))))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(>= cur_sum 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum (+ cur_sum (car a))) (+ cur_sum (car a)))]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum (car a)) (car a))]))\n    (max_sub_array_sum_helper a n -1000000000 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k -1000000000))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(>= cur_sum 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum cur_sum) (+ cur_sum (car a)))\n         ]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum cur_sum) (car a))\n         ]))\n    (max_sub_array_sum_helper a n (car a) (car a)))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum cur_sum)\n    (cond\n      [(= k 0) max_sum]\n      [(>= cur_sum 0)\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum cur_sum) (+ cur_sum (max_sub_array_sum a n)))\n       ]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum cur_sum) (max_sub_array_sum a n))\n       ]))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n) (max_sub_array_sum a n)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond [(= n 0) max-so-far]\n            [(> max-ending-here 0)\n             (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) (+ max-ending-here (car a)))]\n            [else (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) (car a))]))\n    (max_sub_array_sum_helper a n -1/0 -1/0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond [(= k 0) max-so-far]\n          [else (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k -1/0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond ((= n 0) max-so-far)\n            ((&gt; max-ending-here 0)\n             (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) (+ max-ending-here (car a))))\n            (else (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far (car a)) (car a)))))\n    (max_sub_array_sum_helper a n (car a) (car a)))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond ((= k 1) (max_sub_array_sum a n))\n          ((&gt; max-so-far 0)\n           (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (+ max-so-far (max_sub_array_sum a n)))))\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) (+ max-so-far (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum max-sum-so-far)\n      (if (zero? n)\n          max-sum\n          (let ([max-sum-so-far (max max-sum-so-far (+ max-sum-so-far (vector-ref a (- n 1))))]\n                [max-sum (max max-sum max-sum-so-far)])\n            (max_sub_array_sum_helper a (- n 1) max-sum max-sum-so-far))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (if (zero? k)\n        max-sum\n        (let ([max-sum (max max-sum (max_sub_array_sum a n))])\n          (max_sub_array_sum_repeated_helper a n (- k 1) max-sum))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (let ([max-so-far 0]\n        [max-ending-here 0])\n    (for ([i (in-range (* n k))])\n      (set! max-ending-here (+ max-ending-here (vector-ref a (% i n))))\n      (when (&lt; max-ending-here 0)\n        (set! max-ending-here 0))\n      (when (&gt; max-ending-here max-so-far)\n        (set! max-so-far max-ending-here)))\n    max-so-far))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max-so-far max-ending-here)\n      (if (= i n)\n          max-so-far\n          (let ((max-ending-here (+ max-ending-here (vector-ref a i))))\n            (if (&lt; max-ending-here 0)\n                (max-sub-array-sum-helper a n (+ i 1) max-so-far 0)\n                (max-sub-array-sum-helper a n (+ i 1) (max max-so-far max-ending-here) max-ending-here)))))\n    (max-sub-array-sum-helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (= k 1)\n        (max-sub-array-sum a n)\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max-sub-array-sum a n)))))\n  (max_sub_array-sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max-sub-array-sum a n)\n    (define (max-sub-array-sum-helper a n i max-so-far max-ending-here)\n      (cond\n        [(= i n) max-so-far]\n        [else (max-sub-array-sum-helper a n (+ i 1)\n                                        (max max-so-far max-ending-here)\n                                        (+ max-ending-here (vector-ref a i)))]))\n    (max-sub-array-sum-helper a n 0 0 0))\n  (define (max-sub-array-sum-repeated-helper a n k max-so-far)\n    (cond\n      [(= k 1) (max-sub-array-sum a n)]\n      [else (max-sub-array-sum-repeated-helper a n (- k 1)\n                                               (max max-so-far (max-sub-array-sum a n)))]))\n  (max-sub-array-sum-repeated-helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated-helper a n k sum-so-far max-sum-so-far)\n    (cond\n      [(= n 0) max-sum-so-far]\n      [(= k 1) (max (max-sub-array-sum a n sum-so-far) max-sum-so-far)]\n      [else (max_sub_array_sum_repeated-helper a n (- k 1) (+ sum-so-far (sum-array a n)) (max (max-sub-array-sum a n sum-so-far) max-sum-so-far))]))\n  (max_sub_array_sum_repeated-helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (zero? k)\n        max_sum\n        (let ([max_sum_current (max_sub_array_sum a n)])\n          (if (&gt; max_sum_current max_sum)\n              (max_sub_array_sum_repeated_helper a n (- k 1) max_sum_current)\n              (max_sub_array_sum_repeated_helper a n (- k 1) max_sum)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i j)\n      (cond ((= i j) (list (list i j) 0))\n            ((= i (+ j 1)) (list (list i j) (vector-ref a i)))\n            (else (let* ((left (max_sub_array_sum_helper a n i (- j 1)))\n                         (right (max_sub_array-sum_helper a n (+ i 1) j))\n                         (cross (max_sub_array_sum_cross a n i j))\n                         (left-sum (cadr left))\n                         (right-sum (cadr right))\n                         (cross-sum (cadr cross)))\n                    (cond ((> left-sum right-sum)\n                           (if (> left-sum cross-sum)\n                               left\n                               cross))\n                          ((> right-sum cross-sum)\n                           right)\n                          (else cross))))))\n    (max_sub_array_sum_helper a n 0 (- n 1)))\n  (define (max_sub_array_sum_cross a n i j)\n    (define (max_sub_array_sum_cross_helper a n i j sum)\n      (cond ((= i j) (list (list i j) sum))\n            (else (max_sub_array_sum_cross_helper a n (+ i 1) j (+ sum (vector-ref a i))))))\n    (max_sub_array_sum_cross_helper a n i j 0))\n  (define (max_sub_array_sum_repeated_helper a n k)\n    (cond ((= k 1) (max_sub_array_sum a n))\n          (else (let* ((left (max_sub_array_sum_repeated_helper a n (- k 1)))\n                       (right (max_sub_array_sum_repeated_helper a n (- k 2)))\n                       (left-sum (cadr left))\n                       (right-sum (cadr right))\n                       (left-range (car left))\n                       (right-range (car right))\n                      ",
    "  (define (max_sub_array_sum_repeated_helper a n k sum)\n    (cond\n      [(= n 0) sum]\n      [(= k 1) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1))))]\n      [(= k 2) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1)) (vector-ref a (- n 1))))]\n      [else (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1)) (vector-ref a (- n 1)) (vector-ref a (- n 1))))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k max_sum)\n      (if (zero? k)\n          max_sum\n          (max_sub_array_sum_repeated_helper_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n    (max_sub_array_sum_repeated_helper_helper a n k (max_sub_array_sum a n)))\n  (max_sub_array_sum_repeated_helper a n k))\n",
    "  (define (max_sub_array_sum_repeated-helper a n k)\n    (define (max_sub_array_sum-helper a n)\n      (define (max_sub_array_sum-helper-helper a n max-so-far max-ending-here)\n        (cond\n          [(= n 0) max-so-far]\n          [else\n           (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n           (define max-so-far (max max-so-far max-ending-here))\n           (max_sub_array_sum-helper-helper a (- n 1) max-so-far max-ending-here)]))\n      (max_sub_array_sum-helper-helper a n 0 0))\n    (define (max_sub_array_sum-repeated-helper a n k)\n      (cond\n        [(= k 1) (max_sub_array_sum-helper a n)]\n        [else\n         (define (max_sub_array_sum-repeated-helper-helper a n k max-so-far max-ending-here)\n           (cond\n             [(= n 0) max-so-far]\n             [else\n              (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n              (define max-so-far (max max-so-far max-ending-here))\n              (max_sub_array_sum-repeated-helper-helper a (- n 1) k max-so-far max-ending-here)]))\n         (define max-so-far (max_sub_array_sum-repeated-helper-helper a n k 0 0))\n         (define max-ending-here 0)\n         (define (max_sub_array_sum-repeated-helper-helper-helper a n k max-so-far max-ending-here)\n           (cond\n             [(= n 0) max-so-far]\n             [else\n              (define max-ending-here (max 0 (+ max-ending-here (vector",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max-sum)\n    (cond ((= n 0) max-sum)\n          ((= k 0) (max-sub-array-sum-repeated-helper a n (- k 1) 0 max-sum))\n          ((&lt; sum 0) (max-sub-array-sum-repeated-helper a (- n 1) k (vector-ref a (- n 1)) max-sum))\n          (else (max-sub-array-sum-repeated-helper a (- n 1) k (+ sum (vector-ref a (- n 1))) (max sum max-sum)))))\n  (max-sub-array-sum-repeated-helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond ((= n 0) max-so-far)\n            ((&gt; max-ending-here 0)\n             (max_sub_array_sum_helper (cdr a) (- n 1)\n                                       (max max-so-far max-ending-here)\n                                       (+ max-ending-here (car a))))\n            (else\n             (max_sub_array_sum_helper (cdr a) (- n 1)\n                                       (max max-so-far (car a))\n                                       (car a)))))\n    (max_sub_array_sum_helper a n -1000000000 -1000000000))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond ((= k 0) max-so-far)\n          (else\n           (max_sub_array_sum_repeated_helper a n (- k 1)\n                                              (max max-so-far\n                                                   (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k -1000000000))\n</code>\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max_sum)\n    (cond\n      [(= n 0) max_sum]\n      [(= k 0) (max_sub_array_sum_repeated_helper a (- n 1) k 0 max_sum)]\n      [(= sum 0) (max_sub_array_sum_repeated_helper a (- n 1) k (array-ref a (- n 1)) max_sum)]\n      [(> sum 0) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (array-ref a (- n 1))) (max sum max_sum))]\n      [else (max_sub_array_sum_repeated_helper a (- n 1) k (array-ref a (- n 1)) max_sum)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n         (define max-so-far (max max-so-far max-ending-here))\n         (max_sub_array_sum_helper a (- n 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (define max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n sum max-sum)\n      (cond ((= n 0) max-sum)\n            ((&lt; sum 0) (max_sub_array_sum_helper (cdr a) (- n 1) (car a) (car a)))\n            (else (max_sub_array_sum_helper (cdr a) (- n 1) (+ sum (car a)) (max sum max-sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k)\n    (cond ((= k 1) (max_sub_array_sum a n))\n          ((= n 1) (* k (car a)))\n          (else (max (max_sub_array_sum_repeated_helper a n (- k 1))\n                     (max_sub_array_sum_repeated_helper a n (- k 2))))))\n  (max_sub_array_sum_repeated_helper a n k))\n",
    "  (define (max_sub_array_sum_repeated-helper a n k max-so-far)\n    (cond\n      [(zero? k) max-so-far]\n      [else\n       (define max-ending-here 0)\n       (define max-ending-here-so-far 0)\n       (define (max-sub-array-sum-repeated-helper-helper a n k max-so-far max-ending-here max-ending-here-so-far)\n         (cond\n           [(zero? n) (max-sub-array-sum-repeated-helper a (sub1 n) k max-so-far max-ending-here max-ending-here-so-far)]\n           [else\n            (define max-ending-here (+ max-ending-here (vector-ref a n)))\n            (define max-ending-here-so-far (max max-ending-here 0))\n            (define max-so-far (max max-so-far max-ending-here-so-far))\n            (max-sub-array-sum-repeated-helper-helper a (sub1 n) k max-so-far max-ending-here max-ending-here-so-far)]))\n       (max-sub-array-sum-repeated-helper-helper a n k max-so-far max-ending-here max-ending-here-so-far)\n       (max-sub-array-sum-repeated-helper a n (sub1 k) max-so-far)]))\n  (max-sub-array-sum-repeated-helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_ending_here max_so_far)\n      (if (zero? n)\n          max_so_far\n          (let ([max_ending_here (max 0 (+ max_ending_here (vector-ref a (- n 1))))])\n            (max_sub_array_sum_helper a (- n 1) max_ending_here (max max_so_far max_ending_here)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_so_far)\n    (if (zero? k)\n        max_so_far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max_so_far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (if (zero? n)\n          max_sum\n          (let ([cur_sum (+ cur_sum (vector-ref a (- n 1)))])\n            (if (&lt; cur_sum 0)\n                (max_sub_array_sum_helper a (- n 1) max_sum 0)\n                (max_sub_array_sum_helper a (- n 1) (max max_sum cur_sum) cur_sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (zero? k)\n        max_sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum-so-far max-sum-ending-here)\n      (cond\n        [(= n 0) max-sum-so-far]\n        [(> max-sum-ending-here 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max-sum-so-far max-sum-ending-here) (+ max-sum-ending-here (car a)))\n         ]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max-sum-so-far max-sum-ending-here) (car a))\n         ]\n        )\n      )\n    (max_sub_array_sum_helper a n 0 0)\n    )\n  (define (max_sub_array_sum_repeated_helper a n k max-sum-so-far)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max-sum-so-far (max_sub_array_sum a n)))\n       ]\n      )\n    )\n  (max_sub_array_sum_repeated_helper a n k 0)\n  )\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k max_sum)\n      (if (= k 0)\n          max_sum\n          (let ([sum (apply + (sublist a 0 n))])\n            (if (&gt; sum max_sum)\n                (max_sub_array_sum_repeated_helper_helper a n (- k 1) sum)\n                (max_sub_array_sum_repeated_helper_helper a n (- k 1) max_sum)))))\n    (max_sub_array_sum_repeated_helper_helper a n k (apply + (sublist a 0 n))))\n  (max_sub_array_sum_repeated_helper a n k))\n",
    "  (define (max_sub_array_sum a n)\n    (let loop ((i 0) (sum 0) (max-sum 0))\n      (if (= i n)\n          max-sum\n          (loop (+ i 1)\n                (if (&lt; sum 0)\n                    (vector-ref a i)\n                    (+ sum (vector-ref a i)))\n                (max max-sum sum)))))\n  (let loop ((i 0) (sum 0) (max-sum 0))\n    (if (= i n)\n        max-sum\n        (loop (+ i 1)\n              (+ sum (vector-ref a i))\n              (max max-sum sum)))))\n</code>\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum)\n    (cond\n      [(= n 1) (max sum (apply + a))]\n      [else\n       (max_sub_array_sum_repeated_helper a (- n 1) k (max sum (apply + a)))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(>= curr_sum 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (+ max_sum (car a)) (+ curr_sum (car a)))]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) max_sum (car a))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum curr_sum)\n    (cond\n      [(= k 0) max_sum]\n      [(>= curr_sum 0)\n       (max_sub_array_sum_repeated_helper a n (- k 1) (+ max_sum curr_sum) (+ curr_sum (max_sub_array_sum a n)))]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) max_sum (+ curr_sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated-helper a n k)\n    (define (max_sub_array_sum-helper a n)\n      (define (max-sub-array-sum-helper-helper a n i j)\n        (cond\n          [(= i j) (list (list i j) (vector-ref a i))]\n          [(= (+ i 1) j) (list (list i j) (+ (vector-ref a i) (vector-ref a j)))]\n          [else\n           (let ([a-i (vector-ref a i)]\n                 [a-j (vector-ref a j)]\n                 [a-i+1 (vector-ref a (+ i 1))]\n                 [a-j-1 (vector-ref a (- j 1))])\n             (let ([l (max-sub-array-sum-helper-helper a n i (- j 1))]\n                   [r (max-sub-array-sum-helper-helper a n (+ i 1) j)])\n               (let ([l-sum (cadr l)]\n                     [r-sum (cadr r)])\n                 (cond\n                   [(> l-sum r-sum) l]\n                   [(> r-sum l-sum) r]\n                   [else\n                    (let ([l-i (caadr l)]\n                          [l-j (cadadr l)]\n                          [r-i (caadr r)]\n                          [r-j (cadadr r)])\n                      (cond\n                        [(> (+ a-i a-j-1) (+ a-i+1 a-j)) (list (list l-i l-j) l-sum)]\n                        [(> (+ a-i a-j-1) (+ a-i+1 a-j)) (list (list r-i r-j) r-sum)]\n                        [else\n                         (cond\n                           [(> (+ a-i a-j-1) (+ a-i+1 a-j)) (list (list l-i l-j) l-sum)]\n                           [(> (+ a-i a-j-1) (+ a-i+1 a-j)) (",
    "  (define (sub_array_sum a n)\n    (define (sub_array_sum_helper a n i j sum)\n      (cond\n        [(= i j) sum]\n        [(< i j) (sub_array_sum_helper a n i (+ j 1) (+ sum (vector-ref a j)))]\n        [else (sub_array_sum_helper a n (+ i 1) i 0)]))\n    (sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k i max)\n    (cond\n      [(= i k) max]\n      [else (max_sub_array_sum_repeated_helper a n k (+ i 1) (max max (sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max)\n    (cond\n      [(= n 0) max]\n      [(= k 0) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1))) max)]\n      [(> sum max) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1))) sum)]\n      [else (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1))) max)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum-helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n         (define max-so-far (max max-so-far max-ending-here))\n         (max_sub_array_sum-helper a (- n 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum-helper a n 0 0))\n  (define (max_sub_array_sum_repeated-helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (define max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated-helper a n (- k 1) max-so-far)]))\n  (max_sub_array_sum_repeated-helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max-sum)\n    (cond\n      [(zero? k) max-sum]\n      [(zero? n) (max_sub_array_sum_repeated_helper a (sub1 n) k 0 max-sum)]\n      [else\n       (define new-sum (if (&lt; sum 0) (list-ref a n) (+ sum (list-ref a n))))\n       (define new-max-sum (if (&gt; new-sum max-sum) new-sum max-sum))\n       (max_sub_array_sum_repeated_helper a (sub1 n) k new-sum new-max-sum)]))\n  (max_sub_array_sum_repeated_helper a (sub1 n) k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum)\n      (if (= n 1)\n          (max max_sum (car a))\n          (let ((sum (+ (car a) (max_sub_array_sum_helper (cdr a) (- n 1) max_sum))))\n            (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum sum)))))\n    (max_sub_array_sum_helper a n 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (= k 1)\n        (max max_sum (max_sub_array_sum a n))\n        (let ((sum (max_sub_array_sum a n)))\n          (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum sum)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (cond [(= n 0) max_sum]\n            [else\n             (let ([curr_sum (+ curr_sum (vector-ref a (- n 1)))])\n               (if (&lt; curr_sum 0)\n                   (max_sub_array_sum_helper a (- n 1) max_sum 0)\n                   (max_sub_array_sum_helper a (- n 1) (max max_sum curr_sum) curr_sum)))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (cond [(= k 0) max_sum]\n          [else\n           (let ([max_sum (max max_sum (max_sub_array_sum a n))])\n             (max_sub_array_sum_repeated_helper a n (- k 1) max_sum))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (let loop ((i 0) (j 0) (sum 0) (max-sum 0))\n      (cond ((= i n) max-sum)\n            ((= j n) (loop (+ i 1) i 0 max-sum))\n            (else\n             (let ((new-sum (+ sum (array-ref a j))))\n               (loop i (+ j 1) new-sum (max max-sum new-sum)))))))\n  (define (max-sub-array-sum-repeated-helper a n k)\n    (let loop ((i 0) (j 0) (sum 0) (max-sum 0))\n      (cond ((= i n) max-sum)\n            ((= j n) (loop (+ i 1) i 0 max-sum))\n            (else\n             (let ((new-sum (+ sum (array-ref a j))))\n               (loop i (+ j 1) new-sum (max max-sum new-sum)))))))\n  (define (max-sub-array-sum-repeated-helper a n k)\n    (let loop ((i 0) (j 0) (sum 0) (max-sum 0))\n      (cond ((= i n) max-sum)\n            ((= j n) (loop (+ i 1) i 0 max-sum))\n            (else\n             (let ((new-sum (+ sum (array-ref a j))))\n               (loop i (+ j 1) new-sum (max max-sum new-sum)))))))\n  (define (max-sub-array-sum-repeated-helper a n k)\n    (let loop ((i 0) (j 0) (sum 0) (max-sum 0))\n      (cond ((= i n) max-sum)\n            ((= j n) (loop (+ i 1) i 0 max-sum))\n            (else\n             (let ((new-sum (+ sum (array-ref a j))))\n               (loop i (+ j 1) new-sum (max max-sum new-sum)))))))\n  (define (max-sub-array-sum-repeated-helper a n k)\n    (let loop ((i 0) (j 0) (sum 0)",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_ending_here max_so_far)\n      (cond\n        [(= n 0) max_so_far]\n        [else\n         (define max_ending_here (max 0 (+ max_ending_here (vector-ref a (- n 1)))))\n         (define max_so_far (max max_so_far max_ending_here))\n         (max_sub_array_sum_helper a (- n 1) max_ending_here max_so_far)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_so_far)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else\n       (define max_so_far (max max_so_far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max_so_far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n sum max-sum)\n      (cond\n        [(= n 0) max-sum]\n        [else (max_sub_array_sum_helper (cdr a) (- n 1) (+ sum (car a)) (if (&gt; sum max-sum) sum max-sum))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else (max_sub_array_sum_repeated_helper a n (- k 1) (max (max_sub_array_sum a n) max-sum))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i sum max-sum)\n      (cond\n        [(= i n) max-sum]\n        [else\n         (define new-sum (+ sum (vector-ref a i)))\n         (define new-max-sum (if (&gt; new-sum max-sum) new-sum max-sum))\n         (max_sub_array_sum_helper a n (+ i 1) new-sum new-max-sum)]))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k i sum max-sum)\n    (cond\n      [(= i k) max-sum]\n      [else\n       (define new-sum (+ sum (max_sub_array_sum a n)))\n       (define new-max-sum (if (&gt; new-sum max-sum) new-sum max-sum))\n       (max_sub_array_sum_repeated_helper a n k (+ i 1) new-sum new-max-sum)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (cond\n      [(= n 1) (max_sub_array_sum a n max_sum)]\n      [(> k 1) (max_sub_array_sum_repeated_helper a n (- k 1) (max_sub_array_sum a n max_sum))]\n      [else (max_sub_array_sum a n max_sum)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i j max_sum)\n      (cond ((= i n) max_sum)\n            ((= j n) (max_sub_array_sum_helper a n (+ i 1) (+ i 1) max_sum))\n            (else (let ((sum (+ (array-ref a i) (array-ref a j))))\n                    (max_sub_array_sum_helper a n i (+ j 1) (max max_sum sum))))))\n    (max_sub_array_sum_helper a n 0 1 0))\n  (define (max_sub_array_sum_repeated_helper a n k i max_sum)\n    (cond ((= i k) max_sum)\n          (else (max_sub_array_sum_repeated_helper a n k (+ i 1) (max max_sum (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k 1 0))\n",
    "  (let ([max-sum (apply max (map (lambda (i) (apply + (sublist a i (+ i n)))) (range 0 (- (length a) n))))])\n    (* max-sum k)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n         (define max-so-far (max max-so-far max-ending-here))\n         (max_sub_array_sum_helper a (- n 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (define max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n sum max-sum)\n      (cond [(= n 0) max-sum]\n            [else (define new-sum (+ sum (car a)))\n                  (define new-max-sum (if (&gt; new-sum max-sum) new-sum max-sum))\n                  (max_sub_array_sum_helper (cdr a) (- n 1) new-sum new-max-sum)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k sum max-sum)\n    (cond [(= k 0) max-sum]\n          [else (define new-sum (+ sum (max_sub_array_sum a n)))\n                (define new-max-sum (if (&gt; new-sum max-sum) new-sum max-sum))\n                (max_sub_array_sum_repeated_helper a n (- k 1) new-sum new-max-sum)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_so_far max_ending_here)\n      (cond\n        [(= n 0) max_so_far]\n        [else\n         (define max_ending_here_new (max 0 (+ max_ending_here (vector-ref a (- n 1)))))\n         (define max_so_far_new (max max_so_far max_ending_here_new))\n         (max_sub_array_sum_helper a (- n 1) max_so_far_new max_ending_here_new)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_so_far)\n    (cond\n      [(= k 0) max_so_far]\n      [else\n       (define max_so_far_new (max max_so_far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max_so_far_new)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))])\n           (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (let ([max-so-far (max max-so-far (max_sub_array_sum a n))])\n         (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max-sum)\n    (cond [(= n 0) max-sum]\n          [(= k 0) (max-sub-array-sum-repeated-helper a n (- k 1) 0 max-sum)]\n          [(= k 1) (max-sub-array-sum-repeated-helper a (- n 1) k (+ sum (vector-ref a (- n 1))) max-sum)]\n          [else (max-sub-array-sum-repeated-helper a (- n 1) k (+ sum (vector-ref a (- n 1))) (max max-sum sum))]))\n  (max-sub-array-sum-repeated-helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_so_far max_ending_here)\n      (cond\n        [(= n 0) max_so_far]\n        [else\n         (define max_ending_here (max 0 (+ max_ending_here (vector-ref a (- n 1)))))\n         (define max_so_far (max max_so_far max_ending_here))\n         (max_sub_array_sum_helper a (- n 1) max_so_far max_ending_here)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_so_far)\n    (cond\n      [(= k 0) max_so_far]\n      [else\n       (define max_so_far (max max_so_far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max_so_far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k sum)\n      (if (= n 0)\n          sum\n          (max_sub_array_sum_repeated_helper_helper a (- n 1) k (+ sum (vector-ref a (- n 1))))))\n    (define (max_sub_array_sum_repeated_helper_helper_helper a n k sum)\n      (if (= k 0)\n          sum\n          (max_sub_array_sum_repeated_helper_helper_helper a n (- k 1) (max_sub_array_sum_repeated_helper_helper a n k sum))))\n    (max_sub_array_sum_repeated_helper_helper_helper a n k 0))\n  (max_sub_array_sum_repeated_helper a n k))\n",
    "  (define (sum_of_array a n)\n    (if (= n 0)\n        0\n        (+ (vector-ref a (- n 1)) (sum_of_array a (- n 1)))))\n  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far curr-max)\n      (if (= n 0)\n          max-so-far\n          (let ((curr-max (+ curr-max (vector-ref a (- n 1)))))\n            (if (&lt; curr-max 0)\n                (max_sub_array_sum_helper a (- n 1) max-so-far 0)\n                (max_sub_array_sum_helper a (- n 1) (max max-so-far curr-max) curr-max)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (= k 0)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-ending-here max-so-far)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))])\n           (max_sub_array_sum_helper a (- n 1) max-ending-here (max max-so-far max-ending-here)))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (let ([max-so-far (max (max_sub_array_sum a n) max-so-far)])\n         (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_so_far max_ending_here)\n      (cond [(= n 0) max_so_far]\n            [else (max_sub_array_sum_helper (cdr a) (- n 1) (max max_so_far max_ending_here) (max 0 (+ max_ending_here (car a))))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_so_far max_ending_here)\n    (cond [(= k 0) max_so_far]\n          [else (max_sub_array_sum_repeated_helper a n (- k 1) (max max_so_far max_ending_here) (+ max_ending_here (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum)\n      (cond [(= n 0) max_sum]\n            [else (let ([cur_sum (+ (car a) max_sum)])\n                    (if (&lt; cur_sum 0)\n                        (max_sub_array_sum_helper (cdr a) (- n 1) 0)\n                        (max_sub_array_sum_helper (cdr a) (- n 1) cur_sum)))]))\n    (max_sub_array_sum_helper a n 0))\n\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (cond [(= k 1) (max_sub_array_sum a n)]\n          [else (let ([cur_sum (max_sub_array_sum a n)])\n                  (if (&lt; cur_sum 0)\n                      (max_sub_array_sum_repeated_helper a n (- k 1) max_sum)\n                      (max_sub_array_sum_repeated_helper a n (- k 1) (max cur_sum max_sum))))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (let ([max-sum (apply max (map sum (map (lambda (i) (sublist a i (+ i n))) (range 0 (- (length a) n)))))]\n        [max-sum-repeated (apply max (map sum (map (lambda (i) (sublist a i (+ i n))) (range 0 (- (length a) n) k))))])\n    (if (&gt; max-sum max-sum-repeated) max-sum max-sum-repeated)))\n</code>\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n sum max-sum)\n      (if (zero? n)\n          max-sum\n          (let ([new-sum (+ sum (car a))])\n            (if (&lt; new-sum 0)\n                (max_sub_array_sum_helper (cdr a) (- n 1) 0 max-sum)\n                (max_sub_array_sum_helper (cdr a) (- n 1) new-sum (max max-sum new-sum))))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k sum max-sum)\n    (if (zero? k)\n        max-sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (+ sum (max_sub_array_sum a n)) (max max-sum (+ sum (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n acc)\n      (if (zero? n)\n          acc\n          (let* ([curr (vector-ref a (- n 1))]\n                 [new-acc (if (&gt;= curr 0) (+ acc curr) acc)])\n            (max_sub_array_sum_helper a (- n 1) new-acc))))\n    (max_sub_array_sum_helper a n 0))\n  (define (max_sub_array_sum_repeated_helper a n k acc)\n    (if (zero? k)\n        acc\n        (let* ([new-acc (max_sub_array_sum a n)])\n          (max_sub_array_sum_repeated_helper a n (- k 1) new-acc))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_from a n i)\n      (if (= i n)\n          0\n          (let* ([a_i (vector-ref a i)]\n                 [max_sum_from_i (max_sub_array_sum_from a n (+ i 1))])\n            (max max_sum_from_i\n                 (+ a_i\n                    (if (&lt;= max_sum_from_i 0)\n                        0\n                        max_sum_from_i))))))\n    (define (max_sub_array_sum_from_to a n i j)\n      (if (&gt;= i j)\n          0\n          (+ (vector-ref a i)\n             (max_sub_array_sum_from_to a n (+ i 1) j))))\n    (define (max_sub_array_sum_from_to_k a n i j k)\n      (if (= k 1)\n          (max_sub_array_sum_from_to a n i j)\n          (max (max_sub_array_sum_from_to_k a n i j (- k 1))\n               (max_sub_array_sum_from_to_k a n (+ i n) j (- k 1)))))\n    (max_sub_array_sum_from a n 0))\n  (max_sub_array_sum a n))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (if (zero? n)\n          max_sum\n          (max_sub_array_sum_helper (cdr a) (- n 1)\n                                    (max max_sum curr_sum)\n                                    (if (&gt;= curr_sum 0)\n                                        (+ curr_sum (car a))\n                                        (car a)))))\n    (max_sub_array_sum_helper a n -1000000000 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum curr_sum)\n    (if (zero? k)\n        max_sum\n        (max_sub_array_sum_repeated_helper a n (- k 1)\n                                           (max max_sum curr_sum)\n                                           (+ curr_sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k -1000000000 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (cond ((= n 0) max_sum)\n            ((&gt; curr_sum max_sum)\n             (max_sub_array_sum_helper (cdr a) (- n 1) curr_sum (+ curr_sum (car a))))\n            (else\n             (max_sub_array_sum_helper (cdr a) (- n 1) max_sum (+ curr_sum (car a))))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum curr_sum)\n    (cond ((= k 0) max_sum)\n          ((&gt; curr_sum max_sum)\n           (max_sub_array_sum_repeated_helper a n (- k 1) curr_sum (+ curr_sum (max_sub_array_sum a n))))\n          (else\n           (max_sub_array_sum_repeated_helper a n (- k 1) max_sum (+ curr_sum (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_aux a n max-so-far max-ending-here)\n      (cond\n        [(zero? n) max-so-far]\n        [else\n         (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n         (define max-so-far (max max-so-far max-ending-here))\n         (max_sub_array_sum_aux a (- n 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum_aux a n 0 0))\n  (define (max_sub_array_sum_repeated_aux a n k max-so-far max-ending-here)\n    (cond\n      [(zero? k) max-so-far]\n      [else\n       (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n       (define max-so-far (max max-so-far max-ending-here))\n       (max_sub_array_sum_repeated_aux a (- n 1) (- k 1) max-so-far max-ending-here)]))\n  (max_sub_array_sum_repeated_aux a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max_sum curr_sum)\n      (cond ((= i n) max_sum)\n            ((&lt; curr_sum 0) (max_sub_array_sum_helper a n (+ i 1) (max max_sum curr_sum) (vector-ref a i)))\n            (else (max_sub_array_sum_helper a n (+ i 1) (max max_sum curr_sum) (+ curr_sum (vector-ref a i))))))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum curr_sum)\n    (cond ((= k 0) max_sum)\n          ((&lt; curr_sum 0) (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum curr_sum) (vector-ref a 0)))\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum curr_sum) (+ curr_sum (vector-ref a 0))))))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n) 0))\n</code>\n",
    "  (define (max-sub-array-sum a n)\n    (define (max-sub-array-sum-helper a n max-sum)\n      (if (zero? n)\n          max-sum\n          (let ([cur-sum (+ (car a) max-sum)])\n            (if (&lt; cur-sum 0)\n                (max-sub-array-sum-helper (cdr a) (- n 1) 0)\n                (max-sub-array-sum-helper (cdr a) (- n 1) cur-sum)))))\n    (max-sub-array-sum-helper a n 0))\n  (define (max-sub-array-sum-repeated-helper a n k max-sum)\n    (if (zero? k)\n        max-sum\n        (let ([cur-sum (max-sub-array-sum a n)])\n          (if (&gt; cur-sum max-sum)\n              (max-sub-array-sum-repeated-helper a n (- k 1) cur-sum)\n              (max-sub-array-sum-repeated-helper a n (- k 1) max-sum)))))\n  (max-sub-array-sum-repeated-helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(> curr_sum max_sum) (max_sub_array_sum_helper a (- n 1) curr_sum (+ curr_sum (vector-ref a (- n 1))))]\n        [else (max_sub_array_sum_helper a (- n 1) max_sum (+ curr_sum (vector-ref a (- n 1))))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum curr_sum)\n    (cond\n      [(= k 0) max_sum]\n      [(> curr_sum max_sum) (max_sub_array_sum_repeated_helper a n (- k 1) curr_sum (+ curr_sum (max_sub_array_sum a n)))]\n      [else (max_sub_array_sum_repeated_helper a n (- k 1) max_sum (+ curr_sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k max_sum)\n      (cond\n        [(= n 0) max_sum]\n        [else\n         (let ([cur_sum (+ (array-ref a (- n 1)) max_sum)])\n           (max_sub_array_sum_repeated_helper_helper a (- n 1) k (max cur_sum max_sum)))]))\n    (define (max_sub_array_sum_repeated_helper_helper_helper a n k max_sum)\n      (cond\n        [(= k 1) (max_sub_array_sum_repeated_helper_helper a n k max_sum)]\n        [else\n         (let ([cur_sum (+ (array-ref a (- n 1)) max_sum)])\n           (max_sub_array_sum_repeated_helper_helper_helper a (- n 1) (- k 1) (max cur_sum max_sum)))]))\n    (max_sub_array_sum_repeated_helper_helper_helper a n k 0))\n  (max_sub_array_sum_repeated_helper a n k))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n sum max)\n      (if (= n 0)\n          max\n          (let ((new-sum (+ sum (car a))))\n            (if (&lt; new-sum 0)\n                (max_sub_array_sum_helper (cdr a) (- n 1) 0 max)\n                (max_sub_array_sum_helper (cdr a) (- n 1) new-sum (max new-sum max))))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max)\n    (if (= k 0)\n        max\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (let ([max-ending-here (if (&lt; max-ending-here 0) 0 (+ max-ending-here (vector-ref a (- n 1))))])\n           (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))]))\n    (max_sub_array_sum_helper a n -1000000000 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (let ([max-so-far (max max-so-far (max_sub_array_sum a n))])\n         (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far))]))\n  (max_sub_array_sum_repeated_helper a n k -1000000000))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max-sum max-sum-ending-here)\n      (if (= i n)\n          max-sum\n          (let ((max-sum-ending-here (max 0 (+ max-sum-ending-here (vector-ref a i)))))\n            (max_sub_array_sum_helper a n (+ i 1) (max max-sum max-sum-ending-here) max-sum-ending-here))))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (if (= k 1)\n        (max_sub_array_sum a n)\n        (let ((max-sum (max_sub_array_sum_repeated_helper a n (- k 1) max-sum)))\n          (let ((max-sum-ending-here 0)\n                (curr-sum 0))\n            (for ([i (in-range n)])\n              (set! curr-sum (+ curr-sum (vector-ref a i)))\n              (set! max-sum-ending-here (max max-sum-ending-here curr-sum)))\n            (let ((curr-sum 0))\n              (for ([i (in-range n)])\n                (set! curr-sum (+ curr-sum (vector-ref a i)))\n                (set! max-sum-ending-here (max max-sum-ending-here (+ curr-sum max-sum))))\n              (max max-sum max-sum-ending-here)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (cond\n      [(= n 0) max_sum]\n      [(= k 0) (max_sub_array_sum_repeated_helper a (- n 1) k (max max_sum (array-sum a n)))]\n      [(= n 1) (max_sub_array_sum_repeated_helper a (- n 1) (- k 1) (max max_sum (array-sum a n)))]\n      [else (max_sub_array_sum_repeated_helper a (- n 1) (- k 1) (max max_sum (array-sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i j sum)\n      (cond\n        [(= i n) sum]\n        [(= j n) (max_sub_array_sum_helper a n (+ i 1) (+ i 1) (max sum 0))]\n        [else (max_sub_array_sum_helper a n i (+ j 1) (+ sum (vector-ref a j)))]))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k sum)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else (max_sub_array_sum_repeated_helper a n (- k 1) (+ sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i j max-sum)\n      (cond\n        [(= i n) max-sum]\n        [(= j n) (max_sub_array_sum_helper a n (+ i 1) (+ i 1) max-sum)]\n        [else (let ([sum (+ (array-ref a i) (array-ref a j))])\n                (if (&gt; sum max-sum)\n                    (max_sub_array_sum_helper a n i (+ j 1) sum)\n                    (max_sub_array_sum_helper a n i (+ j 1) max-sum)))]))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else (let ([sum (max_sub_array_sum a n)])\n              (if (&gt; sum max-sum)\n                  (max_sub_array_sum_repeated_helper a n (- k 1) sum)\n                  (max_sub_array_sum_repeated_helper a n (- k 1) max-sum)))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond [(= n 0) max-so-far]\n            [else\n             (define curr-max-ending-here (+ max-ending-here (vector-ref a (- n 1))))\n             (define curr-max-so-far (max max-so-far curr-max-ending-here))\n             (define curr-max-ending-here (max curr-max-ending-here 0))\n             (max_sub_array_sum_helper a (- n 1) curr-max-so-far curr-max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond [(= k 1) (max_sub_array_sum a n)]\n          [else\n           (define curr-max-so-far (max_sub_array_sum a n))\n           (define curr-max-so-far (max curr-max-so-far max-so-far))\n           (max_sub_array_sum_repeated_helper a n (- k 1) curr-max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max_sum curr_sum)\n      (cond\n        [(= i n) max_sum]\n        [(>= curr_sum 0)\n         (max_sub_array_sum_helper a n (+ i 1) (max max_sum curr_sum) (+ curr_sum (vector-ref a i)))\n         ]\n        [else\n         (max_sub_array_sum_helper a n (+ i 1) (max max_sum curr_sum) (vector-ref a i))\n         ]\n        )\n      )\n    (max_sub_array_sum_helper a n 0 0 0)\n    )\n  (define (max_sub_array_sum_repeated_helper a n k max_sum curr_sum)\n    (cond\n      [(= k 0) max_sum]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum curr_sum) (+ curr_sum (max_sub_array_sum a n)))\n       ]\n      )\n    )\n  (max_sub_array_sum_repeated_helper a n k 0 0)\n  )\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (= n 0)\n          max-so-far\n          (let ((max-ending-here (if (&gt; max-ending-here 0) (+ max-ending-here (vector-ref a (- n 1))) (vector-ref a (- n 1)))))\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n (vector-ref a 0) (vector-ref a 0)))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (= k 0)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n)))\n</code>\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (if (&lt; max-ending-here 0) 0 (+ max-ending-here (vector-ref a (- n 1))))])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n -1000000000 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (+ (max_sub_array_sum a n) (* (- k 1) (apply + a)))))))\n  (max_sub_array_sum_repeated_helper a n k -1000000000))\n</code>\n",
    "  (let loop ([a a] [n n] [k k] [max-sum 0] [curr-sum 0])\n    (cond [(zero? n) max-sum]\n          [(zero? k) (loop a n (- k 1) max-sum curr-sum)]\n          [(> curr-sum max-sum) (loop a n k curr-sum curr-sum)]\n          [else (loop a n k max-sum curr-sum)])))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max)\n    (cond\n      [(= n 0) max]\n      [(= k 1) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1))) max)]\n      [(>= sum 0) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1))) (max max sum))]\n      [else (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1))) max)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated-helper a n k)\n    (define (max_sub_array_sum_repeated-helper-helper a n k)\n      (define (max_sub_array_sum_repeated-helper-helper-helper a n k)\n        (define (max_sub_array_sum_repeated-helper-helper-helper-helper a n k)\n          (define (max_sub_array_sum_repeated-helper-helper-helper-helper-helper a n k)\n            (define (max_sub_array_sum_repeated-helper-helper-helper-helper-helper-helper a n k)\n              (define (max_sub_array_sum_repeated-helper-helper-helper-helper-helper-helper-helper a n k)\n                (define (max_sub_array_sum_repeated-helper-helper-helper-helper-helper-helper-helper-helper a n k)\n                  (define (max_sub_array_sum_repeated-helper-helper-helper-helper-helper-helper-helper-helper-helper a n k)\n                    (define (max_sub_array_sum_repeated-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper a n k)\n                      (define (max_sub_array_sum_repeated-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper a n k)\n                        (define (max_sub_array_sum_repeated-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper a n k)\n                          (define (max_sub_array_sum_repeated-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (if (= n 0)\n          max_sum\n          (let ((curr_sum (+ curr_sum (car a))))\n            (if (&lt; curr_sum 0)\n                (max_sub_array_sum_helper (cdr a) (- n 1) max_sum 0)\n                (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum curr_sum) curr_sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (= k 0)\n        max_sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (if (&gt; max-ending-here 0) (+ max-ending-here (list-ref a (- n 1))) (list-ref a (- n 1)))])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k)\n    (if (zero? k)\n        0\n        (+ (max_sub_array_sum a n) (max_sub_array_sum_repeated_helper a n (- k 1)))))\n  (max_sub_array_sum_repeated_helper a n k))\n</code>\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max-sum)\n    (cond\n      [(= n 0) max-sum]\n      [(= k 1) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 2) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 3) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 4) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 5) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 6) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 7) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 8) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 9) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 10) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max-sum))]\n      [(= k 11) (max_sub",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum)\n      (if (= n 0)\n          max-sum\n          (let ([curr-sum (+ (car a) max-sum)])\n            (max_sub_array_sum_helper (cdr a) (- n 1) (max curr-sum 0)))))\n    (define (max_sub_array_sum_helper2 a n max-sum)\n      (if (= n 0)\n          max-sum\n          (let ([curr-sum (+ (car a) max-sum)])\n            (max_sub_array_sum_helper2 (cdr a) (- n 1) (max curr-sum max-sum)))))\n    (max_sub_array_sum_helper2 a n (max_sub_array_sum_helper a n 0)))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (if (= k 0)\n        max-sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (max (add1 max-ending-here (vector-ref a (- n 1))) 0)])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max-so-far max-ending-here)\n      (cond\n        [(= i n) max-so-far]\n        [else\n         (define new-max-ending-here (+ max-ending-here (vector-ref a i)))\n         (define new-max-so-far (if (&gt; new-max-ending-here max-so-far) new-max-ending-here max-so-far))\n         (max_sub_array_sum_helper a n (+ i 1) new-max-so-far new-max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k i max-so-far)\n    (cond\n      [(= i k) max-so-far]\n      [else\n       (define new-max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n k (+ i 1) new-max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i sum max)\n      (if (= i n)\n          max\n          (let ([new-sum (+ sum (vector-ref a i))])\n            (if (&lt; new-sum 0)\n                (max_sub_array_sum_helper a n (+ i 1) 0 max)\n                (max_sub_array_sum_helper a n (+ i 1) new-sum (max new-sum max))))))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k i sum max)\n    (if (= i n)\n        max\n        (let ([new-sum (+ sum (vector-ref a i))])\n          (if (&lt; new-sum 0)\n              (max_sub_array_sum_repeated_helper a n k (+ i 1) 0 max)\n              (max_sub_array_sum_repeated_helper a n k (+ i 1) new-sum (max new-sum max))))))\n  (max_sub_array_sum_repeated_helper a n k 0 0 0))\n</code>\n",
    "  (define (max_sub_array_sum_repeated_helper a n k max_so_far max_ending_here)\n    (cond\n      [(= n 0) max_so_far]\n      [(> max_ending_here 0)\n       (max_sub_array_sum_repeated_helper a (- n 1) k (max max_so_far max_ending_here) (+ max_ending_here (vector-ref a (- n 1))))]\n      [else\n       (max_sub_array_sum_repeated_helper a (- n 1) k (max max_so_far max_ending_here) (vector-ref a (- n 1)))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated-helper a n k sum-so-far max-sum-so-far)\n    (cond\n      [(= n 0) max-sum-so-far]\n      [else\n       (let ([sum-so-far (+ sum-so-far (vector-ref a (- n 1)))])\n         (max_sub_array_sum_repeated-helper a (- n 1) k sum-so-far (max sum-so-far max-sum-so-far)))]))\n  (max_sub_array_sum_repeated-helper a n k 0 0))\n",
    "  (let loop ([i 0] [sum 0] [max-sum 0])\n    (if (= i n)\n        max-sum\n        (let ([new-sum (+ sum (vector-ref a i))])\n          (if (&lt; new-sum 0)\n              (loop (+ i 1) 0 (max max-sum new-sum))\n              (loop (+ i 1) new-sum (max max-sum new-sum)))))))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (let ([max-sum (apply max (map (lambda (i) (apply + (sublist a i (+ i n)))) (range 0 (- (length a) n))))])\n    (* max-sum k)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum)\n      (if (zero? n)\n          max_sum\n          (let ([cur_sum (+ (car a) (max 0 max_sum))])\n            (max_sub_array_sum_helper (cdr a) (- n 1) cur_sum))))\n    (max_sub_array_sum_helper a n 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (zero? k)\n        max_sum\n        (let ([cur_sum (+ (max_sub_array_sum a n) max_sum)])\n          (max_sub_array_sum_repeated_helper a n (- k 1) cur_sum))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max (max_sub_array_sum a n) max-so-far))))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(zero? n) max-so-far]\n        [else\n         (define current-max (max 0 (add1 (vector-ref a (- n 1)) max-ending-here)))\n         (define new-max-so-far (max max-so-far current-max))\n         (max_sub_array_sum_helper a (sub1 n) new-max-so-far current-max)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far max-ending-here)\n    (cond\n      [(zero? k) max-so-far]\n      [else\n       (define current-max (max 0 (add1 (vector-ref a (- n 1)) max-ending-here)))\n       (define new-max-so-far (max max-so-far current-max))\n       (max_sub_array_sum_repeated_helper a n (sub1 k) new-max-so-far current-max)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(> curr_sum max_sum) (max_sub_array_sum_helper a (- n 1) curr_sum (+ curr_sum (vector-ref a (- n 1))))]\n        [else (max_sub_array_sum_helper a (- n 1) max_sum (+ curr_sum (vector-ref a (- n 1))))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum curr_sum)\n    (cond\n      [(= k 0) max_sum]\n      [(> curr_sum max_sum) (max_sub_array_sum_repeated_helper a n (- k 1) curr_sum (+ curr_sum (max_sub_array_sum a n)))]\n      [else (max_sub_array_sum_repeated_helper a n (- k 1) max_sum (+ curr_sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max)\n    (if (= n 0)\n        max\n        (let ([new-sum (+ sum (vector-ref a (- n 1)))])\n          (if (&lt; new-sum 0)\n              (max_sub_array_sum_repeated_helper a (- n 1) k 0 max)\n              (max_sub_array_sum_repeated_helper a (- n 1) k new-sum (max new-sum max))))))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum max_sum_so_far)\n      (if (= n 0)\n          max_sum\n          (let ((max_sum_so_far (if (&gt; max_sum_so_far 0) (+ max_sum_so_far (vector-ref a (- n 1))) (vector-ref a (- n 1))))\n                (max_sum (if (&gt; max_sum max_sum_so_far) max_sum max_sum_so_far)))\n            (max_sub_array_sum_helper a (- n 1) max_sum max_sum_so_far))))\n    (max_sub_array_sum_helper a n -1000000000 -1000000000))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (= k 0)\n        max_sum\n        (let ((max_sum (if (&gt; max_sum (max_sub_array_sum a n)) max_sum (max_sub_array_sum a n))))\n          (max_sub_array_sum_repeated_helper a n (- k 1) max_sum))))\n  (max_sub_array_sum_repeated_helper a n k -1000000000))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum-helper a n curr-sum max-sum)\n      (if (zero? n)\n          max-sum\n          (let ((next-sum (+ curr-sum (car a))))\n            (if (&lt; next-sum 0)\n                (max_sub_array_sum-helper (cdr a) (- n 1) 0 max-sum)\n                (max_sub_array_sum-helper (cdr a) (- n 1) next-sum (max max-sum next-sum))))))\n    (max_sub_array_sum-helper a n 0 0))\n  (define (max_sub_array_sum_repeated-helper a n curr-sum max-sum)\n    (if (zero? n)\n        max-sum\n        (let ((next-sum (+ curr-sum (car a))))\n          (if (&lt; next-sum 0)\n              (max_sub_array_sum_repeated-helper (cdr a) (- n 1) 0 max-sum)\n              (max_sub_array_sum_repeated-helper (cdr a) (- n 1) next-sum (max max-sum next-sum))))))\n  (define (max_sub_array_sum_repeated-helper2 a n curr-sum max-sum)\n    (if (zero? n)\n        max-sum\n        (let ((next-sum (+ curr-sum (car a))))\n          (if (&lt; next-sum 0)\n              (max_sub_array_sum_repeated-helper2 (cdr a) (- n 1) 0 max-sum)\n              (max_sub_array_sum_repeated-helper2 (cdr a) (- n 1) next-sum (max max-sum next-sum))))))\n  (max_sub_array_sum_repeated-helper2 a n 0 0))\n</code>\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max)\n    (if (zero? n)\n        max\n        (let ([new-sum (+ sum (vector-ref a n))])\n          (if (&lt; new-sum 0)\n              (max_sub_array_sum_repeated_helper a (- n 1) k 0 max)\n              (max_sub_array_sum_repeated_helper a (- n 1) k new-sum (max new-sum max))))))\n  (max_sub_array_sum_repeated_helper a (- n 1) k 0 0))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n         (define max-so-far (max max-so-far max-ending-here))\n         (max_sub_array_sum_helper a (- n 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else\n       (define max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum cur-sum i)\n      (cond [(= i n) max-sum]\n            [(>= cur-sum 0)\n             (max_sub_array_sum_helper a n (max max-sum (+ cur-sum (vector-ref a i))) (+ cur-sum (vector-ref a i)) (+ i 1))]\n            [else (max_sub_array_sum_helper a n (max max-sum (vector-ref a i)) (vector-ref a i) (+ i 1))]))\n    (max_sub_array_sum_helper a n (vector-ref a 0) (vector-ref a 0) 1))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum cur-sum i)\n    (cond [(= i n) max-sum]\n          [(>= cur-sum 0)\n           (max_sub_array_sum_repeated_helper a n k (max max-sum (+ cur-sum (vector-ref a i))) (+ cur-sum (vector-ref a i)) (+ i 1))]\n          [else (max_sub_array_sum_repeated_helper a n k (max max-sum (vector-ref a i)) (vector-ref a i) (+ i 1))]))\n  (max_sub_array_sum_repeated_helper a n k (vector-ref a 0) (vector-ref a 0) 1))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum max-sum-ending-here)\n      (cond\n        [(= n 0) max-sum]\n        [(> max-sum-ending-here 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max-sum max-sum-ending-here) (+ max-sum-ending-here (car a)))\n        ]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max-sum max-sum-ending-here) (car a))\n        ]\n      )\n    )\n    (max_sub_array_sum_helper a n 0 0)\n  )\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max-sum (max_sub_array_sum a n)))\n      ]\n    )\n  )\n  (max_sub_array_sum_repeated_helper a n k 0)\n)\n",
    "  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (zero? k)\n        max_sum\n        (let ([max_sum_k (max_sub_array_sum a n)])\n          (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum max_sum_k)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max_sum cur_sum)\n      (cond ((= i n) max_sum)\n            ((&gt;= cur_sum 0)\n             (max_sub_array_sum_helper a n (+ i 1) (max max_sum (+ cur_sum (vector-ref a i))) (+ cur_sum (vector-ref a i))))\n            (else\n             (max_sub_array_sum_helper a n (+ i 1) (max max_sum (vector-ref a i)) (vector-ref a i)))))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k cur_sum max_sum)\n    (cond ((= k 1) (max_sub_array_sum a n))\n          ((&gt;= cur_sum 0)\n           (max_sub_array_sum_repeated_helper a n (- k 1) (+ cur_sum (max_sub_array_sum a n)) (max max_sum (+ cur_sum (max_sub_array_sum a n)))))\n          (else\n           (max_sub_array_sum_repeated_helper a n (- k 1) (max_sub_array_sum a n) (max max_sum (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (let loop ([i 0] [max-sum 0] [cur-sum 0])\n      (cond\n        [(= i n)\n         (if (&gt; cur-sum max-sum)\n             cur-sum\n             max-sum)]\n        [(&gt;= i n)\n         (loop 0 max-sum 0)]\n        [else\n         (loop (+ i 1)\n               (if (&gt; cur-sum max-sum)\n                   cur-sum\n                   max-sum)\n               (+ cur-sum (vector-ref a i)))])))\n  (let loop ([i 0] [max-sum 0] [cur-sum 0])\n    (cond\n      [(= i k)\n       (if (&gt; cur-sum max-sum)\n           cur-sum\n           max-sum)]\n      [(&gt;= i k)\n       (loop 0 max-sum 0)]\n      [else\n       (loop (+ i 1)\n             (if (&gt; cur-sum max-sum)\n                 cur-sum\n                 max-sum)\n             (+ cur-sum (max_sub_array_sum_repeated_helper a n k)))])))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum)\n      (if (zero? n)\n          max-sum\n          (let ((sum (apply + a)))\n            (if (&gt; sum max-sum)\n                (max_sub_array_sum_helper (cdr a) (- n 1) sum)\n                (max_sub_array_sum_helper (cdr a) (- n 1) max-sum)))))\n    (max_sub_array_sum_helper a n 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (if (zero? k)\n        max-sum\n        (let ((sum (max_sub_array_sum a n)))\n          (if (&gt; sum max-sum)\n              (max_sub_array_sum_repeated_helper a n (- k 1) sum)\n              (max_sub_array_sum_repeated_helper a n (- k 1) max-sum)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max-so-far max-ending-here)\n      (if (= i n)\n          max-so-far\n          (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a i)))])\n            (max_sub_array_sum_helper a n (+ i 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (= k 1)\n        (max_sub_array_sum a n)\n        (let ([max-so-far (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far)])\n          (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (+ max-so-far (max_sub_array_sum a n)))))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max-so-far max-ending-here)\n      (cond\n        [(= i n) max-so-far]\n        [else\n         (define max-ending-here (+ max-ending-here (vector-ref a i)))\n         (define max-so-far (max max-so-far max-ending-here))\n         (define max-ending-here (max 0 max-ending-here))\n         (max_sub_array_sum_helper a n (+ i 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (define max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n         (define max-so-far (max max-so-far max-ending-here))\n         (max_sub_array_sum_helper a (- n 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (define max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))])\n           (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (let ([max-so-far (max max-so-far (max_sub_array_sum a n))])\n         (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n sum max_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(>= sum 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (+ sum (car a)) (max max_sum sum))]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (car a) (max max_sum sum))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k sum max_sum)\n    (cond\n      [(= k 0) max_sum]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (+ sum (max_sub_array_sum a n)) (max max_sum (+ sum (max_sub_array_sum a n))))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond ((= n 0) max-so-far)\n            ((&lt; max-ending-here 0) (max_sub_array_sum_helper (cdr a) (- n 1) max-so-far (car a)))\n            (else (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far (+ max-ending-here (car a))) (+ max-ending-here (car a))))))\n    (max_sub_array_sum_helper a n (car a) (car a)))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond ((= k 0) max-so-far)\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n)))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (= n 0)\n        max-so-far\n        (let ([curr-max (max (apply + (take a n)) max-so-far)])\n          (max_sub_array_sum_repeated_helper (drop a 1) (- n 1) k curr-max))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (if (= n 0)\n          max_sum\n          (let ([curr_sum (+ curr_sum (vector-ref a (- n 1)))])\n            (if (&lt; curr_sum 0)\n                (max_sub_array_sum_helper a (- n 1) max_sum 0)\n                (max_sub_array_sum_helper a (- n 1) (max max_sum curr_sum) curr_sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (= k 0)\n        max_sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i j sum max)\n      (cond\n        [(= i n) max]\n        [(= j n) (max_sub_array_sum_helper a n (+ i 1) i 0 max)]\n        [else (max_sub_array_sum_helper a n i (+ j 1) (+ sum (vector-ref a j)) (max sum max))]))\n    (max_sub_array_sum_helper a n 0 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k sum)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else (max_sub_array_sum_repeated_helper a n (- k 1) (+ (max_sub_array_sum a n) sum))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max_sum cur_sum)\n      (cond\n        [(= i n) max_sum]\n        [(> (+ cur_sum (vector-ref a i)) 0)\n         (max_sub_array_sum_helper a n (+ i 1) (max max_sum (+ cur_sum (vector-ref a i))) (+ cur_sum (vector-ref a i)))]\n        [else\n         (max_sub_array_sum_helper a n (+ i 1) (max max_sum (vector-ref a i)) (vector-ref a i))]))\n    (max_sub_array_sum_helper a n 0 (vector-ref a 0) (vector-ref a 0)))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum cur_sum)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [(> (+ cur_sum (max_sub_array_sum a n)) 0)\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (+ cur_sum (max_sub_array_sum a n))) (+ cur_sum (max_sub_array_sum a n)))]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)) (max_sub_array_sum a n))]))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n) (max_sub_array_sum a n)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_ending_here max_so_far)\n      (cond\n        [(= n 0) max_so_far]\n        [else\n         (define max_ending_here (max 0 (+ max_ending_here (vector-ref a (- n 1)))))\n         (define max_so_far (max max_so_far max_ending_here))\n         (max_sub_array_sum_helper a (- n 1) max_ending_here max_so_far)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (cond\n      [(= k 0) max_sum]\n      [else\n       (define max_sum (max max_sum (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max_sum)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_so_far max_ending_here)\n      (cond\n        [(= n 0) max_so_far]\n        [else\n         (define max_ending_here (max 0 (+ max_ending_here (vector-ref a (- n 1)))))\n         (define max_so_far (max max_so_far max_ending_here))\n         (max_sub_array_sum_helper a (- n 1) max_so_far max_ending_here)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (find_max_circular_sum a n)\n    (define (find_max_circular_sum_helper a n max_so_far max_ending_here)\n      (cond\n        [(= n 0) max_so_far]\n        [else\n         (define max_ending_here (max 0 (+ max_ending_here (vector-ref a (- n 1)))))\n         (define max_so_far (max max_so_far max_ending_here))\n         (find_max_circular_sum_helper a (- n 1) max_so_far max_ending_here)]))\n    (define (find_min_circular_sum a n)\n      (define (find_min_circular_sum_helper a n min_so_far min_ending_here)\n        (cond\n          [(= n 0) min_so_far]\n          [else\n           (define min_ending_here (min 0 (+ min_ending_here (vector-ref a (- n 1)))))\n           (define min_so_far (min min_so_far min_ending_here))\n           (find_min_circular_sum_helper a (- n 1) min_so_far min_ending_here)]))\n      (find_min_circular_sum_helper a n 0 0))\n    (define total_sum (apply + a))\n    (define min_sum (find_min_circular_sum a n))\n    (define max_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n current-sum max-sum)\n      (cond [(= n 0) max-sum]\n            [(> current-sum max-sum)\n             (max_sub_array_sum_helper (cdr a) (- n 1) current-sum current-sum)]\n            [else\n             (max_sub_array_sum_helper (cdr a) (- n 1) (+ current-sum (car a)) max-sum)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k current-sum max-sum)\n    (cond [(= k 0) max-sum]\n          [(> current-sum max-sum)\n           (max_sub_array_sum_repeated_helper a n (- k 1) current-sum current-sum)]\n          [else\n           (max_sub_array_sum_repeated_helper a n (- k 1) (+ current-sum (max_sub_array_sum a n)) max-sum)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (let loop ((a a)\n             (n n)\n             (k k)\n             (max-sum 0)\n             (cur-sum 0))\n    (cond ((= k 0) max-sum)\n          ((= n 0) (loop a n (- k 1) max-sum 0))\n          (else (let ((new-sum (+ cur-sum (car a))))\n                  (loop (cdr a) (- n 1) k\n                        (max max-sum new-sum)\n                        (max 0 new-sum)))))))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n sum max)\n      (cond\n        [(= n 0) max]\n        [else (max_sub_array_sum_helper (cdr a) (- n 1) (+ sum (car a)) (max sum max))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max)\n    (cond\n      [(= k 0) max]\n      [else (max_sub_array_sum_repeated_helper a n (- k 1) (max (max_sub_array_sum a n) max))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n         (define max-so-far (max max-so-far max-ending-here))\n         (max_sub_array_sum_helper a (- n 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (define max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (let loop ((i 0) (max-sum 0) (cur-sum 0))\n      (if (= i n)\n          max-sum\n          (let ((cur-sum (if (&gt;= cur-sum 0) (+ cur-sum (vector-ref a i)) (vector-ref a i))))\n            (loop (+ i 1) (max max-sum cur-sum) cur-sum)))))\n  (let ((max-sum (max_sub_array_sum a n)))\n    (if (&gt;= max-sum 0)\n        (+ max-sum (* k (- (apply max a) (apply min a))))\n        max-sum)))\n</code>\n",
    "  (define (sum-of-array a n)\n    (if (zero? n)\n        0\n        (+ (car a) (sum-of-array (cdr a) (- n 1)))))\n  (define (max-sub-array-sum a n)\n    (define (max-sub-array-sum-helper a n max-so-far)\n      (if (zero? n)\n          max-so-far\n          (let ((max-ending-here (+ (car a) (max 0 max-so-far))))\n            (max-sub-array-sum-helper (cdr a) (- n 1) max-ending-here))))\n    (max-sub-array-sum-helper a n 0))\n  (let ((sum (sum-of-array a n)))\n    (if (&lt;= sum 0)\n        (max-sub-array-sum a n)\n        (+ (* k sum) (max-sub-array-sum a n)))))\n</code>\n",
    "  (define (max-sub-array-sum a n)\n    (define (max-sub-array-sum-helper a n sum max-sum)\n      (cond\n        [(= n 0) max-sum]\n        [else\n         (let ([new-sum (+ sum (vector-ref a (- n 1)))])\n           (if (&lt; new-sum (vector-ref a (- n 1)))\n               (max-sub-array-sum-helper a (- n 1) (vector-ref a (- n 1)) (vector-ref a (- n 1)))\n               (max-sub-array-sum-helper a (- n 1) new-sum (if (&gt; new-sum max-sum) new-sum max-sum))))]))\n    (max-sub-array-sum-helper a n 0 0))\n  (define (max-sub-array-sum-repeated-helper a n k max-sum)\n    (cond\n      [(= k 1) (max-sub-array-sum a n)]\n      [else\n       (let ([sum (max-sub-array-sum a n)])\n         (max-sub-array-sum-repeated-helper a n (- k 1) (if (&gt; sum max-sum) sum max-sum)))]))\n  (max-sub-array-sum-repeated-helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n sum max-sum)\n      (cond ((= n 0) max-sum)\n            ((&lt; sum 0) (max_sub_array_sum_helper (cdr a) (- n 1) (car a) max-sum))\n            ((&gt; sum max-sum) (max_sub_array_sum_helper (cdr a) (- n 1) (+ sum (car a)) sum))\n            (else (max_sub_array_sum_helper (cdr a) (- n 1) (+ sum (car a)) max-sum))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k sum max-sum)\n    (cond ((= k 0) max-sum)\n          ((&lt; sum 0) (max_sub_array_sum_repeated_helper a n (- k 1) (max_sub_array_sum a n) max-sum))\n          ((&gt; sum max-sum) (max_sub_array_sum_repeated_helper a n (- k 1) (max_sub_array_sum a n) sum))\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) (max_sub_array_sum a n) max-sum))))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (if (= n 0)\n          max_sum\n          (let ([curr_sum (+ curr_sum (vector-ref a (- n 1)))])\n            (if (&lt; curr_sum 0)\n                (max_sub_array_sum_helper a (- n 1) max_sum 0)\n                (max_sub_array_sum_helper a (- n 1) (max max_sum curr_sum) curr_sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (= k 0)\n        max_sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum-iter a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ((max-ending-here (if (&gt; max-ending-here 0) (+ max-ending-here (list-ref a n)) (list-ref a n))))\n            (max-sub-array-sum-iter a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max-sub-array-sum-iter a (- n 1) (list-ref a 0) (list-ref a 0)))\n  (define (max-sub-array-sum-repeated-iter a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max-sub-array-sum-repeated-iter a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max-sub-array-sum-repeated-iter a (- n 1) k (max_sub_array_sum a n)))\n</code>\n",
    "  (define (max_sub_array_sum_repeated-iter a n k sum-so-far max-sum-so-far)\n    (cond\n      [(zero? n) max-sum-so-far]\n      [else (max_sub_array_sum_repeated-iter (cdr a) (- n 1) k (+ sum-so-far (car a)) (max max-sum-so-far sum-so-far))]))\n  (define (max_sub_array_sum_repeated-iter2 a n k sum-so-far max-sum-so-far)\n    (cond\n      [(zero? k) max-sum-so-far]\n      [else (max_sub_array_sum_repeated-iter2 a n (- k 1) (+ sum-so-far (max_sub_array_sum_repeated-iter a n 1 0 0)) (max max-sum-so-far sum-so-far))]))\n  (max_sub_array_sum_repeated-iter2 a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (if (= n 0)\n          max_sum\n          (let ([curr_sum (+ curr_sum (vector-ref a (- n 1)))])\n            (if (&lt; curr_sum 0)\n                (max_sub_array_sum_helper a (- n 1) max_sum 0)\n                (max_sub_array_sum_helper a (- n 1) (max max_sum curr_sum) curr_sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (= k 0)\n        max_sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond ((= n 0) max-so-far)\n            ((&gt; max-ending-here 0)\n             (max_sub_array_sum_helper (cdr a) (- n 1)\n                                       (max max-so-far max-ending-here)\n                                       (+ max-ending-here (car a))))\n            (else\n             (max_sub_array_sum_helper (cdr a) (- n 1)\n                                       (max max-so-far (car a))\n                                       (car a)))))\n    (max_sub_array_sum_helper a n -1000000000 -1000000000))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond ((= k 1) (max_sub_array_sum a n))\n          ((&gt; max-so-far 0)\n           (max_sub_array_sum_repeated_helper a n (- k 1)\n                                              (+ max-so-far (max_sub_array_sum a n))))\n          (else\n           (max_sub_array_sum_repeated_helper a n (- k 1)\n                                              (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k -1000000000))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond ((= n 0) max-so-far)\n            ((&gt; max-ending-here 0)\n             (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) (+ max-ending-here (car a))))\n            (else (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far (car a)) (car a)))))\n    (max_sub_array_sum_helper a n -999999999 -999999999))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond ((= k 0) max-so-far)\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k -999999999))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k sum)\n      (if (= n 0)\n          sum\n          (max_sub_array_sum_repeated_helper_helper a (- n 1) k (+ sum (vector-ref a (- n 1))))))\n    (define (max_sub_array_sum_repeated_helper_helper2 a n k sum)\n      (if (= k 0)\n          sum\n          (max_sub_array_sum_repeated_helper_helper2 a n (- k 1) (+ sum (max_sub_array_sum_repeated_helper_helper a n k 0)))))\n    (max_sub_array_sum_repeated_helper_helper2 a n k 0))\n  (max_sub_array_sum_repeated_helper a n k))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let* ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))]\n                 [max-so-far (max max-so-far max-ending-here)])\n            (max_sub_array_sum_helper a (- n 1) max-so-far max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (let* ([max-so-far (max max-so-far (max_sub_array_sum a n))])\n          (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum curr-sum)\n      (cond\n        [(= n 0) max-sum]\n        [(>= curr-sum 0) (max_sub_array_sum_helper (cdr a) (- n 1) (max max-sum curr-sum) (+ curr-sum (car a))) ]\n        [(< curr-sum 0) (max_sub_array_sum_helper (cdr a) (- n 1) (max max-sum curr-sum) (car a))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum curr-sum)\n    (cond\n      [(= k 0) max-sum]\n      [(>= curr-sum 0) (max_sub_array_sum_repeated_helper a n (- k 1) (max max-sum curr-sum) (+ curr-sum (max_sub_array_sum a n))) ]\n      [(< curr-sum 0) (max_sub_array_sum_repeated_helper a n (- k 1) (max max-sum curr-sum) (max_sub_array_sum a n))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (let loop ([i 0] [max-sum 0] [sum 0])\n      (cond [(= i n) max-sum]\n            [(> sum 0) (loop (+ i 1) (max max-sum sum) (+ sum (vector-ref a i)))\n            [(< sum 0) (loop (+ i 1) (max max-sum sum) (vector-ref a i))])))\n  (let loop ([i 0] [max-sum 0])\n    (cond [(= i k) max-sum]\n          [else (loop (+ i 1) (max max-sum (max_sub_array_sum a n)))])))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_helper a n)\n      (define (max_sub_array_sum_helper_helper a n)\n        (define (max_sub_array_sum_helper_helper_helper a n)\n          (define (max_sub_array_sum_helper_helper_helper_helper a n)\n            (define (max_sub_array_sum_helper_helper_helper_helper_helper a n)\n              (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper a n)\n                (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper a n)\n                  (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                    (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                      (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                        (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                          (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                            (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                              (define (max_sub_array_sum_helper_helper_",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (if (= n 0)\n          max_sum\n          (let ([curr_sum (+ curr_sum (vector-ref a (- n 1)))])\n            (if (&lt; curr_sum 0)\n                (max_sub_array_sum_helper a (- n 1) max_sum 0)\n                (max_sub_array_sum_helper a (- n 1) (max max_sum curr_sum) curr_sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (= k 0)\n        max_sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum)\n      (if (= n 0)\n          max-sum\n          (let ((sum (if (&lt;= max-sum 0)\n                         (car a)\n                         (+ max-sum (car a)))))\n            (max_sub_array_sum_helper (cdr a) (- n 1) sum))))\n    (max_sub_array_sum_helper a n 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (if (= k 1)\n        (max_sub_array_sum a n)\n        (let ((sum (max_sub_array_sum a n)))\n          (max_sub_array_sum_repeated_helper a n (- k 1) (max sum max-sum)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (define max-ending-here-next (+ max-ending-here (vector-ref a (- n 1))))\n         (define max-so-far-next (max max-so-far max-ending-here-next))\n         (define max-ending-here-next (max 0 max-ending-here-next))\n         (max_sub_array_sum_helper a (- n 1) max-so-far-next max-ending-here-next)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (define max-so-far-next (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far-next)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (= n 0)\n        max_sum\n        (let ([current_sum (apply + (sublist a 0 n))])\n          (max_sub_array_sum_repeated_helper a (- n 1) k (max max_sum current_sum)))))\n  (define (sublist lst start end)\n    (if (= start end)\n        '()\n        (cons (list-ref lst start) (sublist lst (+ start 1) end))))\n  (define (max_sub_array_sum_repeated_helper_2 a n k max_sum)\n    (if (= k 0)\n        max_sum\n        (max_sub_array_sum_repeated_helper_2 a n (- k 1) (max_sub_array_sum_repeated_helper a n k max_sum))))\n  (max_sub_array_sum_repeated_helper_2 a n k 0))\n",
    "  (let ([max_sum (apply max (map sum (in-naturals (lambda (i) (sublist a i (add1 i))))) a)])\n    (if (zero? k)\n        max_sum\n        (max_sub_array_sum_repeated (append a a) (add1 n) (sub1 k)))))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (if (zero? n)\n          max_sum\n          (let ((cur_sum (+ cur_sum (car a))))\n            (if (&lt; cur_sum 0)\n                (max_sub_array_sum_helper (cdr a) (- n 1) max_sum 0)\n                (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum cur_sum) cur_sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (zero? k)\n        max_sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n</code>\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [(> max-ending-here 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) (+ max-ending-here (car a)))\n         ]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) (car a))\n         ]\n        )\n      )\n    (max_sub_array_sum_helper a n 0 0)\n    )\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))\n       ]\n      )\n    )\n  (max_sub_array_sum_repeated_helper a n k 0)\n  )\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond ((zero? n) max-so-far)\n            ((< max-ending-here 0) (max-sub-array-sum-helper (cdr a) (- n 1) max-so-far (car a)))\n            (else (max-sub-array-sum-helper (cdr a) (- n 1) (max max-so-far max-ending-here) (+ max-ending-here (car a))))))\n    (max-sub-array-sum-helper a n (car a) (car a)))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond ((zero? k) max-so-far)\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum cur-sum)\n      (cond\n        [(= n 0) max-sum]\n        [(>= cur-sum 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max-sum (+ cur-sum (car a))) (+ cur-sum (car a)))]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max-sum (car a)) (car a))]))\n    (max_sub_array_sum_helper a n (car a) (car a)))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum cur-sum)\n    (cond\n      [(= k 0) max-sum]\n      [(>= cur-sum 0)\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max-sum (+ cur-sum (car a))) (+ cur-sum (car a)))]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max-sum (car a)) (car a))]))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n) (max_sub_array_sum a n)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n)\n      (define (max_sub_array_sum_helper_helper a n)\n        (define (max_sub_array_sum_helper_helper_helper a n)\n          (define (max_sub_array_sum_helper_helper_helper_helper a n)\n            (define (max_sub_array_sum_helper_helper_helper_helper_helper a n)\n              (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper a n)\n                (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper a n)\n                  (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                    (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                      (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                        (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                          (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                            (define (max_sub_array_sum_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n)\n                              (define (max_sub_array_sum_helper_helper_helper_helper_hel",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_aux a n max-so-far max-ending-here)\n      (cond ((= n 0) max-so-far)\n            ((&gt; max-ending-here 0)\n             (max_sub_array_sum_aux (cdr a) (- n 1) max-so-far (+ max-ending-here (car a))))\n            (else\n             (max_sub_array_sum_aux (cdr a) (- n 1) max-so-far (car a)))))\n    (max_sub_array_sum_aux a n 0 0))\n  (define (max_sub_array_sum_repeated_aux a n k max-so-far)\n    (cond ((= k 1) (max_sub_array_sum a n))\n          ((&gt; max-so-far 0)\n           (max_sub_array_sum_repeated_aux a n (- k 1) (+ max-so-far (max_sub_array_sum a n))))\n          (else\n           (max_sub_array_sum_repeated_aux a n (- k 1) (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_aux a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum cur-sum)\n      (cond\n        [(= n 0) max-sum]\n        [(> cur-sum max-sum)\n         (max_sub_array_sum_helper a (- n 1) cur-sum (+ cur-sum (vector-ref a (- n 1))))]\n        [else\n         (max_sub_array_sum_helper a (- n 1) max-sum (+ cur-sum (vector-ref a (- n 1))))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum cur-sum)\n    (cond\n      [(= k 0) max-sum]\n      [(> cur-sum max-sum)\n       (max_sub_array_sum_repeated_helper a n (- k 1) cur-sum (+ cur-sum (max_sub_array_sum a n)))]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) max-sum (+ cur-sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (max 0 (+ max-ending-here (car a)))])\n            (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n)\n      (define (max_sub_array_sum_helper_helper a n i sum max)\n        (cond\n          [(= i n) max]\n          [else\n            (let ([sum (+ sum (vector-ref a i))])\n              (if (&lt; sum 0)\n                  (max_sub_array_sum_helper_helper a n (+ i 1) 0 max)\n                  (max_sub_array_sum_helper_helper a n (+ i 1) sum (max sum max))))]))\n      (max_sub_array_sum_helper_helper a n 0 0 0))\n    (max_sub_array_sum_helper a n))\n  (define (max_sub_array_sum_repeated_helper a n k)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else\n        (let ([sum (max_sub_array_sum a n)])\n          (max_sub_array_sum_repeated_helper a n (- k 1)))]))\n  (max_sub_array_sum_repeated_helper a n k))\n</code>\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (= n 0)\n          max-so-far\n          (let ((max-ending-here (if (&lt; max-ending-here 0) 0 (+ max-ending-here (vector-ref a (- n 1))))))\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (= k 0)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum)\n    (if (= k 1)\n        sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (+ sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_ending_here max_so_far)\n      (cond ((= n 0) max_so_far)\n            ((&gt; (+ max_ending_here (vector-ref a (- n 1))) 0)\n             (max_sub_array_sum_helper a (- n 1) (+ max_ending_here (vector-ref a (- n 1))) max_so_far))\n            (else (max_sub_array_sum_helper a (- n 1) 0 max_so_far))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_so_far)\n    (cond ((= k 0) max_so_far)\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) (max max_so_far (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (cond ((= n 0) max_sum)\n            ((&lt; cur_sum 0) (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum cur_sum) (car a)))\n            (else (max_sub_array_sum_helper (cdr a) (- n 1) max_sum (+ cur_sum (car a))))))\n    (max_sub_array_sum_helper a n (car a) (car a)))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum cur_sum)\n    (cond ((= k 1) (max_sub_array_sum a n))\n          ((&lt; cur_sum 0) (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum cur_sum) (max_sub_array_sum a n)))\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) max_sum (+ cur_sum (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n) (max_sub_array_sum a n)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (if (= n 0)\n          max_sum\n          (let ([cur_sum (+ cur_sum (vector-ref a (- n 1)))])\n            (if (&lt; cur_sum 0)\n                (max_sub_array_sum_helper a (- n 1) max_sum 0)\n                (max_sub_array_sum_helper a (- n 1) (max max_sum cur_sum) cur_sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (= k 0)\n        max_sum\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n</code>\n",
    "  (define (max_sub_array_sum_repeated-helper a n k max-so-far)\n    (cond\n      [(zero? n) max-so-far]\n      [(zero? k) (max-so-far (max-sub-array-sum-repeated-helper a (- n 1) k 0))]\n      [else (max-so-far (max-sub-array-sum-repeated-helper a (- n 1) (- k 1) 0))]))\n  (max-sub-array-sum-repeated-helper a n k 0))\n</code>\nI'm not sure how to implement the <code>max-so-far</code> function. I think I need to use <code>apply</code> but I'm not sure how to use it.\n\n\nA:\n\nYou can use <code>apply</code> to apply a function to a list of arguments.\n<code>(apply max '(1 2 3))\n=&gt; 3\n</code>\nYou can also use <code>apply</code> to apply a function to a list of lists of arguments.\n<code>(apply max '((1 2 3) (4 5 6)))\n=&gt; 6\n</code>\nYou can also use <code>apply</code> to apply a function to a list of lists of lists of arguments.\n<code>(apply max '(((1 2 3) (4 5 6)) ((7 8 9) (10 11 12))))\n=&gt; 12\n</code>\nYou can also use <code>apply</code> to apply a function to a list of lists of lists of lists of arguments.\n<code>(apply max '((((1 2 3) (4 5 6)) ((7 8 9) (10 11 12))) (((13 14 15) (16 17 18)) ((19 20 21) (22 23 24)))))\n=&gt; 24\n</code>\nYou can also use <code>apply</code> to apply a function to a list of lists of lists of lists of lists of arguments.\n<code>(apply max '(((((1 2 3) (4 5 6)) ((7 8 9) (10 11 12))) (((13 14 15) (16 17 18)) ((19 20 21)",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k sum max_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(> sum max_sum) (max_sub_array_sum_repeated_helper_helper a (- n 1) k (+ sum (vector-ref a (- n 1))) sum)]\n        [else (max_sub_array_sum_repeated_helper_helper a (- n 1) k (+ sum (vector-ref a (- n 1))) max_sum)]))\n    (define (max_sub_array_sum_repeated_helper_helper2 a n k sum max_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(> sum max_sum) (max_sub_array_sum_repeated_helper_helper2 a (- n 1) k (+ sum (vector-ref a (- n 1))) sum)]\n        [else (max_sub_array_sum_repeated_helper_helper2 a (- n 1) k (+ sum (vector-ref a (- n 1))) max_sum)]))\n    (define (max_sub_array_sum_repeated_helper_helper3 a n k sum max_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(> sum max_sum) (max_sub_array_sum_repeated_helper_helper3 a (- n 1) k (+ sum (vector-ref a (- n 1))) sum)]\n        [else (max_sub_array_sum_repeated_helper_helper3 a (- n 1) k (+ sum (vector-ref a (- n 1))) max_sum)]))\n    (define (max_sub_array_sum_repeated_helper_helper4 a n k sum max_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(> sum max_sum) (max_sub_array_sum_repeated_helper_helper4 a (- n 1) k (+ sum (vector-ref a (- n 1",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i sum max-sum)\n      (cond\n        [(= i n) max-sum]\n        [else\n         (let ([new-sum (+ sum (vector-ref a i))])\n           (cond\n             [(< new-sum 0)\n              (max_sub_array_sum_helper a n (+ i 1) 0 max-sum)]\n             [else\n              (max_sub_array_sum_helper a n (+ i 1) new-sum (max max-sum new-sum))]))]))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k i sum max-sum)\n    (cond\n      [(= i n) max-sum]\n      [else\n       (let ([new-sum (+ sum (vector-ref a i))])\n         (cond\n           [(< new-sum 0)\n            (max_sub_array_sum_repeated_helper a n k (+ i 1) 0 max-sum)]\n           [else\n            (max_sub_array_sum_repeated_helper a n k (+ i 1) new-sum (max max-sum new-sum))]))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0 0))\n",
    "  (define (max_sub_array_sum_repeated_iter a n k sum max-sum)\n    (cond ((= n 0) max-sum)\n          ((&lt; sum 0) (max_sub_array_sum_repeated_iter (cdr a) (- n 1) k (car a) (max max-sum (car a))))\n          (else (max_sub_array_sum_repeated_iter (cdr a) (- n 1) k (+ sum (car a)) (max max-sum (+ sum (car a)))))))\n  (define (max_sub_array_sum_repeated_iter_2 a n k sum max-sum)\n    (cond ((= n 0) max-sum)\n          ((&lt; sum 0) (max_sub_array_sum_repeated_iter_2 (cdr a) (- n 1) k (car a) (max max-sum (car a))))\n          (else (max_sub_array_sum_repeated_iter_2 (cdr a) (- n 1) k (+ sum (car a)) (max max-sum (+ sum (car a)))))))\n  (define (max_sub_array_sum_repeated_iter_3 a n k sum max-sum)\n    (cond ((= n 0) max-sum)\n          ((&lt; sum 0) (max_sub_array_sum_repeated_iter_3 (cdr a) (- n 1) k (car a) (max max-sum (car a))))\n          (else (max_sub_array_sum_repeated_iter_3 (cdr a) (- n 1) k (+ sum (car a)) (max max-sum (+ sum (car a)))))))\n  (define (max_sub_array_sum_repeated_iter_4 a n k sum max-sum)\n    (cond ((= n 0) max-sum)\n          ((&lt; sum 0) (max_sub_array_sum_repeated_iter_4 (cdr a) (- n 1) k (car a) (max max-sum (car a))))\n          (else (max_sub_array_sum_repeated_iter_4 (cdr a) (- n 1) k",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max_sum)\n    (cond\n      [(= n 0) max_sum]\n      [(= k 0) (max_sub_array_sum_repeated_helper a (- n 1) k 0 max_sum)]\n      [(= n 1) (max_sub_array_sum_repeated_helper a (- n 1) (- k 1) (+ sum (list-ref a 0)) (max sum max_sum))]\n      [else (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (list-ref a (- n 1))) (max sum max_sum))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (let loop ([i 0] [max-sum 0] [curr-sum 0])\n      (cond\n        [(= i n) max-sum]\n        [(>= curr-sum 0)\n         (loop (+ i 1) (max max-sum (+ curr-sum (* k (vector-ref a i)))) (+ curr-sum (* k (vector-ref a i))))]\n        [else\n         (loop (+ i 1) (max max-sum (* k (vector-ref a i))) (* k (vector-ref a i)))])))\n  (max_sub_array_sum_repeated_helper a n k))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum)\n      (if (zero? n)\n          max-sum\n          (let ((cur-sum (+ (car a) max-sum)))\n            (if (&lt; cur-sum 0)\n                (max_sub_array_sum_helper (cdr a) (- n 1) 0)\n                (max_sub_array_sum_helper (cdr a) (- n 1) cur-sum)))))\n    (define (max_sub_array_sum_helper2 a n max-sum)\n      (if (zero? n)\n          max-sum\n          (let ((cur-sum (max_sub_array_sum_helper a n 0)))\n            (max_sub_array_sum_helper2 a (- n 1) (max cur-sum max-sum)))))\n    (max_sub_array_sum_helper2 a n 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (if (zero? k)\n        max-sum\n        (let ((cur-sum (max_sub_array_sum a n)))\n          (max_sub_array_sum_repeated_helper a n (- k 1) (max cur-sum max-sum)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k sum)\n    (cond ((= n 0) sum)\n          ((= k 1) (max_sub_array_sum_repeated_helper a n 0 (+ sum (vector-ref a (- n 1)))))\n          ((= k 2) (max_sub_array_sum_repeated_helper a n 0 (+ sum (vector-ref a (- n 1)) (vector-ref a (- n 1)))))\n          ((= k 3) (max_sub_array_sum_repeated_helper a n 0 (+ sum (vector-ref a (- n 1)) (vector-ref a (- n 1)) (vector-ref a (- n 1)))))\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) (+ sum (vector-ref a (- n 1)) (vector-ref a (- n 1)) (vector-ref a (- n 1)) (vector-ref a (- n 1)))))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum)\n      (if (zero? n)\n          max_sum\n          (let ([cur_sum (+ (car a) (max 0 max_sum))])\n            (max_sub_array_sum_helper (cdr a) (- n 1) cur_sum))))\n    (max_sub_array_sum_helper a n 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (zero? k)\n        max_sum\n        (let ([cur_sum (max_sub_array_sum a n)])\n          (max_sub_array_sum_repeated_helper a n (- k 1) (max cur_sum max_sum)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max-so-far max-ending-here)\n      (cond\n        [(= i n) max-so-far]\n        [else\n         (define max-ending-here (max 0 (+ max-ending-here (vector-ref a i))))\n         (define max-so-far (max max-so-far max-ending-here))\n         (max_sub_array_sum_helper a n (+ i 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k i max-so-far)\n    (cond\n      [(= i k) max-so-far]\n      [else\n       (define max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n k (+ i 1) max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))])\n           (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum)\n      (if (zero? n)\n          max-sum\n          (let ([cur-sum (+ (car a) (max-sub-array-sum-helper (cdr a) (- n 1) max-sum))])\n            (if (&gt; cur-sum max-sum)\n                cur-sum\n                max-sum))))\n    (max-sub-array-sum-helper a n 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (if (zero? k)\n        max-sum\n        (let ([cur-sum (max_sub_array_sum a n)])\n          (if (&gt; cur-sum max-sum)\n              (max_sub_array_sum_repeated_helper a n (- k 1) cur-sum)\n              (max_sub_array_sum_repeated_helper a n (- k 1) max-sum)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond\n        [(= n 0) max-so-far]\n        [else\n         (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n         (define max-so-far (max max-so-far max-ending-here))\n         (max_sub_array_sum_helper a (- n 1) max-so-far max-ending-here)]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond\n      [(= k 0) max-so-far]\n      [else\n       (define max-so-far (max max-so-far (max_sub_array_sum a n)))\n       (max_sub_array_sum_repeated_helper a n (- k 1) max-so-far)]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated-helper a n k)\n    (let loop ([i 0] [max-sum 0] [curr-sum 0])\n      (cond [(= i n) max-sum]\n            [(< curr-sum 0) (loop (+ i 1) max-sum (+ a[i] k))]\n            [else (loop (+ i 1) (max max-sum curr-sum) (+ curr-sum a[i]))])))\n  (max_sub_array_sum_repeated-helper a n k))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (if (&lt; max-ending-here 0) 0 (+ max-ending-here (vector-ref a (- n 1))))])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n -1/0 -1/0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k -1/0))\n</code>\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum-iter a n i sum max-sum)\n      (if (= i n)\n          max-sum\n          (let ((sum (+ sum (vector-ref a i))))\n            (if (&lt; sum 0)\n                (max_sub_array_sum-iter a n (+ i 1) 0 max-sum)\n                (max_sub_array_sum-iter a n (+ i 1) sum (max sum max-sum))))))\n    (max_sub_array_sum-iter a n 0 0 0))\n  (define (max_sub_array_sum-repeated a n k)\n    (define (max_sub_array_sum-repeated-iter a n k i sum max-sum)\n      (if (= i n)\n          max-sum\n          (let ((sum (+ sum (vector-ref a i))))\n            (if (&lt; sum 0)\n                (max_sub_array_sum-repeated-iter a n k (+ i 1) 0 max-sum)\n                (max_sub_array_sum-repeated-iter a n k (+ i 1) sum (max sum max-sum))))))\n    (max_sub_array_sum-repeated-iter a n k 0 0 0))\n  (max_sub_array_sum-repeated a n k))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (if (&lt; max-ending-here 0) 0 (+ max-ending-here (vector-ref a (- n 1))))])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n -999999 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k -999999))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond [(= n 0) max-so-far]\n            [(> max-ending-here 0)\n             (max_sub_array_sum_helper (cdr a) (- n 1)\n                                       (max max-so-far max-ending-here)\n                                       (+ max-ending-here (car a)))]\n            [else\n             (max_sub_array_sum_helper (cdr a) (- n 1)\n                                       (max max-so-far max-ending-here)\n                                       (car a))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond [(= k 0) max-so-far]\n          [else\n           (max_sub_array_sum_repeated_helper a n (- k 1)\n                                              (max max-so-far\n                                                   (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i j sum max-sum)\n      (cond\n        [(= i n) max-sum]\n        [(= j n) (max_sub_array_sum_helper a n (+ i 1) i 0 max-sum)]\n        [(>= sum 0) (max_sub_array_sum_helper a n i (+ j 1) (+ sum (vector-ref a j)) (max max-sum sum))]\n        [else (max_sub_array_sum_helper a n (+ i 1) i 0 max-sum)]))\n    (max_sub_array_sum_helper a n 0 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k i j sum max-sum)\n    (cond\n      [(= i n) max-sum]\n      [(= j n) (max_sub_array_sum_repeated_helper a n k (+ i 1) i 0 max-sum)]\n      [(>= sum 0) (max_sub_array_sum_repeated_helper a n k i (+ j 1) (+ sum (vector-ref a j)) (max max-sum sum))]\n      [else (max_sub_array_sum_repeated_helper a n k (+ i 1) i 0 max-sum)]))\n  (max_sub_array_sum_repeated_helper a n k 0 0 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(> cur_sum max_sum) (max_sub_array_sum_helper a (- n 1) cur_sum (+ cur_sum (vector-ref a (- n 1))))]\n        [else (max_sub_array_sum_helper a (- n 1) max_sum (+ cur_sum (vector-ref a (- n 1))))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum cur_sum)\n    (cond\n      [(= k 0) max_sum]\n      [(> cur_sum max_sum) (max_sub_array_sum_repeated_helper a n (- k 1) cur_sum (+ cur_sum (max_sub_array_sum a n)))]\n      [else (max_sub_array_sum_repeated_helper a n (- k 1) max_sum (+ cur_sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (if (zero? n)\n          max_sum\n          (let ([cur_sum (+ cur_sum (vector-ref a (- n 1)))]\n                [max_sum (if (&gt; cur_sum max_sum) cur_sum max_sum)])\n            (if (&lt; cur_sum 0)\n                (max_sub_array_sum_helper a (- n 1) max_sum 0)\n                (max_sub_array_sum_helper a (- n 1) max_sum cur_sum)))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (zero? k)\n        max_sum\n        (let ([max_sum (max max_sum (max_sub_array_sum a n))])\n          (max_sub_array_sum_repeated_helper a n (- k 1) max_sum))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum curr-sum)\n      (cond\n        [(= n 0) max-sum]\n        [(> curr-sum max-sum) (max_sub_array_sum_helper a (- n 1) curr-sum (+ curr-sum (vector-ref a (- n 1))))]\n        [else (max_sub_array_sum_helper a (- n 1) max-sum (+ curr-sum (vector-ref a (- n 1))))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum curr-sum)\n    (cond\n      [(= k 0) max-sum]\n      [(> curr-sum max-sum) (max_sub_array_sum_repeated_helper a n (- k 1) curr-sum (+ curr-sum (max_sub_array_sum a n)))]\n      [else (max_sub_array_sum_repeated_helper a n (- k 1) max-sum (+ curr-sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum curr_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(> curr_sum max_sum) (max_sub_array_sum_helper a (- n 1) curr_sum (+ curr_sum (vector-ref a (- n 1))))]\n        [else (max_sub_array_sum_helper a (- n 1) max_sum (+ curr_sum (vector-ref a (- n 1))))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (cond\n      [(= k 0) max_sum]\n      [else (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_so_far max_ending_here)\n      (cond\n        [(= n 0) max_so_far]\n        [(>= max_ending_here 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_so_far max_ending_here) (+ max_ending_here (car a)))]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_so_far max_ending_here) (car a))]))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_so_far)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_so_far (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n)\n      (define (max_sub_array_sum_helper_helper a n max_so_far max_ending_here)\n        (cond\n          [(= n 0) max_so_far]\n          [(> max_ending_here 0)\n           (max_sub_array_sum_helper_helper a (- n 1) max_so_far (+ max_ending_here (vector-ref a (- n 1))))]\n          [else\n           (max_sub_array_sum_helper_helper a (- n 1) max_so_far (vector-ref a (- n 1)))]))\n      (max_sub_array_sum_helper_helper a n 0 0))\n    (max_sub_array_sum_helper a n))\n  (define (max_sub_array_sum_repeated_helper a n k max_so_far)\n    (cond\n      [(= k 0) max_so_far]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_so_far (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (let loop ((i 0) (j 0) (sum 0) (max-sum 0))\n      (cond ((= i n) max-sum)\n            ((= j n) (loop (+ i 1) i 0 max-sum))\n            (else (let ((new-sum (+ sum (vector-ref a j))))\n                    (loop i (+ j 1) new-sum (max max-sum new-sum)))))))\n  (let ((max-sum (max_sub_array_sum a n)))\n    (let loop ((i 0) (sum 0))\n      (cond ((= i n) sum)\n            (else (loop (+ i 1) (+ sum (vector-ref a i))))))))\n"
  ]
}