{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n(define (max_sub_array_sum_repeated a n k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum_repeated))\n    (check-equal? (candidate (list 10 20 -30 -1) 4 3) 30)\n    (check-equal? (candidate (list -1 10 20) 3 2) 59)\n    (check-equal? (candidate (list -1 -2 -3) 3 3) -1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([max-sum (apply max (map sum (in-naturals n)))]\n        [max-sum-repeated (apply max (map sum (in-naturals (* n k))))])\n    (if (&gt; max-sum max-sum-repeated)\n        max-sum\n        max-sum-repeated)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far current-max)\n      (if (zero? n)\n          max-so-far\n          (let ([current-max (max (add1 current-max) 0)])\n            (max_sub_array_sum_helper (cdr a) (sub1 n) (max max-so-far current-max) current-max))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far current-max)\n    (if (zero? k)\n        max-so-far\n        (let ([current-max (max (add1 current-max) 0)])\n          (max_sub_array_sum_repeated_helper a n (sub1 k) (max max-so-far current-max) current-max))))\n  (max_sub_array_sum_repeated_helper a n k 0 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(>= cur_sum 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum (+ cur_sum (car a))) (+ cur_sum (car a)))]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum (car a)) (car a))]))\n    (max_sub_array_sum_helper a n -1000000000 0))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (cond\n      [(= k 1) (max_sub_array_sum a n)]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k -1000000000))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max_sum cur_sum)\n      (cond\n        [(= n 0) max_sum]\n        [(>= cur_sum 0)\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum cur_sum) (+ cur_sum (car a)))\n         ]\n        [else\n         (max_sub_array_sum_helper (cdr a) (- n 1) (max max_sum cur_sum) (car a))\n         ]))\n    (max_sub_array_sum_helper a n (car a) (car a)))\n  (define (max_sub_array_sum_repeated_helper a n k max_sum cur_sum)\n    (cond\n      [(= k 0) max_sum]\n      [(>= cur_sum 0)\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum cur_sum) (+ cur_sum (max_sub_array_sum a n)))\n       ]\n      [else\n       (max_sub_array_sum_repeated_helper a n (- k 1) (max max_sum cur_sum) (max_sub_array_sum a n))\n       ]))\n  (max_sub_array_sum_repeated_helper a n k (max_sub_array_sum a n) (max_sub_array_sum a n)))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond [(= n 0) max-so-far]\n            [(> max-ending-here 0)\n             (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) (+ max-ending-here (car a)))]\n            [else (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) (car a))]))\n    (max_sub_array_sum_helper a n -1/0 -1/0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond [(= k 0) max-so-far]\n          [else (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))]))\n  (max_sub_array_sum_repeated_helper a n k -1/0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond ((= n 0) max-so-far)\n            ((&gt; max-ending-here 0)\n             (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far max-ending-here) (+ max-ending-here (car a))))\n            (else (max_sub_array_sum_helper (cdr a) (- n 1) (max max-so-far (car a)) (car a)))))\n    (max_sub_array_sum_helper a n (car a) (car a)))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond ((= k 1) (max_sub_array_sum a n))\n          ((&gt; max-so-far 0)\n           (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (+ max-so-far (max_sub_array_sum a n)))))\n          (else (max_sub_array_sum_repeated_helper a n (- k 1) (+ max-so-far (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-sum max-sum-so-far)\n      (if (zero? n)\n          max-sum\n          (let ([max-sum-so-far (max max-sum-so-far (+ max-sum-so-far (vector-ref a (- n 1))))]\n                [max-sum (max max-sum max-sum-so-far)])\n            (max_sub_array_sum_helper a (- n 1) max-sum max-sum-so-far))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-sum)\n    (if (zero? k)\n        max-sum\n        (let ([max-sum (max max-sum (max_sub_array_sum a n))])\n          (max_sub_array_sum_repeated_helper a n (- k 1) max-sum))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (let ([max-so-far 0]\n        [max-ending-here 0])\n    (for ([i (in-range (* n k))])\n      (set! max-ending-here (+ max-ending-here (vector-ref a (% i n))))\n      (when (&lt; max-ending-here 0)\n        (set! max-ending-here 0))\n      (when (&gt; max-ending-here max-so-far)\n        (set! max-so-far max-ending-here)))\n    max-so-far))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i max-so-far max-ending-here)\n      (if (= i n)\n          max-so-far\n          (let ((max-ending-here (+ max-ending-here (vector-ref a i))))\n            (if (&lt; max-ending-here 0)\n                (max-sub-array-sum-helper a n (+ i 1) max-so-far 0)\n                (max-sub-array-sum-helper a n (+ i 1) (max max-so-far max-ending-here) max-ending-here)))))\n    (max-sub-array-sum-helper a n 0 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (= k 1)\n        (max-sub-array-sum a n)\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max-sub-array-sum a n)))))\n  (max_sub_array-sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (if (zero? n)\n          max-so-far\n          (let ([max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1))))])\n            (max_sub_array_sum_helper a (- n 1) (max max-so-far max-ending-here) max-ending-here))))\n    (max_sub_array_sum_helper a n 0 0))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (if (zero? k)\n        max-so-far\n        (max_sub_array_sum_repeated_helper a n (- k 1) (max max-so-far (max_sub_array_sum a n)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max-sub-array-sum a n)\n    (define (max-sub-array-sum-helper a n i max-so-far max-ending-here)\n      (cond\n        [(= i n) max-so-far]\n        [else (max-sub-array-sum-helper a n (+ i 1)\n                                        (max max-so-far max-ending-here)\n                                        (+ max-ending-here (vector-ref a i)))]))\n    (max-sub-array-sum-helper a n 0 0 0))\n  (define (max-sub-array-sum-repeated-helper a n k max-so-far)\n    (cond\n      [(= k 1) (max-sub-array-sum a n)]\n      [else (max-sub-array-sum-repeated-helper a n (- k 1)\n                                               (max max-so-far (max-sub-array-sum a n)))]))\n  (max-sub-array-sum-repeated-helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated-helper a n k sum-so-far max-sum-so-far)\n    (cond\n      [(= n 0) max-sum-so-far]\n      [(= k 1) (max (max-sub-array-sum a n sum-so-far) max-sum-so-far)]\n      [else (max_sub_array_sum_repeated-helper a n (- k 1) (+ sum-so-far (sum-array a n)) (max (max-sub-array-sum a n sum-so-far) max-sum-so-far))]))\n  (max_sub_array_sum_repeated-helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k max_sum)\n    (if (zero? k)\n        max_sum\n        (let ([max_sum_current (max_sub_array_sum a n)])\n          (if (&gt; max_sum_current max_sum)\n              (max_sub_array_sum_repeated_helper a n (- k 1) max_sum_current)\n              (max_sub_array_sum_repeated_helper a n (- k 1) max_sum)))))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n i j)\n      (cond ((= i j) (list (list i j) 0))\n            ((= i (+ j 1)) (list (list i j) (vector-ref a i)))\n            (else (let* ((left (max_sub_array_sum_helper a n i (- j 1)))\n                         (right (max_sub_array-sum_helper a n (+ i 1) j))\n                         (cross (max_sub_array_sum_cross a n i j))\n                         (left-sum (cadr left))\n                         (right-sum (cadr right))\n                         (cross-sum (cadr cross)))\n                    (cond ((> left-sum right-sum)\n                           (if (> left-sum cross-sum)\n                               left\n                               cross))\n                          ((> right-sum cross-sum)\n                           right)\n                          (else cross))))))\n    (max_sub_array_sum_helper a n 0 (- n 1)))\n  (define (max_sub_array_sum_cross a n i j)\n    (define (max_sub_array_sum_cross_helper a n i j sum)\n      (cond ((= i j) (list (list i j) sum))\n            (else (max_sub_array_sum_cross_helper a n (+ i 1) j (+ sum (vector-ref a i))))))\n    (max_sub_array_sum_cross_helper a n i j 0))\n  (define (max_sub_array_sum_repeated_helper a n k)\n    (cond ((= k 1) (max_sub_array_sum a n))\n          (else (let* ((left (max_sub_array_sum_repeated_helper a n (- k 1)))\n                       (right (max_sub_array_sum_repeated_helper a n (- k 2)))\n                       (left-sum (cadr left))\n                       (right-sum (cadr right))\n                       (left-range (car left))\n                       (right-range (car right))\n                      ",
    "  (define (max_sub_array_sum_repeated_helper a n k sum)\n    (cond\n      [(= n 0) sum]\n      [(= k 1) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1))))]\n      [(= k 2) (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1)) (vector-ref a (- n 1))))]\n      [else (max_sub_array_sum_repeated_helper a (- n 1) k (+ sum (vector-ref a (- n 1)) (vector-ref a (- n 1)) (vector-ref a (- n 1))))]))\n  (max_sub_array_sum_repeated_helper a n k 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k max_sum)\n      (if (zero? k)\n          max_sum\n          (max_sub_array_sum_repeated_helper_helper a n (- k 1) (max max_sum (max_sub_array_sum a n)))))\n    (max_sub_array_sum_repeated_helper_helper a n k (max_sub_array_sum a n)))\n  (max_sub_array_sum_repeated_helper a n k))\n",
    "  (define (max_sub_array_sum_repeated-helper a n k)\n    (define (max_sub_array_sum-helper a n)\n      (define (max_sub_array_sum-helper-helper a n max-so-far max-ending-here)\n        (cond\n          [(= n 0) max-so-far]\n          [else\n           (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n           (define max-so-far (max max-so-far max-ending-here))\n           (max_sub_array_sum-helper-helper a (- n 1) max-so-far max-ending-here)]))\n      (max_sub_array_sum-helper-helper a n 0 0))\n    (define (max_sub_array_sum-repeated-helper a n k)\n      (cond\n        [(= k 1) (max_sub_array_sum-helper a n)]\n        [else\n         (define (max_sub_array_sum-repeated-helper-helper a n k max-so-far max-ending-here)\n           (cond\n             [(= n 0) max-so-far]\n             [else\n              (define max-ending-here (max 0 (+ max-ending-here (vector-ref a (- n 1)))))\n              (define max-so-far (max max-so-far max-ending-here))\n              (max_sub_array_sum-repeated-helper-helper a (- n 1) k max-so-far max-ending-here)]))\n         (define max-so-far (max_sub_array_sum-repeated-helper-helper a n k 0 0))\n         (define max-ending-here 0)\n         (define (max_sub_array_sum-repeated-helper-helper-helper a n k max-so-far max-ending-here)\n           (cond\n             [(= n 0) max-so-far]\n             [else\n              (define max-ending-here (max 0 (+ max-ending-here (vector",
    "  (define (max_sub_array_sum_repeated_helper a n k sum max-sum)\n    (cond ((= n 0) max-sum)\n          ((= k 0) (max-sub-array-sum-repeated-helper a n (- k 1) 0 max-sum))\n          ((&lt; sum 0) (max-sub-array-sum-repeated-helper a (- n 1) k (vector-ref a (- n 1)) max-sum))\n          (else (max-sub-array-sum-repeated-helper a (- n 1) k (+ sum (vector-ref a (- n 1))) (max sum max-sum)))))\n  (max-sub-array-sum-repeated-helper a n k 0 0))\n",
    "  (define (max_sub_array_sum_repeated_helper a n k)\n    (define (max_sub_array_sum_repeated_helper_helper a n k)\n      (define (max_sub_array_sum_repeated_helper_helper_helper a n k)\n        (define (max_sub_array_sum_repeated_helper_helper_helper_helper a n k)\n          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper a n k)\n            (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper a n k)\n              (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper a n k)\n                (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                  (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                    (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                      (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                        (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a n k)\n                          (define (max_sub_array_sum_repeated_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_",
    "  (define (max_sub_array_sum a n)\n    (define (max_sub_array_sum_helper a n max-so-far max-ending-here)\n      (cond ((= n 0) max-so-far)\n            ((&gt; max-ending-here 0)\n             (max_sub_array_sum_helper (cdr a) (- n 1)\n                                       (max max-so-far max-ending-here)\n                                       (+ max-ending-here (car a))))\n            (else\n             (max_sub_array_sum_helper (cdr a) (- n 1)\n                                       (max max-so-far (car a))\n                                       (car a)))))\n    (max_sub_array_sum_helper a n -1000000000 -1000000000))\n  (define (max_sub_array_sum_repeated_helper a n k max-so-far)\n    (cond ((= k 0) max-so-far)\n          (else\n           (max_sub_array_sum_repeated_helper a n (- k 1)\n                                              (max max-so-far\n                                                   (max_sub_array_sum a n))))))\n  (max_sub_array_sum_repeated_helper a n k -1000000000))\n</code>\n"
  ]
}