{
  "name": "mbpp_773_occurance_substring",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n(define (occurance_substring text pattern)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate occurance_substring))\n    (check-equal? (candidate \"python programming, python language\" \"python\") (list \"python\" 0 6))\n    (check-equal? (candidate \"python programming,programming language\" \"programming\") (list \"programming\" 7 18))\n    (check-equal? (candidate \"python programming,programming language\" \"language\") (list \"language\" 31 39))\n    (check-equal? (candidate \"c++ programming, c++ language\" \"python\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (occurance_substring-iter text pattern)\n    (if (string-contains text pattern)\n        (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n        '()))\n  (if (string-contains text pattern)\n      (cons (occurance_substring-iter text pattern) (occurance_substring (substring text (+ 1 (string-index text pattern))) pattern))\n      '()))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if pos\n        (list pos (add1 pos (string-length pattern)))\n        'None)))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (equal? pos #f)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list (string-count text pattern) pos))))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond ((string-index text pattern index) => (lambda (i) (cons i (occurance_substring_iter text pattern (+ i 1)))))\n          (else '())))\n  (occurance_substring_iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond [(empty? text) #f]\n          [(string-contains text pattern)\n           (cons pos (occurance_substring-iter (substring text (+ 1 (string-length pattern))) pattern (+ 1 pos)))]\n          [else (occurance_substring-iter (substring text 1) pattern (+ 1 pos))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not (eq? pos #f))\n        (list pos (add1 pos (string-length pattern)))\n        #f)))\n",
    "  (define (occurance_substring-iter text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter (rest text) (rest pattern)))]\n          [else (occurance_substring-iter (rest text) pattern)]))\n  (define (occurance_substring-iter2 text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter2 (rest text) (rest pattern)))]\n          [else (occurance_substring-iter2 (rest text) pattern)]))\n  (define (occurance_substring-iter3 text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter3 (rest text) (rest pattern)))]\n          [else (occurance_substring-iter3 (rest text) pattern)]))\n  (define (occurance_substring-iter4 text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter4 (rest text) (rest pattern)))]\n          [else (occurance_substring-iter4 (rest text) pattern)]))\n  (define (occurance_substring-iter5 text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter5 (rest text) (rest pattern)))]\n          [else (occurance_substring-iter5 (rest text) pattern)]))\n  (define (occurance_substring-iter6 text pattern)\n    (cond [(empty? text) '()]\n         ",
    "  (let ([positions (list)]\n        [pos 0])\n    (while (regexp-match pattern text pos)\n      (set! pos (regexp-match-end 0))\n      (set! positions (cons pos positions)))\n    (reverse positions)))\n",
    "  (define (occurance_substring_iter text pattern position)\n    (cond\n      [(empty? text) 'None]\n      [(empty? pattern) (list position)]\n      [(equal? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern) (+ position 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ position 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text)\n       (void)]\n      [(empty? pattern)\n       (void)]\n      [(equal? (first text) (first pattern))\n       (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else\n       (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string=? text \"\") #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern) (list index))\n          (else (append (occurance_substring-iter (substring text 1) pattern (+ index 1))\n                       (occurance_substring-iter (substring text 1) pattern (+ index 1))))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (list pos)]\n      [(equal? (first text) (first pattern)) (cons pos (occurance_substring-iter (rest text) (rest pattern) (+ pos 1)))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (regexp-match pattern text))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [(string=? (substring text 0 (string-length pattern)) pattern)\n     (cons (string-length pattern) (occurance_substring (substring text 1) pattern))]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      'None))\n"
  ]
}