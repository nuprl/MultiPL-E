{
  "name": "mbpp_773_occurance_substring",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n(define (occurance_substring text pattern)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate occurance_substring))\n    (check-equal? (candidate \"python programming, python language\" \"python\") (list \"python\" 0 6))\n    (check-equal? (candidate \"python programming,programming language\" \"programming\") (list \"programming\" 7 18))\n    (check-equal? (candidate \"python programming,programming language\" \"language\") (list \"language\" 31 39))\n    (check-equal? (candidate \"c++ programming, c++ language\" \"python\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (occurance_substring-iter text pattern)\n    (if (string-contains text pattern)\n        (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n        '()))\n  (if (string-contains text pattern)\n      (cons (occurance_substring-iter text pattern) (occurance_substring (substring text (+ 1 (string-index text pattern))) pattern))\n      '()))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if pos\n        (list pos (add1 pos (string-length pattern)))\n        'None)))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (equal? pos #f)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list (string-count text pattern) pos))))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond ((string-index text pattern index) => (lambda (i) (cons i (occurance_substring_iter text pattern (+ i 1)))))\n          (else '())))\n  (occurance_substring_iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond [(empty? text) #f]\n          [(string-contains text pattern)\n           (cons pos (occurance_substring-iter (substring text (+ 1 (string-length pattern))) pattern (+ 1 pos)))]\n          [else (occurance_substring-iter (substring text 1) pattern (+ 1 pos))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not (eq? pos #f))\n        (list pos (add1 pos (string-length pattern)))\n        #f)))\n",
    "  (define (occurance_substring-iter text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter (rest text) (rest pattern)))]\n          [else (occurance_substring-iter (rest text) pattern)]))\n  (define (occurance_substring-iter2 text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter2 (rest text) (rest pattern)))]\n          [else (occurance_substring-iter2 (rest text) pattern)]))\n  (define (occurance_substring-iter3 text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter3 (rest text) (rest pattern)))]\n          [else (occurance_substring-iter3 (rest text) pattern)]))\n  (define (occurance_substring-iter4 text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter4 (rest text) (rest pattern)))]\n          [else (occurance_substring-iter4 (rest text) pattern)]))\n  (define (occurance_substring-iter5 text pattern)\n    (cond [(empty? text) '()]\n          [(empty? pattern) '()]\n          [(equal? (first text) (first pattern))\n           (cons (first text) (occurance_substring-iter5 (rest text) (rest pattern)))]\n          [else (occurance_substring-iter5 (rest text) pattern)]))\n  (define (occurance_substring-iter6 text pattern)\n    (cond [(empty? text) '()]\n         ",
    "  (let ([positions (list)]\n        [pos 0])\n    (while (regexp-match pattern text pos)\n      (set! pos (regexp-match-end 0))\n      (set! positions (cons pos positions)))\n    (reverse positions)))\n",
    "  (define (occurance_substring_iter text pattern position)\n    (cond\n      [(empty? text) 'None]\n      [(empty? pattern) (list position)]\n      [(equal? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern) (+ position 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ position 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text)\n       (void)]\n      [(empty? pattern)\n       (void)]\n      [(equal? (first text) (first pattern))\n       (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else\n       (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string=? text \"\") #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern) (list index))\n          (else (append (occurance_substring-iter (substring text 1) pattern (+ index 1))\n                       (occurance_substring-iter (substring text 1) pattern (+ index 1))))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (list pos)]\n      [(equal? (first text) (first pattern)) (cons pos (occurance_substring-iter (rest text) (rest pattern) (+ pos 1)))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (regexp-match pattern text))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [(string=? (substring text 0 (string-length pattern)) pattern)\n     (cons (string-length pattern) (occurance_substring (substring text 1) pattern))]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string=? pattern \"\") #f)\n          ((string-prefix? pattern text) (list pos (string-length pattern)))\n          (else (occurance_substring_iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond\n      [(empty? text) '()]\n      [(string-contains text pattern) (cons index (occurance_substring_iter (substring text (+ (string-length pattern) 1)) pattern (+ index 1)))]\n      [else (occurance_substring_iter (substring text 1) pattern (+ index 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance-substring-iter text pattern index)\n    (cond\n      [(empty? text) 'None]\n      [(string=? (substring text 0 (string-length pattern)) pattern) (list index (string-length pattern))]\n      [else (occurance-substring-iter (substring text 1) pattern (+ index 1))]))\n  (occurance-substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(equal? (first text) (first pattern))\n       (occurance_substring_iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (if (string-contains text pattern)\n        (list (string-index text pattern)\n              (string-index text pattern (+ 1 (string-index text pattern))))\n      '()))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) (values #f 0)]\n      [(string-prefix? pattern text) (values #t pos)]\n      [else (occurance_substring_iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (if (string-contains text pattern)\n        (list (string-index text pattern) (string-index text pattern index))\n        'None))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (if (string-contains text pattern)\n        (list (string-index text pattern)\n              (string-index text pattern (+ (string-index text pattern) (string-length pattern))))\n        'None))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern pos)\n                 (occurance_substring-iter text pattern (+ (string-index text pattern pos) 1))))\n          (else '())))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) (values #f pos)]\n      [(string-contains text pattern) (values #t pos)]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (cond\n    [(empty? text) empty]\n    [(empty? pattern) empty]\n    [(string=? (substring text 0 (string-length pattern)) pattern)\n     (cons (substring text 0 (string-length pattern)) (occurance_substring (substring text 1) pattern))]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string=? pattern \"\") index)\n          ((string-contains text pattern) (occurance_substring-iter (substring text 1) pattern (+ index 1)))\n          (else #f)))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string-contains text pattern) (list pos (string-index text pattern))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (negative? pos)\n        'None\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (list pos)]\n      [(equal? (first text) (first pattern)) (cons pos (occurance_substring_iter (rest text) (rest pattern) (+ pos 1)))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (cond ((string-contains text pattern)\n         (list (string-index text pattern)\n               (string-index text pattern (string-length pattern))))\n        (else '())))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      ((string-contains text pattern)\n       (cons (string-index text pattern) (occurance_substring_iter (substring text (+ (string-index text pattern) (string-length pattern))) pattern (+ pos (string-index text pattern) (string-length pattern)))))\n      ((not (string-contains text pattern))\n       '())))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond\n      [(empty? text) 'None]\n      [(empty? pattern) index]\n      [(equal? (first text) (first pattern)) (occurance_substring-iter (rest text) (rest pattern) (+ index 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ index 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [(equal? (substring text 0 (string-length pattern)) pattern) (list (substring text 0 (string-length pattern)) 0)]\n    [else (occurance_substring (substring text 1 (string-length text)) pattern)]))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string=? text \"\") '())\n          ((string-contains text pattern)\n           (cons pos (occurance_substring-iter (substring text (+ (string-length pattern) 1)) pattern (+ pos (string-length pattern)))))\n          (else (occurance_substring-iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern)\n                 (string-index text pattern (+ (string-length pattern) (string-index text pattern)))))\n          ((string-contains text (substring pattern 0 1))\n           (occurance_substring_iter (substring text 1) pattern (+ pos 1)))\n          (else '())))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) (error \"No match\")]\n      [(empty? pattern) pos]\n      [(equal? (first text) (first pattern))\n       (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern)\n                 (occurance_substring-iter (substring text (add1 (string-index text pattern))) pattern (add1 pos))))\n          (else '())))\n  (occurance_substring-iter text pattern 0))\n",
    "  (cond [(empty? text) '()]\n        [(empty? pattern) '()]\n        [(string-contains text pattern) (cons (string-index text pattern) (occurance_substring (substring text (+ (string-index text pattern) (string-length pattern))) pattern))]\n        [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (define (occurance_substring-iter text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring-iter (substring text (+ (string-index text pattern) (string-length pattern))) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance_substring-iter text pattern)\n      '()))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (cond\n    [(string=? text \"\") '()]\n    [(string-contains text pattern) (cons (string-index text pattern) (occurance_substring (substring text (add1 (string-index text pattern))) pattern))]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [(string=? (substring text 0 (string-length pattern)) pattern) (list (string-length pattern) (string-length pattern))]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (let ([positions (list)]\n        [pos (string-index text pattern)])\n    (while (not (eq? pos #f))\n      (set! positions (cons pos positions))\n      (set! pos (string-index text pattern (+ 1 pos))))\n    (reverse positions)))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not (eq? pos #f))\n        (list pos (add1 pos (string-length pattern)))\n        #f)))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond\n      [(empty? text) (list 'None)]\n      [(string=? (substring text 0 (string-length pattern)) pattern) (list 'Some (list index (add1 index (string-length pattern))))]\n      [else (occurance_substring_iter (substring text 1) pattern (add1 index))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (list pos)]\n      [(string=? (substring text 0 (string-length pattern)) pattern)\n       (cons pos (occurance_substring-iter (substring text 1) pattern (+ pos 1)))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let* ([substrings (regexp-match* #rx pattern text)])\n    (if (empty? substrings)\n        'None\n        (list (length substrings) (regexp-match* #rx pattern text)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (negative? pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([positions (list)]\n        [index (string-index text pattern)])\n    (while (not (eq? index #f))\n      (set! positions (cons index positions))\n      (set! index (string-index text pattern (+ index 1))))\n    (reverse positions)))\n",
    "  (let loop ([i 0] [j 0])\n    (cond\n      [(= i (string-length text)) #f]\n      [(= j (string-length pattern)) i]\n      [(char=? (string-ref text i) (string-ref pattern j)) (loop (+ i 1) (+ j 1))]\n      [else (loop (+ i 1) 0)])))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'none))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) (values #f #f)]\n      [(string-contains text pattern) (values #t pos)]\n      [else (occurance_substring_iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern)\n                 (string-index text pattern (+ (string-length pattern) (string-index text pattern)))))\n          ((not (string-contains text pattern))\n           'None)))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons pos (occurance_substring-iter (substring text (+ 1 (string-length pattern))) pattern (+ 1 pos))))\n          (else '())))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) 'None]\n      [(string=? pattern (substring text 0 (string-length pattern))) (list pos)]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern i)\n    (cond ((string=? text pattern) i)\n          ((string=? (substring text 0 (string-length pattern)) pattern) i)\n          (else (occurance_substring-iter (substring text 1) pattern (+ i 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(string=? text pattern) (list (list 0 (substring text 0 (string-length pattern)))))\n    [else (cons (list (string-index text pattern) pattern) (occurance_substring (substring text 1) pattern))]))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (list pos)]\n      [(equal? (first text) (first pattern))\n       (append (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))\n               (occurance_substring-iter (rest text) pattern (+ pos 1)))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond\n      [(empty? text) 'None]\n      [(string-contains text pattern) (cons index (occurance_substring_iter (substring text 1) pattern (+ index 1)))]\n      [else (occurance_substring_iter (substring text 1) pattern (+ index 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if pos\n        (list pos (add1 pos (string-length pattern)))\n        'none)))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [(equal? (first text) (first pattern))\n     (if (equal? (rest text) (rest pattern))\n         (list (first text) (first text))\n         (occurance_substring (rest text) (rest pattern)))]\n    [else (occurance_substring (rest text) pattern)]))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) 'None]\n      [(string-prefix? pattern text) (list pos (substring text 0 (string-length pattern)))]\n      [else (occurance_substring_iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) (cons 'None '())]\n      [(empty? pattern) (cons 'None '())]\n      [(equal? (first text) (first pattern))\n       (if (equal? (rest text) (rest pattern))\n           (cons 'One (cons pos '()))\n           (occurance_substring-iter (rest text) (rest pattern) (+ pos 1)))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (let ([positions (list)])\n    (for ([i (in-range (string-length text))])\n      (if (string=? (substring text i (+ i (string-length pattern))) pattern)\n          (set! positions (cons i positions))))\n    (reverse positions)))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern pos)\n                 (occurance_substring-iter text pattern (+ (string-index text pattern pos) 1))))\n          (else '())))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string-contains text pattern)\n           (list (substring text 0 (string-index text pattern))\n                 (substring text (+ (string-index text pattern) (string-length pattern)) (string-length text))\n                 pos))\n          (else (occurance_substring-iter (substring text 1 (string-length text)) pattern (+ pos 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(string-contains text pattern) (cons (string-index text pattern) (string-length pattern))]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (define (occurance_substring-helper text pattern index)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring-helper (substring text (+ 1 (string-index text pattern))) pattern (+ 1 index)))\n        '()))\n  (occurance_substring-helper text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond ((string=? text \"\") #f)\n          ((string=? pattern \"\") #f)\n          ((string-prefix? pattern text) (list index))\n          (else (occurance_substring_iter (substring text 1) pattern (+ index 1)))))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(equal? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(equal? (first text) (first pattern))\n       (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern)\n                 (string-index text pattern (+ (string-length pattern) (string-index text pattern)))))\n          ((string-contains text (substring pattern 0 1))\n           (occurance_substring_iter text pattern (+ pos 1)))\n          (else '())))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(equal? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) (void)]\n      [(empty? pattern) (void)]\n      [(string=? (substring text 0 (string-length pattern)) pattern) (displayln (list pos pattern)) (occurance_substring-iter (substring text 1 (string-length text)) pattern (+ pos 1))]\n      [else (occurance_substring-iter (substring text 1 (string-length text)) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern count)\n    (cond ((string-contains text pattern)\n           (cons count (occurance_substring_iter (substring text (+ 1 (string-index text pattern))) pattern (+ 1 count))))\n          (else '())))\n  (occurance_substring_iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      'None))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text)\n       'None]\n      [(string=? (substring text 0 (string-length pattern)) pattern)\n       (cons pos (occurance_substring_iter (substring text (string-length pattern)) pattern (+ pos (string-length pattern))))]\n      [else\n       (occurance_substring_iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([positions (list)]\n        [start 0])\n    (while (regexp-match pattern text start)\n      (let ([match (regexp-match pattern text start)])\n        (set! positions (cons (substring text (cadr match) (caddr match)) positions))\n        (set! start (caddr match))))\n    (reverse positions)))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern)\n                 (string-index text pattern (+ (string-length pattern) 1))))\n          ((string-contains text pattern pos)\n           (occurance_substring-iter text pattern (+ (string-index text pattern pos) 1)))\n          (else 'None)))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string-contains text pattern) (list pos (string-index text pattern)))\n          (else (occurance_substring_iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring_iter text pattern 0))\n",
    "  (regexp-match? (regexp pattern) text))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not (eq? pos #f))\n        (list pos (add1 pos (string-length pattern)))\n        #f)))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string-contains text pattern) (list pos (string-index text pattern)))\n          (else (occurance_substring-iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not (equal? pos #f))\n        (list pos (add1 pos (string-length pattern)))\n        #f)))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      'None))\n",
    "  (define (occurance_substring_helper text pattern)\n    (cond ((null? text) #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern)\n           (list (string-length pattern) (substring text 0 (string-length pattern))))\n          (else (occurance_substring_helper (substring text 1) pattern))))\n  (occurance_substring_helper text pattern))\n",
    "  (let ([start 0])\n    (let loop ([pos (string-index text pattern start)])\n      (if (not pos)\n          'None\n          (cons pos (loop (string-index text pattern (+ 1 pos))))))))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      'None))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [(string=? (substring text 0 (string-length pattern)) pattern)\n     (list (string-length pattern) (string-length pattern))]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [(string=? (substring text 0 (string-length pattern)) pattern) (list (substring text 0 (string-length pattern)) 0)]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern)\n                 (occurance_substring-iter (substring text (+ (string-index text pattern) (string-length pattern))) pattern (+ pos (string-index text pattern)))))\n          (else '())))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? text pattern) pos]\n      [else (occurance_substring_iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([positions (list)]\n        [pos (string-index text pattern)])\n    (while (not (eq? pos #f))\n      (set! positions (append positions (list pos)))\n      (set! pos (string-index text pattern (+ 1 pos))))\n    (if (empty? positions)\n        #f\n        positions)))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) 'None]\n      [(string=? pattern (substring text 0 (string-length pattern)))\n       (cons pos (occurance_substring-iter (substring text 1) pattern (+ pos 1)))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(equal? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos) (add1 (string-length pattern))))))\n",
    "  (let* ([positions (list)]\n         [len (string-length pattern)])\n    (for ([i (in-range (string-length text))])\n      (when (string=? (substring text i (+ i len)) pattern)\n        (set! positions (cons i positions))))\n    (if (empty? positions)\n        #f\n        (reverse positions))))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) (values #f pos)]\n      [(string-contains text pattern) (values #t pos)]\n      [else (occurance_substring_iter (substring text 1) pattern (+ 1 pos))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? pattern) pos]\n      [(empty? text) #f]\n      [(equal? (first text) (first pattern)) (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) 'None]\n      [(string=? (substring text 0 (string-length pattern)) pattern) (cons pos (occurance_substring_iter (substring text (string-length pattern)) pattern (+ pos (string-length pattern))))]\n      [else (occurance_substring_iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern start)\n    (cond ((string-contains text pattern start)\n           (list (string-index text pattern start)\n                 (string-index text pattern (+ start 1))))\n          (else '())))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(char=? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (list index)]\n      [else\n       (cond\n         [(equal? (first text) (first pattern))\n          (append (occurance_substring_iter (rest text) (rest pattern) (+ index 1))\n                  (occurance_substring_iter (rest text) pattern (+ index 1)))]\n         [else (occurance_substring_iter (rest text) pattern (+ index 1))])]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance-substring-helper text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) #t]\n      [(equal? (first text) (first pattern))\n       (occurance-substring-helper (rest text) (rest pattern) (+ index 1))]\n      [else (occurance-substring-helper (rest text) pattern (+ index 1))]))\n  (occurance-substring-helper text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) index]\n      [(equal? (first text) (first pattern)) (occurance_substring-iter (rest text) (rest pattern) (+ index 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ index 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) 'None]\n      [(string=? (substring text 0 (string-length pattern)) pattern) (cons pos (occurance_substring-iter (substring text 1) pattern (+ pos 1)))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [(string-contains text pattern) (list (string-index text pattern) (string-length pattern))]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (list index)]\n      [(equal? (first text) (first pattern)) (cons index (occurance_substring-iter (rest text) (rest pattern) (+ index 1)))]\n      [else (occurance_substring-iter (rest text) pattern (+ index 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([index (string-index text pattern)])\n    (if (eq? index #f)\n        #f\n        (list index (add1 index)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (negative? pos)\n        'none\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (list pos)]\n      [(equal? (first text) (first pattern))\n       (append (occurance_substring_iter (rest text) (rest pattern) (+ pos 1))\n               (occurance_substring_iter (rest text) pattern (+ pos 1)))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (list pos)]\n      [(equal? (first text) (first pattern))\n       (append (occurance_substring_iter (rest text) (rest pattern) (+ pos 1))\n               (occurance_substring_iter (rest text) pattern (+ pos 1)))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (negative? pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (let loop ([i 0])\n    (cond [(string=? pattern (substring text i (+ i (string-length pattern)))) i]\n          [else (loop (+ i 1))])))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons pos (occurance_substring_iter (substring text (+ 1 (string-index text pattern))) pattern (+ 1 pos))))\n          (else '())))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond\n      [(empty? text) 'None]\n      [(string=? (substring text 0 (string-length pattern)) pattern) (cons index (occurance_substring_iter (substring text 1) pattern (+ index 1)))]\n      [else (occurance_substring_iter (substring text 1) pattern (+ index 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [else\n     (let ([substr (substring text 0 (string-length pattern))])\n       (if (string=? substr pattern)\n           (list (string-length pattern) (string-length pattern))\n           (occurance_substring (substring text 1) pattern)))]))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not (eq? pos #f))\n        (list pos (add1 pos (string-length pattern)))\n        'None)))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern start)\n    (cond ((string-contains text pattern start)\n           (list (string-index text pattern start)\n                 (string-index text pattern (+ start 1))))\n          ((&gt;= start (string-length text))\n           'None)\n          (else (occurance_substring-iter text pattern (+ start 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (string-length text)) #f]\n      [(string=? (substring text i (+ i (string-length pattern))) pattern) i]\n      [else (loop (+ i 1))])))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (let ([positions (list)]\n        [pos 0])\n    (while (regexp-match pattern text pos)\n      (set! pos (regexp-match-positions pattern text pos))\n      (set! positions (cons pos positions))\n      (set! pos (+ 1 (car pos))))\n    (reverse positions)))\n",
    "  (let loop ([i 0])\n    (if (= i (string-length text))\n        'None\n        (if (string-prefix? pattern (substring text i))\n            (list (substring text i) i)\n            (loop (+ i 1))))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern) (cons index (occurance_substring-iter (substring text 1) pattern (+ index 1)))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ index 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? pattern (substring text 0 (string-length pattern))) pos]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ([text text]\n             [pattern pattern]\n             [pos 0])\n    (cond\n      [(empty? text) 'None]\n      [(string-contains text pattern)\n       (list pos (string-index text pattern))]\n      [else (loop (substring text 1) pattern (+ pos 1))])))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? pattern (substring text 0 (string-length pattern))) pos]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos) (add1 pos) (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (cond\n    [(empty? text) 'None]\n    [(empty? pattern) 'None]\n    [(string=? text pattern) 0]\n    [else\n     (let ([index (string-index text (substring pattern 0 1))])\n       (if (not index)\n           'None\n           (let ([rest (occurance_substring (substring text (+ index 1)) (substring pattern 1))])\n             (if (eq? rest 'None)\n                 'None\n                 (+ index rest 1)))))]))\n",
    "  (define (occurance_substring_helper text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) (list index (substring text 0))]\n      [(equal? (first text) (first pattern)) (occurance_substring_helper (rest text) (rest pattern) (+ index 1))]\n      [else (occurance_substring_helper (rest text) pattern (+ index 1))]))\n  (occurance_substring_helper text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern)\n                 (string-index text pattern (+ (string-length pattern) 1))))\n          ((string-contains text (substring pattern 0 1))\n           (occurance_substring-iter (substring text 1) pattern (+ pos 1)))\n          (else 'None)))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (negative? pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (let* ([substrings (string-split text pattern)]\n         [substrings-length (length substrings)])\n    (if (= substrings-length 1)\n        (list 0)\n        (let loop ([substrings substrings]\n                   [substrings-length substrings-length]\n                   [positions (list)]\n                   [i 0])\n          (if (= i substrings-length)\n              positions\n              (let* ([substring (list-ref substrings i)]\n                     [substring-length (length substring)])\n                (loop (list-rest substrings)\n                      (- substrings-length 1)\n                      (append positions (list (+ substring-length (apply + positions))))\n                      (+ i 1))))))))\n",
    "  (define (occurance-substring-iter text pattern start)\n    (cond\n      [(empty? text) 'None]\n      [(string=? (substring text 0 (string-length pattern)) pattern) (list start (add1 start (string-length pattern)))]\n      [else (occurance-substring-iter (substring text 1) pattern (add1 start))]))\n  (occurance-substring-iter text pattern 0))\n",
    "  (let ([start (string-index text pattern)])\n    (if start\n        (list start (+ start (string-length pattern)))\n        'None)))\n",
    "  (define (occurance_substring-iter text pattern start)\n    (cond\n      [(empty? text) empty]\n      [(empty? pattern) (list (substring text start (string-length text)) start)]\n      [(equal? (first text) (first pattern)) (occurance_substring-iter (rest text) (rest pattern) (+ start 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ start 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos 0]\n        [len (string-length text)])\n    (define (loop pos)\n      (cond\n        [(= pos len) #f]\n        [(string-prefix? pattern (substring text pos)) pos]\n        [else (loop (+ pos 1))]))\n    (loop pos)))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond\n      [(empty? text) '()]\n      [(empty? pattern) (cons index (occurance_substring-iter (rest text) pattern (+ index 1)))]\n      [(equal? (first text) (first pattern)) (occurance_substring-iter (rest text) (rest pattern) (+ index 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ index 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance-substring-iter text pattern index)\n    (cond\n      [(empty? text) (values #f #f)]\n      [(string-contains text pattern) (values #t index)]\n      [else (occurance-substring-iter (substring text 1) pattern (+ index 1))]))\n  (occurance-substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(equal? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern start)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern start)\n                 (string-index text pattern (+ 1 start))))\n          (else '())))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern)\n                 (occurance_substring_iter (substring text (+ index 1)) pattern (+ index 1))))\n          (else '())))\n  (occurance_substring_iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (let ([start (string-index text pattern)])\n        (cons start (+ start (string-length pattern))))\n      'none))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) empty]\n      [(empty? pattern) empty]\n      [(equal? (first text) (first pattern))\n       (cons (list pos (add1 pos))\n             (occurance_substring-iter (rest text) (rest pattern) (add1 pos)))]\n      [else (occurance_substring-iter (rest text) pattern (add1 pos))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(and (not (empty? text)) (not (empty? pattern)) (char=? (first text) (first pattern)))\n       (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      'None))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string=? text \"\") #f)\n          ((string-prefix? pattern text) index)\n          (else (occurance_substring-iter (substring text 1) pattern (+ index 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern)\n                 (string-index text pattern (+ (string-length pattern) 1))))\n          ((string-contains text (substring pattern 1))\n           (occurance_substring-iter text (substring pattern 1) (+ pos 1)))\n          (else #f)))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern)\n                 (occurance_substring_iter (substring text (+ 1 (string-index text pattern))) pattern (+ 1 (string-index text pattern)))))\n          (else '())))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        'None\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring_iter text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring_iter (substring text (+ (string-index text pattern) 1)) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance_substring_iter text pattern)\n      '()))\n",
    "  (let ([pos (string-index text pattern)])\n    (if pos\n        (list pos (add1 pos (string-length pattern)))\n        'None)))\n"
  ]
}