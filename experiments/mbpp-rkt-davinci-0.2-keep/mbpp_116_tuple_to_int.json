{
  "name": "mbpp_116_tuple_to_int",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert a given tuple of positive integers into a single integer.\n(define (tuple_to_int nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_to_int))\n    (check-equal? (candidate (list 1 2 3)) 123)\n    (check-equal? (candidate (list 4 5 6)) 456)\n    (check-equal? (candidate (list 5 6 7)) 567)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (define (tuple_to_int_helper nums acc)\n    (if (null? nums)\n        acc\n        (tuple_to_int_helper (cdr nums) (+ (* acc 10) (car nums)))))\n  (tuple_to_int_helper nums 0))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (define (tuple_to_int_helper nums acc)\n    (if (null? nums)\n        acc\n        (tuple_to_int_helper (cdr nums) (+ (* acc 10) (car nums)))))\n  (tuple_to_int_helper nums 0))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n",
    "  (apply * nums))\n"
  ]
}