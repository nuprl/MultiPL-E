{
  "name": "mbpp_560_union_elements",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the union of the elements of two given tuples and output them in sorted order.\n(define (union_elements test_tup1 test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate union_elements))\n    (check-equal? (candidate (list 3 4 5 6) (list 5 7 4 10)) (list 3 4 5 6 7 10))\n    (check-equal? (candidate (list 1 2 3 4) (list 3 4 5 6)) (list 1 2 3 4 5 6))\n    (check-equal? (candidate (list 11 12 13 14) (list 13 15 16 17)) (list 11 12 13 14 15 16 17))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n",
    "  (sort (append test_tup1 test_tup2) <))\n"
  ]
}