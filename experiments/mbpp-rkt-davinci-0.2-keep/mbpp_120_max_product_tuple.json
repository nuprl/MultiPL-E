{
  "name": "mbpp_120_max_product_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n(define (max_product_tuple list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (letrec ([max-product (lambda (list1)\n                          (if (null? list1)\n                              0\n                              (let* ([tuple1 (car list1)]\n                                     [tuple2 (cadr list1)]\n                                     [product1 (* (car tuple1) (car tuple2))]\n                                     [product2 (* (cadr tuple1) (cadr tuple2))]\n                                     [product3 (* (car tuple1) (cadr tuple2))]\n                                     [product4 (* (cadr tuple1) (car tuple2))]\n                                     [max-product (max product1 product2 product3 product4)])\n                                (max max-product (max-product (cdr list1))))))])\n    (max-product list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (define (max_product_tuple_helper list1 max)\n    (cond\n      [(empty? list1) max]\n      [(> (abs (* (first (first list1)) (second (first list1)))) max)\n       (max_product_tuple_helper (rest list1) (abs (* (first (first list1)) (second (first list1)))))\n       ]\n      [else (max_product_tuple_helper (rest list1) max)]))\n  (max_product_tuple_helper list1 0))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) list1))))\n"
  ]
}