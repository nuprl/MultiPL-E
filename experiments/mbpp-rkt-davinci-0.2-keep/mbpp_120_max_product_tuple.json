{
  "name": "mbpp_120_max_product_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n(define (max_product_tuple list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (letrec ([max-product (lambda (list1)\n                          (if (null? list1)\n                              0\n                              (let* ([tuple1 (car list1)]\n                                     [tuple2 (cadr list1)]\n                                     [product1 (* (car tuple1) (car tuple2))]\n                                     [product2 (* (cadr tuple1) (cadr tuple2))]\n                                     [product3 (* (car tuple1) (cadr tuple2))]\n                                     [product4 (* (cadr tuple1) (car tuple2))]\n                                     [max-product (max product1 product2 product3 product4)])\n                                (max max-product (max-product (cdr list1))))))])\n    (max-product list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (define (max_product_tuple_helper list1 max)\n    (cond\n      [(empty? list1) max]\n      [(> (abs (* (first (first list1)) (second (first list1)))) max)\n       (max_product_tuple_helper (rest list1) (abs (* (first (first list1)) (second (first list1)))))\n       ]\n      [else (max_product_tuple_helper (rest list1) max)]))\n  (max_product_tuple_helper list1 0))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) list1))))\n",
    "  (apply max (map (lambda (tuple)\n                    (apply * tuple))\n                  list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (if (null? list1)\n      0\n      (max (apply * (car list1)) (max_product_tuple (cdr list1)))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (define (max_product_tuple_helper list1 max)\n    (cond\n      [(empty? list1) max]\n      [else (let ([x (first list1)])\n              (let ([y (second list1)])\n                (let ([product (* (abs (car x)) (abs (car y)))])\n                  (if (&gt; product max)\n                      (max_product_tuple_helper (rest list1) product)\n                      (max_product_tuple_helper (rest list1) max))\n                  )\n                )\n              )\n            ]\n      )\n    )\n  (max_product_tuple_helper list1 0)\n  )\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (define (max_product_tuple_helper list1 max)\n    (if (null? list1)\n        max\n        (let* ([tuple1 (car list1)]\n               [tuple2 (cadr list1)]\n               [product1 (* (abs (car tuple1)) (abs (car tuple2)))]\n               [product2 (* (abs (cadr tuple1)) (abs (cadr tuple2)))])\n          (if (&gt; product1 max)\n              (max_product_tuple_helper (cdr list1) product1)\n              (max_product_tuple_helper (cdr list1) max)))))\n  (max_product_tuple_helper list1 0))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (let ([max-product 0])\n    (for ([tuple list1])\n      (let ([product (* (abs (car tuple)) (abs (cdr tuple)))])\n        (when (&gt; product max-product)\n          (set! max-product product))))\n    max-product))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) list1))))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (list (abs (car x)) (abs (cadr x)))) list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else (max (product (first list1)) (max_product_tuple (rest list1)))]))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (tuple) (* (abs (car tuple)) (abs (cadr tuple)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (letrec ([max-product (lambda (list1)\n                          (if (null? list1)\n                              1\n                              (let* ([tuple1 (car list1)]\n                                     [tuple2 (cadr list1)]\n                                     [product1 (apply * tuple1)]\n                                     [product2 (apply * tuple2)]\n                                     [max-product-rest (max-product (cdr list1))])\n                                (max product1 product2 max-product-rest))))])\n    (max-product list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (define (helper list1 max)\n    (if (null? list1)\n        max\n        (let* ([tuple1 (car list1)]\n               [tuple2 (cadr list1)]\n               [product1 (* (abs (car tuple1)) (abs (car tuple2)))]\n               [product2 (* (abs (cadr tuple1)) (abs (cadr tuple2)))])\n          (if (or (> product1 max) (> product2 max))\n              (helper (cdr list1) (max product1 product2))\n              (helper (cdr list1) max)))))\n  (helper list1 0))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (define (max_product_tuple_helper list1 max)\n    (cond\n      [(empty? list1) max]\n      [(< (abs (* (first (first list1)) (second (first list1)))) max)\n       (max_product_tuple_helper (rest list1) max)]\n      [else\n       (max_product_tuple_helper (rest list1) (abs (* (first (first list1)) (second (first list1)))))\n       ]))\n  (max_product_tuple_helper list1 0))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x)\n                    (apply * (map abs x)))\n                  list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (apply * (map abs x))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (define (max_product_tuple_helper list1 max)\n    (if (null? list1)\n        max\n        (let* ((tuple1 (car list1))\n               (tuple2 (cadr list1))\n               (product (abs (* (car tuple1) (car tuple2)))))\n          (if (&gt; product max)\n              (max_product_tuple_helper (cdr list1) product)\n              (max_product_tuple_helper (cdr list1) max)))))\n  (max_product_tuple_helper list1 0))\n</code>\nI'm not sure if I'm doing this right. I'm not sure if I'm using the right functions to get the product of the first number in the first tuple and the first number in the second tuple.\n\n\nA:\n\nYou're on the right track, but you're not using the right functions to get the product of the first number in the first tuple and the first number in the second tuple.\nYou're using <code>car</code> and <code>cadr</code>, which are the right functions to get the first element of a list, but you're not using them on lists.  You're using them on tuples, which are not lists.\nYou can use <code>car</code> and <code>cadr</code> on lists, but you can't use them on tuples.  You can use <code>first</code> and <code>second</code> on tuples, but you can't use them on lists.\nYou can use <code>list-ref</code> on both lists and tuples.  It takes two arguments: the list or tuple, and the index of the element you want.  The index of the first element is 0, the index of the second element is 1, and so on.\n<code>(list-ref '(1 2 3) 0)\n=&gt; 1",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (tuple) (* (abs (car tuple)) (abs (cadr tuple)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (apply * (car list1))\n          (max_product_tuple (cdr list1)))]))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (let ([max_product 0])\n    (for ([tuple1 list1]\n          [tuple2 list1])\n      (let ([product (abs (* (car tuple1) (car tuple2)))])\n        (if (&gt; product max_product)\n            (set! max_product product))))\n    max_product))\n</code>\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (apply * (map abs x))) list1)))\n",
    "  (apply max (map (lambda (tuple)\n                    (apply * tuple))\n                  list1)))\n",
    "  (define (product_tuple tuple)\n    (apply * tuple))\n  (apply max (map product_tuple list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x)\n                    (apply * (map abs x)))\n                  list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * (map abs x))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) list1))))\n",
    "  (apply max (map (lambda (tuple)\n                    (apply * tuple))\n                  list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (tuple)\n                    (* (abs (car tuple)) (abs (cadr tuple)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (define (helper list1 max)\n    (if (null? list1)\n        max\n        (let* ([tuple1 (car list1)]\n               [tuple2 (cadr list1)]\n               [product1 (* (abs (car tuple1)) (abs (car tuple2)))]\n               [product2 (* (abs (cadr tuple1)) (abs (cadr tuple2)))])\n          (helper (cdr list1) (max max (max product1 product2))))))\n  (helper list1 0))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (define (max_product_tuple_helper list1 max)\n    (if (null? list1)\n        max\n        (let ((product (apply * (car list1))))\n          (if (&gt; product max)\n              (max_product_tuple_helper (cdr list1) product)\n              (max_product_tuple_helper (cdr list1) max)))))\n  (max_product_tuple_helper list1 0))\n</code>\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (tuple) (* (abs (car tuple)) (abs (cadr tuple)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (define (max_product_tuple_iter list1 max)\n    (cond\n      [(empty? list1) max]\n      [(> (* (car (car list1)) (cadr (car list1))) max)\n       (max_product_tuple_iter (cdr list1) (* (car (car list1)) (cadr (car list1))))]\n      [else (max_product_tuple_iter (cdr list1) max)]))\n  (max_product_tuple_iter list1 0))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (tup) (* (abs (car tup)) (abs (cadr tup)))) list1)))\n",
    "  (apply max (for/list ([tuple1 list1]\n                       [tuple2 list1])\n                 (apply * (map abs (flatten (list tuple1 tuple2)))))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x)\n                    (apply * x))\n                  list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (tuple)\n                    (apply * tuple))\n                  list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (tuple) (* (abs (car tuple)) (abs (cadr tuple)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (cond\n    [(empty? list1) 0]\n    [else\n     (max (apply * (car list1)) (max_product_tuple (cdr list1)))]))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (let loop ((list1 list1)\n             (max_product 0))\n    (if (null? list1)\n        max_product\n        (let ((product (* (abs (car (car list1))) (abs (cadr (car list1))))))\n          (if (&gt; product max_product)\n              (loop (cdr list1) product)\n              (loop (cdr list1) max_product))))))\n</code>\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (tuple)\n                    (apply * tuple))\n                  list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) list1))))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (tuple) (* (abs (car tuple)) (abs (cadr tuple)))) list1)))\n",
    "  (apply max (map (lambda (x) (apply * x)) list1)))\n",
    "  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n"
  ]
}