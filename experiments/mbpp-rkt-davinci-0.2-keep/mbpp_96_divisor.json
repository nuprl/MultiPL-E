{
  "name": "mbpp_96_divisor",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the number of divisors of a given integer.\n(define (divisor n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divisor))\n    (check-equal? (candidate 15) 4)\n    (check-equal? (candidate 12) 6)\n    (check-equal? (candidate 9) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (divisor-iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisor-iter (+ i 1)))\n            (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n",
    "  (define (divisor-iter i)\n    (if (= i n)\n        0\n        (if (= (remainder n i) 0)\n            (+ 1 (divisor-iter (+ i 1)))\n            (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n",
    "  (for/list ([i (in-range 1 (+ n 1))])\n    (if (zero? (modulo n i)) i)))\n",
    "  (define (divisor-iter i acc)\n    (cond ((= i n) acc)\n          ((= (modulo n i) 0) (divisor-iter (+ i 1) (+ acc 1)))\n          (else (divisor-iter (+ i 1) acc))))\n  (divisor-iter 1 0))\n",
    "  (define (divisor-iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisor-iter (+ i 1)))\n            (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n",
    "  (define (divisor-iter n i)\n    (if (= i n)\n        0\n        (if (zero? (modulo n i))\n            (+ 1 (divisor-iter n (+ i 1)))\n            (divisor-iter n (+ i 1)))))\n  (divisor-iter n 1))\n",
    "  (for/list ([i (in-range 1 (+ n 1))])\n    (if (zero? (modulo n i))\n        i)))\n",
    "  (define (divisor-iter i count)\n    (cond ((= i n) count)\n          ((zero? (modulo n i)) (divisor-iter (+ i 1) (+ count 1)))\n          (else (divisor-iter (+ i 1) count))))\n  (divisor-iter 1 0))\n",
    "  (define (divisor-iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisor-iter (+ i 1)))\n            (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n",
    "  (define (divisor-iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisor-iter (+ i 1)))\n            (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n",
    "  (define (divisor-iter i n)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisor-iter (+ i 1) n))\n            (divisor-iter (+ i 1) n))))\n  (divisor-iter 1 n))\n",
    "  (define (divisor-iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisor-iter (+ i 1)))\n            (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n",
    "  (define (divisor-helper n divisor-count)\n    (cond\n      [(= n 1) divisor-count]\n      [(= (remainder n divisor-count) 0) (divisor-helper n (+ divisor-count 1))]\n      [else (divisor-helper n (+ divisor-count 1))]))\n  (divisor-helper n 1))\n",
    "  (define (divisor-iter i)\n    (if (= i n)\n        0\n        (if (= (modulo n i) 0)\n            (+ 1 (divisor-iter (+ i 1)))\n            (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n",
    "  (define (divisor-iter i count)\n    (if (= i n)\n        count\n        (if (zero? (modulo n i))\n            (divisor-iter (+ i 1) (+ count 1))\n            (divisor-iter (+ i 1) count))))\n  (divisor-iter 1 0))\n",
    "  (define (divisor-iter i)\n    (if (&gt; i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n",
    "  (define (divisor-iter i)\n    (if (&gt; i n)\n        0\n        (+ (if (zero? (modulo n i)) 1 0)\n           (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n",
    "  (define (divisor-iter i count)\n    (cond ((= i n) count)\n          ((zero? (modulo n i)) (divisor-iter (+ i 1) (+ count 1)))\n          (else (divisor-iter (+ i 1) count))))\n  (divisor-iter 1 0))\n",
    "  (define (divisor-iter i count)\n    (cond ((= i n) count)\n          ((zero? (modulo n i)) (divisor-iter (+ i 1) (+ count 1)))\n          (else (divisor-iter (+ i 1) count))))\n  (divisor-iter 1 0))\n",
    "  (define (divisor-iter i)\n    (if (= i n)\n        0\n        (if (= (remainder n i) 0)\n            (+ 1 (divisor-iter (+ i 1)))\n            (divisor-iter (+ i 1)))))\n  (divisor-iter 1))\n"
  ]
}