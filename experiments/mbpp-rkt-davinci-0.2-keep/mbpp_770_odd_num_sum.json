{
  "name": "mbpp_770_odd_num_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the sum of fourth power of first n odd natural numbers.\n(define (odd_num_sum n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_num_sum))\n    (check-equal? (candidate 2) 82)\n    (check-equal? (candidate 3) 707)\n    (check-equal? (candidate 4) 3108)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum_odd_num n)\n    (if (= n 1)\n        1\n        (+ (expt n 4) (sum_odd_num (- n 2)))))\n  (sum_odd_num n))\n",
    "  (if (= n 1)\n      1\n      (+ (expt n 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd-num-sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd-num-sum-iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd-num-sum-iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n acc)\n    (if (= n 0)\n        acc\n        (odd_num_sum_iter (- n 1) (+ acc (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (* n n n n)\n         (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum-iter i sum)\n    (if (= i n)\n        sum\n        (odd_num_sum-iter (+ i 1) (+ sum (expt (+ i 1) 4)))))\n  (odd_num_sum-iter 0 0))\n",
    "  (define (odd_num_sum_iter i sum)\n    (if (= i n)\n        sum\n        (odd_num_sum_iter (+ i 1) (+ sum (expt (+ i 1) 4)))))\n  (odd_num_sum_iter 0 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 1) (odd_num_sum_iter (- n 1) (+ sum (expt n 4))))\n          (else (odd_num_sum_iter (- n 1) sum))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd-num-sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd-num-sum-iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd-num-sum-iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum_iter count sum)\n    (if (= count n)\n        sum\n        (odd_num_sum_iter (+ count 1) (+ sum (expt (+ count 1) 4)))))\n  (odd_num_sum_iter 0 0))\n"
  ]
}