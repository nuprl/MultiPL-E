{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find nth centered hexagonal number.\n(define (centered_hexagonal_number n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate centered_hexagonal_number))\n    (check-equal? (candidate 10) 271)\n    (check-equal? (candidate 2) 7)\n    (check-equal? (candidate 9) 217)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* n 2) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n i)\n        (expt i 2)\n        (loop n (+ i 1)))))\n",
    "  (let ([n (exact->inexact n)])\n    (exact->inexact (* 2 n (n + 1)))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (nth_triangular_number n)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n i)\n        sum\n        (loop (- n 1) (+ i 1) (+ sum (* i 6))))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (let ([n2 (* n n)])\n    (+ (* 3 n2) n)))\n",
    "  (define (centered_hexagonal_number-iter n sum)\n    (if (= n 1)\n        sum\n        (centered_hexagonal_number-iter (- n 1) (+ sum (* 2 n) 1))))\n  (centered_hexagonal_number-iter n 1))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ n 2))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n i)\n        sum\n        (loop (- n 1) (+ i 1) (+ sum (* i 2) (- i 1))))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 4))))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n1 (add1 n)])\n    (if (even? n1)\n        (let ([n2 (/ n1 2)])\n          (add1 (* n2 n2)))\n        (let ([n2 (/ (- n1 1) 2)])\n          (* n2 (+ n2 n1))))))\n",
    "  (let ([n (exact->inexact n)])\n    (round (* n (+ 2 n)))))\n"
  ]
}