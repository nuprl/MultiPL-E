{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find nth centered hexagonal number.\n(define (centered_hexagonal_number n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate centered_hexagonal_number))\n    (check-equal? (candidate 10) 271)\n    (check-equal? (candidate 2) 7)\n    (check-equal? (candidate 9) 217)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* n 2) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n i)\n        (expt i 2)\n        (loop n (+ i 1)))))\n",
    "  (let ([n (exact->inexact n)])\n    (exact->inexact (* 2 n (n + 1)))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (nth_triangular_number n)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n i)\n        sum\n        (loop (- n 1) (+ i 1) (+ sum (* i 6))))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (let ([n2 (* n n)])\n    (+ (* 3 n2) n)))\n",
    "  (define (centered_hexagonal_number-iter n sum)\n    (if (= n 1)\n        sum\n        (centered_hexagonal_number-iter (- n 1) (+ sum (* 2 n) 1))))\n  (centered_hexagonal_number-iter n 1))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ n 2))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n i)\n        sum\n        (loop (- n 1) (+ i 1) (+ sum (* i 2) (- i 1))))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 4))))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n1 (add1 n)])\n    (if (even? n1)\n        (let ([n2 (/ n1 2)])\n          (add1 (* n2 n2)))\n        (let ([n2 (/ (- n1 1) 2)])\n          (* n2 (+ n2 n1))))))\n",
    "  (let ([n (exact->inexact n)])\n    (round (* n (+ 2 n)))))\n",
    "  (let ([n (exact->inexact n)])\n    (floor (* (+ n 1) (sqrt (+ 1 (* 8 n)))) 2)))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 1) (+ sum (* i 6))))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 2))))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (nth_triangle_number n)))))\n  (centered_hexagonal_number_iter n 0))\n",
    "  (let ([n (add1 n)])\n    (let ([n2 (expt n 2)])\n      (let ([n3 (expt n 3)])\n        (let ([n4 (expt n 4)])\n          (let ([n5 (expt n 5)])\n            (let ([n6 (expt n 6)])\n              (let ([n7 (expt n 7)])\n                (let ([n8 (expt n 8)])\n                  (let ([n9 (expt n 9)])\n                    (let ([n10 (expt n 10)])\n                      (let ([n11 (expt n 11)])\n                        (let ([n12 (expt n 12)])\n                          (let ([n13 (expt n 13)])\n                            (let ([n14 (expt n 14)])\n                              (let ([n15 (expt n 15)])\n                                (let ([n16 (expt n 16)])\n                                  (let ([n17 (expt n 17)])\n                                    (let ([n18 (expt n 18)])\n                                      (let ([n19 (expt n 19)])\n                                        (let ([n20 (expt n 20)])\n                                          (let ([n21 (expt n 21)])\n                                            (let ([n22 (expt n 22)])\n                                              (let ([n23 (expt n 23)])\n                                                (let ([n24 (expt n 24)])\n                                                  (let ([n25 (expt n 25)])\n                                                    (let ([n26 (expt n 26)])\n                                                      (let ([n27 (expt n 27)])\n                                                        (let ([n28 (expt n 28)])\n                                                          (let ([n29 (expt n 29)])\n                                                            (let ([n30 (expt n 30)])\n                                                              (let ([n31 (expt n 31)])\n                                                                (let ([n32 (expt n 32)])\n                                                                  (let ([n33 (expt n 33)])\n                                                                    (let ([n34 (expt",
    "  (letrec ([nth-centered-hexagonal (lambda (n)\n                                     (if (= n 1)\n                                         1\n                                         (+ nth-centered-hexagonal (- n 1) (* 6 n))))])\n    (nth-centered-hexagonal n)))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (- n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ([n (exact->inexact n)])\n    (if (zero? n)\n        0\n        (+ 1 (* 6 (- n 1))))))\n",
    "  (let ((n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))))\n    (* n (+ n 1) 3)))\n",
    "  (let ((n (+ 1 (* 2 n))))\n    (* n (+ n 1))))\n",
    "  (let loop ([n n] [i 0] [j 0])\n    (cond\n      [(= n i) (* j 2)]\n      [(= n j) (* i 2)]\n      [else (loop n (+ i 1) (+ j 1))])))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n i)\n        (quotient (* i (1+ i)) 2)\n        (loop n (add1 i)))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ([n2 (* n n)])\n    (+ n2 n)))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 2)))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (- n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 1) (/ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))])\n    (quotient (* n (+ n 1)) 2)))\n",
    "  (let loop ([n n] [i 0])\n    (cond\n      [(= n 1) (+ i 1)]\n      [(= n 2) (+ i 6)]\n      [else (loop (- n 2) (+ i 6))])))\n",
    "  (let ((n (if (odd? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (add1 n) n)])\n    (let loop ([i 1])\n      (if (= i n)\n          (let ([n (quotient i 2)])\n            (if (even? i)\n                (add1 (* 3 n (add1 n)))\n                (* 3 n n)))\n          (loop (add1 i))))))\n",
    "  (let ([n (if (even? n) (- n 1) n)])\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ((n (add1 n)))\n    (if (odd? n)\n        (let ((n (quotient n 2)))\n          (add1 (* n (+ n 1) 3)))\n        (let ((n (quotient n 2)))\n          (* n (+ n 1) 3)))))\n",
    "  (let loop ([n n] [i 0])\n    (cond\n      [(= n 0) i]\n      [else (loop (- n 1) (+ i (* 2 n) 1))])))\n",
    "  (let ((n (sub1 n)))\n    (if (even? n)\n        (let ((n (quotient n 2)))\n          (+ (* 3 n n) n))\n        (let ((n (quotient n 2)))\n          (+ (* 3 n n) n 1)))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        (quotient (* i (1+ i)) 2)\n        (loop (+ i 1)))))\n",
    "  (let ([n (if (odd? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 0])\n    (if (= n i)\n        0\n        (+ (centered_hexagonal_number (- n 1))\n           (hexagonal_number i)))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (add1 n)])\n    (expt n 2)))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) n (+ 1 n))])\n    (* n (+ n 2))))\n",
    "  (let ((n (if (odd? n) n (+ 1 n))))\n    (/ (* n (+ n 2)) 4)))\n",
    "  (let ([n (if (odd? n) n (+ 1 n))])\n    (* n (+ n 2))))\n",
    "  (let ([a (expt (- 1) (quotient n 2))])\n    (if (odd? n)\n        (* 3 a (expt 2 (+ a 1)))\n        (* 2 a (expt 2 (+ a 1))))))\n",
    "  (let loop ([n n])\n    (if (zero? n)\n        0\n        (+ (loop (- n 1))\n           (* 6 (- n 1))\n           1))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let ([n (add1 n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (define (centered_hexagonal_number-iter n sum)\n    (if (= n 1)\n        sum\n        (centered_hexagonal_number-iter (- n 1) (+ sum n))))\n  (centered_hexagonal_number-iter n 0))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (letrec ([nth-hexagonal (lambda (n)\n                            (if (= n 1)\n                                1\n                                (+ nth-hexagonal (- n 1) (* 2 n))))])\n    (nth-hexagonal n)))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n i)\n        (let ([j (+ i 1)])\n          (* j (+ j 1) (/ (+ j 2) 2)))\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let ((n-1 (- n 1)))\n    (+ (* n-1 n-1) n-1)))\n",
    "  (let ((n (if (odd? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (* n (+ n 1) (* 3 n -1)))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (letrec ([f (lambda (n)\n                (if (= n 1)\n                    1\n                    (+ (f (- n 1)) (* 6 (- n 1)))))]\n           [g (lambda (n)\n                (if (= n 1)\n                    1\n                    (+ (g (- n 1)) (* 4 (- n 1)))))]\n           [h (lambda (n)\n                (if (= n 1)\n                    1\n                    (+ (h (- n 1)) (* 2 (- n 1)))))]\n           [i (lambda (n)\n                (if (= n 1)\n                    1\n                    (+ (i (- n 1)) n)))])\n    (cond [(= n 1) 1]\n          [(= n 2) 6]\n          [(= n 3) 15]\n          [(= n 4) 28]\n          [(= n 5) 45]\n          [(= n 6) 66]\n          [(= n 7) 91]\n          [(= n 8) 120]\n          [(= n 9) 153]\n          [(= n 10) 190]\n          [(= n 11) 231]\n          [(= n 12) 276]\n          [(= n 13) 325]\n          [(= n 14) 378]\n          [(= n 15) 435]\n          [(= n 16) 496]\n          [(= n 17) 561]\n          [(= n 18) 630]\n          [(= n 19) 703]\n          [(= n 20) 780]\n          [(= n 21) 861]\n          [(= n 22) 946]\n          [(= n 23) 1035]\n          [(= n 24) 1128]\n          [(= n 25) 1225]\n          [(= n 26) 1326]\n          [(= n 27) 1431]\n          [(= n 28) 1540]\n          [(= n 29) 1653]\n          [(= n 30) 1770]\n          [(= n 31) 1891]\n          [(= n 32) 2016]\n          [(= n 33) 2145]\n          [(= n 34) 2278]\n          [(= n 35) 2415]\n          [(= n 36) 2556]\n          [(= n 37) 2701]\n          [(= n 38) 2850]\n          [(= n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (&lt;= n 0)\n        sum\n        (loop (- n i) (+ i 2) (+ sum (* i 2))))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc 6 (- n 1)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ((n2 (* 2 n)))\n    (+ (* n2 n2) n2 1)))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 4))))))\n",
    "  (let ([n (if (odd? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let ([n2 (* n n)])\n    (+ n2 n)))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 1) (/ n 2))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (+ n 1) 2))])\n    (* n (+ n 1) 3)))\n",
    "  (* n (+ n 1) (* 3 n -1)))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ n 2))))\n",
    "  (* n (+ 2 n)))\n",
    "  (let ((n (if (even? n) (- n 1) n)))\n    (* n (+ n 2))))\n",
    "  (let ((n2 (* n n)))\n    (+ n2 n2 (- n 1))))\n",
    "  (* n (+ 2 n)))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ((n (abs n)))\n    (if (even? n)\n        (let ((n (quotient n 2)))\n          (- (* 3 n n) n))\n        (let ((n (quotient n 2)))\n          (* 3 n (+ n 1))))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 0)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (* i i))))))\n",
    "  (let ([n (add1 n)])\n    (if (even? n)\n        (let ([n (quotient n 2)])\n          (* n (+ n 3)))\n        (let ([n (quotient n 2)])\n          (* n (+ n 1))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let loop ([n n])\n    (if (zero? n)\n        0\n        (+ (hexagonal_number n) (loop (sub1 n))))))\n",
    "  (letrec ([nth-triangle (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ n (nth-triangle (- n 1)))))])\n    (nth-triangle (+ n 1))))\n",
    "  (let ((n2 (* n n)))\n    (+ (* n2 n2) (* n2 3) (* n 2))))\n",
    "  (let ([n (exact->inexact n)])\n    (round (* n (1+ n) 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (* i i))))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (* n (+ n 1) (/ (+ n 1) 2)))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (* i i))))))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 0)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (* i i))))))\n",
    "  (let ([n (add1 n)])\n    (expt n 2)))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 1) (/ n 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 4))))))\n",
    "  (let ([n (add1 n)])\n    (expt (- n 1) 2)))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (+ (* n (- n 1)) 1)))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 2))))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n 1) i]\n      [else (loop (- n 1) (+ i 6))])))\n",
    "  (let ([n2 (* n n)])\n    (+ n2 n)))\n",
    "  (* n (+ n 1) (* 3 n -1)))\n",
    "  (let loop ([n n] [i 0] [sum 0])\n    (if (= n i)\n        sum\n        (loop n (+ i 1) (+ sum (+ i 2))))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 6 n)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ([n (if (odd? n) n (+ n 1))])\n    (quotient (* n (+ n 2)) 4)))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ([n (exact->inexact n)])\n    (exact->inexact (* n (1+ n) 2))))\n",
    "  (let ([n (sub1 n)])\n    (if (zero? n)\n        1\n        (+ (* 3 n) (* 2 n n) 1))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (+ i 4))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ((n (if (odd? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let ((n (exact->inexact n)))\n    (if (negative? n)\n        (centered_hexagonal_number (- n))\n        (+ (* n (1+ n)) 1))))\n",
    "  (let ([n (if (odd? n) n (+ 1 n))])\n    (* n (+ n 2))))\n",
    "  (let ((n2 (* n 2)))\n    (if (even? n2)\n        (+ (* n2 n2) n2)\n        (+ (* n2 n2) n2 1))))\n",
    "  (let ([n (modulo n 6)])\n    (cond\n      [(= n 0) (+ 1 (* 3 n))]\n      [(= n 1) (+ 2 (* 3 n))]\n      [(= n 2) (+ 3 (* 3 n))]\n      [(= n 3) (+ 4 (* 3 n))]\n      [(= n 4) (+ 5 (* 3 n))]\n      [(= n 5) (+ 6 (* 3 n))])))\n",
    "  (let loop ([n n] [i 1])\n    (cond [(= n 1) i]\n          [else (loop (- n 1) (+ i 6))])))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ((n2 (* n n)))\n    (+ n2 n2 (- n))))\n",
    "  (define (centered_hexagonal_number-iter n sum)\n    (if (= n 1)\n        sum\n        (centered_hexagonal_number-iter (- n 1) (+ sum (* 2 n) 1))))\n  (centered_hexagonal_number-iter n 1))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (let ((n2 (* n 2)))\n    (+ (* n2 n2) n2)))\n",
    "  (let ((n (if (odd? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 6)))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (exact->inexact n)])\n    (round (* n (+ 2 n)))))\n",
    "  (define (centered_hexagonal_number_iter n sum)\n    (if (= n 1)\n        sum\n        (centered_hexagonal_number_iter (- n 1) (+ sum (* 6 n)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (letrec ([nth (lambda (n)\n                  (if (= n 1)\n                      1\n                      (+ (nth (- n 1)) (* 6 (- n 1)))))]\n           [nth-centered (lambda (n)\n                           (if (= n 1)\n                               1\n                               (+ (nth-centered (- n 1)) (* 6 n))))])\n    (if (= n 1)\n        1\n        (+ (nth-centered (/ n 2)) (nth (/ n 2))))))\n",
    "  (let ([n (add1 n)])\n    (let ([n (add1 (mul 2 n))])\n      (mul n (add1 n)))))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 2)))))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (if (= n 1)\n      1\n      (+ (centered_hexagonal_number (- n 1)) (* 6 (- n 1)))))\n",
    "  (let ([n (add1 n)])\n    (if (odd? n)\n        (let ([m (quotient n 2)])\n          (add1 (* m m)))\n        (let ([m (quotient n 2)])\n          (* m (add1 m))))))\n",
    "  (let loop ((n n) (i 1) (sum 0))\n    (if (= n 0)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 2))))\n",
    "  (let ([n2 (* n 2)])\n    (+ (* n2 n2) n2 1)))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (let loop ([n n] [i 1] [acc 1])\n    (if (= n 1)\n        acc\n        (loop (- n 1) (+ i 2) (+ acc i)))))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let ([n (if (even? n) (+ n 1) n)])\n    (* n (+ n 1) (/ (+ n 1) 2))))\n",
    "  (let ((n2 (* n n)))\n    (+ n2 n2 (- n 1))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (nth_triangular_number n)))))\n  (centered_hexagonal_number_iter n 0))\n",
    "  (let loop ([n n] [i 1] [sum 0])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum (* i i))))))\n",
    "  (let ([n (if (even? n) (quotient n 2) (quotient (- n 1) 2))])\n    (if (even? n)\n        (* n (+ n 2))\n        (* n (+ n 1)))))\n",
    "  (let ((n (if (even? n) n (+ 1 n))))\n    (* n (+ n 2))))\n",
    "  (let loop ((n n) (i 1) (sum 1))\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (letrec ([nth-hexagonal (lambda (n)\n                            (if (= n 1)\n                                1\n                                (+ nth-hexagonal (- n 1) (* 2 n))))])\n    (nth-hexagonal n)))\n",
    "  (let ((n (if (positive? n) n (- n))))\n    (if (zero? n)\n        1\n        (+ (centered_hexagonal_number (- n 1)) (* 6 n)))))\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (let ([n (add1 n)])\n    (let ([n2 (expt n 2)])\n      (let ([n3 (expt n 3)])\n        (let ([n4 (expt n 4)])\n          (let ([n5 (expt n 5)])\n            (let ([n6 (expt n 6)])\n              (let ([n7 (expt n 7)])\n                (let ([n8 (expt n 8)])\n                  (let ([n9 (expt n 9)])\n                    (let ([n10 (expt n 10)])\n                      (let ([n11 (expt n 11)])\n                        (let ([n12 (expt n 12)])\n                          (let ([n13 (expt n 13)])\n                            (let ([n14 (expt n 14)])\n                              (let ([n15 (expt n 15)])\n                                (let ([n16 (expt n 16)])\n                                  (let ([n17 (expt n 17)])\n                                    (let ([n18 (expt n 18)])\n                                      (let ([n19 (expt n 19)])\n                                        (let ([n20 (expt n 20)])\n                                          (let ([n21 (expt n 21)])\n                                            (let ([n22 (expt n 22)])\n                                              (let ([n23 (expt n 23)])\n                                                (let ([n24 (expt n 24)])\n                                                  (let ([n25 (expt n 25)])\n                                                    (let ([n26 (expt n 26)])\n                                                      (let ([n27 (expt n 27)])\n                                                        (let ([n28 (expt n 28)])\n                                                          (let ([n29 (expt n 29)])\n                                                            (let ([n30 (expt n 30)])\n                                                              (let ([n31 (expt n 31)])\n                                                                (let ([n32 (expt n 32)])\n                                                                  (let ([n33 (expt n 33)])\n                                                                    (let ([n34 (expt",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 6 n)))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (if (even? n) n (+ n 1))])\n    (* n (+ n 2))))\n",
    "  (letrec ([nth-hexagonal (lambda (n)\n                            (if (= n 1)\n                                1\n                                (+ nth-hexagonal (- n 1) (* 2 n))))])\n    (nth-hexagonal n)))\n",
    "  (let ((n (if (even? n) (+ n 1) n)))\n    (* n (+ n 2))))\n",
    "  (letrec ([nth-centered-hexagonal-number (lambda (n)\n                                            (if (= n 1)\n                                                1\n                                                (+ (nth-centered-hexagonal-number (- n 1))\n                                                   (* 6 (- n 1)))))]\n           [nth-hexagonal-number (lambda (n)\n                                   (if (= n 1)\n                                       1\n                                       (+ (nth-hexagonal-number (- n 1))\n                                          n)))])\n    (if (= n 1)\n        1\n        (+ (nth-hexagonal-number n)\n           (nth-centered-hexagonal-number n)))))\n",
    "  (let ([n (add1 n)])\n    (if (even? n)\n        (let ([n (quotient n 2)])\n          (let ([n (add1 n)])\n            (let ([n (add1 n)])\n              (let ([n (add1 n)])\n                (let ([n (add1 n)])\n                  (let ([n (add1 n)])\n                    (let ([n (add1 n)])\n                      (let ([n (add1 n)])\n                        (let ([n (add1 n)])\n                          (let ([n (add1 n)])\n                            (let ([n (add1 n)])\n                              (let ([n (add1 n)])\n                                (let ([n (add1 n)])\n                                  (let ([n (add1 n)])\n                                    (let ([n (add1 n)])\n                                      (let ([n (add1 n)])\n                                        (let ([n (add1 n)])\n                                          (let ([n (add1 n)])\n                                            (let ([n (add1 n)])\n                                              (let ([n (add1 n)])\n                                                (let ([n (add1 n)])\n                                                  (let ([n (add1 n)])\n                                                    (let ([n (add1 n)])\n                                                      (let ([n (add1 n)])\n                                                        (let ([n (add1 n)])\n                                                          (let ([n (add1 n)])\n                                                            (let ([n (add1 n)])\n                                                              (let ([n (add1 n)])\n                                                                (let ([n (add1 n)])\n                                                                  (let ([n (add1 n)])\n                                                                    (let ([n (add1 n)])\n                                                                      (let ([n (add1 n)])\n                                                                        (let ([n (add1 n)])\n                                                                          (let ([n (add1 n)])\n                                                                            (let ([n (add1 n)])\n                                                                              (let ([n (add1",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n",
    "  (let loop ([n n])\n    (cond\n      [(= n 1) 1]\n      [else (+ (loop (- n 1)) (* 6 (- n 1)))])\n  )\n)\n",
    "  (let ((n (if (even? n) n (+ n 1))))\n    (* n (+ n 2))))\n",
    "  (define (centered_hexagonal_number_iter n acc)\n    (if (= n 1)\n        acc\n        (centered_hexagonal_number_iter (- n 1) (+ acc (* 2 n) 1))))\n  (centered_hexagonal_number_iter n 1))\n",
    "  (let ([n (if (even? n) (quotient n 2) (+ 1 (quotient n 2)))])\n    (* n (+ n 1) 3)))\n",
    "  (let loop ([n n] [i 1] [sum 1])\n    (if (= n 1)\n        sum\n        (loop (- n 1) (+ i 4) (+ sum i)))))\n"
  ]
}