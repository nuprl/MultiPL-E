{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n(define (get_total_number_of_sequences m n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_total_number_of_sequences))\n    (check-equal? (candidate 10 4) 4)\n    (check-equal? (candidate 5 2) 6)\n    (check-equal? (candidate 16 3) 84)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_total_number_of_sequences_helper m n)\n    (cond\n      [(= n 1) m]\n      [(= n 2) (+ m (* m (- m 1)))]\n      [else\n       (+ (get_total_number_of_sequences_helper m (- n 1))\n          (get_total_number_of_sequences_helper (- m 1) (- n 2)))]))\n  (get_total_number_of_sequences_helper m n))\n",
    "  (cond\n    [(= n 1) m]\n    [(= n 2) (+ m (* m (- m 1)))]\n    [else\n     (let ([total 0])\n       (for ([i (in-range 1 m)])\n         (set! total (+ total (get_total_number_of_sequences (- m i) (- n 1)))))\n       total)]))\n",
    "  (define (helper m n)\n    (cond\n      [(= n 1) m]\n      [(= n 2) (add1 (* m (add1 m)))]\n      [else\n       (let ([m1 (add1 m)])\n         (+ (* m1 (helper m1 (- n 1)))\n            (* (sub1 m1) (helper m1 (- n 2))))]))\n  (helper m n))\n",
    "  (define (helper m n acc)\n    (cond\n      [(= n 0) acc]\n      [(<= m 2) 0]\n      [else\n       (for/sum ([i (in-range 2 m)])\n         (helper i (- n 1) acc))]))\n  (helper m n 1))\n",
    "  (define (get_total_number_of_sequences_iter m n)\n    (cond [(= n 0) 1]\n          [(= m 0) 0]\n          [else (+ (get_total_number_of_sequences_iter m (- n 1))\n                   (get_total_number_of_sequences_iter (- m 1) (- n 1)))]))\n  (get_total_number_of_sequences_iter m n))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= m 0) 0]\n    [else\n     (+ (get_total_number_of_sequences (- m 1) n)\n        (get_total_number_of_sequences (- m 1) (- n 1)))]))\n",
    "  (define (get_total_number_of_sequences_iter m n acc)\n    (if (= n 0)\n        acc\n        (get_total_number_of_sequences_iter m (- n 1) (+ acc (get_total_number_of_sequences_iter_helper m n)))))\n  (get_total_number_of_sequences_iter m n 0))\n",
    "  (define (get_total_number_of_sequences_helper m n current_number)\n    (cond\n      [(= n 0) 1]\n      [(= current_number m) 0]\n      [else\n       (+ (get_total_number_of_sequences_helper m (- n 1) (* current_number 2))\n          (get_total_number_of_sequences_helper m (- n 1) (+ current_number 1)))]))\n  (get_total_number_of_sequences_helper m n 1))\n",
    "  (define (get_total_number_of_sequences_iter m n total)\n    (cond\n      [(= n 0) total]\n      [(= m 0) 0]\n      [else\n       (for/sum ([i (in-range 2 m)])\n         (get_total_number_of_sequences_iter i (- n 1) total))]))\n  (get_total_number_of_sequences_iter m n 0))\n",
    "  (define (helper m n)\n    (cond\n      [(= n 1) m]\n      [(= n 2) (add1 (* m 2))]\n      [else (+ (helper m (- n 1)) (helper (- m 1) (- n 2)))]))\n  (helper m n))\n",
    "  (cond\n    [(= n 1) m]\n    [else\n     (for/sum ([i (in-range 1 m)])\n       (get_total_number_of_sequences (min m (* 2 i)) (- n 1)))]))\n",
    "  (cond\n    [(= n 1) m]\n    [(= n 2) (add1 (add1 (mul m (sub1 m))))]\n    [else (get_total_number_of_sequences m (sub1 n))]))\n",
    "  (define (get_total_number_of_sequences_iter m n acc)\n    (cond\n      [(= n 0) acc]\n      [(= m 0) (get_total_number_of_sequences_iter m (- n 1) 0)]\n      [else (get_total_number_of_sequences_iter (- m 1) (- n 1) (+ acc (get_total_number_of_sequences_iter m (- n 1) 0)))]))\n  (get_total_number_of_sequences_iter m n 0))\n",
    "  (define (helper m n)\n    (cond\n      [(= n 0) 1]\n      [(= m 0) 0]\n      [else\n       (+ (helper (- m 1) n)\n          (helper (- m 1) (- n 1)))]))\n  (helper m n))\n",
    "  (define (get_total_number_of_sequences_iter m n current-number)\n    (if (= n 0)\n        1\n        (let ((max-number (min m (* 2 current-number))))\n          (for/sum ([i (in-range current-number (+ max-number 1))])\n            (get_total_number_of_sequences_iter m (- n 1) i)))))\n  (get_total_number_of_sequences_iter m n 1))\n",
    "  (define (helper m n acc)\n    (if (= n 0)\n        acc\n        (for/sum ([i (in-range (* 2 n) m)])\n          (helper m (- n 1) acc))))\n  (helper m n 0))\n",
    "  (define (get_total_number_of_sequences_iter m n current-number)\n    (cond\n      [(= n 0) 1]\n      [(= current-number 1) (get_total_number_of_sequences_iter m (- n 1) 2)]\n      [(= current-number m) (get_total_number_of_sequences_iter m (- n 1) (quotient current-number 2))]\n      [else (+ (get_total_number_of_sequences_iter m (- n 1) (quotient current-number 2))\n              (get_total_number_of_sequences_iter m (- n 1) (+ current-number 1)))]))\n  (get_total_number_of_sequences_iter m n 1))\n",
    "  (cond\n    [(= n 0) 1]\n    [(= n 1) m]\n    [else\n     (for/sum ([i (in-range 1 m)])\n       (get_total_number_of_sequences (/ i 2) (- n 1)))]))\n",
    "  (define (get_total_number_of_sequences_iter m n current-number)\n    (cond ((= n 0) 1)\n          ((= current-number m) 0)\n          (else (+ (get_total_number_of_sequences_iter m (- n 1) (* current-number 2))\n                  (get_total_number_of_sequences_iter m n (+ current-number 1))))))\n  (get_total_number_of_sequences_iter m n 1))\n",
    "  (define (get_total_number_of_sequences_iter m n acc)\n    (cond\n      [(= n 0) acc]\n      [(= m 0) 0]\n      [else\n       (get_total_number_of_sequences_iter (- m 1) (- n 1) (+ acc (get_total_number_of_sequences (- m 1) (- n 1))))]))\n  (get_total_number_of_sequences_iter m n 0))\n"
  ]
}