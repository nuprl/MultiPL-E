{
  "name": "mbpp_247_lps",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the length of the longest palindromic subsequence in the given string.\n(define (lps str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lps))\n    (check-equal? (candidate \"TENS FOR TENS\") 5)\n    (check-equal? (candidate \"CARDIO FOR CARDS\") 7)\n    (check-equal? (candidate \"PART OF THE JOURNEY IS PART\") 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (lps-rec str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-rec str (+ i 1) (- j 1)))]\n      [else (max (lps-rec str i (- j 1)) (lps-rec str (+ i 1) j))]))\n  (lps-rec str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n"
  ]
}