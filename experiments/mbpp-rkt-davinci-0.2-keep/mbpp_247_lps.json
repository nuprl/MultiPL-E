{
  "name": "mbpp_247_lps",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the length of the longest palindromic subsequence in the given string.\n(define (lps str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lps))\n    (check-equal? (candidate \"TENS FOR TENS\") 5)\n    (check-equal? (candidate \"CARDIO FOR CARDS\") 7)\n    (check-equal? (candidate \"PART OF THE JOURNEY IS PART\") 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (lps-rec str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-rec str (+ i 1) (- j 1)))]\n      [else (max (lps-rec str i (- j 1)) (lps-rec str (+ i 1) j))]))\n  (lps-rec str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str (+ i 1) j)\n            (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str (+ i 1) j)\n            (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str i (- j 1))\n            (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-aux i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-aux (+ i 1) (- j 1)) 2)]\n      [else (max (lps-aux (+ i 1) j) (lps-aux i (- j 1)))]))\n  (lps-aux 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (if (&gt; i j)\n        0\n        (if (char=? (string-ref str i) (string-ref str j))\n            (if (= i (- j 1))\n                1\n                (+ 2 (lps-helper str (+ i 1) (- j 1))))\n            (max (lps-helper str (+ i 1) j)\n                 (lps-helper str i (- j 1))))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j)\n                     (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond ((&lt; i 0) 0)\n          ((&lt; j 0) 0)\n          ((= i j) 1)\n          ((= (string-ref str i) (string-ref str j)) (+ (lps-helper str (- i 1) (- j 1)) 2))\n          (else (max (lps-helper str i (- j 1)) (lps-helper str (- i 1) j)))))\n  (lps-helper str (- (string-length str) 1) (- (string-length str) 1)))\n</code>\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else\n           (max (lps-helper str i (- j 1))\n                (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ((i 0) (j (sub1 (string-length str))) (count 0))\n    (if (&lt; i j)\n        (if (char=? (string-ref str i) (string-ref str j))\n            (loop (add1 i) (sub1 j) (add1 count))\n            (max (loop (add1 i) j count)\n                 (loop i (sub1 j) count)))\n        count)))\n</code>\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else\n           (max (lps-helper str i (- j 1))\n                (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str i (- j 1))\n            (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ((i 0) (j (- (string-length str) 1)) (acc 0))\n    (if (&lt;= i j)\n        (let ((c (string-ref str i))\n              (d (string-ref str j)))\n          (cond ((char=? c d)\n                 (loop (+ i 1) (- j 1) (+ acc 2)))\n                ((&gt; (loop (+ i 1) j acc)\n                    (loop i (- j 1) acc))\n                 (loop (+ i 1) j acc))\n                (else\n                 (loop i (- j 1) acc))))\n        acc)))\n</code>\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let ([n (string-length str)])\n    (define (lps-rec i j)\n      (cond\n        [(= i j) 1]\n        [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-rec (+ i 1) (- j 1)))]\n        [else (max (lps-rec (+ i 1) j) (lps-rec i (- j 1)))]))\n    (lps-rec 0 (- n 1))))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ((i 0) (j (- (string-length str) 1)) (max 0))\n    (if (&lt; i j)\n        (let ((len (lps-helper str i j)))\n          (loop (+ i 1) (- j 1) (max len max)))\n        max)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (if (&lt;= i j)\n        (if (equal? (string-ref str i) (string-ref str j))\n            (+ 2 (lps-helper str (+ i 1) (- j 1)))\n            (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j)))\n        0))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-aux i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-aux (+ i 1) (- j 1)) 2)]\n      [else (max (lps-aux (+ i 1) j) (lps-aux i (- j 1)))]))\n  (lps-aux 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str start end)\n    (if (= start end)\n        1\n        (if (string= (substring str start (+ start 1)) (substring str end (- end 1)))\n            (+ 2 (lps-helper str (+ start 1) (- end 1)))\n            (max (lps-helper str start (- end 1)) (lps-helper str (+ start 1) end)))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper (+ i 1) (- j 1)))]\n      [else (max (lps-helper (+ i 1) j) (lps-helper i (- j 1)))]))\n  (lps-helper 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (if (= i j)\n        1\n        (if (= (string-ref str i) (string-ref str j))\n            (+ 2 (lps-helper str (+ i 1) (- j 1)))\n            (max (lps-helper str (+ i 1) j)\n                 (lps-helper str i (- j 1))))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str (+ i 1) j)\n            (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-rec str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-rec str (+ i 1) (- j 1)))]\n      [else (max (lps-rec str i (- j 1)) (lps-rec str (+ i 1) j))]))\n  (lps-rec str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (if (= i j)\n        1\n        (if (= (string-ref str i) (string-ref str j))\n            (+ 2 (lps-helper str (+ i 1) (- j 1)))\n            (max (lps-helper str (+ i 1) j)\n                 (lps-helper str i (- j 1))))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else\n           (max (lps-helper str (+ i 1) j)\n                (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1))\n                     (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(char=? (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond ((= i j) 1)\n          ((= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1))))\n          (else (max (lps-helper str (+ i 1) j)\n                     (lps-helper str i (- j 1))))))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1))\n                     (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (add1 i) (sub1 j)))]\n          [else (max (lps-helper str i (sub1 j)) (lps-helper str (add1 i) j))]))\n  (lps-helper str 0 (sub1 (string-length str))))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ([i 0] [j (- (string-length str) 1)])\n    (if (&lt; i j)\n        (if (char=? (string-ref str i) (string-ref str j))\n            (add1 (loop (add1 i) (sub1 j)))\n            (max (loop (add1 i) j) (loop i (sub1 j))))\n        1)))\n</code>\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else\n           (max (lps-helper str (+ i 1) j)\n                (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else\n           (max (lps-helper str (+ i 1) j)\n                (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ((i 0) (j (sub1 (string-length str))))\n    (if (&lt; i j)\n        (let ((a (string-ref str i))\n              (b (string-ref str j)))\n          (cond ((char=? a b)\n                 (+ 2 (loop (add1 i) (sub1 j))))\n                ((&gt; (lps (substring str (add1 i) j))\n                    (lps (substring str i (sub1 j))))\n                 (lps (substring str (add1 i) j)))\n                (else\n                 (lps (substring str i (sub1 j))))))\n        (if (= i j) 1 0))))\n</code>\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n          [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-rec str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-rec str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-rec str (+ i 1) j) (lps-rec str i (- j 1)))]))\n  (lps-rec str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (let loop ([i 0] [j (- (string-length str) 1)])\n    (if (&lt; i j)\n        (if (char=? (string-ref str i) (string-ref str j))\n            (add1 (loop (add1 i) (sub1 j)))\n            (max (loop (add1 i) j) (loop i (sub1 j))))\n        1)))\n</code>\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j))\n       (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else\n       (max (lps-helper str i (- j 1))\n            (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [(> (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j)) (lps-helper str i (- j 1))]\n      [else (lps-helper str (+ i 1) j)]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond [(= i j) 1]\n          [(= (string-ref str i) (string-ref str j))\n           (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n          [else (max (lps-helper str (+ i 1) j)\n                     (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ (lps-helper str (+ i 1) (- j 1)) 2)]\n      [else (max (lps-helper str (+ i 1) j) (lps-helper str i (- j 1)))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n",
    "  (define (lps-helper str i j)\n    (cond\n      [(= i j) 1]\n      [(= (string-ref str i) (string-ref str j)) (+ 2 (lps-helper str (+ i 1) (- j 1)))]\n      [else (max (lps-helper str i (- j 1)) (lps-helper str (+ i 1) j))]))\n  (lps-helper str 0 (- (string-length str) 1)))\n"
  ]
}