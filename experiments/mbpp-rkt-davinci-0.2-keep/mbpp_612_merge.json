{
  "name": "mbpp_612_merge",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n(define (merge lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate merge))\n    (check-equal? (candidate (list (list \"x\" \"y\") (list \"a\" \"b\") (list \"m\" \"n\"))) (list (list \"x\" \"a\" \"m\") (list \"y\" \"b\" \"n\")))\n    (check-equal? (candidate (list (list 1 2) (list 3 4) (list 5 6) (list 7 8))) (list (list 1 3 5 7) (list 2 4 6 8)))\n    (check-equal? (candidate (list (list \"x\" \"y\" \"z\") (list \"a\" \"b\" \"c\") (list \"m\" \"n\" \"o\"))) (list (list \"x\" \"a\" \"m\") (list \"y\" \"b\" \"n\") (list \"z\" \"c\" \"o\")))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (let ([l1 (map car lst)]\n        [l2 (map cadr lst)])\n    (list l1 l2)))\n",
    "  (let loop ([lst lst] [first '()] [second '()])\n    (cond\n      [(empty? lst) (list first second)]\n      [else (loop (rest lst) (cons (first (first lst)) first) (cons (second (first lst)) second))])))\n",
    "  (if (null? lst)\n      '()\n      (cons (map first lst)\n            (cons (map second lst)\n                  '()))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (let ([lst1 (map car lst)]\n        [lst2 (map cadr lst)])\n    (list lst1 lst2)))\n",
    "  (if (empty? lst)\n      (list (list) (list))\n      (let* ([first (first lst)]\n             [rest (merge (rest lst))]\n             [first-list (first rest)]\n             [second-list (second rest)])\n        (list (cons (first first) first-list)\n              (cons (second first) second-list)))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond\n      [(empty? lst) (list lst1 lst2)]\n      [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (let loop ([lst lst] [l1 '()] [l2 '()])\n    (cond [(empty? lst) (list l1 l2)]\n          [else (loop (rest lst) (cons (first (first lst)) l1) (cons (second (first lst)) l2))])))\n",
    "  (map list lst))\n",
    "  (apply append (map list (map first lst) (map second lst))))\n",
    "  (let loop ([lst lst]\n             [lst1 '()]\n             [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (let loop ((lst lst)\n             (first '())\n             (second '()))\n    (cond ((null? lst) (list first second))\n          (else (loop (cdr lst)\n                      (cons (caar lst) first)\n                      (cons (cadar lst) second))))))\n",
    "  (match lst\n    [(list (list a b) (list c d)) (list (list a c) (list b d))]\n    [(list (list a b) (list c d) (list e f)) (list (list a c e) (list b d f))]\n    [(list (list a b) (list c d) (list e f) (list g h)) (list (list a c e g) (list b d f h))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j)) (list (list a c e g i) (list b d f h j))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l)) (list (list a c e g i k) (list b d f h j l))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l) (list m n)) (list (list a c e g i k m) (list b d f h j l n))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l) (list m n) (list o p)) (list (list a c e g i k m o) (list b d f h j l n p))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l) (list m n) (list o p) (list q r)) (list (list a c e g i k m o q) (list b d f h j l n p r))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l) (list m n) (list o p) (list q r) (list s t)) (list (list a c e g i k m o q s) (list b d f h j l n p r t))]\n    [(list (list a b) (list",
    "  (if (null? lst)\n      '()\n      (cons (map car lst)\n            (cons (map cadr lst)\n                  '()))))\n",
    "  (if (null? lst)\n      (list '() '())\n      (let* ([first (car lst)]\n             [rest (cdr lst)]\n             [merged (merge rest)]\n             [first-lst (car merged)]\n             [second-lst (cadr merged)])\n        (list (cons (car first) first-lst)\n              (cons (cadr first) second-lst)))))\n",
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (if (null? lst)\n      '()\n      (cons (map car lst)\n            (cons (map cadr lst)\n                  '()))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond\n      [(empty? lst) (list lst1 lst2)]\n      [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond\n      [(empty? lst) (list lst1 lst2)]\n      [else (let ([e (first lst)])\n              (loop (rest lst)\n                    (cons (first e) lst1)\n                    (cons (second e) lst2)))])))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond\n      [(empty? lst) (list lst1 lst2)]\n      [else (loop (rest lst)\n                  (append lst1 (list (first (first lst))))\n                  (append lst2 (list (second (first lst)))))])))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond\n      [(empty? lst) (list lst1 lst2)]\n      [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond\n      [(empty? lst) (list lst1 lst2)]\n      [else (loop (rest lst)\n                  (append lst1 (list (first (first lst))))\n                  (append lst2 (list (second (first lst)))))])))\n",
    "  (let loop ([lst lst] [l1 '()] [l2 '()])\n    (cond [(empty? lst) (list l1 l2)]\n          [else (loop (rest lst) (cons (first (first lst)) l1) (cons (second (first lst)) l2))])))\n",
    "  (map (lambda (x) (list (car x) (cadr x))) lst))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (map (lambda (x) (list (car x) (cadr x))) lst))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (map list (map first lst) (map second lst)))\n",
    "  (let loop ([lst lst]\n             [lst1 '()]\n             [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (append lst1 (list (first (first lst))))\n                      (append lst2 (list (second (first lst)))))])))\n</code>\n",
    "  (apply append (map list (map first lst) (map second lst))))\n",
    "  (let loop ([lst lst]\n             [first '()]\n             [second '()])\n    (cond [(null? lst) (list first second)]\n          [else (loop (cdr lst)\n                      (cons (car (car lst)) first)\n                      (cons (cadr (car lst)) second))])))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (let ([lst1 (map car lst)]\n        [lst2 (map cadr lst)])\n    (list lst1 lst2)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n",
    "  (let loop ((lst lst)\n             (first '())\n             (second '()))\n    (cond ((null? lst) (list first second))\n          (else (loop (cdr lst)\n                      (cons (caar lst) first)\n                      (cons (cadar lst) second))))))\n",
    "  (let ([l1 (map (lambda (x) (car x)) lst)]\n        [l2 (map (lambda (x) (cadr x)) lst)])\n    (list l1 l2)))\n",
    "  (map (lambda (x) (list (car x) (cadr x))) lst))\n",
    "  (let ([l1 (map car lst)]\n        [l2 (map cadr lst)])\n    (list l1 l2)))\n",
    "  (let ([a (map car lst)]\n        [b (map cadr lst)])\n    (list a b)))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (caar lst) lst1)\n              (cons (cadar lst) lst2)))))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (let ([first (map (lambda (x) (car x)) lst)]\n        [second (map (lambda (x) (cadr x)) lst)])\n    (list first second)))\n",
    "  (let loop ([lst lst] [first '()] [second '()])\n    (cond [(empty? lst) (list first second)]\n          [else (let ([f (first (first lst))]\n                       [s (second (first lst))])\n                  (loop (rest lst) (append first (list f)) (append second (list s))))])))\n",
    "  (let loop ([lst lst] [l1 '()] [l2 '()])\n    (cond [(empty? lst) (list l1 l2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) l1)\n                      (cons (second (first lst)) l2))])))\n",
    "  (map (lambda (x) (list (car x) (cadr x))) lst))\n",
    "  (let ([l1 (map car lst)]\n        [l2 (map cadr lst)])\n    (list l1 l2)))\n",
    "  (let loop ((lst lst)\n             (lst1 '())\n             (lst2 '()))\n    (cond ((null? lst) (list lst1 lst2))\n          (else (loop (cdr lst)\n                      (cons (car (car lst)) lst1)\n                      (cons (cadr (car lst)) lst2))))))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (match lst\n    [(list (list (list a b) ...))\n     (list (map first lst) (map second lst))]))\n",
    "  (match lst\n    [(list (list a b) ...)\n     (list (map first lst) (map second lst))]))\n",
    "  (let loop ([lst lst]\n             [lst1 '()]\n             [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (caar lst) lst1)\n              (cons (cadar lst) lst2)))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (map list lst))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond\n      [(empty? lst) (list lst1 lst2)]\n      [else (let ([l (first lst)])\n              (loop (rest lst)\n                    (cons (first l) lst1)\n                    (cons (second l) lst2)))])))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (match lst\n    [(list (list a b) (list c d))\n     (list (list a c) (list b d))]\n    [(list (list a b) (list c d) (list e f) . rest)\n     (merge (list (list a c) (list b d) (list e f) rest))]))\n",
    "  (let ([lst1 (map car lst)]\n        [lst2 (map cadr lst)])\n    (list lst1 lst2)))\n",
    "  (list (map first lst) (map second lst)))\n",
    "  (apply append (map list (map first lst) (map second lst))))\n",
    "  (match lst\n    [(list (list a b) (list c d))\n     (list (list a c) (list b d))]))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (let ([a (map car lst)]\n        [b (map cadr lst)])\n    (list a b)))\n",
    "  (match lst\n    [(list (list a b) (list c d))\n     (list (list a c) (list b d))]\n    [(list (list a b) (list c d) (list e f) . rest)\n     (merge (list (merge (list (list a b) (list c d))) (list e f) . rest))]))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (car (car lst)) lst1)\n              (cons (cadr (car lst)) lst2)))))\n",
    "  (map (lambda (x) (list (car x) (cadr x))) lst))\n",
    "  (if (null? lst)\n      '()\n      (cons (map car lst)\n            (cons (map cadr lst)\n                  '()))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (let ([first (map car lst)]\n        [second (map cadr lst)])\n    (list first second)))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (map list (map first lst) (map second lst)))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (let loop ([lst lst] [l1 '()] [l2 '()])\n    (cond [(empty? lst) (list l1 l2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) l1)\n                      (cons (second (first lst)) l2))])))\n",
    "  (map (lambda (x) (list (car x) (cadr x))) lst))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (caar lst) lst1)\n              (cons (cadar lst) lst2)))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (let ([lst1 (cons (first (first lst)) lst1)]\n                      [lst2 (cons (second (first lst)) lst2)])\n                  (loop (rest lst) lst1 lst2))])))\n",
    "  (let ([lst1 (map car lst)]\n        [lst2 (map cadr lst)])\n    (list lst1 lst2)))\n",
    "  (map (lambda (x) (list (car x) (cadr x))) lst))\n",
    "  (let ([lst1 (map car lst)]\n        [lst2 (map cadr lst)])\n    (list lst1 lst2)))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst) (cons (car (car lst)) lst1) (cons (cadr (car lst)) lst2)))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (car (car lst)) lst1)\n              (cons (cadr (car lst)) lst2)))))\n",
    "  (let ([firsts (map car lst)]\n        [seconds (map cadr lst)])\n    (list firsts seconds)))\n",
    "  (match lst\n    [(list (list a b) (list c d)) (list (list a c) (list b d))]\n    [(list (list a b) (list c d) (list e f) . rest) (merge (list (list a c e) (list b d f)) (merge rest))]))\n",
    "  (if (null? lst)\n      '()\n      (cons (map car lst) (cons (map cadr lst) '()))))\n",
    "  (let ([first (map car lst)]\n        [second (map cadr lst)])\n    (list first second)))\n",
    "  (let ([firsts (map car lst)]\n        [seconds (map cadr lst)])\n    (list firsts seconds)))\n",
    "  (let loop ([lst lst]\n             [lst1 '()]\n             [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond\n      [(empty? lst) (list lst1 lst2)]\n      [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n</code>\n",
    "  (let ([first (map car lst)]\n        [second (map cadr lst)])\n    (list first second)))\n",
    "  (if (null? lst)\n      (list '() '())\n      (let* ([first (car lst)]\n             [rest (cdr lst)]\n             [merged (merge rest)])\n        (list (cons (car first) (car merged))\n              (cons (cadr first) (cadr merged))))))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (let ([firsts (map car lst)]\n        [seconds (map cadr lst)])\n    (list firsts seconds)))\n",
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (car (car lst)) lst1)\n                      (cons (cadr (car lst)) lst2))])))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst) (cons (caar lst) lst1) (cons (cadar lst) lst2)))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n",
    "  (letrec ([merge-helper (lambda (lst acc1 acc2)\n                           (if (null? lst)\n                               (list acc1 acc2)\n                               (merge-helper (cdr lst)\n                                             (append acc1 (list (car (car lst))))\n                                             (append acc2 (list (cadr (car lst)))))))])\n    (merge-helper lst '() '())))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (caar lst) lst1)\n              (cons (cadar lst) lst2)))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (let ([l1 (map car lst)]\n        [l2 (map cadr lst)])\n    (list l1 l2)))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else\n     (cons\n      (map first lst)\n      (cons\n       (map second lst)\n       empty))]))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n",
    "  (letrec ([merge-helper (lambda (lst acc1 acc2)\n                           (if (null? lst)\n                               (list acc1 acc2)\n                               (merge-helper (cdr lst) (cons (caar lst) acc1) (cons (cadar lst) acc2))))])\n    (merge-helper lst '() '())))\n",
    "  (apply append (map list (map first lst) (map second lst))))\n",
    "  (define (helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (helper (cdr lst1) lst2))))\n  (if (null? lst)\n      '()\n      (cons (helper (map car lst) '())\n            (cons (helper (map cadr lst) '()) '()))))\n",
    "  (let loop ([lst lst] [first '()] [second '()])\n    (cond [(empty? lst) (list first second)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) first)\n                      (cons (second (first lst)) second))])))\n",
    "  (let ([l1 (map car lst)]\n        [l2 (map cadr lst)])\n    (list l1 l2)))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (let loop ([lst lst]\n             [first '()]\n             [second '()])\n    (cond [(empty? lst) (list first second)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) first)\n                      (cons (second (first lst)) second))])))\n",
    "  (list (map first lst) (map second lst)))\n",
    "  (map list (map first lst) (map second lst)))\n",
    "  (apply append (map (lambda (x) (list (list (car x)) (list (cadr x)))) lst)))\n",
    "  (list (map (lambda (x) (car x)) lst)\n        (map (lambda (x) (cadr x)) lst)))\n",
    "  (if (null? lst)\n      '()\n      (cons (map car lst)\n            (cons (map cadr lst)\n                  '()))))\n",
    "  (let ([lst1 (map car lst)]\n        [lst2 (map cadr lst)])\n    (list lst1 lst2)))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (if (null? lst)\n      '()\n      (let ([first (car lst)]\n            [rest (cdr lst)])\n        (list (map car lst)\n              (map cadr lst)))))\n",
    "  (if (null? lst)\n      '()\n      (cons (map car lst) (cons (map cadr lst) '()))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst) (append lst1 (list (first (first lst)))) (append lst2 (list (second (first lst)))))])))\n",
    "  (let loop ([lst lst] [first '()] [second '()])\n    (if (null? lst)\n        (list first second)\n        (loop (cdr lst)\n              (cons (car (car lst)) first)\n              (cons (cadr (car lst)) second)))))\n",
    "  (let ([lst1 (map first lst)]\n        [lst2 (map second lst)])\n    (list lst1 lst2)))\n",
    "  (map list (map first lst) (map second lst)))\n",
    "  (map (lambda (x) (list (car x) (cadr x))) lst))\n",
    "  (apply append (map list (map first lst) (map second lst))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (caar lst) lst1)\n              (cons (cadar lst) lst2)))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(null? lst) (list lst1 lst2)]\n          [else (loop (cdr lst)\n                      (cons (caar lst) lst1)\n                      (cons (cadar lst) lst2))])))\n",
    "  (if (null? lst)\n      '()\n      (cons (map car lst) (cons (map cadr lst) '()))))\n",
    "  (let ([l1 (map first lst)]\n        [l2 (map second lst)])\n    (list l1 l2)))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (map list (map first lst) (map second lst)))\n",
    "  (apply append (map list (map first lst) (map second lst))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n",
    "  (let loop ([lst lst] [first '()] [second '()])\n    (cond [(empty? lst) (list first second)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) first)\n                      (cons (second (first lst)) second))])))\n",
    "  (let loop ([lst lst] [first '()] [second '()])\n    (cond [(empty? lst) (list first second)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) first)\n                      (cons (second (first lst)) second))])))\n",
    "  (list (map (lambda (x) (car x)) lst)\n        (map (lambda (x) (cadr x)) lst)))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (map first lst) (cons (map second lst) empty))]))\n",
    "  (let loop ([lst lst] [a '()] [b '()])\n    (cond [(empty? lst) (list a b)]\n          [else (loop (rest lst) (cons (first (first lst)) a) (cons (second (first lst)) b))])))\n",
    "  (apply append (map list (map first lst) (map second lst))))\n",
    "  (if (null? lst)\n      '()\n      (cons (map car lst)\n            (cons (map cadr lst)\n                  '()))))\n",
    "  (apply append (map (lambda (x) (list (list (car x)) (list (cadr x)))) lst)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (car (car lst)) lst1)\n              (cons (cadr (car lst)) lst2)))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst)\n                      (cons (first (first lst)) lst1)\n                      (cons (second (first lst)) lst2))])))\n",
    "  (letrec ([merge-helper (lambda (lst1 lst2)\n                           (cond [(empty? lst1) lst2]\n                                 [(empty? lst2) lst1]\n                                 [else (cons (car lst1) (cons (car lst2) (merge-helper (cdr lst1) (cdr lst2))))]))])\n    (merge-helper (map car lst) (map cadr lst))))\n",
    "  (let ([first (map car lst)]\n        [second (map cadr lst)])\n    (list first second)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst) (cons (caar lst) lst1) (cons (cadar lst) lst2)))))\n",
    "  (let loop ((lst lst) (lst1 '()) (lst2 '()))\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (caar lst) lst1)\n              (cons (cadar lst) lst2)))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond\n      [(empty? lst) (list lst1 lst2)]\n      [else (loop (rest lst)\n                  (append lst1 (list (first (first lst))))\n                  (append lst2 (list (second (first lst)))))])))\n",
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (cond\n    [(empty? lst) empty]\n    [(empty? (rest lst)) empty]\n    [else (cons (cons (first (first lst)) (first (rest lst)))\n                (merge (rest (rest lst))))]))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (let ([e (first lst)])\n                  (loop (rest lst)\n                        (cons (first e) lst1)\n                        (cons (second e) lst2)))])))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else\n     (cons (map first lst)\n           (cons (map second lst) empty))]))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (let ([x (car lst)]\n              [y (cadr lst)])\n          (loop (cddr lst) (cons (car x) lst1) (cons (car y) lst2))))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (loop (rest lst) (cons (first (first lst)) lst1) (cons (second (first lst)) lst2))])))\n",
    "  (let ([lst1 (map first lst)]\n        [lst2 (map second lst)])\n    (list lst1 lst2)))\n",
    "  (match lst\n    [(list (list a b)) (list (list a) (list b))]\n    [(list (list a b) (list c d) . rest)\n     (let ([m (merge (list (list c d) . rest))])\n       (list (cons a (car m)) (cons b (cadr m))))]))\n",
    "  (let ([a (map first lst)]\n        [b (map second lst)])\n    (list a b)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst)\n              (cons (caar lst) lst1)\n              (cons (cadar lst) lst2)))))\n",
    "  (define (merge-helper lst1 lst2)\n    (if (null? lst1)\n        lst2\n        (cons (car lst1) (merge-helper (cdr lst1) lst2))))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (apply append (map list (map first lst) (map second lst))))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (cond [(empty? lst) (list lst1 lst2)]\n          [else (let ([elem (car lst)])\n                  (loop (cdr lst) (cons (car elem) lst1) (cons (cadr elem) lst2)))])))\n",
    "  (let ([lst1 (map first lst)]\n        [lst2 (map second lst)])\n    (list lst1 lst2)))\n",
    "  (apply append (map (lambda (x) (list (car x) (cadr x))) lst)))\n",
    "  (if (null? lst)\n      '()\n      (cons (map car lst)\n            (cons (map cadr lst)\n                  '()))))\n",
    "  (apply append (map (lambda (x) (list (list (car x)) (list (cadr x)))) lst)))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (if (null? lst)\n      (list '() '())\n      (let* ([first (car lst)]\n             [rest (cdr lst)]\n             [merged (merge rest)])\n        (list (cons (car first) (car merged))\n              (cons (cadr first) (cadr merged))))))\n",
    "  (define (merge-helper lst acc1 acc2)\n    (if (null? lst)\n        (list acc1 acc2)\n        (merge-helper (cdr lst)\n                      (cons (car (car lst)) acc1)\n                      (cons (cadr (car lst)) acc2))))\n  (merge-helper lst '() '()))\n",
    "  (define (merge-helper lst1 lst2)\n    (cond [(empty? lst1) lst2]\n          [(empty? lst2) lst1]\n          [else (cons (car lst1) (cons (car lst2) (merge-helper (cdr lst1) (cdr lst2))))]))\n  (merge-helper (map car lst) (map cadr lst)))\n",
    "  (let ([lst1 (map car lst)]\n        [lst2 (map cadr lst)])\n    (list lst1 lst2)))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (map first lst) (cons (map second lst) empty))]))\n",
    "  (let ([lst1 (map car lst)]\n        [lst2 (map cadr lst)])\n    (list lst1 lst2)))\n",
    "  (map list (map first lst) (map second lst)))\n",
    "  (let loop ([lst lst] [lst1 '()] [lst2 '()])\n    (if (null? lst)\n        (list lst1 lst2)\n        (loop (cdr lst) (cons (caar lst) lst1) (cons (cadar lst) lst2)))))\n",
    "  (let ([l1 (map car lst)]\n        [l2 (map cadr lst)])\n    (list l1 l2)))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (let ([firsts (map car lst)]\n        [seconds (map cadr lst)])\n    (list firsts seconds)))\n",
    "  (let ([firsts (map first lst)]\n        [seconds (map second lst)])\n    (list firsts seconds)))\n",
    "  (apply append (map (lambda (x) (list (list (car x)) (list (cadr x)))) lst)))\n",
    "  (let ([lst1 (map car lst)]\n        [lst2 (map cadr lst)])\n    (list lst1 lst2)))\n",
    "  (apply append (map list (map first lst) (map second lst))))\n",
    "  (map (lambda (x) (list (car x) (cadr x))) lst))\n",
    "  (match lst\n    [(list (list a b) (list c d)) (list (list a c) (list b d))]\n    [(list (list a b) (list c d) (list e f)) (list (list a c e) (list b d f))]\n    [(list (list a b) (list c d) (list e f) (list g h)) (list (list a c e g) (list b d f h))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j)) (list (list a c e g i) (list b d f h j))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l)) (list (list a c e g i k) (list b d f h j l))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l) (list m n)) (list (list a c e g i k m) (list b d f h j l n))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l) (list m n) (list o p)) (list (list a c e g i k m o) (list b d f h j l n p))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l) (list m n) (list o p) (list q r)) (list (list a c e g i k m o q) (list b d f h j l n p r))]\n    [(list (list a b) (list c d) (list e f) (list g h) (list i j) (list k l) (list m n) (list o p) (list q r) (list s t)) (list (list a c e g i k m o q s) (list b d f h j l n p r t))]\n    [(list (list a b) (list"
  ]
}