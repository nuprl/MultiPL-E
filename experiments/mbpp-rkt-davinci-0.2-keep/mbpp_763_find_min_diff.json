{
  "name": "mbpp_763_find_min_diff",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n(define (find_min_diff arr n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_min_diff))\n    (check-equal? (candidate (list 1 5 3 19 18 25) 6) 1)\n    (check-equal? (candidate (list 4 3 2 6) 4) 1)\n    (check-equal? (candidate (list 30 5 20 9) 4) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([min_diff (min min_diff (abs (- (car arr) (cadr arr))))]\n               [min_diff (find_min_diff_helper (cdr arr) (- n 1) min_diff)])\n          min_diff)))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr))))\n  )\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let loop ((i 0) (min-diff (abs (- (list-ref arr 0) (list-ref arr 1)))))\n    (cond ((= i (- n 1)) min-diff)\n          ((&lt; min-diff (abs (- (list-ref arr i) (list-ref arr (+ i 1)))))\n           (loop (+ i 1) min-diff))\n          (else (loop (+ i 1) (abs (- (list-ref arr i) (list-ref arr (+ i 1)))))))))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (min_diff_helper (cdr arr) (- n 1) (min min_diff (abs (- (car arr) (car (cdr arr))))))))\n  (min_diff_helper arr n (abs (- (car arr) (car (cdr arr)))))\n)\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (find_min_diff_helper (cdr arr) (- n 1) min_diff)]\n      [else (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]))\n  (find_min_diff_helper arr n (list-ref arr 1) (list-ref arr 0)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 0)\n        min_diff\n        (let ([diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (vector-copy arr 1 n) (- n 1) diff)\n              (find_min_diff_helper (vector-copy arr 1 n) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([diff (- (list-ref arr n) (list-ref arr (- n 1)))])\n          (if (&lt; diff min)\n              (find_min_diff_helper arr (- n 1) diff)\n              (find_min_diff_helper arr (- n 1) min)))))\n  (find_min_diff_helper arr (- n 1) (list-ref arr (- n 1))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (list-ref arr 0) (list-ref arr 1))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (list-ref arr 0) (list-ref arr 1))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let loop ([i 0] [min-diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n    (cond [(= i (- n 1)) min-diff]\n          [else\n           (let ([diff (abs (- (vector-ref arr i) (vector-ref arr (+ i 1))))])\n             (if (&lt; diff min-diff)\n                 (loop (+ i 1) diff)\n                 (loop (+ i 1) min-diff)))])))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [else (let ([diff (- (list-ref arr 1) (list-ref arr 0))])\n                  (if (&lt; diff min_diff)\n                      (find_min_diff_helper (cdr arr) (- n 1) diff)\n                      (find_min_diff_helper (cdr arr) (- n 1) min_diff)))]))\n  (find_min_diff_helper arr n (- (list-ref arr 1) (list-ref arr 0))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n          (if (< diff min)\n              (find_min_diff_helper (vector-tail arr) (- n 1) diff)\n              (find_min_diff_helper (vector-tail arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(empty? arr) min_diff]\n      [(= n 1) min_diff]\n      [else\n       (define diff (- (first arr) (first (rest arr))))\n       (if (&lt; diff min_diff)\n           (find_min_diff_helper (rest arr) (- n 1) diff)\n           (find_min_diff_helper (rest arr) (- n 1) min_diff))]))\n  (find_min_diff_helper arr n (first arr)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([diff (abs (- (car arr) (car (cdr arr))))])\n          (if (< diff min)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (car (cdr arr))))))\n",
    "  (define (min_diff_util arr n)\n    (define (min_diff_util_helper arr n min_diff)\n      (if (= n 1)\n          min_diff\n          (min_diff_util_helper (cdr arr) (- n 1) (min min_diff (abs (- (car arr) (car (cdr arr))))))))\n    (min_diff_util_helper arr n (abs (- (car arr) (car (cdr arr))))))\n  (min_diff_util (sort arr <) n))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min (abs (- (list-ref arr 1) (list-ref arr 0)))])\n      (if (= i (- n 2))\n          min\n          (let ([diff (abs (- (list-ref arr (+ i 2)) (list-ref arr (+ i 1))))])\n            (if (< diff min)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min)))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (car arr) (cadr arr))) min_diff)\n           (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (list-ref arr 0) (list-ref arr 1))) min_diff)\n           (find_min_diff_helper (cdr arr) (- n 1) (abs (- (list-ref arr 0) (list-ref arr 1))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond ((= n 1) min_diff)\n          ((&lt; (- (car arr) (cadr arr)) min_diff)\n           (find_min_diff_helper (cdr arr) (- n 1) (- (car arr) (cadr arr))))\n          (else (find_min_diff_helper (cdr arr) (- n 1) min_diff))))\n  (find_min_diff_helper arr n (car arr)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new_min_diff (if (&lt; diff min_diff) diff min_diff)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))))\n  (find_min_diff_helper arr n (car arr)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (zero? n)\n        min\n        (let* ([min_diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))]\n               [min_diff (if (&lt; min_diff min) min_diff min)])\n          (find_min_diff_helper (vector-rest arr) (- n 1) min_diff))))\n  (find_min_diff_helper arr n (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n",
    "  (let loop ([arr (sort arr <)])\n    (if (null? (cdr arr))\n        (car arr)\n        (let ([diff (abs (- (car arr) (cadr arr)))]\n              [next-diff (loop (cdr arr))])\n          (if (< diff next-diff)\n              diff\n              next-diff)))))\n",
    "  (let loop ([i 0] [j 1] [min_diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n    (cond\n      [(= i (- n 1)) min_diff]\n      [(= j n) (loop (+ i 1) (+ i 2) min_diff)]\n      [else (let ([diff (abs (- (vector-ref arr i) (vector-ref arr j)))])\n              (if (< diff min_diff)\n                  (loop i (+ j 1) diff)\n                  (loop i (+ j 1) min_diff)))])))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (if (null? arr)\n        min_diff\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (&lt; diff min_diff)\n              (min_diff_helper (cdr arr) (- n 1) diff)\n              (min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min-diff (abs (- (list-ref arr 1) (list-ref arr 0)))])\n      (if (= i (- n 2))\n          min-diff\n          (let ([diff (abs (- (list-ref arr (+ i 2)) (list-ref arr (+ i 1))))])\n            (if (< diff min-diff)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min-diff)))))))\n",
    "  (let loop ((arr arr) (n n) (min-diff (abs (- (car arr) (cadr arr)))))\n    (if (zero? n)\n        min-diff\n        (let ((diff (abs (- (car arr) (cadr arr)))))\n          (if (&lt; diff min-diff)\n              (loop (cdr arr) (- n 1) diff)\n              (loop (cdr arr) (- n 1) min-diff))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([min (min (abs (- (list-ref arr 0) (list-ref arr 1))) min)])\n          (find_min_diff_helper (cdr arr) (- n 1) min))))\n  (find_min_diff_helper arr n (list-ref arr 0)))\n",
    "  (define (min_diff_util arr n)\n    (cond\n      [(= n 1) (list (list (car arr) (car arr)) (list (car arr) (car arr)))]\n      [(= n 2) (list (list (car arr) (cadr arr)) (list (car arr) (cadr arr)))]\n      [else\n       (let* ([min_diff_arr (min_diff_util (cdr arr) (- n 1))]\n              [min_diff (car min_diff_arr)]\n              [min_diff_pair (cadr min_diff_arr)])\n         (cond\n           [(< (abs (- (car min_diff_pair) (car arr))) min_diff)\n            (list (abs (- (car min_diff_pair) (car arr))) (list (car arr) (car min_diff_pair)))]\n           [(> (abs (- (car min_diff_pair) (car arr))) min_diff)\n            (list min_diff min_diff_pair)]\n           [else\n            (list min_diff (list (car arr) (car min_diff_pair)))]))]))\n  (min_diff_util arr n))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min-diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (if (= i (- n 2))\n          min-diff\n          (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n            (if (< diff min-diff)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min-diff)))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond [(= n 1) min]\n          [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (min_diff_util arr n)\n    (cond\n      [(= n 1) (list (list (car arr) (car arr)) (list (car arr) (car arr)))]\n      [(= n 2) (list (list (car arr) (cadr arr)) (list (car arr) (cadr arr)))]\n      [else\n       (let* ([min_diff_left (min_diff_util arr (- n 1))]\n              [min_diff_right (min_diff_util (cdr arr) (- n 1))]\n              [min_diff_left_pair (car min_diff_left)]\n              [min_diff_right_pair (car min_diff_right)]\n              [min_diff_left_diff (cadr min_diff_left)]\n              [min_diff_right_diff (cadr min_diff_right)]\n              [min_diff_left_diff_abs (abs (- (car min_diff_left_pair) (cadr min_diff_left_pair)))]\n              [min_diff_right_diff_abs (abs (- (car min_diff_right_pair) (cadr min_diff_right_pair)))]\n              [min_diff_left_right_diff_abs (abs (- (car arr) (cadr (cdr arr))))])\n         (cond\n           [(< min_diff_left_diff_abs min_diff_right_diff_abs)\n            (if (< min_diff_left_diff_abs min_diff_left_right_diff_abs)\n                (list min_diff_left_pair min_diff_left_diff_abs)\n                (list (list (car arr) (cadr (cdr arr))) min_diff_left_right_diff_abs))]\n           [(> min_diff_left_diff_abs min_diff_right_diff_abs)\n            (if (< min_diff_right_diff_abs min_diff_left_right_diff_abs)\n                (list min_diff_right_pair min_diff_right_diff_abs)\n                (list (list (car arr) (cadr (cdr arr))) min_diff_left_right_diff_abs",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (sort_arr arr n)\n    (let loop ([i 0] [j 0])\n      (cond [(= i n) arr]\n            [(< i n) (let ([min (find_min arr i n)])\n                       (set! (array-ref arr j) (array-ref arr min))\n                       (set! (array-ref arr min) (array-ref arr i))\n                       (loop (+ i 1) (+ j 1)))])))\n  (define (find_min arr i n)\n    (let loop ([i i] [min i])\n      (cond [(= i n) min]\n            [(< i n) (if (< (array-ref arr i) (array-ref arr min))\n                        (loop (+ i 1) i)\n                        (loop (+ i 1) min))])))\n  (define (find_min_diff_arr arr n)\n    (let loop ([i 0] [min (array-ref arr 1)])\n      (cond [(= i (- n 1)) min]\n            [(< i (- n 1)) (if (< (abs (- (array-ref arr i) (array-ref arr (+ i 1)))) min)\n                              (loop (+ i 1) (abs (- (array-ref arr i) (array-ref arr (+ i 1)))))\n                              (loop (+ i 1) min))])))\n  (find_min_diff_arr (sort_arr arr n) n))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond [(= n 1) min]\n          [else\n           (define diff (abs (- (vector-ref arr 0) (vector-ref arr 1))))\n           (define new-min (if (&lt; diff min) diff min))\n           (find_min_diff_helper (vector-tail arr) (- n 1) new-min)]))\n  (find_min_diff_helper arr n (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([min_diff (abs (- (list-ref arr 0) (list-ref arr 1)))]\n               [min_diff (if (&lt; min_diff min) min_diff min)])\n          (find_min_diff_helper (cdr arr) (- n 1) min_diff))))\n  (find_min_diff_helper (sort arr &lt;) n (list-ref arr 0)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr 1) (list-ref arr 0))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new_min_diff (if (< diff min_diff) diff min_diff)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))))\n  (find_min_diff_helper arr n (car arr)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (- (list-ref arr 1) (list-ref arr 0))]\n               [new_min_diff (if (&lt; diff min_diff) diff min_diff)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (car arr) (cadr arr))) min_diff)\n           (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([min_diff (abs (- (list-ref arr 0) (list-ref arr 1)))]\n               [new_min (if (&lt; min_diff min) min_diff min)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min))))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 0)\n        min_diff\n        (let ([diff (abs (- (car arr) (car (cdr arr))))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (car (cdr arr))))))\n",
    "  (let loop ([i 0] [min_diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n    (cond\n      [(= i (- n 2)) min_diff]\n      [else (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n              (if (< diff min_diff)\n                  (loop (+ i 1) diff)\n                  (loop (+ i 1) min_diff)))])))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (find_min_diff_helper (cdr arr) (- n 1) min_diff)]\n      [else (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]))\n  (find_min_diff_helper arr n (list-ref arr 1) (list-ref arr 0)))\n",
    "  (let loop ([i 0] [min_diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n    (cond [(= i (- n 2)) min_diff]\n          [else (let ([diff (abs (- (vector-ref arr i) (vector-ref arr (+ i 1))))])\n                  (if (< diff min_diff)\n                      (loop (+ i 1) diff)\n                      (loop (+ i 1) min_diff)))])))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (list-ref arr 1) (list-ref arr 0)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [else\n           (define diff (abs (- (car arr) (cadr arr))))\n           (define new_min_diff (if (&lt; diff min_diff) diff min_diff))\n           (find_min_diff_helper (cdr arr) (- n 1) new_min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min-diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (if (= i (- n 2))\n          min-diff\n          (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n            (if (< diff min-diff)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min-diff)))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (zero? n)\n        min_diff\n        (let ([diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper (sort arr <) (- n 1) (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new_min_diff (if (< diff min_diff) diff min_diff)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))))\n  (find_min_diff_helper (sort arr <) n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min-diff)\n    (if (= n 1)\n        min-diff\n        (let* ([min-diff (min min-diff (abs (- (list-ref arr 0) (list-ref arr 1))))]\n               [min-diff (min min-diff (abs (- (list-ref arr 0) (list-ref arr (- n 1))))])\n               [min-diff (min min-diff (abs (- (list-ref arr (- n 1)) (list-ref arr (- n 2))))])\n               [min-diff (min min-diff (abs (- (list-ref arr (- n 1)) (list-ref arr 0))))])\n          (find_min_diff_helper (rest arr) (- n 1) min-diff))))\n  (find_min_diff_helper arr n (list-ref arr 0)))\n",
    "  (let loop ([i 0] [j 1] [min (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n    (cond [(= i (- n 1)) min]\n          [(= j n) (loop (+ i 1) (+ i 2) min)]\n          [else (let ([diff (abs (- (vector-ref arr i) (vector-ref arr j)))])\n                  (if (< diff min)\n                      (loop i (+ j 1) diff)\n                      (loop i (+ j 1) min)))])))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (car arr) (car (cdr arr))))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper (sort arr &lt;) n (abs (- (car arr) (car (cdr arr))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr))))\n)\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([min_diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (if (= n 1)\n          min_diff\n          (let ([diff (abs (- (list-ref arr (- n 1)) (list-ref arr (- n 2))))])\n            (if (< diff min_diff)\n                (loop diff)\n                (loop min_diff)))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr n) (list-ref arr (- n 1)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper arr (- n 1) diff)\n              (find_min_diff_helper arr (- n 1) min_diff)))))\n  (find_min_diff_helper arr (- n 1) (list-ref arr (- n 1))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr 0) (list-ref arr 1))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (list-ref arr 0)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([first (car arr)]\n               [second (car (cdr arr))]\n               [diff (- second first)])\n          (if (&lt; diff min)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (car arr)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (car arr) (cadr arr))) min_diff)\n           (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let loop ([i 0] [j 1] [min-diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n    (cond [(= i (- n 1)) min-diff]\n          [(= j n) (loop (+ i 1) (+ i 2) min-diff)]\n          [else (let ([diff (abs (- (vector-ref arr i) (vector-ref arr j)))])\n                  (if (&lt; diff min-diff)\n                      (loop i (+ j 1) diff)\n                      (loop i (+ j 1) min-diff)))])))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min-diff (abs (- (list-ref arr 1) (list-ref arr 0)))])\n      (if (= i (- n 2))\n          min-diff\n          (let ([diff (abs (- (list-ref arr (+ i 2)) (list-ref arr (+ i 1))))])\n            (if (< diff min-diff)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min-diff)))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (list-ref arr 0) (list-ref arr 1))) min)\n       (find_min_diff_helper (cdr arr) (- n 1) (abs (- (list-ref arr 0) (list-ref arr 1))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (abs (- (car arr) (car (cdr arr))))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (car (cdr arr))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(= n 2) (min (abs (- (car arr) (cadr arr))) min_diff)]\n      [else (find_min_diff_helper (cdr arr) (- n 1) (min (abs (- (car arr) (cadr arr))) min_diff))]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let ([arr (sort arr <)])\n    (define (find_min_diff_helper arr n min)\n      (cond\n        [(= n 1) min]\n        [(< (- (list-ref arr 1) (list-ref arr 0)) min) (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]\n        [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n    (find_min_diff_helper arr n (list-ref arr 1) (list-ref arr 0))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [else\n       (let* ([diff (- (list-ref arr 1) (list-ref arr 0))]\n              [new_min_diff (if (&lt; diff min_diff) diff min_diff)])\n         (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))]))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (let loop ([i 0] [j 1] [min-diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n    (cond [(= i (- n 1)) min-diff]\n          [(= j n) (loop (+ i 1) (+ i 2) min-diff)]\n          [else\n           (let ([diff (abs (- (vector-ref arr i) (vector-ref arr j)))])\n             (cond [(< diff min-diff) (loop i (+ j 1) diff)]\n                   [else (loop i (+ j 1) min-diff)]))])))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([min_diff_new (min min_diff (abs (- (car arr) (cadr arr))))]\n               [min_diff_new (min min_diff_new (abs (- (car arr) (caddr arr))))])\n          (find_min_diff_helper (cdr arr) (- n 1) min_diff_new))))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let loop ((arr arr) (n n) (min-diff (abs (- (car arr) (cadr arr)))))\n    (if (&lt; n 2)\n        min-diff\n        (let ((diff (abs (- (car arr) (cadr arr)))))\n          (if (&lt; diff min-diff)\n              (loop (cdr arr) (- n 1) diff)\n              (loop (cdr arr) (- n 1) min-diff))))))\n</code>\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr n) (list-ref arr (- n 1)))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper arr (- n 1) diff)\n              (find_min_diff_helper arr (- n 1) min_diff)))))\n  (find_min_diff_helper arr (- n 1) (list-ref arr (- n 1))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (- (list-ref arr n) (list-ref arr (- n 1)))]\n               [new_min_diff (if (< diff min_diff) diff min_diff)])\n          (find_min_diff_helper arr (- n 1) new_min_diff))))\n  (find_min_diff_helper arr (- n 1) (list-ref arr (- n 1))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(empty? arr) min_diff]\n      [(empty? (rest arr)) min_diff]\n      [else (find_min_diff_helper (rest arr) n\n                                  (min min_diff (abs (- (first arr) (first (rest arr))))))]))\n  (find_min_diff_helper arr n (abs (- (first arr) (first (rest arr))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([first (car arr)]\n               [second (cadr arr)]\n               [diff (- second first)])\n          (if (&lt; diff min)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (car arr)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (equal? n 1)\n        min\n        (let* ([min_diff (abs (- (list-ref arr 0) (list-ref arr 1)))]\n               [new_min (if (&lt; min_diff min) min_diff min)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min))))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (let loop ([arr arr] [n n] [min-diff (abs (- (car arr) (cadr arr)))])\n    (if (zero? n)\n        min-diff\n        (loop (cdr arr) (- n 1) (min min-diff (abs (- (car arr) (cadr arr))))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([min_diff (abs (- (car arr) (cadr arr)))]\n               [new_min (if (&lt; min_diff min) min_diff min)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min))))\n  (find_min_diff_helper (sort arr &lt;) n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (min_diff_helper (cdr arr) (- n 1) (min (abs (- (car arr) (cadr arr))) min_diff))))\n  (min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (abs (- (list-ref arr 0) (list-ref arr 1)))]\n               [new_min_diff (if (&lt; diff min_diff) diff min_diff)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (car arr) (car (cdr arr))))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (car (cdr arr))))))\n",
    "  (let loop ([arr arr] [n n] [min-diff (abs (- (car arr) (cadr arr)))])\n    (cond\n      [(= n 1) min-diff]\n      [(< (abs (- (car arr) (cadr arr))) min-diff) (loop (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (loop (cdr arr) (- n 1) min-diff)])))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 0) min]\n      [(= n 1) min]\n      [else\n       (let ([diff (abs (- (list-ref arr n) (list-ref arr (- n 1))))])\n         (if (&lt; diff min)\n             (find_min_diff_helper arr (- n 1) diff)\n             (find_min_diff_helper arr (- n 1) min)))]))\n  (find_min_diff_helper arr (- n 1) (abs (- (list-ref arr (- n 1)) (list-ref arr (- n 2))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 0) min_diff]\n      [(= n 1) min_diff]\n      [else\n       (let* ([diff (- (vector-ref arr 1) (vector-ref arr 0))]\n              [new_min_diff (if (< diff min_diff) diff min_diff)])\n         (find_min_diff_helper (vector-copy arr) (- n 1) new_min_diff))]))\n  (find_min_diff_helper arr n (vector-ref arr 1)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0)))\n       (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]\n      [else\n       (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (list-ref arr 1) (- (list-ref arr 1) (list-ref arr 0))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([curr (car arr)]\n               [next (cadr arr)]\n               [diff (abs (- curr next))])\n          (if (< diff min)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [else\n           (define diff (abs (- (list-ref arr 0) (list-ref arr 1))))\n           (cond [(< diff min_diff) (find_min_diff_helper (cdr arr) (- n 1) diff)]\n                 [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)])]))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (< diff min)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new_min_diff (if (< diff min_diff) diff min_diff)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))))\n  (find_min_diff_helper (sort arr <) n (abs (- (car arr) (cadr arr)))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (if (= i (- n 2))\n          min\n          (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n            (if (< diff min)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min)))))))\n",
    "  (define (helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr n) (list-ref arr (- n 1)))])\n          (if (&lt; diff min_diff)\n              (helper arr (- n 1) diff)\n              (helper arr (- n 1) min_diff)))))\n  (helper arr (- n 1) (list-ref arr (- n 1))))\n</code>\n",
    "  (let loop ([arr arr] [n n] [min_diff (abs (- (car arr) (cadr arr)))])\n    (if (= n 1)\n        min_diff\n        (loop (cdr arr) (- n 1) (min min_diff (abs (- (car arr) (cadr arr))))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0)))\n       (find_min_diff_helper (cdr arr) (- n 1) min_diff)]\n      [else\n       (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]))\n  (find_min_diff_helper arr n (list-ref arr 1) (list-ref arr 0)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [else\n       (define curr_diff (abs (- (car arr) (cadr arr))))\n       (cond\n         [(< curr_diff min_diff) (find_min_diff_helper (cdr arr) (- n 1) curr_diff)]\n         [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)])]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(empty? arr) min_diff]\n      [(= n 1) min_diff]\n      [else (find_min_diff_helper (rest arr) (- n 1) (min min_diff (abs (- (first arr) (second arr)))))]))\n  (find_min_diff_helper arr n (first arr)))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (if (zero? n)\n        min_diff\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (&lt; diff min_diff)\n              (min_diff_helper (cdr arr) (- n 1) diff)\n              (min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [else\n       (let* ([diff (- (list-ref arr 1) (list-ref arr 0))]\n              [new_min_diff (if (&lt; diff min_diff) diff min_diff)])\n         (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))]))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (car arr) (cadr arr))) min_diff)\n           (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min_diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (if (= i (- n 2))\n          min_diff\n          (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n            (if (< diff min_diff)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min_diff)))))))\n",
    "  (define (min_diff_util arr n)\n    (cond [(= n 1) (list (list (car arr) (car arr)) (list (car arr) (car arr)))]\n          [else (let* ([min_diff_prev (min_diff_util (cdr arr) (- n 1))]\n                       [min_diff_prev_1 (car min_diff_prev)]\n                       [min_diff_prev_2 (cadr min_diff_prev)]\n                       [min_diff_prev_1_1 (car min_diff_prev_1)]\n                       [min_diff_prev_1_2 (cadr min_diff_prev_1)]\n                       [min_diff_prev_2_1 (car min_diff_prev_2)]\n                       [min_diff_prev_2_2 (cadr min_diff_prev_2)]\n                       [min_diff_curr (list (list (car arr) (car arr)) (list (car arr) (car arr)))]\n                       [min_diff_curr_1 (car min_diff_curr)]\n                       [min_diff_curr_2 (cadr min_diff_curr)]\n                       [min_diff_curr_1_1 (car min_diff_curr_1)]\n                       [min_diff_curr_1_2 (cadr min_diff_curr_1)]\n                       [min_diff_curr_2_1 (car min_diff_curr_2)]\n                       [min_diff_curr_2_2 (cadr min_diff_curr_2)])\n                     (cond [(< (- (car arr) (cadr min_diff_prev_1)) (- (cadr min_diff_prev_1) (car min_diff_prev_2)))\n                            (list (list (car arr) (cadr min_diff_prev_1)) (list (car arr) (cadr min_diff_prev_1)))]\n                           [else (list (list (car arr) (car min_diff_prev_2)) (list (car arr) (car min_diff_prev_2)))]))]))\n  (let* ([min_diff_util_",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 0) min_diff]\n      [(= n 1) min_diff]\n      [else\n        (let ([diff (- (list-ref arr 1) (list-ref arr 0))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))]))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (let loop ((i 0) (min_diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n    (if (= i (- n 1))\n        min_diff\n        (let ((diff (abs (- (vector-ref arr i) (vector-ref arr (+ i 1))))))\n          (if (< diff min_diff)\n              (loop (+ i 1) diff)\n              (loop (+ i 1) min_diff))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (< diff min)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr n) (list-ref arr (- n 1)))])\n          (if (&lt; diff min_diff)\n              (min_diff_helper arr (- n 1) diff)\n              (min_diff_helper arr (- n 1) min_diff)))))\n  (min_diff_helper arr (- n 1) (list-ref arr (- n 1))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([diff (- (list-ref arr 1) (list-ref arr 0))]\n               [new-min (if (&lt; diff min) diff min)])\n          (find_min_diff_helper (cdr arr) (- n 1) new-min))))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([min-diff (abs (- (car arr) (cadr arr)))])\n      (if (null? (cddr arr))\n          min-diff\n          (let ([diff (abs (- (cadr arr) (caddr arr)))])\n            (if (< diff min-diff)\n                (loop diff)\n                (loop min-diff)))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (find_min_diff_helper (cdr arr) (- n 1) min_diff)]\n      [else (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]))\n  (find_min_diff_helper arr n (- (list-ref arr 1) (list-ref arr 0))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min)\n       (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min_diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (cond [(= i (- n 2)) min_diff]\n            [else (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n                    (if (< diff min_diff)\n                        (loop (+ i 1) diff)\n                        (loop (+ i 1) min_diff)))]))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(= n 2) (min (abs (- (car arr) (cadr arr))) min_diff)]\n      [else (find_min_diff_helper (cdr arr) (- n 1) (min (abs (- (car arr) (cadr arr))) min_diff))]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (eq? n 1)\n        min\n        (let ([diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n          (if (< diff min)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([min-diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (if (= n 1)\n          min-diff\n          (let ([diff (abs (- (list-ref arr n) (list-ref arr (- n 1))))])\n            (if (< diff min-diff)\n                (loop diff)\n                (loop min-diff)))))))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (cond\n      [(= n 0) min_diff]\n      [(= n 1) min_diff]\n      [else\n       (min_diff_helper (cdr arr) (- n 1) (min min_diff (abs (- (car arr) (car (cdr arr))))))]))\n  (min_diff_helper arr n (abs (- (car arr) (car (cdr arr)))))\n  )",
    "  (define (min_diff_helper arr n min_diff)\n    (if (= n 0)\n        min_diff\n        (let ((diff (abs (- (car arr) (car (cdr arr))))))\n          (if (&lt; diff min_diff)\n              (min_diff_helper (cdr arr) (- n 1) diff)\n              (min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (min_diff_helper arr n (abs (- (car arr) (car (cdr arr))))))\n",
    "  (let loop ([i 0] [min_diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n    (cond [(= i (- n 1)) min_diff]\n          [else\n           (let ([diff (abs (- (vector-ref arr i) (vector-ref arr (+ i 1))))])\n             (if (&lt; diff min_diff)\n                 (loop (+ i 1) diff)\n                 (loop (+ i 1) min_diff)))])))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [else\n       (define diff (- (list-ref arr 1) (list-ref arr 0)))\n       (if (&lt; diff min_diff)\n           (find_min_diff_helper (cdr arr) (- n 1) diff)\n           (find_min_diff_helper (cdr arr) (- n 1) min_diff))]))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (- (list-ref arr n) (list-ref arr (- n 1)))]\n               [min_diff (if (&lt; diff min_diff) diff min_diff)])\n          (min_diff_helper arr (- n 1) min_diff))))\n  (min_diff_helper arr n (list-ref arr 1)))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min-diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (if (= i (- n 2))\n          min-diff\n          (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n            (if (< diff min-diff)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min-diff)))))))\n",
    "  (let loop ([arr arr] [n n] [min-diff (car arr)])\n    (if (zero? n)\n        min-diff\n        (loop (cdr arr) (- n 1) (min min-diff (- (car arr) (car (cdr arr))))))))\n",
    "  (define (min_diff_util arr n)\n    (if (= n 1)\n        (list (list (car arr) (cadr arr)) (list (cadr arr) (car arr)))\n        (let* ([min_diff_rest (min_diff_util (cdr arr) (- n 1))]\n               [min_diff_rest_1 (car min_diff_rest)]\n               [min_diff_rest_2 (cadr min_diff_rest)])\n          (let* ([min_diff_rest_1_diff (abs (- (car min_diff_rest_1) (cadr min_diff_rest_1)))])\n            (if (< (abs (- (car arr) (cadr arr))) min_diff_rest_1_diff)\n                (list (list (car arr) (cadr arr)) min_diff_rest_1)\n                (list min_diff_rest_1 min_diff_rest_2))))))\n  (min_diff_util arr n))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (- (list-ref arr n) (list-ref arr (- n 1)))]\n               [new_min_diff (if (&lt; diff min_diff) diff min_diff)])\n          (find_min_diff_helper arr (- n 1) new_min_diff))))\n  (find_min_diff_helper arr (- n 1) (list-ref arr (- n 1))))\n",
    "  (let loop ((arr arr) (min_diff (abs (- (car arr) (cadr arr)))))\n    (cond ((null? arr) min_diff)\n          ((< (abs (- (car arr) (cadr arr))) min_diff)\n           (loop (cdr arr) (abs (- (car arr) (cadr arr)))))\n          (else (loop (cdr arr) min_diff)))))\n",
    "  (let loop ((i 0) (min-diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n    (cond ((= i (- n 2)) min-diff)\n          ((&lt; min-diff (abs (- (vector-ref arr i) (vector-ref arr (+ i 1)))))\n           (loop (+ i 1) min-diff))\n          (else\n           (loop (+ i 1) (abs (- (vector-ref arr i) (vector-ref arr (+ i 1)))))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0)))\n       (find_min_diff_helper (cdr arr) (- n 1) min_diff)]\n      [else\n       (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]))\n  (find_min_diff_helper arr n (list-ref arr 1) (list-ref arr 0)))\n",
    "  (let loop ((i 0) (min_diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n    (cond ((= i (- n 1)) min_diff)\n          ((&lt; min_diff (abs (- (vector-ref arr i) (vector-ref arr (+ i 1)))))\n           (loop (+ i 1) min_diff))\n          (else (loop (+ i 1) (abs (- (vector-ref arr i) (vector-ref arr (+ i 1)))))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(= n 2) (min (abs (- (car arr) (cadr arr))) min_diff)]\n      [else\n       (define diff (abs (- (car arr) (cadr arr))))\n       (cond\n         [(< diff min_diff) (find_min_diff_helper (cdr arr) (- n 1) diff)]\n         [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)])]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr))))\n  )\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new_min_diff (if (< diff min_diff) diff min_diff)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))))\n  (find_min_diff_helper (sort arr <) n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (list-ref arr 0) (list-ref arr 1))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (list-ref arr 0) (list-ref arr 1))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (let loop ((i 0) (j 1) (min_diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n    (cond\n      [(= i (- n 1)) min_diff]\n      [(= j n) (loop (+ i 1) (+ i 2) min_diff)]\n      [else (let ((diff (abs (- (vector-ref arr i) (vector-ref arr j)))))\n              (if (< diff min_diff)\n                  (loop i (+ j 1) diff)\n                  (loop i (+ j 1) min_diff)))])))\n",
    "  (let loop ([arr arr] [min-diff (abs (- (car arr) (cadr arr)))])\n    (cond [(null? arr) min-diff]\n          [(null? (cdr arr)) min-diff]\n          [(< (abs (- (car arr) (cadr arr))) min-diff) (loop (cdr arr) (abs (- (car arr) (cadr arr))))]\n          [else (loop (cdr arr) min-diff)])))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [else (let* ([diff (- (list-ref arr 1) (list-ref arr 0))]\n                       [new_min_diff (if (&lt; diff min_diff) diff min_diff)])\n                  (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))]))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min_diff (abs (- (list-ref arr 1) (list-ref arr 0)))])\n      (if (= i (- n 2))\n          min_diff\n          (let ([diff (abs (- (list-ref arr (+ i 2)) (list-ref arr (+ i 1))))])\n            (if (< diff min_diff)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min_diff)))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([min_diff (min min_diff (abs (- (car arr) (cadr arr))))]\n               [min_diff (find_min_diff_helper (cdr arr) (- n 1) min_diff)])\n          min_diff)))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr))))\n  )\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(empty? arr) min]\n      [(empty? (rest arr)) min]\n      [else (let* ([diff (- (first arr) (second arr))]\n                  [new-min (if (&lt; diff min) diff min)])\n               (find_min_diff_helper (rest arr) (- n 1) new-min))]))\n  (find_min_diff_helper arr n (first arr)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr 0) (list-ref arr 1))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (list-ref arr 0)))\n",
    "  (let loop ([arr arr] [n n] [min-diff (abs (- (car arr) (cadr arr)))])\n    (if (= n 1)\n        min-diff\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (< diff min-diff)\n              (loop (cdr arr) (- n 1) diff)\n              (loop (cdr arr) (- n 1) min-diff))))))\n",
    "  (define min_diff (abs (- (car arr) (cadr arr))))\n  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n min_diff))\n",
    "  (define (min_diff_util arr n)\n    (if (= n 1)\n        (list (list (car arr) (cadr arr)) (list (cadr arr) (car arr)))\n        (let* ([min_diff_rest (min_diff_util (cdr arr) (- n 1))]\n               [min_diff (car min_diff_rest)]\n               [min_diff_pair (cadr min_diff_rest)])\n          (if (< (abs (- (car arr) (cadr arr))) min_diff)\n              (list (abs (- (car arr) (cadr arr))) (list (car arr) (cadr arr)))\n              min_diff_rest))))\n  (car (min_diff_util arr n)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (car arr) (car (cdr arr))))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (car (cdr arr))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 0)\n        min_diff\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper (sort arr &lt;) (- n 1) (abs (- (car arr) (cadr arr)))))\n",
    "  (let loop ((arr arr) (min-diff (abs (- (car arr) (cadr arr)))))\n    (if (null? (cdr arr))\n        min-diff\n        (loop (cdr arr) (min min-diff (abs (- (car arr) (cadr arr))))))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min_diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (if (= i (- n 2))\n          min_diff\n          (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n            (if (< diff min_diff)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min_diff)))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([min_diff_new (min min_diff (- (list-ref arr 1) (list-ref arr 0)))]\n               [min_diff_new (min min_diff_new (- (list-ref arr 2) (list-ref arr 0)))])\n          (find_min_diff_helper (cdr arr) (- n 1) min_diff_new))))\n  (find_min_diff_helper arr n (- (list-ref arr 1) (list-ref arr 0))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr n) (list-ref arr (- n 1)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper arr (- n 1) diff)\n              (find_min_diff_helper arr (- n 1) min_diff)))))\n  (find_min_diff_helper arr (- n 1) (list-ref arr (- n 1))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr 1) (list-ref arr 0))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0)))\n       (find_min_diff_helper (cdr arr) (- n 1) min_diff)]\n      [else\n       (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]))\n  (find_min_diff_helper arr n (list-ref arr 1) (list-ref arr 0)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new_min_diff (if (< diff min_diff) diff min_diff)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))))\n  (find_min_diff_helper (sort arr <) n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min)\n       (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]\n      [else (min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (min_diff_helper arr n (- (list-ref arr 1) (list-ref arr 0))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (find_min_diff_helper (cdr arr) (- n 1) min_diff)]\n      [else (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min (abs (- (list-ref arr 0) (list-ref arr 1)))])\n      (if (= i (- n 1))\n          min\n          (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n            (if (< diff min)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min)))))))\n",
    "  (let loop ((arr arr) (min-diff (abs (- (car arr) (cadr arr)))) (i 1))\n    (cond ((= i n) min-diff)\n          ((< (abs (- (car arr) (cadr arr))) min-diff)\n           (loop (cdr arr) (abs (- (car arr) (cadr arr))) (+ i 1)))\n          (else (loop (cdr arr) min-diff (+ i 1))))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([min (min (abs (- (car arr) (cadr arr))) min)])\n          (find_min_diff_helper (cdr arr) (- n 1) min))))\n  (find_min_diff_helper (sort arr <) n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (- (list-ref arr 1) (list-ref arr 0))])\n          (if (&lt; diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (list-ref arr 1)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let loop ([i 0] [min-diff (abs (- (list-ref arr 0) (list-ref arr 1)))])\n    (cond\n      [(= i (- n 2)) min-diff]\n      [(< (abs (- (list-ref arr i) (list-ref arr (+ i 1)))) min-diff) (loop (+ i 1) (abs (- (list-ref arr i) (list-ref arr (+ i 1)))))\n       (else (loop (+ i 1) min-diff))])))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([min_diff (if (< min_diff (- (list-ref arr 1) (list-ref arr 0)))\n                             min_diff\n                             (- (list-ref arr 1) (list-ref arr 0)))]\n               [min_diff (if (< min_diff (- (list-ref arr n) (list-ref arr (- n 1))))\n                             min_diff\n                             (- (list-ref arr n) (list-ref arr (- n 1))))])\n          (find_min_diff_helper arr (- n 1) min_diff))))\n  (find_min_diff_helper arr n (- (list-ref arr 1) (list-ref arr 0))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([min_diff (abs (- (car arr) (cadr arr)))]\n               [new_min (if (&lt; min_diff min) min_diff min)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min))))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr))))\n)\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let loop ([arr (sort arr <)])\n    (if (null? (cdr arr))\n        (car arr)\n        (let ([diff (abs (- (car arr) (cadr arr)))]\n              [next-diff (loop (cdr arr))])\n          (if (< diff next-diff)\n              diff\n              next-diff)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr n) (list-ref arr (- n 1))))\n       (find_min_diff_helper arr (- n 1) min_diff)]\n      [else\n       (find_min_diff_helper arr (- n 1) (- (list-ref arr n) (list-ref arr (- n 1))))]))\n  (find_min_diff_helper arr (- n 1) (list-ref arr n)))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]\n      [else (min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (min_diff_helper arr n (abs (- (list-ref arr 1) (list-ref arr 0)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff)\n       (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (- (list-ref arr 1) (list-ref arr 0))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min_diff (abs (- (list-ref arr 1) (list-ref arr 0)))])\n      (if (= i (- n 2))\n          min_diff\n          (let ([diff (abs (- (list-ref arr (+ i 2)) (list-ref arr (+ i 1))))])\n            (if (< diff min_diff)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min_diff)))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([first (car arr)]\n               [second (cadr arr)]\n               [diff (- second first)])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (car arr)))\n",
    "  (define (helper arr n i min)\n    (if (= i (- n 1))\n        min\n        (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n          (if (< diff min)\n              (helper arr n (+ i 1) diff)\n              (helper arr n (+ i 1) min)))))\n  (helper arr n 0 (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([min-diff (abs (- (car arr) (cadr arr)))])\n      (if (null? (cddr arr))\n          min-diff\n          (let ([diff (abs (- (cadr arr) (caddr arr)))])\n            (if (< diff min-diff)\n                (loop diff)\n                (loop min-diff)))))))\n"
  ]
}