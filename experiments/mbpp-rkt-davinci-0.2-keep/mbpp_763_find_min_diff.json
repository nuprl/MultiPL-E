{
  "name": "mbpp_763_find_min_diff",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n(define (find_min_diff arr n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_min_diff))\n    (check-equal? (candidate (list 1 5 3 19 18 25) 6) 1)\n    (check-equal? (candidate (list 4 3 2 6) 4) 1)\n    (check-equal? (candidate (list 30 5 20 9) 4) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([min_diff (min min_diff (abs (- (car arr) (cadr arr))))]\n               [min_diff (find_min_diff_helper (cdr arr) (- n 1) min_diff)])\n          min_diff)))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr))))\n  )\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let loop ((i 0) (min-diff (abs (- (list-ref arr 0) (list-ref arr 1)))))\n    (cond ((= i (- n 1)) min-diff)\n          ((&lt; min-diff (abs (- (list-ref arr i) (list-ref arr (+ i 1)))))\n           (loop (+ i 1) min-diff))\n          (else (loop (+ i 1) (abs (- (list-ref arr i) (list-ref arr (+ i 1)))))))))\n",
    "  (define (min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (min_diff_helper (cdr arr) (- n 1) (min min_diff (abs (- (car arr) (car (cdr arr))))))))\n  (min_diff_helper arr n (abs (- (car arr) (car (cdr arr)))))\n)\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (find_min_diff_helper (cdr arr) (- n 1) min_diff)]\n      [else (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]))\n  (find_min_diff_helper arr n (list-ref arr 1) (list-ref arr 0)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 0)\n        min_diff\n        (let ([diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (vector-copy arr 1 n) (- n 1) diff)\n              (find_min_diff_helper (vector-copy arr 1 n) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([diff (- (list-ref arr n) (list-ref arr (- n 1)))])\n          (if (&lt; diff min)\n              (find_min_diff_helper arr (- n 1) diff)\n              (find_min_diff_helper arr (- n 1) min)))))\n  (find_min_diff_helper arr (- n 1) (list-ref arr (- n 1))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (list-ref arr 0) (list-ref arr 1))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (list-ref arr 0) (list-ref arr 1))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (let loop ([i 0] [min-diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n    (cond [(= i (- n 1)) min-diff]\n          [else\n           (let ([diff (abs (- (vector-ref arr i) (vector-ref arr (+ i 1))))])\n             (if (&lt; diff min-diff)\n                 (loop (+ i 1) diff)\n                 (loop (+ i 1) min-diff)))])))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [else (let ([diff (- (list-ref arr 1) (list-ref arr 0))])\n                  (if (&lt; diff min_diff)\n                      (find_min_diff_helper (cdr arr) (- n 1) diff)\n                      (find_min_diff_helper (cdr arr) (- n 1) min_diff)))]))\n  (find_min_diff_helper arr n (- (list-ref arr 1) (list-ref arr 0))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([diff (abs (- (vector-ref arr 0) (vector-ref arr 1)))])\n          (if (< diff min)\n              (find_min_diff_helper (vector-tail arr) (- n 1) diff)\n              (find_min_diff_helper (vector-tail arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (abs (- (vector-ref arr 0) (vector-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(empty? arr) min_diff]\n      [(= n 1) min_diff]\n      [else\n       (define diff (- (first arr) (first (rest arr))))\n       (if (&lt; diff min_diff)\n           (find_min_diff_helper (rest arr) (- n 1) diff)\n           (find_min_diff_helper (rest arr) (- n 1) min_diff))]))\n  (find_min_diff_helper arr n (first arr)))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let ([diff (abs (- (car arr) (car (cdr arr))))])\n          (if (< diff min)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (car (cdr arr))))))\n",
    "  (define (min_diff_util arr n)\n    (define (min_diff_util_helper arr n min_diff)\n      (if (= n 1)\n          min_diff\n          (min_diff_util_helper (cdr arr) (- n 1) (min min_diff (abs (- (car arr) (car (cdr arr))))))))\n    (min_diff_util_helper arr n (abs (- (car arr) (car (cdr arr))))))\n  (min_diff_util (sort arr <) n))\n",
    "  (let ([arr (sort arr <)])\n    (let loop ([i 0] [min (abs (- (list-ref arr 1) (list-ref arr 0)))])\n      (if (= i (- n 2))\n          min\n          (let ([diff (abs (- (list-ref arr (+ i 2)) (list-ref arr (+ i 1))))])\n            (if (< diff min)\n                (loop (+ i 1) diff)\n                (loop (+ i 1) min)))))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (car arr) (cadr arr))) min_diff)\n           (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n"
  ]
}