{
  "name": "mbpp_304_find_Element",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to find element at a given index after number of rotations.\n(define (find_Element arr ranges rotations index)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Element))\n    (check-equal? (candidate (list 1 2 3 4 5) (list (list 0 2) (list 0 3)) 2 1) 3)\n    (check-equal? (candidate (list 1 2 3 4) (list (list 0 1) (list 0 2)) 1 2) 3)\n    (check-equal? (candidate (list 1 2 3 4 5 6) (list (list 0 1) (list 0 2)) 1 1) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([rotations (modulo rotations (length arr))])\n    (list-ref arr (+ index rotations))))\n",
    "  (let ([rotated-arr (rotate arr ranges rotations)])\n    (list-ref rotated-arr index)))\n",
    "  (let ([new-index (+ index rotations)])\n    (if (>= new-index ranges)\n        (find_Element arr ranges (- ranges rotations) index)\n        (list-ref arr new-index))))\n",
    "  (let ([arr-len (length arr)])\n    (let ([rotations (modulo rotations arr-len)])\n      (let ([index (modulo index arr-len)])\n        (let ([new-index (+ index rotations)])\n          (let ([new-index (modulo new-index arr-len)])\n            (list-ref arr new-index)))))))\n",
    "  (let ([new-index (+ index rotations)])\n    (if (>= new-index ranges)\n        (find_Element arr ranges (- new-index ranges) index)\n        (list-ref arr new-index))))\n",
    "  (let ((new_index (+ index rotations)))\n    (if (&gt;= new_index ranges)\n        (find_Element arr ranges (- ranges new_index) index)\n        (list-ref arr new_index))))\n",
    "  (let ([len (length arr)])\n    (if (and (<= 0 index) (< index len))\n        (let ([rotations (modulo rotations len)])\n          (if (= rotations 0)\n              (list-ref arr index)\n              (let ([new-index (- index rotations)])\n                (if (< new-index 0)\n                    (list-ref arr (+ len new-index))\n                    (list-ref arr new-index)))))\n        'error)))\n",
    "  (let ([new_index (modulo (+ index rotations) ranges)])\n    (list-ref arr new_index)))\n",
    "  (let ([rotated-arr (rotate arr ranges rotations)])\n    (list-ref rotated-arr index)))\n",
    "  (let ([rotations (modulo rotations (length arr))])\n    (if (= rotations 0)\n        (list-ref arr index)\n        (list-ref arr (modulo (+ index rotations) (length arr))))))\n",
    "  (let loop ([i 0] [arr arr])\n    (if (= i rotations)\n        (list-ref arr index)\n        (loop (+ i 1) (rotate-list ranges arr)))))\n",
    "  (let* ([len (length arr)]\n         [rotations (modulo rotations len)]\n         [new_index (+ index rotations)])\n    (if (&gt;= new_index len)\n        (find_Element arr ranges (- len rotations) index)\n        (list-ref arr new_index))))\n",
    "  (let ([rotations (modulo rotations (length arr))])\n    (vector-ref arr (+ index rotations))))\n",
    "  (let ([len (length arr)])\n    (let ([new_index (+ index rotations)])\n      (if (>= new_index len)\n          (find_Element arr ranges (- new_index len) index)\n          (list-ref arr new_index)))))\n",
    "  (let ([rotations (modulo rotations (length arr))])\n    (list-ref arr (+ index rotations))))\n",
    "  (let ([new-index (+ index rotations)])\n    (if (&gt;= new-index ranges)\n        (find_Element arr ranges (- ranges) new-index)\n        (list-ref arr new-index))))\n",
    "  (let ([new-index (+ index rotations)])\n    (if (&gt;= new-index ranges)\n        (find_Element arr ranges (- ranges) (- new-index ranges))\n        (list-ref arr new-index))))\n",
    "  (let ([length (length arr)])\n    (if (and (not (null? ranges)) (not (null? rotations)))\n        (let ([range (car ranges)])\n          (if (and (not (null? range)) (not (null? (cdr range))))\n              (let ([rotation (car rotations)])\n                (if (and (not (null? rotation)) (not (null? (cdr rotation))))\n                    (let ([start (car range)]\n                          [end (cadr range)]\n                          [rotation_start (car rotation)]\n                          [rotation_end (cadr rotation)])\n                      (if (and (<= start index) (<= index end) (<= rotation_start index) (<= index rotation_end))\n                          (find_Element arr (cdr ranges) (cdr rotations) index)\n                          (if (<= start index)\n                              (if (<= index rotation_start)\n                                  (list-ref arr index)\n                                  (list-ref arr (- index 1)))\n                              (if (<= index end)\n                                  (list-ref arr index)\n                                  (list-ref arr (- index 1))))))\n                    (list-ref arr index))\n                (list-ref arr index)))\n          (list-ref arr index)))\n    (list-ref arr index)))\n",
    "  (let ([new_index (modulo (+ index rotations) ranges)])\n    (list-ref arr new_index)))\n",
    "  (let ([rotations (modulo rotations (length arr))])\n    (list-ref arr (+ index rotations))))\n"
  ]
}