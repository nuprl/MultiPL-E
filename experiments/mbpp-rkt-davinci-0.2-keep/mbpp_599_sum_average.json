{
  "name": "mbpp_599_sum_average",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find sum and average of first n natural numbers.\n(define (sum_average number)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_average))\n    (check-equal? (candidate 10) (list 55 5.5))\n    (check-equal? (candidate 15) (list 120 8.0))\n    (check-equal? (candidate 20) (list 210 10.5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ((n number) (sum 0) (count 0))\n    (if (= n 0)\n        (/ sum count)\n        (loop (- n 1) (+ sum n) (+ count 1)))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&lt; i number)\n        (loop (+ i 1) (+ sum i))\n        (values sum (/ sum number)))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (values (sum number) (/ (sum number) number))))\n",
    "  (let loop ((sum 0) (i 1))\n    (if (= i number)\n        (cons sum (/ sum number))\n        (loop (+ sum i) (+ i 1)))))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (cons (sum number) (/ (sum number) number))))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&lt;= i number)\n        (loop (+ i 1) (+ sum i))\n        (/ sum number))))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (iter number sum)\n    (if (= number 0)\n        (cons sum (/ sum number))\n        (iter (- number 1) (+ sum number))))\n  (iter number 0))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ([n number] [sum 0])\n    (if (zero? n)\n        (values sum (/ sum number))\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (/ sum number)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (cons (sum number) (/ (sum number) number))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (values sum (/ sum number))\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (= i number)\n        (cons sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (let loop ((n number) (sum 0))\n    (if (= n 0)\n        (values sum (/ sum number))\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum_aux number acc)\n    (if (= number 0)\n        acc\n        (sum_aux (- number 1) (+ acc number))))\n  (define (average number)\n    (/ (sum_aux number 0) number))\n  (list (sum_aux number 0) (average number)))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (define (sum-iter number sum)\n    (if (= number 0)\n        sum\n        (sum-iter (- number 1) (+ sum number))))\n  (define (average number)\n    (/ (sum-iter number 0) number))\n  (list (sum-iter number 0) (average number)))\n",
    "  (define (sum number)\n    (if (= number 1)\n        1\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum_aux number acc)\n    (if (= number 0)\n        acc\n        (sum_aux (- number 1) (+ acc number))))\n  (define (average number)\n    (/ (sum_aux number 0) number))\n  (list (sum_aux number 0) (average number)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&lt; i number)\n        (loop (+ i 1) (+ sum i))\n        (/ sum number))))\n",
    "  (define (sum_rec number sum)\n    (if (= number 0)\n        sum\n        (sum_rec (- number 1) (+ sum number))))\n  (define (average_rec number sum)\n    (/ sum number))\n  (values (sum_rec number 0) (average_rec number (sum_rec number 0))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum number)\n    (if (= number 1)\n        1\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((n number) (sum 0))\n    (if (= n 0)\n        (values sum (/ sum number))\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&lt; i number)\n        (loop (+ i 1) (+ sum i))\n        (/ sum number))))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (cons sum (/ sum number))\n        (loop (- n 1) (+ sum n)))))\n",
    "  (let loop ((sum 0) (i 1))\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ sum i) (+ i 1)))))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (/ sum number)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum number)\n    (if (= number 1)\n        1\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum-iter number sum)\n    (if (= number 0)\n        sum\n        (sum-iter (- number 1) (+ number sum))))\n  (define (average number)\n    (/ (sum-iter number 0) number))\n  (cons (sum-iter number 0) (average number)))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((n 1) (sum 0))\n    (if (&lt; n number)\n        (loop (+ n 1) (+ sum n))\n        (/ sum number))))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (&lt; i number)\n        (loop (+ i 1) (+ sum i))\n        (/ sum number))))\n</code>\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (= i number)\n        (cons sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&lt; i number)\n        (loop (+ i 1) (+ sum i))\n        (/ sum number))))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (values (sum number) (/ (sum number) number))))\n",
    "  (define (sum-iter number sum)\n    (if (= number 0)\n        sum\n        (sum-iter (- number 1) (+ sum number))))\n  (define (average number)\n    (/ (sum-iter number 0) number))\n  (list (sum-iter number 0) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (/ sum number)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (cons (sum number) (/ (sum number) number))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (cons (/ (sum number) number) (sum number))))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (cons (sum number) (/ (sum number) number))))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum-iter number sum)\n    (if (= number 0)\n        sum\n        (sum-iter (- number 1) (+ sum number))))\n  (define (average number)\n    (/ (sum-iter number 0) number))\n  (cons (sum-iter number 0) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum_helper number sum)\n    (if (= number 0)\n        sum\n        (sum_helper (- number 1) (+ sum number))))\n  (define (average number sum)\n    (/ sum number))\n  (average number (sum_helper number 0)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (cons (sum number) (/ (sum number) number))))\n",
    "  (let ((sum 0))\n    (for ([i (in-range number)])\n      (set! sum (+ sum i)))\n    (values sum (/ sum number))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (/ sum number)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum-iter number sum)\n    (if (= number 0)\n        sum\n        (sum-iter (- number 1) (+ sum number))))\n  (define (average number)\n    (/ (sum-iter number 0) number))\n  (list (sum-iter number 0) (average number)))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (cons (sum number)\n          (/ (sum number) number))))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (values sum (/ sum number))\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 1)\n                      1\n                      (+ n (sum (- n 1)))))])\n    (cons (/ (sum number) number) (sum number))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&lt;= i number)\n        (loop (+ i 1) (+ sum i))\n        (/ sum number))))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (sum-iter number sum)\n    (if (= number 0)\n        sum\n        (sum-iter (- number 1) (+ sum number))))\n  (define (average-iter number sum)\n    (/ sum number))\n  (list (sum-iter number 0) (average-iter number (sum-iter number 0))))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (cons (sum number) (/ (sum number) number))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((n number) (sum 0))\n    (if (= n 0)\n        (values sum (/ sum number))\n        (loop (- n 1) (+ sum n)))))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (values sum (/ sum number))\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (/ sum number)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let ((sum 0)\n        (average 0))\n    (for ([i (in-range 1 (+ number 1))])\n      (set! sum (+ sum i)))\n    (set! average (/ sum number))\n    (list sum average)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum-aux number sum)\n    (if (= number 0)\n        sum\n        (sum-aux (- number 1) (+ sum number))))\n  (define (average number)\n    (/ (sum-aux number 0) number))\n  (list (sum-aux number 0) (average number)))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (values (sum number) (/ (sum number) number))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i number)\n        (values sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ([n number] [sum 0])\n    (if (= n 0)\n        (/ sum number)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let ((sum 0)\n        (average 0))\n    (for ([i (in-range 1 number)])\n      (set! sum (+ sum i)))\n    (set! average (/ sum number))\n    (list sum average)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (cons (sum number) (/ (sum number) number))))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&lt; i number)\n        (loop (+ i 1) (+ sum i))\n        (/ sum number))))\n</code>\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (letrec ([sum (lambda (n)\n                  (if (= n 0)\n                      0\n                      (+ n (sum (- n 1)))))])\n    (values (sum number) (/ (sum number) number))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (cons (sum number) (average number)))\n",
    "  (define (sum-iter number sum)\n    (if (= number 0)\n        sum\n        (sum-iter (- number 1) (+ sum number))))\n  (define (average number)\n    (/ (sum-iter number 0) number))\n  (list (sum-iter number 0) (average number)))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let ((sum 0)\n        (average 0))\n    (for ([i (in-range 1 (+ number 1))])\n      (set! sum (+ sum i)))\n    (set! average (/ sum number))\n    (list sum average)))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i number)\n        (cons sum (/ sum number))\n        (loop (+ i 1) (+ sum i)))))\n",
    "  (define (sum_average_iter number sum)\n    (if (= number 0)\n        (/ sum number)\n        (sum_average_iter (- number 1) (+ sum number))))\n  (sum_average_iter number 0))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (let loop ((n number) (sum 0))\n    (if (= n 0)\n        (/ sum number)\n        (loop (- n 1) (+ sum n)))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum (- n 1)))))\n  (define (average n)\n    (/ (sum n) n))\n  (list (sum number) (average number)))\n",
    "  (define (sum number)\n    (if (= number 0)\n        0\n        (+ number (sum (- number 1)))))\n  (define (average number)\n    (/ (sum number) number))\n  (list (sum number) (average number)))\n"
  ]
}