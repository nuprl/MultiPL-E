{
  "name": "mbpp_632_move_zero",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(empty? num_list) (reverse new_list)]\n          [(zero? (first num_list)) (loop (rest num_list) (cons (first num_list) new_list))]\n          [else (loop (rest num_list) (cons (first num_list) new_list))])))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list res)\n    (cond\n      [(null? num_list) res]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) (append res (list 0)))]\n      [else (move_zero_iter (cdr num_list) (append res (list (car num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons 0 acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (remove (first num_list) acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list))\n             (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append (list (first num_list)) zero_list))]))\n  (move_zero_helper num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_helper num_list result)\n    (cond [(empty? num_list) result]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) (append result (list 0)))]\n          [else (move_zero_helper (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(empty? num_list) (reverse new_list)]\n          [(zero? (first num_list)) (loop (rest num_list) (cons 0 new_list))]\n          [else (loop (rest num_list) (cons (first num_list) new_list))])))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(null? num_list) (append zero_list num_list)]\n      [(zero? (car num_list)) (move_zero_helper (cdr num_list) (append zero_list (list (car num_list))))]\n      [else (move_zero_helper (cdr num_list) (append zero_list (list (car num_list))))]))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons 0 acc))]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(= (first num_list) 0) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list))\n                  (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n",
    "  (define (move_zero_helper num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ((num_list num_list)\n             (zero_list null)\n             (non_zero_list null))\n    (cond ((null? num_list)\n           (append non_zero_list zero_list))\n          ((zero? (car num_list))\n           (loop (cdr num_list)\n                 (cons (car num_list) zero_list)\n                 non_zero_list))\n          (else\n           (loop (cdr num_list)\n                 zero_list\n                 (cons (car num_list) non_zero_list))))))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) (append (list (first num_list)) zero_list))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [acc '()])\n    (cond [(null? num_list) (reverse acc)]\n          [(zero? (car num_list))\n           (loop (cdr num_list) (cons (car num_list) acc))]\n          [else (loop (cdr num_list) (cons (car num_list) acc))])))\n",
    "  (define (move_zero_helper num_list new_list)\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list))\n           (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]\n          [else\n           (move_zero_helper (rest num_list) (append new_list (list 0)))]))\n  (move_zero_helper num_list (list)))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (helper num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list))\n           (helper (rest num_list) (append acc (list 0)))]\n          [else (helper (rest num_list) (append acc (list (first num_list))))]))\n  (helper num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_helper num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append (list (first num_list)) new_list))]))\n  (move_zero_helper num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(null? num_list) result]\n          [(zero? (car num_list))\n           (loop (cdr num_list) (append result (list 0)))]\n          [else\n           (loop (cdr num_list) (append result (list (car num_list))))])))\n",
    "  (define (move_zero_helper num_list new_list)\n    (cond ((null? num_list) new_list)\n          ((zero? (car num_list))\n           (move_zero_helper (cdr num_list) (append new_list (list 0))))\n          (else (move_zero_helper (cdr num_list) (append new_list (list (car num_list)))))))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) (reverse result)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) result)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) result))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) zero_list)]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(null? num_list) (reverse new_list)]\n          [(zero? (car num_list))\n           (loop (cdr num_list) (cons (car num_list) new_list))]\n          [else\n           (loop (cdr num_list) (cons 0 new_list))])))\n",
    "  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) (reverse result)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) result)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) result))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(null? num_list) (reverse result)]\n          [(zero? (car num_list)) (loop (cdr num_list) (cons (car num_list) result))]\n          [else (loop (cdr num_list) (cons (car num_list) result))])))\n",
    "  (define (move_zero_iter num_list new_list)\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list 0)))]\n          [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (remove zero? acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_helper num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append result (list 0)))]\n      [else (move_zero_helper (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(empty? num_list) (reverse result)]\n          [(zero? (first num_list))\n           (loop (rest num_list) (cons (first num_list) result))]\n          [else (loop (rest num_list) (cons (first num_list) result))])))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n          [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list zero_list)\n    (cond [(empty? num_list) zero_list]\n          [(zero? (first num_list))\n           (move_zero_iter (rest num_list) (append zero_list (list 0)))]\n          [else (move_zero_iter (rest num_list) (append zero_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append (list (first num_list)) zero_list))]))\n  (move_zero_helper num_list '()))\n",
    "  (let loop ([num_list num_list] [new_list '()])\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list)) (loop (rest num_list) (append new_list (list 0)))]\n          [else (loop (rest num_list) (append new_list (list (first num_list))))])))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (remove (first num_list) acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (append (list (first num_list)) (move_zero_iter (rest num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list result)\n    (if (null? num_list)\n        result\n        (if (zero? (car num_list))\n            (move_zero_iter (cdr num_list) (append result (list 0)))\n            (move_zero_iter (cdr num_list) (append result (list (car num_list)))))))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else\n       (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_helper num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list)\n  (filter (lambda (x) (zero? x)) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n",
    "  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(empty? num_list) (reverse result)]\n          [(zero? (first num_list))\n           (loop (rest num_list) (cons (first num_list) result))]\n          [else (loop (rest num_list) (cons (first num_list) result))])))\n",
    "  (define (move_zero_helper num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list))\n       (move_zero_helper (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) zero_list)]))\n  (move_zero_helper num_list '()))\n",
    "  (let loop ([num_list num_list] [acc '()])\n    (if (null? num_list)\n        acc\n        (if (zero? (car num_list))\n            (loop (cdr num_list) (append acc (list 0)))\n            (loop (cdr num_list) (append acc (list (car num_list))))))))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n          [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list))\n           (move_zero_iter (rest num_list) (append acc (list 0)))]\n          [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) (append acc (list 0)))]\n          [else (move_zero_helper (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list] [result '()])\n    (cond [(empty? num_list) result]\n          [(zero? (first num_list))\n           (loop (rest num_list) (append result (list 0)))]\n          [else (loop (rest num_list) (append result (list (first num_list))))])))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n      [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list] [result '()])\n    (cond [(empty? num_list) (reverse result)]\n          [(zero? (first num_list)) (loop (rest num_list) (cons (first num_list) result))]\n          [else (loop (rest num_list) (cons (first num_list) result))])))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n      [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list result)\n    (cond [(empty? num_list) result]\n          [(zero? (first num_list))\n           (move_zero_iter (rest num_list) (append result (list (first num_list))))]\n          [else (move_zero_iter (rest num_list) (append (list (first num_list)) result))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list (reverse num_list))]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (cons (first num_list) zero_list))]\n      [else (move_zero_iter (rest num_list) zero_list)]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list))\n       (move_zero_iter (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [acc '()])\n    (cond [(null? num_list) (reverse acc)]\n          [(zero? (car num_list)) (loop (cdr num_list) (cons (car num_list) acc))]\n          [else (loop (cdr num_list) (cons (car num_list) acc))])))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_helper (cdr num_list) acc)]\n      [else (move_zero_helper (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(null? num_list) zero_list]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) (append zero_list (list (car num_list))))]\n      [else (move_zero_iter (cdr num_list) (append (list (car num_list)) zero_list))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list] [new_list '()])\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list)) (loop (rest num_list) (append new_list (list 0)))]\n          [else (loop (rest num_list) (append new_list (list (first num_list))))])))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list empty))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(empty? num_list) (reverse new_list)]\n          [(zero? (first num_list))\n           (loop (rest num_list) (cons (first num_list) new_list))]\n          [else\n           (loop (rest num_list) (cons (first num_list) new_list))])))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) (reverse new_list)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) new_list))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list zero_list)\n    (cond\n      [(empty? num_list) (append zero_list num_list)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append zero_list (list (first num_list))))]\n      [else (move_zero_iter (rest num_list) zero_list)]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list zero_list)\n    (cond ((null? num_list) zero_list)\n          ((zero? (car num_list))\n           (move_zero_iter (cdr num_list) (append zero_list (list 0))))\n          (else (move_zero_iter (cdr num_list) (append zero_list (list (car num_list)))))))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append new_list (list 0)))]\n      [else (move_zero_iter (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_iter num_list empty))\n",
    "  (filter (lambda (x) (not (equal? x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (let loop ([num_list num_list] [new_list '()])\n    (cond [(empty? num_list) new_list]\n          [(zero? (first num_list)) (loop (rest num_list) (append new_list (list (first num_list))))]\n          [else (loop (rest num_list) (append new_list (list (first num_list))))])))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list] [zero_list '()])\n    (cond [(null? num_list) (append zero_list num_list)]\n          [(zero? (car num_list))\n           (loop (cdr num_list) (append zero_list (list (car num_list))))]\n          [else (loop (cdr num_list) zero_list)])))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [new_list '()])\n    (cond [(null? num_list) (reverse new_list)]\n          [(zero? (car num_list)) (loop (cdr num_list) new_list)]\n          [else (loop (cdr num_list) (cons (car num_list) new_list))])))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (append (filter (lambda (x) (not (zero? x))) num_list)\n          (filter (lambda (x) (zero? x)) num_list)))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (let loop ([num_list num_list]\n             [result '()])\n    (cond [(null? num_list) (reverse result)]\n          [(zero? (car num_list)) (loop (cdr num_list) (cons (car num_list) result))]\n          [else (loop (cdr num_list) (cons (car num_list) result))])))\n",
    "  (define (move_zero_helper num_list new_list)\n    (cond\n      [(empty? num_list) new_list]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]\n      [else (move_zero_helper (rest num_list) (append new_list (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append acc (list 0)))]\n      [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) acc)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (let loop ([num_list num_list]\n             [zero_list '()])\n    (cond [(empty? num_list) (append zero_list num_list)]\n          [(zero? (first num_list))\n           (loop (rest num_list)\n                 (append zero_list (list (first num_list))))]\n          [else (loop (rest num_list)\n                      (append zero_list (list (first num_list))))])))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (remove (first num_list) acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) acc)]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list))\n                  (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n"
  ]
}