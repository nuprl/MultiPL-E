{
  "name": "mbpp_640_remove_parenthesis",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove the parenthesis and what is inbetween them from a string.\n(define (remove_parenthesis items)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_parenthesis))\n    (check-equal? (candidate (list \"python (chrome)\")) \"python\")\n    (check-equal? (candidate (list \"string(.abc)\")) \"string\")\n    (check-equal? (candidate (list \"alpha(num)\")) \"alpha\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (string-replace items #rx\"\\\\(.*\\\\)\" \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond [(empty? items) empty]\n        [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n        [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n        [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(string=? (first items) \")\") (remove_parenthesis (rest items))]\n    [(string=? (first items) \"(\") (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"(.*)\" \"\" items))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\([^()]*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [else\n     (cond\n       [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n       [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n       [else (cons (first items) (remove_parenthesis (rest items)))]\n       )]\n     ]\n    )\n  )\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond [(empty? items) empty]\n        [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n        [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n        [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (define (remove_parenthesis_helper items result)\n    (cond\n      [(empty? items) result]\n      [(equal? (first items) #\\() (remove_parenthesis_helper (rest items) result)]\n      [(equal? (first items) #\\)) (remove_parenthesis_helper (rest items) result)]\n      [else (remove_parenthesis_helper (rest items) (append result (list (first items))))]))\n  (remove_parenthesis_helper items '()))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(string=? (first items) \"(\" ) (remove_parenthesis (rest items))]\n    [(string=? (first items) \")\" ) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\([^\\)]*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(eq? (first items) #\\() (remove_parenthesis (rest items))]\n    [(eq? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (define (remove_parenthesis_helper items result)\n    (cond ((null? items) result)\n          ((equal? (car items) #\\() (remove_parenthesis_helper (cdr items) result))\n          ((equal? (car items) #\\)) (remove_parenthesis_helper (cdr items) result))\n          (else (remove_parenthesis_helper (cdr items) (string-append result (list (car items)))))))\n  (remove_parenthesis_helper items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\([^()]*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(eq? (first items) #\\() (remove_parenthesis (rest items))]\n    [(eq? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]+\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"(.*)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*?\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(eq? (first items) #\\() (remove_parenthesis (rest items))]\n    [(eq? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\([^()]*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*?\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (define (remove_parenthesis_helper items result)\n    (cond ((null? items) result)\n          ((equal? (car items) #\\() (remove_parenthesis_helper (cdr items) result))\n          ((equal? (car items) #\\)) (remove_parenthesis_helper (cdr items) result))\n          (else (remove_parenthesis_helper (cdr items) (append result (list (car items)))))))\n  (remove_parenthesis_helper items '()))\n",
    "  (define (remove_parenthesis_helper items result)\n    (cond\n      [(empty? items) result]\n      [(char=? (first items) #\\() (remove_parenthesis_helper (rest items) result)]\n      [(char=? (first items) #\\)) (remove_parenthesis_helper (rest items) result)]\n      [else (remove_parenthesis_helper (rest items) (append result (list (first items))))]))\n  (remove_parenthesis_helper items '()))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (define (remove_parenthesis_helper items result)\n    (cond\n      [(empty? items) result]\n      [(equal? (first items) #\\() (remove_parenthesis_helper (rest items) result)]\n      [(equal? (first items) #\\)) (remove_parenthesis_helper (rest items) result)]\n      [else (remove_parenthesis_helper (rest items) (append result (list (first items))))]))\n  (remove_parenthesis_helper items '()))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([()]\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\([^()]*\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond [(empty? items) empty]\n        [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n        [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n        [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(eq? (first items) #\\() (remove_parenthesis (rest items))]\n    [(eq? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\(.*?\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*?\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\(.*\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(eq? (first items) #\\() (remove_parenthesis (rest items))]\n    [(eq? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (filter (lambda (x) (not (equal? x '(')) (not (equal? x ')'))) items))\n",
    "  (regexp-replace* #rx\"\\\\(.*?\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n"
  ]
}