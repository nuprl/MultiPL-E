{
  "name": "mbpp_461_upper_ctr",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count the upper case characters in a given string.\n(define (upper_ctr str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate upper_ctr))\n    (check-equal? (candidate \"PYthon\") 1)\n    (check-equal? (candidate \"BigData\") 1)\n    (check-equal? (candidate \"program\") 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (loop str ctr)\n    (cond ((null? str) ctr)\n          ((upper? (car str)) (loop (cdr str) (+ ctr 1)))\n          (else (loop (cdr str) ctr))))\n  (loop str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (let ([c (string-ref str 0)])\n          (if (char-upper-case? c)\n              (loop (substring str 1) (+ ctr 1))\n              (loop (substring str 1) ctr))))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-upper-case? (first str)) (+ 1 (upper_ctr (rest str)))]\n    [else (upper_ctr (rest str))]))\n",
    "  (let loop ((str str) (ctr 0))\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ 1 ctr))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ((str str) (ctr 0))\n    (cond\n      ((null? str) ctr)\n      ((char-upper-case? (car str)) (loop (cdr str) (+ ctr 1)))\n      (else (loop (cdr str) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&gt;= i (string-length str))\n        ctr\n        (loop (+ i 1)\n              (if (char-upper-case? (string-ref str i))\n                  (+ ctr 1)\n                  ctr)))))\n</code>\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (loop (rest str)\n              (if (char-upper-case? (first str))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (helper (rest str) (+ 1 ctr))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ((str str) (ctr 0))\n    (cond ((null? str) ctr)\n          ((char-upper-case? (car str)) (loop (cdr str) (+ ctr 1)))\n          (else (loop (cdr str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (upper-char? c)\n    (char-upper-case? c))\n  (define (count-upper str)\n    (cond ((null? str) 0)\n          ((upper-char? (car str)) (+ 1 (count-upper (cdr str))))\n          (else (count-upper (cdr str)))))\n  (count-upper str))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1)\n              (if (char-upper-case? (string-ref str 0))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)])))\n",
    "  (let loop ((str str) (ctr 0))\n    (cond ((null? str) ctr)\n          ((char-upper-case? (car str)) (loop (cdr str) (+ ctr 1)))\n          (else (loop (cdr str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (loop (cdr str) (+ ctr 1))\n            (loop (cdr str) ctr)))))\n",
    "  (let loop ((str str) (ctr 0))\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper? ch)\n    (and (char-alphabetic? ch) (char-upper-case? ch)))\n  (define (loop str ctr)\n    (cond ((null? str) ctr)\n          ((upper? (car str)) (loop (cdr str) (+ ctr 1)))\n          (else (loop (cdr str) ctr))))\n  (loop str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (count (lambda (c) (char-upper-case? c)) str))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ((str str) (ctr 0))\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let ([ctr 0])\n    (for ([i (in-range (string-length str))])\n      (if (char-upper-case? (string-ref str i))\n          (set! ctr (+ ctr 1))))\n    ctr))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (loop (cdr str) (+ ctr 1))\n            (loop (cdr str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (upper? ch)\n    (and (char? ch)\n         (char-upper-case? ch)))\n  (define (upper-ctr-iter str acc)\n    (cond\n      [(empty? str) acc]\n      [(upper? (first str)) (upper-ctr-iter (rest str) (+ acc 1))]\n      [else (upper-ctr-iter (rest str) acc)]))\n  (upper-ctr-iter str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (define (upper-char? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (upper-count str)\n    (if (string-empty? str)\n        0\n        (+ (if (upper-char? (string-ref str 0)) 1 0)\n           (upper-count (substring str 1)))))\n  (upper-count str))\n",
    "  (define (upper? c)\n    (and (char? c)\n         (char-upper-case? c)))\n  (define (upper-count str)\n    (if (empty? str)\n        0\n        (+ (if (upper? (first str)) 1 0)\n           (upper-count (rest str)))))\n  (upper-count str))\n",
    "  (let loop ((str str) (ctr 0))\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ((str str)\n             (ctr 0))\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)])))\n",
    "  (define (upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (upper-ctr-helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper? (first str)) (upper-ctr-helper (rest str) (+ ctr 1))]\n      [else (upper-ctr-helper (rest str) ctr)]))\n  (upper-ctr-helper str 0))\n",
    "  (let ([ctr 0])\n    (for ([c (in-string str)])\n      (if (char-upper-case? c)\n          (set! ctr (+ ctr 1))))\n    ctr))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (define (upper? c)\n    (and (char? c) (char-upper-case? c)))\n  (define (upper-ctr-iter str ctr)\n    (cond ((null? str) ctr)\n          ((upper? (car str)) (upper-ctr-iter (cdr str) (+ ctr 1)))\n          (else (upper-ctr-iter (cdr str) ctr))))\n  (upper-ctr-iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (upper_ctr_iter (rest str) (+ ctr 1))]\n      [else (upper_ctr_iter (rest str) ctr)]))\n  (upper_ctr_iter str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper_ctr_iter str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (upper_ctr_iter (rest str) (+ 1 ctr))\n            (upper_ctr_iter (rest str) ctr))))\n  (upper_ctr_iter str 0))\n",
    "  (define (upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (upper-ctr-iter str ctr)\n    (cond ((null? str) ctr)\n          ((upper? (car str)) (upper-ctr-iter (cdr str) (+ ctr 1)))\n          (else (upper-ctr-iter (cdr str) ctr))))\n  (upper-ctr-iter str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (upper? c) (char-upper-case? c))\n  (define (count-upper str)\n    (if (empty? str)\n        0\n        (+ (if (upper? (first str)) 1 0)\n           (count-upper (rest str)))))\n  (count-upper str))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (upper? c)\n    (char-upper-case? c))\n  (define (count-upper str)\n    (if (empty? str)\n        0\n        (+ (if (upper? (first str))\n               1\n               0)\n           (count-upper (rest str)))))\n  (count-upper str))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (let ([c (first str)])\n          (if (char-upper-case? c)\n              (loop (rest str) (+ ctr 1))\n              (loop (rest str) ctr))))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (define (upper? c)\n    (char-upper-case? c))\n  (length (filter upper? (string->list str))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (loop (+ i 1)\n              (if (char-upper-case? (string-ref str i))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (upper? ch)\n    (and (char? ch)\n         (char-upper-case? ch)))\n  (define (upper-ctr-iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper? (first str)) (upper-ctr-iter (rest str) (+ ctr 1))]\n      [else (upper-ctr-iter (rest str) ctr)]))\n  (upper-ctr-iter str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1)\n              (if (char-upper-case? (string-ref str 0))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ((str str) (ctr 0))\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (define (upper-char? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (upper-ctr-iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper-char? (first str)) (upper-ctr-iter (rest str) (+ ctr 1))]\n      [else (upper-ctr-iter (rest str) ctr)]))\n  (upper-ctr-iter str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper-char? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (upper-ctr-iter str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (upper-char? (string-ref str 0))\n            (upper-ctr-iter (substring str 1) (+ ctr 1))\n            (upper-ctr-iter (substring str 1) ctr))))\n  (upper-ctr-iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (let ([ch (string-ref str 0)])\n          (if (char-upper-case? ch)\n              (loop (substring str 1) (+ ctr 1))\n              (loop (substring str 1) ctr))))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (length (filter upper? (string->list str))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1)\n              (if (char-upper-case? (string-ref str 0))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let ([ctr 0])\n    (for ([i (in-range (string-length str))])\n      (if (char-upper-case? (string-ref str i))\n          (set! ctr (+ ctr 1))))\n    ctr))\n",
    "  (define (inner str ctr)\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (inner (cdr str) (+ ctr 1))\n            (inner (cdr str) ctr))))\n  (inner str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1)\n              (if (char-upper-case? (string-ref str 0))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (loop (cdr str) (+ ctr 1))\n            (loop (cdr str) ctr)))))\n",
    "  (define (upper? c)\n    (and (char? c)\n         (char-upper-case? c)))\n  (define (upper-count str)\n    (if (empty? str)\n        0\n        (+ (if (upper? (first str)) 1 0)\n           (upper-count (rest str)))))\n  (upper-count str))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (for/fold ([ctr 0])\n            ([ch (in-string str)])\n            (if (char-upper-case? ch)\n                (+ ctr 1)\n                ctr)))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (upper-char? ch)\n    (and (char? ch)\n         (char-upper-case? ch)))\n  (define (upper-char-count str)\n    (cond\n      [(empty? str) 0]\n      [(upper-char? (first str)) (+ 1 (upper-char-count (rest str)))]\n      [else (upper-char-count (rest str))]))\n  (upper-char-count str))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (length (filter char-upper-case? (string->list str))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (length (filter char-upper-case? (string->list str))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (loop (substring str 1)\n              (if (char-upper-case? (string-ref str 0))\n                  (+ ctr 1)\n                  ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n      [else (loop (rest str) ctr)])))\n",
    "  (define (upper? c)\n    (and (char? c)\n         (char-upper-case? c)))\n  (define (loop str ctr)\n    (cond ((null? str) ctr)\n          ((upper? (car str)) (loop (cdr str) (+ ctr 1)))\n          (else (loop (cdr str) ctr))))\n  (loop str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (upper-ctr-iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(upper? (first str)) (upper-ctr-iter (rest str) (+ ctr 1))]\n      [else (upper-ctr-iter (rest str) ctr)]))\n  (upper-ctr-iter str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (&lt; i (string-length str))\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr))\n        ctr)))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (define (is_upper? ch)\n    (and (char? ch)\n         (char-upper-case? ch)))\n  (define (upper_ctr_iter str ctr)\n    (cond ((null? str) ctr)\n          ((is_upper? (car str))\n           (upper_ctr_iter (cdr str) (+ ctr 1)))\n          (else (upper_ctr_iter (cdr str) ctr))))\n  (upper_ctr_iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (upper? c)\n    (char-upper-case? c))\n  (define (upper-ctr-iter str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (upper? (string-ref str 0))\n            (upper-ctr-iter (substring str 1) (+ ctr 1))\n            (upper-ctr-iter (substring str 1) ctr))))\n  (upper-ctr-iter str 0))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (upper-char? c)\n    (char-upper-case? c))\n  (define (count-upper-chars str)\n    (if (string-empty? str)\n        0\n        (if (upper-char? (string-ref str 0))\n            (+ 1 (count-upper-chars (string-drop str 1)))\n            (count-upper-chars (string-drop str 1)))))\n  (count-upper-chars str))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (upper? c)\n    (and (char? c) (char-upper-case? c)))\n  (define (upper-ctr-iter str ctr)\n    (if (null? str)\n        ctr\n        (if (upper? (car str))\n            (upper-ctr-iter (cdr str) (+ ctr 1))\n            (upper-ctr-iter (cdr str) ctr))))\n  (upper-ctr-iter str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-upper-case? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (upper? c)\n    (and (char? c) (char-upper-case? c)))\n  (define (loop str ctr)\n    (cond ((null? str) ctr)\n          ((upper? (car str)) (loop (cdr str) (+ ctr 1)))\n          (else (loop (cdr str) ctr))))\n  (loop str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (cond [(empty? str) ctr]\n          [(char-upper-case? (first str)) (loop (rest str) (+ ctr 1))]\n          [else (loop (rest str) ctr)])))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([i 0] [ctr 0])\n    (if (= i (string-length str))\n        ctr\n        (if (char-upper-case? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (count (lambda (c) (char-upper-case? c)) (string->list str)))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (if (char-upper-case? (first str))\n            (loop (rest str) (+ ctr 1))\n            (loop (rest str) ctr)))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (let ([char (string-ref str 0)])\n          (if (char-upper-case? char)\n              (loop (substring str 1) (+ ctr 1))\n              (loop (substring str 1) ctr))))))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (null? str)\n        ctr\n        (if (char-upper-case? (car str))\n            (loop (cdr str) (+ ctr 1))\n            (loop (cdr str) ctr)))))\n",
    "  (let ([ctr 0])\n    (for ([i (in-range (string-length str))])\n      (if (char-upper-case? (string-ref str i))\n          (set! ctr (+ ctr 1))))\n    ctr))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (string-empty? str)\n        ctr\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1) (+ ctr 1))\n            (loop (substring str 1) ctr)))))\n",
    "  (define (upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (upper-ctr-iter str ctr)\n    (cond ((null? str) ctr)\n          ((upper? (car str)) (upper-ctr-iter (cdr str) (+ ctr 1)))\n          (else (upper-ctr-iter (cdr str) ctr))))\n  (upper-ctr-iter str 0))\n"
  ]
}