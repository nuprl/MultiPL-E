{
  "name": "mbpp_417_group_tuples",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find common first element in given list of tuple.\n(define (group_tuples Input)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate group_tuples))\n    (check-equal? (candidate (list (list \"x\" \"y\") (list \"x\" \"z\") (list \"w\" \"t\"))) (list (list \"x\" \"y\" \"z\") (list \"w\" \"t\")))\n    (check-equal? (candidate (list (list \"a\" \"b\") (list \"a\" \"c\") (list \"d\" \"e\"))) (list (list \"a\" \"b\" \"c\") (list \"d\" \"e\")))\n    (check-equal? (candidate (list (list \"f\" \"g\") (list \"f\" \"g\") (list \"h\" \"i\"))) (list (list \"f\" \"g\" \"g\") (list \"h\" \"i\")))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (cons (first (first Input))\n           (group_tuples (filter (lambda (x) (equal? (first x) (first (first Input))))\n                                 (rest Input))))]))\n",
    "  (cond\n    [(empty? Input) empty]\n    [(equal? (first (first Input)) (first (second Input)))\n     (cons (first (first Input)) (group_tuples (rest Input)))]\n    [else empty]))\n",
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (cons (first (first Input))\n           (group_tuples (remove (first (first Input)) Input)))]))\n",
    "  (cond [(empty? Input) empty]\n        [(empty? (rest Input)) empty]\n        [(equal? (first (first Input)) (first (first (rest Input))))\n         (cons (first (first Input)) (group_tuples (rest Input)))]\n        [else empty]))\n",
    "  (cond [(empty? Input) '()]\n        [(empty? (cdr Input)) (car Input)]\n        [else (cons (car (car Input)) (group_tuples (cdr Input)))]))\n",
    "  (cond\n    [(empty? Input) '()]\n    [else\n     (cons (first (first Input))\n           (group_tuples (filter (lambda (x) (equal? (first x) (first (first Input)))) (rest Input))))]))\n",
    "  (let ([first-element (lambda (tuple) (car tuple))])\n    (map first-element Input)))\n",
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (cons\n      (first (first Input))\n      (group_tuples (rest Input)))]))\n",
    "  (cond\n    [(empty? Input) empty]\n    [else (cons (first (first Input)) (group_tuples (rest Input)))]))\n",
    "  (cond\n    [(empty? Input) empty]\n    [(= (length Input) 1) (car Input)]\n    [else\n     (let* ([first (car Input)]\n            [rest (cdr Input)]\n            [first-car (car first)]\n            [rest-car (map car rest)])\n       (if (member first-car rest-car)\n           (cons first-car (group_tuples rest))\n           (group_tuples rest)))]))\n",
    "  (cond [(empty? Input) empty]\n        [else (cons (first (first Input))\n                    (group_tuples (filter (lambda (x) (equal? (first x) (first (first Input)))) (rest Input))))]))\n",
    "  (cond\n    [(null? Input) '()]\n    [else\n     (cons\n      (list (caar Input) (caadr Input))\n      (group_tuples (cdr Input)))]))\n",
    "  (cond [(empty? Input) empty]\n        [else (cons (first (first Input))\n                    (group_tuples (filter (lambda (x) (equal? (first x) (first (first Input)))) (rest Input))))]))\n</code>\nI have tried to use <code>filter</code> to filter out the tuples that have the same first element as the first element of the first tuple.\nBut I don't know how to get the first element of the first tuple.\nI have tried <code>(first (first Input))</code> but it doesn't work.\nCan anyone help me?\nThanks!\n\n\nA:\n\nYou can use <code>map</code> to extract the first element of each tuple:\n<code>(define (group-tuples lst)\n  (map first lst))\n</code>\nFor example:\n<code>(group-tuples '((1 2) (3 4) (5 6) (1 8)))\n=&gt; '(1 3 5 1)\n</code>\n",
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (let ([first (first Input)])\n       (cons (first first)\n             (group_tuples (filter (lambda (x) (equal? (first x) (first first))) (rest Input)))))]))\n",
    "  (if (null? Input)\n      '()\n      (cons (car (car Input))\n            (group_tuples (cdr Input)))))\n",
    "  (if (null? Input)\n      '()\n      (cons (list (caar Input) (cdar Input))\n            (group_tuples (cdr Input)))))\n",
    "  (cond\n    [(empty? Input) empty]\n    [else\n     (cons (first (first Input))\n           (group_tuples (filter (lambda (x) (equal? (first x) (first (first Input)))) (rest Input))))]))\n",
    "  (cond\n    [(empty? Input) '()]\n    [(empty? (rest Input)) (first Input)]\n    [else (group_tuples (rest Input))]))\n",
    "  (if (null? Input)\n      '()\n      (cons (car (car Input)) (group_tuples (cdr Input)))))\n",
    "  (define (group_tuples_iter Input Output)\n    (if (null? Input)\n        Output\n        (if (null? (member (caar Input) Output))\n            (group_tuples_iter (cdr Input) (cons (caar Input) Output))\n            (group_tuples_iter (cdr Input) Output))))\n  (group_tuples_iter Input '()))\n"
  ]
}