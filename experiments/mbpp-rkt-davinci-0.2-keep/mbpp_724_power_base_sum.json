{
  "name": "mbpp_724_power_base_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power result)\n    (cond\n      [(zero? power) result]\n      [else (power_base_sum-iter base (- power 1) (+ result (sum-digits (expt base power))))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n\n\nA:\n\nYou can use the <code>for/sum</code> loop to iterate over the powers of <code>base</code>, and then use the <code>modulo</code> function to get the last digit of each power.\n<code>(define (power-base-sum base power)\n  (for/sum ([i (in-range power)])\n    (modulo (expt base i) 10)))\n</code>\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (* base (expt base (- power 1))))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_helper base (- power 1) (+ acc (expt base power))))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power-helper base power result)\n    (cond ((= power 0) result)\n          (else (power-helper base (- power 1) (+ result (expt base power))))))\n  (define (sum-digits number)\n    (cond ((= number 0) 0)\n          (else (+ (modulo number 10) (sum-digits (quotient number 10))))))\n  (sum-digits (power-helper base power 0)))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(zero? power) 1]\n    [else\n     (let ([base-power (expt base power)])\n       (cond\n         [(zero? base-power) 0]\n         [else\n          (+ (modulo base-power 10)\n             (power_base_sum base (- power 1)))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (let ([result (expt base power)])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10)\n             (power_base_sum base (- power 1)))]))]))\n",
    "  (define (power-base-sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power-base-sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (remainder base 10) (power_base_sum base (- power 1)))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum_iter base power 0)\n)\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [(= power 1) (+ sum base)]\n      [else (power_base_sum_helper base (- power 1) (+ sum base))]))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (apply + (map string-&gt;number (string-split (number-&gt;string (expt base power)) #\\space)))]))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= base 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([p (expt base power)])\n       (cond\n         [(= p 0) 0]\n         [else\n          (+ (modulo p 10) (power_base_sum base (- power 1)))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ (remainder (expt base power) 10) sum))]))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(zero? power) 1]\n    [else\n     (let ([result (expt base power)])\n       (cond\n         [(zero? result) 0]\n         [else\n          (+ (remainder result 10)\n             (power_base_sum base (- power 1)))]))]))\n",
    "  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10)\n             (power_base_sum (quotient result 10) power))]))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power-base-sum-iter base power acc)\n    (if (= power 0)\n        acc\n        (power-base-sum-iter base (- power 1) (+ acc (expt base power)))))\n  (power-base-sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum base power))]))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_helper base power)\n    (cond\n      [(= power 0) 1]\n      [else (* base (power_base_sum_helper base (- power 1)))]))\n  (define (sum_digits number)\n    (cond\n      [(= number 0) 0]\n      [else (+ (modulo number 10) (sum_digits (quotient number 10)))]))\n  (sum_digits (power_base_sum_helper base power)))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum base power))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (modulo base 10)))))\n  (power-base-sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (define (helper base power)\n       (cond\n         [(= power 0) 0]\n         [else\n          (+ (remainder base 10) (helper (/ base 10) (- power 1)))]))\n     (helper (expt base power) power)]))\n",
    "  (define (power_base_sum_iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_iter base (sub1 power) (+ acc (sum-digits (expt base power))))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([base-power (expt base power)])\n       (cond\n         [(= base-power 0) 0]\n         [else\n          (+ (remainder base-power 10)\n             (power_base_sum base (- power 1)))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([base-power (* base (power_base_sum base (- power 1)))])\n       (sum-digits base-power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (if (= power 0)\n      1\n      (for/sum ([i (in-range power)])\n               (sum-digits (expt base i)))))\n",
    "  (define (power_base_sum_iter base power result)\n    (cond ((= power 0) result)\n          (else (power_base_sum_iter base (- power 1) (+ result (expt base power))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (base-sum base)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (remainder base 10)))))\n  (power-base-sum-iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond\n      [(= power 0) acc]\n      [(= power 1) (add-digits base acc)]\n      [else (power_base_sum_helper (mult-digits base base) (- power 1) (add-digits base acc))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power result)\n    (cond\n      [(= power 0) result]\n      [else (power_base_sum_iter base (- power 1) (+ result (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else (+ (remainder result 10) (power_base_sum base power))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (remainder base 10) (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_helper base (sub1 power) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10)\n             (power_base_sum base power))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (sub1 power) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (sub1 power) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (modulo base 10) (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (- power 1) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond ((= power 0) sum)\n          ((= base 0) sum)\n          (else (power_base_sum_helper base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(zero? result) 0]\n         [else (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )))\n  (power_base_sum_iter base power 0)\n  )\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power result)\n    (cond\n      [(= power 0) result]\n      [else (power_base_sum_iter base (- power 1) (+ result (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power result)\n    (if (= power 0)\n        result\n        (power_base_sum_iter base (- power 1) (+ result (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power)\n    (if (= power 0)\n        0\n        (+ (remainder base 10)\n           (power_base_sum_helper (quotient base 10) (- power 1)))))\n  (power_base_sum_helper base power))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (remainder base 10) (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power-base-sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power-base-sum-iter base (sub1 power) (+ sum (expt base power)))]))\n  (power-base-sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum-iter base (- power 1) (+ acc (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (cond\n      [(= power 0) acc]\n      [else (power_base_sum_iter base (- power 1) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          (quotient base 10))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power result)\n    (cond\n      [(= power 0) result]\n      [else (power_base_sum_iter base (- power 1) (+ result (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power)\n    (if (= power 1)\n        base\n        (power_base_sum_helper (sum-digits (expt base power)) (- power 1))))\n  (power_base_sum_helper base power))\n",
    "  (define (power_base_sum_iter base power result)\n    (if (= power 1)\n        (result)\n        (power_base_sum_iter base (- power 1) (+ result (sum-digits (expt base power))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_iter base (- power 1) (+ acc (sum_digits (expt base power)))))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond\n      [(= power 0) acc]\n      [else (power_base_sum_helper base (- power 1) (+ acc (power_base_sum_helper base (- power 1) 0)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_helper base (- power 1) (+ acc (modulo base 10)))\n          )))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (sum-digits\n      (expt base power))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(zero? power) 1]\n    [else\n     (let ([base-sum (sum-digits base)])\n       (+ base-sum (power_base_sum base-sum (- power 1))))]))\n",
    "  (cond\n    [(= base 0) 0]\n    [(= power 0) 1]\n    [else (+ (modulo base 10) (power_base_sum (quotient base 10) (- power 1)))]))\n",
    "  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum-iter base (- power 1) (+ sum (expt base power)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (power_base_sum base (- power 1)) (modulo base 10))]))\n",
    "  (define (power_base_sum_helper base power)\n    (if (= power 0)\n        0\n        (+ (remainder base 10)\n           (power_base_sum_helper (quotient base 10) (- power 1)))))\n  (power_base_sum_helper base power))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (sub1 power) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 1) (+ sum base)]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(zero? power) 1]\n    [else\n     (apply + (map (lambda (x) (string-&gt;number (string-ref x 0)))\n                   (string-split (number-&gt;string (expt base power)) #\\space)))]))\n</code>\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (sub1 power) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_helper base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (if (= power 0)\n      0\n      (remainder (+ (* base (power_base_sum base (- power 1)))\n                    (power_base_sum base (- power 1)))\n                 10)))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_iter base (- power 1) (+ acc (sum-digits (expt base power))))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder (expt base power) 10)\n        (power_base_sum base (- power 1)))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum-iter base (- power 1) (+ acc (power_base_sum-iter base (- power 1) 0))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else (+ (modulo base 10) (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (cond\n    [(zero? power) 1]\n    [else\n     (define (power_base_sum_iter base power sum)\n       (cond\n         [(zero? power) sum]\n         [else (power_base_sum_iter base (- power 1) (+ sum (expt base power)))]))\n     (power_base_sum_iter base power 0)]))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_helper base power result)\n    (cond ((= power 0) result)\n          (else (power_base_sum_helper base (- power 1) (+ result (expt base power))))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power-base-sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power-base-sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power-base-sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (let ([pow (expt base power)])\n       (cond\n         [(= pow 0) 0]\n         [else\n          (+ (modulo pow 10) (power_base_sum base (- power 1)))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum-iter base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_iter base (sub1 power) (+ acc (sum-digits (expt base power))))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_iter base (- power 1) (+ acc base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n                (quotient base 10))))\n  (power_base_sum_iter base power 0))\n"
  ]
}