{
  "name": "mbpp_724_power_base_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum-iter base power result)\n    (cond\n      [(zero? power) result]\n      [else (power_base_sum-iter base (- power 1) (+ result (sum-digits (expt base power))))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n\n\nA:\n\nYou can use the <code>for/sum</code> loop to iterate over the powers of <code>base</code>, and then use the <code>modulo</code> function to get the last digit of each power.\n<code>(define (power-base-sum base power)\n  (for/sum ([i (in-range power)])\n    (modulo (expt base i) 10)))\n</code>\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (* base (expt base (- power 1))))))))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_helper base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_helper base (- power 1) (+ acc (expt base power))))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power-helper base power result)\n    (cond ((= power 0) result)\n          (else (power-helper base (- power 1) (+ result (expt base power))))))\n  (define (sum-digits number)\n    (cond ((= number 0) 0)\n          (else (+ (modulo number 10) (sum-digits (quotient number 10))))))\n  (sum-digits (power-helper base power 0)))\n",
    "  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n",
    "  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n",
    "  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(zero? power) 1]\n    [else\n     (let ([base-power (expt base power)])\n       (cond\n         [(zero? base-power) 0]\n         [else\n          (+ (modulo base-power 10)\n             (power_base_sum base (- power 1)))]))]))\n",
    "  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n",
    "  (cond\n    [(= power 0) 0]\n    [else\n     (let ([result (expt base power)])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10)\n             (power_base_sum base (- power 1)))]))]))\n",
    "  (define (power-base-sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power-base-sum-iter base power 0))\n"
  ]
}