{
  "name": "mbpp_446_count_Occurrence",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a python function to count the occurence of all elements of list in a tuple.\n(define (count_Occurrence tup lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Occurrence))\n    (check-equal? (candidate (list \"a\" \"a\" \"c\" \"b\" \"d\") (list \"a\" \"b\")) 3)\n    (check-equal? (candidate (list 1 2 3 1 4 6 7 1 4) (list 1 4 7)) 6)\n    (check-equal? (candidate (list 1 2 3 4 5 6) (list 1 2)) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ((count 0))\n    (for ([i lst])\n      (if (equal? i tup)\n          (set! count (+ count 1))))\n    count))\n",
    "  (define (count_Occurrence_iter tup lst acc)\n    (if (null? lst)\n        acc\n        (count_Occurrence_iter tup (cdr lst) (+ acc (count (car lst) tup)))))\n  (count_Occurrence_iter tup lst 0))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else\n     (cons (cons (first lst) (count (first lst) tup))\n           (count_Occurrence tup (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [(member (first lst) tup) (cons (cons (first lst) (count (first lst) tup)) (count_Occurrence tup (rest lst)))]\n    [else (count_Occurrence tup (rest lst))]))\n",
    "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(equal? (first lst) tup) (+ 1 (count_Occurrence tup (rest lst)))]\n       [else (count_Occurrence tup (rest lst))])]))\n",
    "  (let loop ([tup tup] [lst lst] [count 0])\n    (cond [(empty? lst) count]\n          [(member (car lst) tup) (loop tup (cdr lst) (+ 1 count))]\n          [else (loop tup (cdr lst) count)])))\n",
    "  (define (count_Occurrence_iter tup lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(member (first lst) tup) (count_Occurrence_iter tup (rest lst) (+ acc 1))]\n      [else (count_Occurrence_iter tup (rest lst) acc)]))\n  (count_Occurrence_iter tup lst 0))\n",
    "  (let loop ([tup tup] [lst lst] [count 0])\n    (cond [(empty? lst) count]\n          [(member (first lst) tup) (loop tup (rest lst) (+ count 1))]\n          [else (loop tup (rest lst) count)])))\n",
    "  (cond [(empty? lst) 0]\n        [else\n         (cond [(member (first lst) tup) (+ 1 (count_Occurrence tup (rest lst)))]\n               [else (count_Occurrence tup (rest lst))])]))\n",
    "  (let loop ([tup tup] [lst lst] [count 0])\n    (cond [(empty? lst) count]\n          [(member (first lst) tup) (loop tup (rest lst) (+ count 1))]\n          [else (loop tup (rest lst) count)])))\n",
    "  (cond\n    [(empty? lst) 0]\n    [else\n     (+ (count (first lst) tup)\n        (count_Occurrence tup (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (cons (first lst) (count (first lst) tup)) (count_Occurrence tup (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) 0]\n    [(equal? (first lst) tup) (+ 1 (count_Occurrence tup (rest lst)))]\n    [else (count_Occurrence tup (rest lst))]))\n",
    "  (define (count_Occurrence_iter tup lst acc)\n    (cond [(empty? lst) acc]\n          [(equal? (first lst) tup) (count_Occurrence_iter tup (rest lst) (+ 1 acc))]\n          [else (count_Occurrence_iter tup (rest lst) acc)]))\n  (count_Occurrence_iter tup lst 0))\n",
    "  (define (count_Occurrence_iter tup lst)\n    (cond [(empty? lst) 0]\n          [(equal? (first lst) tup) (+ 1 (count_Occurrence_iter tup (rest lst)))]\n          [else (count_Occurrence_iter tup (rest lst))]))\n  (count_Occurrence_iter tup lst))\n",
    "  (cond\n    [(empty? lst) 0]\n    [else\n     (cond\n       [(member (first lst) tup) (+ 1 (count_Occurrence tup (rest lst)))]\n       [else (count_Occurrence tup (rest lst))])]))\n",
    "  (cond [(empty? lst) 0]\n        [else (add1 (count_Occurrence tup (rest lst)))\n              (if (member (first lst) tup) 1 0)]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (count (first lst) tup) (count_Occurrence tup (rest lst)))]))\n",
    "  (cond [(empty? lst) empty]\n        [else (cons (cons (first lst) (count (first lst) tup))\n                    (count_Occurrence tup (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (cons (first lst) (count (first lst) tup)) (count_Occurrence tup (rest lst)))]))\n"
  ]
}