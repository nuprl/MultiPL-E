{
  "name": "mbpp_237_check_occurences",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (let ([key (hash item)])\n        (if (hash-has-key? occurences key)\n            (hash-set! occurences key (+ 1 (hash-ref occurences key)))\n            (hash-set! occurences key 1))))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqhkdlzy.rkt:18:4\n\nhash: key does not have a value (i.e., an odd number of arguments were provided)\n  key: '(3 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqhkdlzy.rkt:19:4\n\nhash: key does not have a value (i.e., an odd number of arguments were provided)\n  key: '(4 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqhkdlzy.rkt:20:4\n\nhash: key does not have a value (i.e., an odd number of arguments were provided)\n  key: '(13 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result_dict current_tuple 0)])\n          (hash-set! result_dict current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result_dict))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5gpl9prd.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5gpl9prd.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5gpl9prd.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(assoc (first test_list) acc)\n       (check_occurences_iter (rest test_list)\n                              (cons (cons (first test_list)\n                                          (+ 1 (cdr (assoc (first test_list) acc))))\n                                    (remove (assoc (first test_list) acc) acc)))]\n      [else (check_occurences_iter (rest test_list)\n                                   (cons (cons (first test_list) 1) acc))]))\n  (check_occurences_iter test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5q32mxtj.rkt:22:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5q32mxtj.rkt:23:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5q32mxtj.rkt:24:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (check_occurences_helper (rest test_list) (add-to-dict result (first test_list)))]))\n  (check_occurences_helper test_list empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpt98pmmji.rkt:8:55: add-to-dict: unbound identifier\n  in: add-to-dict\n  location...:\n   /tmp/tmpt98pmmji.rkt:8:55\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ((dict (make-hash)))\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi84fmt2y.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi84fmt2y.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi84fmt2y.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [else (helper (rest lst) (add-to-dict acc (first lst)))]))\n  (helper test_list empty-dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmp00al51gx.rkt:8:32: add-to-dict: unbound identifier\n  in: add-to-dict\n  location...:\n   /tmp/tmp00al51gx.rkt:8:32\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list dict)\n    (cond ((null? test_list) dict)\n          (else (let ((current_tuple (car test_list))\n                       (current_dict (check_occurences_helper (cdr test_list) dict)))\n                  (cond ((assoc current_tuple current_dict)\n                         (let ((current_count (cdr (assoc current_tuple current_dict))))\n                           (set! current_dict (assoc current_tuple current_dict (add1 current_count)))\n                           current_dict))\n                        (else (cons (cons current_tuple 1) current_dict)))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpizl1khef.rkt:21:4\nactual:     '(((3 1) . 1) ((1 3) . 1) ((2 5) . 1) ((5 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpizl1khef.rkt:22:4\nactual:     '(((4 2) . 1) ((2 4) . 1) ((3 6) . 1) ((6 3) . 1) ((7 4) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpizl1khef.rkt:23:4\nactual:\n  '(((13 2) . 1) ((11 23) . 1) ((12 25) . 1) ((25 12) . 1) ((16 23) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (define current_tuple (car test_list))\n       (define current_tuple_count (count current_tuple result_list))\n       (check_occurences_helper (cdr test_list) (cons (cons current_tuple current_tuple_count) result_list))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c9elaz5.rkt:19:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c9elaz5.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c9elaz5.rkt:21:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (let* ([current_tuple (first test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n         (hash-set! result current_tuple (+ 1 current_tuple_count))\n         (check_occurences_helper (rest test_list) result))]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwpbjo9gr.rkt:20:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwpbjo9gr.rkt:21:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwpbjo9gr.rkt:22:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_dict (hash))\n       (define current_dict (hash-set! current_dict current_tuple 1))\n       (define current_dict (hash-union result_dict current_dict))\n       (check_occurences_helper (rest test_list) current_dict)]))\n  (check_occurences_helper test_list (hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "/tmp/tmpzmg4c7hq.rkt:11:15: define-values: duplicate binding name\n  at: current_dict\n  in: (define-values (current_dict) (hash-set! current_dict current_tuple 1))\n  location...:\n   /tmp/tmpzmg4c7hq.rkt:11:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([elem test_list])\n      (hash-update! occurences elem add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6w624qu.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6w624qu.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6w624qu.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! dict tuple add1 0))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa99igp1a.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa99igp1a.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa99igp1a.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzrc5yzf.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzrc5yzf.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzrc5yzf.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmohxnet5.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmohxnet5.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmohxnet5.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopoua89k.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopoua89k.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopoua89k.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcs9io6k5.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcs9io6k5.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcs9io6k5.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([item test_list])\n      (hash-update! dict item add1 0))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_m9m60au.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_m9m60au.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_m9m60au.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let ((tuple (car test_list)))\n          (if (assoc tuple acc)\n              (let ((new_acc (assoc-replace acc tuple (add1 (cdr (assoc tuple acc))))))\n                (check_occurences_helper (cdr test_list) new_acc))\n              (let ((new_acc (cons (cons tuple 1) acc)))\n                (check_occurences_helper (cdr test_list) new_acc))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "/tmp/tmpw1o1ln8i.rkt:10:30: assoc-replace: unbound identifier\n  in: assoc-replace\n  location...:\n   /tmp/tmpw1o1ln8i.rkt:10:30\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_iter (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_iter test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "/tmp/tmpn6s4_2xz.rkt:8:53: add_to_dict: unbound identifier\n  in: add_to_dict\n  location...:\n   /tmp/tmpn6s4_2xz.rkt:8:53\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (get (first test_list) acc 0))) acc))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "/tmp/tmpr12ttwmv.rkt:8:91: get: unbound identifier\n  in: get\n  location...:\n   /tmp/tmpr12ttwmv.rkt:8:91\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopoua89k.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopoua89k.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopoua89k.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([item test_list])\n      (hash-set! dict item (add1 (hash-ref dict item 0))))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzx6leew.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzx6leew.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzx6leew.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (define current_tuple (first test_list))\n            (define current_tuple_count (hash-ref result current_tuple 0))\n            (define new_result (hash-set result current_tuple (+ 1 current_tuple_count)))\n            (helper (rest test_list) new_result)]))\n  (helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbtjonx9k.rkt:19:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(3 1)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbtjonx9k.rkt:20:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(4 2)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbtjonx9k.rkt:21:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(13 2)\n   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list dict)\n    (cond\n      [(empty? test_list) dict]\n      [else (define current_tuple (car test_list))\n            (define new_dict (if (dict-has-key? dict current_tuple)\n                                 (dict-set dict current_tuple (+ 1 (dict-ref dict current_tuple)))\n                                 (dict-set dict current_tuple 1)))\n            (check_occurences_iter (cdr test_list) new_dict)]))\n  (check_occurences_iter test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "/tmp/tmp6_ajvl_m.rkt:13:36: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmp6_ajvl_m.rkt:13:36\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-update dict i add1 0))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_5arwxw.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_5arwxw.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_5arwxw.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ((occurences (make-hash)))\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj8ropmqs.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj8ropmqs.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj8ropmqs.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (define current (first test_list))\n            (define rest (rest test_list))\n            (define current_result (assoc current result))\n            (cond\n              [(empty? current_result) (helper rest (cons (list current 1) result))]\n              [else (define current_count (second current_result))\n                    (define new_count (+ current_count 1))\n                    (define new_result (cons (list current new_count) (remove current_result result)))\n                    (helper rest new_result)])]))\n  (helper test_list '()))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "/tmp/tmpu12calun.rkt:18:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpu12calun.rkt:18:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n        (let* ([tuple (car lst)]\n               [occurences (assoc tuple acc)])\n          (if occurences\n              (helper (cdr lst) (cons (cons tuple (+ 1 (cdr occurences))) (remove occurences acc)))\n              (helper (cdr lst) (cons (cons tuple 1) acc))))))\n  (helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphppthix3.rkt:20:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphppthix3.rkt:21:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphppthix3.rkt:22:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (hash-ref result_dict current_tuple 0))\n       (define new_tuple_count (+ current_tuple_count 1))\n       (hash-set! result_dict current_tuple new_tuple_count)\n       (check_occurences_helper (rest test_list) result_dict)]))\n  (check_occurences_helper test_list (make-hash)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "/tmp/tmpx5izecol.rkt:15:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmpx5izecol.rkt:15:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzrc5yzf.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzrc5yzf.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzrc5yzf.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([tuple (car test_list)]\n               [tuple_count (hash-ref result tuple 0)])\n          (hash-set! result tuple (+ 1 tuple_count))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgcabeywl.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgcabeywl.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgcabeywl.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (helper (rest test_list)\n                    (cond\n                      [(assoc (first test_list) acc) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) acc)))) (remove (assoc (first test_list) acc) acc))]\n                      [else (cons (cons (first test_list) 1) acc)]))]))\n  (helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6pyremyl.rkt:19:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6pyremyl.rkt:20:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6pyremyl.rkt:21:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref acc current_tuple 0)])\n          (hash-set! acc current_tuple (+ current_tuple_count 1))\n          (check_occurences_iter (cdr test_list) acc))))\n  (check_occurences_iter test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9fxxgx.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9fxxgx.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9fxxgx.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_list)\n    (if (null? test_list)\n        result_list\n        (let ([current_tuple (car test_list)]\n              [current_tuple_occurences (assoc current_tuple result_list)])\n          (if (null? current_tuple_occurences)\n              (check_occurences_helper (cdr test_list)\n                                       (cons (cons current_tuple 1) result_list))\n              (check_occurences_helper (cdr test_list)\n                                       (cons (cons current_tuple (+ 1 (cdr current_tuple_occurences)))\n                                             (remove current_tuple_occurences result_list)))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123523,
      "stdout": "",
      "stderr": "/tmp/tmp3ijcg79k.rkt:9:47: current_tuple: unbound identifier\n  in: current_tuple\n  location...:\n   /tmp/tmp3ijcg79k.rkt:9:47\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(assoc (first test_list) result) (helper (rest test_list) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) result)))) (remove (assoc (first test_list) result) result)))]\n      [else (helper (rest test_list) (cons (cons (first test_list) 1) result))]))\n  (helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgowd_x81.rkt:17:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgowd_x81.rkt:18:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgowd_x81.rkt:19:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (hash-ref acc current_tuple 0))\n       (check_occurences_iter (rest test_list) (hash-set acc current_tuple (+ 1 current_tuple_count)))]))\n  (check_occurences_iter test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppz2g9fvp.rkt:19:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(3 1)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppz2g9fvp.rkt:20:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(4 2)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppz2g9fvp.rkt:21:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(13 2)\n   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (cond [(empty? test_list) acc]\n          [else (helper (rest test_list) (add-to-dict acc (first test_list)))]))\n  (helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp1jv66mxt.rkt:7:42: add-to-dict: unbound identifier\n  in: add-to-dict\n  location...:\n   /tmp/tmp1jv66mxt.rkt:7:42\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp3orfy0k4.rkt:8:55: add_to_dict: unbound identifier\n  in: add_to_dict\n  location...:\n   /tmp/tmp3orfy0k4.rkt:8:55\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dictionary (make-hash)])\n    (for ([tuple test_list])\n      (hash-update dictionary tuple add1 0))\n    dictionary))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_xr1lwku.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_xr1lwku.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_xr1lwku.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else\n       (helper (rest test_list)\n               (cond\n                 [(assoc (first test_list) acc)\n                  (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) acc))))\n                        (remove (assoc (first test_list) acc) acc))]\n                 [else (cons (cons (first test_list) 1) acc)]))]))\n  (helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp81op4jk8.rkt:22:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp81op4jk8.rkt:23:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp81op4jk8.rkt:24:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond ((null? test_list) acc)\n          (else (check_occurences_helper (cdr test_list) (cons (cons (car test_list) (add1 (or (assoc (car test_list) acc) 0))) acc)))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6uliknzn.rkt:15:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6uliknzn.rkt:16:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6uliknzn.rkt:17:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let ((tuple (car test_list)))\n          (if (assoc tuple acc)\n              (check_occurences_helper (cdr test_list) (cons (cons tuple (+ (cdr (assoc tuple acc)) 1)) (remove (assoc tuple acc) acc)))\n              (check_occurences_helper (cdr test_list) (cons (cons tuple 1) acc))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb83stcaj.rkt:19:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb83stcaj.rkt:20:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb83stcaj.rkt:21:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopoua89k.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopoua89k.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopoua89k.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list counter)\n    (if (null? test_list)\n        counter\n        (let ([current_tuple (car test_list)]\n              [current_counter (assoc current_tuple counter)])\n          (if (null? current_counter)\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple 1) counter))\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple (+ 1 (cadr current_counter))) (remove current_counter counter)))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpxiivli5_.rkt:9:38: current_tuple: unbound identifier\n  in: current_tuple\n  location...:\n   /tmp/tmpxiivli5_.rkt:9:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (let* ([current_tuple (car test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n         (hash-set! result current_tuple (+ 1 current_tuple_count))\n         (check_occurences_iter (cdr test_list) result))]))\n  (check_occurences_iter test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7r2bi_h7.rkt:20:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7r2bi_h7.rkt:21:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7r2bi_h7.rkt:22:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([elem test_list])\n      (hash-update! occurences elem add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6w624qu.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6w624qu.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6w624qu.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_list)\n    (if (null? test_list)\n        result_list\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (if (assoc current_tuple result_list)\n                                        (cdr (assoc current_tuple result_list))\n                                        0)])\n          (check_occurences_helper (cdr test_list) (cons (cons current_tuple (+ current_tuple_count 1)) result_list)))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0qp018lb.rkt:20:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0qp018lb.rkt:21:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0qp018lb.rkt:22:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list dict)\n    (if (null? test_list)\n        dict\n        (let ([current_tuple (car test_list)])\n          (if (dict-has-key? dict current_tuple)\n              (check_occurences_helper (cdr test_list) (dict-set dict current_tuple (+ 1 (dict-ref dict current_tuple))))\n              (check_occurences_helper (cdr test_list) (dict-set dict current_tuple 1))))))\n  (check_occurences_helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp5u3s32tf.rkt:12:38: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmp5u3s32tf.rkt:12:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (count (first test_list) test_list)) result_list))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljlyp1d4.rkt:16:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '((3 1) (1 3) (2 5) (5 2) (6 3))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljlyp1d4.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '((4 2) (2 4) (3 6) (6 3) (7 4))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljlyp1d4.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '((13 2) (11 23) (12 25) (25 12) (16 23))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref acc current_tuple 0)])\n          (hash-set! acc current_tuple (+ 1 current_tuple_count))\n          (check_occurences_helper (cdr test_list) acc))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbsncnrci.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbsncnrci.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbsncnrci.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list acc)\n    (if (null? test_list)\n        acc\n        (let ((tuple (car test_list)))\n          (if (assoc tuple acc)\n              (check_occurences_iter (cdr test_list) (cons (cons tuple (+ (cdr (assoc tuple acc)) 1)) (remove (assoc tuple acc) acc)))\n              (check_occurences_iter (cdr test_list) (cons (cons tuple 1) acc))))))\n  (check_occurences_iter test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposp3q_3v.rkt:19:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposp3q_3v.rkt:20:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposp3q_3v.rkt:21:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ((current_item (car test_list))\n               (current_item_count (hash-ref acc current_item 0)))\n          (hash-set! acc current_item (+ current_item_count 1))\n          (check_occurences_helper (cdr test_list) acc))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfbhqhkgn.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfbhqhkgn.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfbhqhkgn.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (let* ([current_tuple (first test_list)]\n              [current_tuple_occurences (dict-ref result_dict current_tuple 0)])\n         (check_occurences_helper (rest test_list)\n                                  (dict-set result_dict current_tuple (+ 1 current_tuple_occurences))))]))\n  (check_occurences_helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpl52mvma0.rkt:13:38: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmpl52mvma0.rkt:13:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([first_tuple (car test_list)]\n               [first_tuple_key (car first_tuple)]\n               [first_tuple_value (cdr first_tuple)]\n               [acc_value (assoc first_tuple_key acc)])\n          (if (null? acc_value)\n              (helper (cdr test_list) (cons (cons first_tuple_key first_tuple_value) acc))\n              (helper (cdr test_list) (cons (cons first_tuple_key (+ first_tuple_value (cdr acc_value))) (remove acc_value acc)))))))\n  (helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr5_uoky.rkt:22:4\n\ncdr: contract violation\n  expected: pair?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr5_uoky.rkt:23:4\n\ncdr: contract violation\n  expected: pair?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr5_uoky.rkt:24:4\n\ncdr: contract violation\n  expected: pair?\n  given: #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([elem test_list])\n      (hash-update dict elem add1 0))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfxnvn5q9.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfxnvn5q9.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfxnvn5q9.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_list)\n    (cond ((null? test_list) result_list)\n          ((assoc (car test_list) result_list)\n           (check_occurences_helper (cdr test_list)\n                                    (cons (cons (car test_list)\n                                                (+ 1 (cdr (assoc (car test_list) result_list))))\n                                          (remove (assoc (car test_list) result_list) result_list))))\n          (else (check_occurences_helper (cdr test_list)\n                                         (cons (cons (car test_list) 1) result_list)))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmvl755z9.rkt:21:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmvl755z9.rkt:22:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmvl755z9.rkt:23:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_helper test_list empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp_8dby4ay.rkt:8:55: add_to_dict: unbound identifier\n  in: add_to_dict\n  location...:\n   /tmp/tmp_8dby4ay.rkt:8:55\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ 1 current_tuple_count))\n          (check_occurences_iter (cdr test_list) result))))\n  (check_occurences_iter test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmgxupm4v.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmgxupm4v.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmgxupm4v.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list result)\n    (if (null? test_list)\n        result\n        (let ([current_tuple (car test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (helper (cdr test_list) result))))\n  (helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpgizfity6.rkt:9:52: current_tuple: unbound identifier\n  in: current_tuple\n  location...:\n   /tmp/tmpgizfity6.rkt:9:52\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else (check_occurences_iter (rest test_list) (add_to_dict (first test_list) result_dict))]))\n  (check_occurences_iter test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmprveb496n.rkt:8:53: add_to_dict: unbound identifier\n  in: add_to_dict\n  location...:\n   /tmp/tmprveb496n.rkt:8:53\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (or (assoc (first test_list) acc) 0))) acc))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0yf9buo.rkt:16:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0yf9buo.rkt:17:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0yf9buo.rkt:18:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-set! occurences i (add1 (hash-ref occurences i 0))))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7s5xd5e.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7s5xd5e.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7s5xd5e.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let ([current_tuple (car test_list)])\n          (if (dict-has-key? result_dict current_tuple)\n              (check_occurences_helper (cdr test_list) (dict-set result_dict current_tuple (+ 1 (dict-ref result_dict current_tuple))))\n              (check_occurences_helper (cdr test_list) (dict-set result_dict current_tuple 1))))))\n  (check_occurences_helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp94iijb5w.rkt:12:38: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmp94iijb5w.rkt:12:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_occurences (hash-ref result current_tuple 0))\n       (define new_tuple_occurences (+ current_tuple_occurences 1))\n       (define new_result (hash-set result current_tuple new_tuple_occurences))\n       (check_occurences_helper (rest test_list) new_result)]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmoc5fxj.rkt:21:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(3 1)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmoc5fxj.rkt:22:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(4 2)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmoc5fxj.rkt:23:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(13 2)\n   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp3orfy0k4.rkt:8:55: add_to_dict: unbound identifier\n  in: add_to_dict\n  location...:\n   /tmp/tmp3orfy0k4.rkt:8:55\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item (\u03bb (x) (if x (+ x 1) 1))))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyxcooxvs.rkt:15:4\n\nhash-update!: no value found for key: '(3 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyxcooxvs.rkt:16:4\n\nhash-update!: no value found for key: '(4 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyxcooxvs.rkt:17:4\n\nhash-update!: no value found for key: '(13 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (letrec ([occurences (for/hash ([tuple test_list])\n                          (hash-ref occurences tuple (\u03bb () 0))\n                          (hash-set! occurences tuple (+ 1 (hash-ref occurences tuple))))])\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpln5e0ui4.rkt:15:4\n\noccurences: undefined;\n cannot use before initialization\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpln5e0ui4.rkt:16:4\n\noccurences: undefined;\n cannot use before initialization\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpln5e0ui4.rkt:17:4\n\noccurences: undefined;\n cannot use before initialization\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcs9io6k5.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcs9io6k5.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcs9io6k5.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else (define current_tuple (first test_list))\n            (define current_tuple_count (hash-ref result current_tuple 0))\n            (define new_result (hash-set result current_tuple (+ current_tuple_count 1)))\n            (helper (rest test_list) new_result)]))\n  (helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps7c_2px7.rkt:19:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(3 1)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps7c_2px7.rkt:20:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(4 2)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps7c_2px7.rkt:21:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(13 2)\n   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (helper (rest test_list) (cons (cons (first test_list) (add1 (or (hash-ref acc (first test_list) 0) 0))) acc))]))\n  (helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd5ax7kre.rkt:16:4\n\nhash-ref: contract violation\n  expected: hash?\n  given: '(((3 1) . 1) . #hash())\n  argument position: 1st\n  other arguments...:\n   '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd5ax7kre.rkt:17:4\n\nhash-ref: contract violation\n  expected: hash?\n  given: '(((4 2) . 1) . #hash())\n  argument position: 1st\n  other arguments...:\n   '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd5ax7kre.rkt:18:4\n\nhash-ref: contract violation\n  expected: hash?\n  given: '(((13 2) . 1) . #hash())\n  argument position: 1st\n  other arguments...:\n   '(11 23)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list dict)\n    (cond\n      [(empty? test_list) dict]\n      [else\n       (let* ([tuple (first test_list)]\n              [dict (if (dict-has-key? dict tuple)\n                        (dict-set dict tuple (+ 1 (dict-ref dict tuple)))\n                        (dict-set dict tuple 1))])\n         (check_occurences_helper (rest test_list) dict))]))\n  (check_occurences_helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpocj5bss_.rkt:14:38: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmpocj5bss_.rkt:14:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ((tuple (car test_list)))\n          (if (assoc tuple result)\n              (let ((new_result (cons (cons tuple (+ 1 (cdr (assoc tuple result)))) (remove (assoc tuple result) result))))\n                (check_occurences_helper (cdr test_list) new_result))\n              (check_occurences_helper (cdr test_list) (cons (cons tuple 1) result))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_dq8nch.rkt:20:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_dq8nch.rkt:21:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_dq8nch.rkt:22:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (letrec ([helper (lambda (test_list acc)\n                     (cond\n                       [(empty? test_list) acc]\n                       [(member (first test_list) acc) (helper (rest test_list) acc)]\n                       [else (helper (rest test_list) (cons (first test_list) acc))]))])\n    (helper test_list '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplgbbzbfw.rkt:17:4\nactual:     '((6 3) (5 2) (2 5) (1 3) (3 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplgbbzbfw.rkt:18:4\nactual:     '((7 4) (6 3) (3 6) (2 4) (4 2))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplgbbzbfw.rkt:19:4\nactual:     '((16 23) (25 12) (12 25) (11 23) (13 2))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list dict)\n    (cond\n      [(empty? test_list) dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (get current_tuple dict 0))\n       (define new_tuple_count (+ current_tuple_count 1))\n       (define new_dict (put current_tuple new_tuple_count dict))\n       (check_occurences_iter (rest test_list) new_dict)]))\n  (check_occurences_iter test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp_rth68wn.rkt:10:36: get: unbound identifier\n  in: get\n  location...:\n   /tmp/tmp_rth68wn.rkt:10:36\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (cond [(empty? test_list) result]\n          [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) result))]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmppg_7m9ya.rkt:7:59: add_to_dict: unbound identifier\n  in: add_to_dict\n  location...:\n   /tmp/tmppg_7m9ya.rkt:7:59\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (let* ([current_tuple (first test_list)]\n              [current_tuple_count (dict-ref result_dict current_tuple 0)])\n         (check_occurences_helper (rest test_list)\n                                  (dict-set result_dict current_tuple (+ current_tuple_count 1))))]))\n  (check_occurences_helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpmyrk1lee.rkt:13:38: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmpmyrk1lee.rkt:13:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (hash-ref acc current_tuple 0))\n       (define new_tuple_count (+ current_tuple_count 1))\n       (define new_acc (hash-set acc current_tuple new_tuple_count))\n       (check_occurences_helper (rest test_list) new_acc)]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrxqufme.rkt:21:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(3 1)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrxqufme.rkt:22:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(4 2)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrxqufme.rkt:23:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(13 2)\n   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (check_occurences_helper (rest test_list)\n                                (cond\n                                  [(assoc (first test_list) result)\n                                   (cons (cons (first test_list)\n                                               (+ 1 (cdr (assoc (first test_list) result))))\n                                         (remove (assoc (first test_list) result) result))]\n                                  [else (cons (cons (first test_list) 1) result)]))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplul84n8a.rkt:23:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplul84n8a.rkt:24:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplul84n8a.rkt:25:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(member (first test_list) acc) (check_occurences_helper (rest test_list) acc)]\n      [else (check_occurences_helper (rest test_list) (cons (first test_list) acc))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqddvgnw4.rkt:17:4\nactual:     '((6 3) (5 2) (2 5) (1 3) (3 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqddvgnw4.rkt:18:4\nactual:     '((7 4) (6 3) (3 6) (2 4) (4 2))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqddvgnw4.rkt:19:4\nactual:     '((16 23) (25 12) (12 25) (11 23) (13 2))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond [(empty? test_list) acc]\n          [(member (first test_list) acc) (check_occurences_helper (rest test_list) acc)]\n          [else (check_occurences_helper (rest test_list) (cons (first test_list) acc))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfwdq5mf7.rkt:16:4\nactual:     '((6 3) (5 2) (2 5) (1 3) (3 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfwdq5mf7.rkt:17:4\nactual:     '((7 4) (6 3) (3 6) (2 4) (4 2))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfwdq5mf7.rkt:18:4\nactual:     '((16 23) (25 12) (12 25) (11 23) (13 2))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list]\n          #:when (not (hash-has-key? occurences tuple)))\n      (hash-set! occurences tuple (count tuple test_list)))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi3mempvh.rkt:16:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '((3 1) (1 3) (2 5) (5 2) (6 3))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi3mempvh.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '((4 2) (2 4) (3 6) (6 3) (7 4))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi3mempvh.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '((13 2) (11 23) (12 25) (25 12) (16 23))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(assoc (first test_list) result)\n       (check_occurences_helper (rest test_list) (cons (cons (first test_list) (+ (cdr (assoc (first test_list) result)) 1)) (remove (assoc (first test_list) result) result)))\n      [else\n       (check_occurences_helper (rest test_list) (cons (cons (first test_list) 1) result))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmppc6sus0t.rkt:11:91: read-syntax: missing `]` to close `[` on line 8, found instead `)`\n  possible cause: indentation suggests a missing `]` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(assoc (first test_list) acc) (check_occurences_helper (rest test_list) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) acc)))) (remove (assoc (first test_list) acc) acc))) ]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) 1) acc))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6qb60sw.rkt:17:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6qb60sw.rkt:18:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6qb60sw.rkt:19:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-set! occurences i (add1 (hash-ref occurences i 0))))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7s5xd5e.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7s5xd5e.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7s5xd5e.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(member (first test_list) acc) (check_occurences_helper (rest test_list) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) acc)))) (remove (first test_list) acc))) ]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) 1) acc))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7wpah88t.rkt:17:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7wpah88t.rkt:18:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7wpah88t.rkt:19:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75vspxtv.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75vspxtv.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75vspxtv.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let ([current_tuple (car test_list)]\n              [current_dict result_dict])\n          (if (dict-has-key? current_dict current_tuple)\n              (check_occurences_iter (cdr test_list) (dict-set current_dict current_tuple (+ 1 (dict-ref current_dict current_tuple))))\n              (check_occurences_iter (cdr test_list) (dict-set current_dict current_tuple 1))))))\n  (check_occurences_iter test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp52vjzm85.rkt:13:36: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmp52vjzm85.rkt:13:36\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (or (hash-ref acc (first test_list) 0) 0))) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_89g2c5l.rkt:16:4\n\nhash-ref: contract violation\n  expected: hash?\n  given: '(((3 1) . 1) . #hash())\n  argument position: 1st\n  other arguments...:\n   '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_89g2c5l.rkt:17:4\n\nhash-ref: contract violation\n  expected: hash?\n  given: '(((4 2) . 1) . #hash())\n  argument position: 1st\n  other arguments...:\n   '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_89g2c5l.rkt:18:4\n\nhash-ref: contract violation\n  expected: hash?\n  given: '(((13 2) . 1) . #hash())\n  argument position: 1st\n  other arguments...:\n   '(11 23)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list)\n    (if (null? test_list)\n        '()\n        (cons (cons (car test_list) (count (car test_list) test_list)) (helper (cdr test_list)))))\n  (helper test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytldbozq.rkt:16:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '((3 1) (1 3) (2 5) (5 2) (6 3))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytldbozq.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '((4 2) (2 4) (3 6) (6 3) (7 4))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytldbozq.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '((13 2) (11 23) (12 25) (25 12) (16 23))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(assoc (first test_list) result) (helper (rest test_list) (cons (cons (first test_list) (+ 1 (cdr (assoc (first test_list) result)))) (remove (assoc (first test_list) result) result))) ]\n      [else (helper (rest test_list) (cons (cons (first test_list) 1) result))]))\n  (helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp25z7mh6_.rkt:17:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp25z7mh6_.rkt:18:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp25z7mh6_.rkt:19:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ([current_tuple (car test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ 1 current_tuple_count))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpc3044lzl.rkt:9:52: current_tuple: unbound identifier\n  in: current_tuple\n  location...:\n   /tmp/tmpc3044lzl.rkt:9:52\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_dict (first result_dict))\n       (define current_count (dict-ref current_dict current_tuple 0))\n       (define new_count (+ current_count 1))\n       (define new_dict (dict-set current_dict current_tuple new_count))\n       (check_occurences_helper (rest test_list) (cons new_dict result_dict))]))\n  (check_occurences_helper test_list (list (dict))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpv6vrdrie.rkt:15:44: dict: unbound identifier\n  in: dict\n  location...:\n   /tmp/tmpv6vrdrie.rkt:15:44\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list result)\n    (if (null? test_list)\n        result\n        (let ((current_tuple (car test_list))\n              (current_dict (car result)))\n          (if (dict-has-key? current_dict current_tuple)\n              (helper (cdr test_list) (cons (dict-set current_dict current_tuple (+ 1 (dict-ref current_dict current_tuple))) (cdr result)))\n              (helper (cdr test_list) (cons (dict-set current_dict current_tuple 1) (cdr result)))))))\n  (helper test_list (list (make-dict))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpt931qpcx.rkt:13:27: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmpt931qpcx.rkt:13:27\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([elem test_list])\n      (hash-update occurences elem add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhweze4w.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhweze4w.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuhweze4w.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (if (assoc current_tuple acc)\n                                        (cdr (assoc current_tuple acc))\n                                        0)])\n          (check_occurences_helper (cdr test_list) (cons (cons current_tuple (+ current_tuple_count 1)) acc)))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpepet427g.rkt:20:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpepet427g.rkt:21:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpepet427g.rkt:22:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_dict (first result_dict))\n       (define current_count (dict-ref current_dict current_tuple 0))\n       (define new_count (+ current_count 1))\n       (define new_dict (dict-set current_dict current_tuple new_count))\n       (check_occurences_helper (rest test_list) (cons new_dict result_dict))]))\n  (check_occurences_helper test_list (list (dict))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpv6vrdrie.rkt:15:44: dict: unbound identifier\n  in: dict\n  location...:\n   /tmp/tmpv6vrdrie.rkt:15:44\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (let* ([current_tuple (first test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n         (hash-set! result current_tuple (+ 1 current_tuple_count))\n         (check_occurences_helper (rest test_list) result))]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwpbjo9gr.rkt:20:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwpbjo9gr.rkt:21:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwpbjo9gr.rkt:22:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (or (dict-ref acc (first test_list)) 0))) acc))]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpugluj0tp.rkt:16:4\n\ndict-ref: no value for key: '(3 1) in: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpugluj0tp.rkt:17:4\n\ndict-ref: no value for key: '(4 2) in: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpugluj0tp.rkt:18:4\n\ndict-ref: no value for key: '(13 2) in: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (cond\n    [(empty? test_list) '()]\n    [else (cons (cons (first test_list) (count (first test_list) test_list)) (check_occurences (rest test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc2avlye7.rkt:14:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '((3 1) (1 3) (2 5) (5 2) (6 3))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc2avlye7.rkt:15:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '((4 2) (2 4) (3 6) (6 3) (7 4))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc2avlye7.rkt:16:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '((13 2) (11 23) (12 25) (25 12) (16 23))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([tuple (car test_list)]\n               [new_result (if (dict-has-key? result tuple)\n                               (dict-set result tuple (+ 1 (dict-ref result tuple)))\n                               (dict-set result tuple 1))])\n          (check_occurences_helper (cdr test_list) new_result))))\n  (check_occurences_helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpwdu12fcw.rkt:13:38: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmpwdu12fcw.rkt:13:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (letrec ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcs9io6k5.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcs9io6k5.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcs9io6k5.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_iter (rest test_list) (add-to-dict acc (first test_list)))]))\n  (check_occurences_iter test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpmtsnzvnl.rkt:8:53: add-to-dict: unbound identifier\n  in: add-to-dict\n  location...:\n   /tmp/tmpmtsnzvnl.rkt:8:53\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else (check_occurences_helper (rest test_list) (add_to_dict (first test_list) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp3orfy0k4.rkt:8:55: add_to_dict: unbound identifier\n  in: add_to_dict\n  location...:\n   /tmp/tmp3orfy0k4.rkt:8:55\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_occurences (assoc current_tuple result_list))\n       (cond\n         [(empty? current_tuple_occurences)\n          (check_occurences_helper (rest test_list) (cons (list current_tuple 1) result_list))]\n         [else\n          (define new_occurences (+ 1 (second current_tuple_occurences)))\n          (check_occurences_helper (rest test_list) (cons (list current_tuple new_occurences) (remove current_tuple_occurences result_list)))])])\n    )\n  (check_occurences_helper test_list '())\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbh2e2su.rkt:26:4\n\nsecond: contract violation\n  expected: list?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbh2e2su.rkt:27:4\n\nsecond: contract violation\n  expected: list?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprbh2e2su.rkt:28:4\n\nsecond: contract violation\n  expected: list?\n  given: #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 1))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9plzjrf4.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9plzjrf4.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9plzjrf4.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (let ([key (hash item)])\n        (if (hash-has-key? occurences key)\n            (hash-update! occurences key add1)\n            (hash-set! occurences key 1))))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhc66h12.rkt:18:4\n\nhash: key does not have a value (i.e., an odd number of arguments were provided)\n  key: '(3 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhc66h12.rkt:19:4\n\nhash: key does not have a value (i.e., an odd number of arguments were provided)\n  key: '(4 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhc66h12.rkt:20:4\n\nhash: key does not have a value (i.e., an odd number of arguments were provided)\n  key: '(13 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzrc5yzf.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzrc5yzf.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjzrc5yzf.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ((current_tuple (car test_list))\n              (current_result (assoc current_tuple result)))\n          (if (null? current_result)\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple 1) result))\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple (+ 1 (cadr current_result))) (remove current_result result)))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpjm1xyags.rkt:9:37: current_tuple: unbound identifier\n  in: current_tuple\n  location...:\n   /tmp/tmpjm1xyags.rkt:9:37\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_occurences (assoc current_tuple result)])\n          (if (null? current_tuple_occurences)\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple 1) result))\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple (+ 1 (cadr current_tuple_occurences))) (remove current_tuple_occurences result)))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmnijj2bb.rkt:20:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmnijj2bb.rkt:21:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmnijj2bb.rkt:22:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ((occurences (make-hash)))\n    (for ([item test_list])\n      (hash-set! occurences item (add1 (hash-ref occurences item 0))))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxxc62tcl.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxxc62tcl.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxxc62tcl.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n        (define current_tuple (first test_list))\n        (define current_tuple_occurences (hash-ref result current_tuple 0))\n        (define new_tuple_occurences (+ current_tuple_occurences 1))\n        (hash-set! result current_tuple new_tuple_occurences)\n        (check_occurences_helper (rest test_list) result)]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp307asdct.rkt:21:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp307asdct.rkt:22:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp307asdct.rkt:23:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ([current_tuple (car test_list)])\n          (if (assoc current_tuple result)\n              (check_occurences_helper (cdr test_list) (cons (cons current_tuple (+ 1 (cdr (assoc current_tuple result)))) (remove current_tuple result)))\n              (check_occurences_helper (cdr test_list) (cons (cons current_tuple 1) result))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptycirf1z.rkt:19:4\nactual:     '(((6 3) . 1) ((5 2) . 1) ((2 5) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptycirf1z.rkt:20:4\nactual:     '(((7 4) . 1) ((6 3) . 1) ((3 6) . 1) ((2 4) . 1) ((4 2) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptycirf1z.rkt:21:4\nactual:\n  '(((16 23) . 1) ((25 12) . 1) ((12 25) . 1) ((11 23) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (if (null? test_list)\n        acc\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref acc current_tuple 0)])\n          (hash-set! acc current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) acc))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxb1h4wg9.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxb1h4wg9.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxb1h4wg9.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update! occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp_e1rch.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (letrec ([occur (lambda (lst)\n                    (cond [(empty? lst) empty]\n                          [else (cons (cons (first lst) (count (first lst) lst))\n                                      (occur (remove (first lst) lst)))]))])\n    (occur test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpki2jkxzb.rkt:16:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '((3 1) (1 3) (2 5) (5 2) (6 3))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpki2jkxzb.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '((4 2) (2 4) (3 6) (6 3) (7 4))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpki2jkxzb.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '((13 2) (11 23) (12 25) (25 12) (16 23))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (cond [(empty? test_list) acc]\n          [else (define current_tuple (first test_list))\n               (define current_tuple_count (hash-ref acc current_tuple 0))\n               (hash-set! acc current_tuple (+ current_tuple_count 1))\n               (helper (rest test_list) acc)]))\n  (helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp44_w9vbu.rkt:18:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp44_w9vbu.rkt:19:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp44_w9vbu.rkt:20:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper lst)\n    (cond\n      [(empty? lst) empty]\n      [else (cons (list (first lst) (count (first lst) lst)) (helper (remove (first lst) lst)))]))\n  (helper test_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphe074zn4.rkt:16:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '((3 1) (1 3) (2 5) (5 2) (6 3))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphe074zn4.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '((4 2) (2 4) (3 6) (6 3) (7 4))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphe074zn4.rkt:18:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '((13 2) (11 23) (12 25) (25 12) (16 23))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-update occurences i add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpce35xgyb.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(member (first test_list) acc) (helper (rest test_list) acc)]\n      [else (helper (rest test_list) (cons (first test_list) acc))]))\n  (helper test_list (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_whkcyo.rkt:17:4\nactual:     '((6 3) (5 2) (2 5) (1 3) (3 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_whkcyo.rkt:18:4\nactual:     '((7 4) (6 3) (3 6) (2 4) (4 2))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_whkcyo.rkt:19:4\nactual:     '((16 23) (25 12) (12 25) (11 23) (13 2))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (count current_tuple result_list))\n       (define new_result_list (cons (cons current_tuple current_tuple_count) result_list))\n       (check_occurences_helper (rest test_list) new_result_list)]))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjr_joibh.rkt:20:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjr_joibh.rkt:21:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjr_joibh.rkt:22:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update! occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9v52hde.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_list)\n    (if (null? test_list)\n        result_list\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (assoc current_tuple result_list)])\n          (if (null? current_tuple_count)\n              (check_occurences_helper (cdr test_list) (cons (list current_tuple 1) result_list))\n              (check_occurences_helper (cdr test_list) (cons (list (car current_tuple_count) (+ 1 (cadr current_tuple_count))) (remove current_tuple_count result_list)))))))\n  (check_occurences_helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpus6pg3di.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpus6pg3di.rkt:21:4\n\ncar: contract violation\n  expected: pair?\n  given: #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpus6pg3di.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ 1 current_tuple_count))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4hfku561.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4hfku561.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4hfku561.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list dict)\n    (cond\n      [(empty? test_list) dict]\n      [else\n       (define current_tuple (first test_list))\n       (define current_dict (first dict))\n       (cond\n         [(assoc current_tuple current_dict)\n          (check_occurences_helper (rest test_list) (cons (cons current_tuple (+ 1 (cdr (assoc current_tuple current_dict)))) (rest dict)))]\n         [else\n          (check_occurences_helper (rest test_list) (cons (cons current_tuple 1) dict))])]))\n  (check_occurences_helper test_list (list (cons (first test_list) 1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7514yih.rkt:23:4\n\nassoc: not a proper list: '((3 1) . 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7514yih.rkt:24:4\n\nassoc: not a proper list: '((4 2) . 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph7514yih.rkt:25:4\n\nassoc: not a proper list: '((13 2) . 1)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurrences (make-hash)])\n    (for ([i test_list])\n      (hash-set! occurrences i (add1 (hash-ref occurrences i 0))))\n    occurrences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpezlxzbbd.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpezlxzbbd.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpezlxzbbd.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_occurences (hash-ref result current_tuple 0))\n       (check_occurences_helper (rest test_list) (hash-set result current_tuple (+ current_tuple_occurences 1)))]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6gjgzcm2.rkt:19:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(3 1)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6gjgzcm2.rkt:20:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(4 2)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6gjgzcm2.rkt:21:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(13 2)\n   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([tuple test_list])\n      (hash-update occurences tuple add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75vspxtv.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75vspxtv.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp75vspxtv.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ([current_tuple (car test_list)]\n              [current_tuple_count (hash-ref result current_tuple 0)])\n          (hash-set! result current_tuple (+ current_tuple_count 1))\n          (check_occurences_helper (cdr test_list) result))))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "/tmp/tmpd0n2_xs2.rkt:9:52: current_tuple: unbound identifier\n  in: current_tuple\n  location...:\n   /tmp/tmpd0n2_xs2.rkt:9:52\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_iter test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [else\n       (define current_tuple (first test_list))\n       (define current_tuple_count (hash-ref acc current_tuple 0))\n       (define new_tuple_count (+ current_tuple_count 1))\n       (define new_acc (hash-set acc current_tuple new_tuple_count))\n       (check_occurences_iter (rest test_list) new_acc)]))\n  (check_occurences_iter test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmexwh0fw.rkt:21:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(3 1)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmexwh0fw.rkt:22:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(4 2)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmexwh0fw.rkt:23:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(13 2)\n   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) (reverse acc)]\n      [else (helper (rest test_list) (cons (cons (first test_list) (add1 (or (dict-ref acc (first test_list)) 0))) acc))]))\n  (helper test_list empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvzlf5xc.rkt:16:4\n\ndict-ref: no value for key: '(3 1) in: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvzlf5xc.rkt:17:4\n\ndict-ref: no value for key: '(4 2) in: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvzlf5xc.rkt:18:4\n\ndict-ref: no value for key: '(13 2) in: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let ([current_tuple (car test_list)]\n              [current_tuple_count (dict-ref result_dict current_tuple 0)])\n          (check_occurences_helper (cdr test_list)\n                                   (dict-set result_dict current_tuple (+ 1 current_tuple_count))))))\n  (check_occurences_helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "/tmp/tmpie7_skh1.rkt:9:57: current_tuple: unbound identifier\n  in: current_tuple\n  location...:\n   /tmp/tmpie7_skh1.rkt:9:57\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list acc)\n    (cond\n      [(empty? test_list) (reverse acc)]\n      [else (check_occurences_helper (rest test_list) (cons (cons (first test_list) (add1 (or (hash-ref acc (first test_list) 0) 0))) acc))]))\n  (check_occurences_helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplj4dv_7l.rkt:16:4\n\nhash-ref: contract violation\n  expected: hash?\n  given: '(((3 1) . 1) . #hash())\n  argument position: 1st\n  other arguments...:\n   '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplj4dv_7l.rkt:17:4\n\nhash-ref: contract violation\n  expected: hash?\n  given: '(((4 2) . 1) . #hash())\n  argument position: 1st\n  other arguments...:\n   '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplj4dv_7l.rkt:18:4\n\nhash-ref: contract violation\n  expected: hash?\n  given: '(((13 2) . 1) . #hash())\n  argument position: 1st\n  other arguments...:\n   '(11 23)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) acc]\n      [(assoc (first test_list) acc) (helper (rest test_list) (assoc (first test_list) acc))]\n      [else (helper (rest test_list) (cons (list (first test_list) 1) acc))]))\n  (helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuk441k32.rkt:17:4\nactual:     '(((6 3) 1) ((5 2) 1) ((2 5) 1) ((1 3) 1) ((3 1) 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuk441k32.rkt:18:4\nactual:     '(((7 4) 1) ((6 3) 1) ((3 6) 1) ((2 4) 1) ((4 2) 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuk441k32.rkt:19:4\nactual:     '(((16 23) 1) ((25 12) 1) ((12 25) 1) ((11 23) 1) ((13 2) 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (cond\n    [(empty? test_list) empty]\n    [else (cons (cons (first test_list) (count (first test_list) test_list)) (check_occurences (remove (first test_list) test_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyosdl68_.rkt:14:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '((3 1) (1 3) (2 5) (5 2) (6 3))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyosdl68_.rkt:15:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '((4 2) (2 4) (3 6) (6 3) (7 4))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyosdl68_.rkt:16:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '((13 2) (11 23) (12 25) (25 12) (16 23))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (if (null? test_list)\n        result_dict\n        (let* ([current_tuple (car test_list)]\n               [current_tuple_count (dict-ref result_dict current_tuple 0)])\n          (check_occurences_helper (cdr test_list)\n                                   (dict-set result_dict current_tuple (+ current_tuple_count 1))))))\n  (check_occurences_helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "/tmp/tmpnw9o_cy1.rkt:12:38: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmpnw9o_cy1.rkt:12:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (cond [(empty? test_list) acc]\n          [else (helper (rest test_list) (cons (list (first test_list) (count (first test_list) test_list)) acc))]))\n  (helper test_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd8mjifuv.rkt:15:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(3 1)\n  argument position: 1st\n  other arguments...:\n   '((3 1) (1 3) (2 5) (5 2) (6 3))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd8mjifuv.rkt:16:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(4 2)\n  argument position: 1st\n  other arguments...:\n   '((4 2) (2 4) (3 6) (6 3) (7 4))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd8mjifuv.rkt:17:4\n\ncount: contract violation\n  expected: procedure?\n  given: '(13 2)\n  argument position: 1st\n  other arguments...:\n   '((13 2) (11 23) (12 25) (25 12) (16 23))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (letrec ([occurences (for/hash ([tuple (in-list test_list)])\n                                 [(hash tuple) (add1 (hash-ref occurences tuple 0))])])\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee6xl8o_.rkt:14:4\n\nhash: key does not have a value (i.e., an odd number of arguments were provided)\n  key: '(3 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee6xl8o_.rkt:15:4\n\nhash: key does not have a value (i.e., an odd number of arguments were provided)\n  key: '(4 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpee6xl8o_.rkt:16:4\n\nhash: key does not have a value (i.e., an odd number of arguments were provided)\n  key: '(13 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (define current_tuple (first test_list))\n       (define current_count (hash-ref result current_tuple 0))\n       (define new_count (+ current_count 1))\n       (define new_result (hash-set result current_tuple new_count))\n       (helper (rest test_list) new_result)]))\n  (helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gakqv6i.rkt:21:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(3 1)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gakqv6i.rkt:22:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(4 2)\n   1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gakqv6i.rkt:23:4\n\nhash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   '(13 2)\n   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (check_occurences_helper test_list result_dict)\n    (cond\n      [(empty? test_list) result_dict]\n      [else\n       (define current_tuple (first test_list))\n       (define new_result_dict\n         (cond\n           [(dict-has-key? result_dict current_tuple)\n            (dict-set result_dict current_tuple (+ 1 (dict-ref result_dict current_tuple)))]\n           [else (dict-set result_dict current_tuple 1)]))\n       (check_occurences_helper (rest test_list) new_result_dict)]))\n  (check_occurences_helper test_list (make-dict)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "/tmp/tmp22riz83q.rkt:16:38: make-dict: unbound identifier\n  in: make-dict\n  location...:\n   /tmp/tmp22riz83q.rkt:16:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dictionary (make-hash)])\n    (for ([i test_list])\n      (hash-set! dictionary i (+ 1 (hash-ref dictionary i 0))))\n    dictionary))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaj7gfqa6.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaj7gfqa6.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaj7gfqa6.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([dict (make-hash)])\n    (for ([i test_list])\n      (hash-set! dict i (add1 (hash-ref dict i 0))))\n    dict))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfnj1ll0p.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([i test_list])\n      (hash-set! occurences i (add1 (hash-ref occurences i 0))))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7s5xd5e.rkt:15:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7s5xd5e.rkt:16:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7s5xd5e.rkt:17:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define (helper test_list acc)\n    (if (empty? test_list)\n        acc\n        (let* ([curr_tuple (car test_list)]\n               [curr_tuple_count (hash-ref acc curr_tuple 0)])\n          (hash-set! acc curr_tuple (+ 1 curr_tuple_count))\n          (helper (cdr test_list) acc))))\n  (helper test_list (make-hash)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123527,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphgnk669s.rkt:19:4\nactual:     '#hash(((5 2) . 1) ((2 5) . 1) ((6 3) . 1) ((1 3) . 1) ((3 1) . 1))\nexpected:   '#hash(((list 3 6) . 1) ((list 1 3) . 2) ((list 2 5) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphgnk669s.rkt:20:4\nactual:     '#hash(((3 6) . 1) ((7 4) . 1) ((2 4) . 1) ((4 2) . 1) ((6 3) . 1))\nexpected:   '#hash(((list 4 7) . 1) ((list 3 6) . 2) ((list 2 4) . 2))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphgnk669s.rkt:21:4\nactual:\n  '#hash(((25 12) . 1) ((16 23) . 1) ((11 23) . 1) ((12 25) . 1) ((13 2) . 1))\nexpected:\n  '#hash(((list 11 23) . 1)\n         ((list 12 25) . 2)\n         ((list 16 23) . 1)\n         ((list 2 13) . 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (let ([occurences (make-hash)])\n    (for ([item test_list])\n      (hash-update occurences item add1 0))\n    occurences))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-equal? (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)))\n    (check-equal? (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)))\n    (check-equal? (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:15:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:16:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgxvqmvvu.rkt:17:4\n\nhash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}