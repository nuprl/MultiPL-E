{
  "name": "mbpp_459_remove_uppercase",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove uppercase substrings from a given string.\n(define (remove_uppercase str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_uppercase))\n    (check-equal? (candidate \"cAstyoUrFavoRitETVshoWs\") \"cstyoravoitshos\")\n    (check-equal? (candidate \"wAtchTheinTernEtrAdIo\") \"wtchheinerntrdo\")\n    (check-equal? (candidate \"VoicESeaRchAndreComMendaTionS\") \"oiceachndreomendaion\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-append (regexp-replace* #rx\"[A-Z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (string-append\n   (string-join\n    (filter (lambda (x) (not (char-upper-case? (string->char x))))\n            (string-split str1 #\\space))\n    #\\space)))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[A-Z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (define (remove_uppercase_iter str2)\n    (if (string-empty? str2)\n        \"\"\n        (if (char-upper-case? (string-ref str2 0))\n            (remove_uppercase_iter (substring str2 1))\n            (string-append (string (string-ref str2 0))\n                           (remove_uppercase_iter (substring str2 1))))))\n  (remove_uppercase_iter str1))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (define (remove_uppercase_iter str1 str2)\n    (cond ((empty? str1) str2)\n          ((char-upper-case? (first str1)) (remove_uppercase_iter (rest str1) str2))\n          (else (remove_uppercase_iter (rest str1) (string-append str2 (string (first str1)))))))\n  (remove_uppercase_iter str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (cond\n    [(empty? str1) empty]\n    [(char-upper-case? (first str1)) (remove_uppercase (rest str1))]\n    [else (cons (first str1) (remove_uppercase (rest str1)))]))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (string-append\n   (string-join\n    (filter (lambda (x) (not (char-upper-case? (string-ref x 0))))\n            (string-split str1 #\\space))\n    #\\space)))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n"
  ]
}