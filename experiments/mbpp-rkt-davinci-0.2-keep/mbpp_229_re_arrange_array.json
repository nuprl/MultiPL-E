{
  "name": "mbpp_229_re_arrange_array",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n(define (re_arrange_array arr n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate re_arrange_array))\n    (check-equal? (candidate (list -1 2 -3 4 5 6 -7 8 9) 9) (list -1 -3 -7 4 5 6 2 8 9))\n    (check-equal? (candidate (list 12 -14 -26 13 15) 5) (list -14 -26 12 13 15))\n    (check-equal? (candidate (list 10 24 36 -42 -39 -78 85) 7) (list -42 -39 -78 10 24 36 85))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (&lt; i n)\n        (if (&lt; (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))\n        arr))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i 0)\n              (vector-swap! arr 0 i)\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((and (< (array-ref arr i) 0)\n                (> (array-ref arr (- n 1)) 0))\n           (array-swap! arr i (- n 1))\n           (re_arrange_array_iter arr n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (re_arrange_array_iter (vector-swap! arr i (vector-ref arr (- n 1))) (- n 1) (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr n))\n         (vector-swap! arr n (vector-ref arr (+ n 1)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i j)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr j (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1) (+ j 1))]\n      [else (re_arrange_array_iter arr n (+ i 1) j)]))\n  (re_arrange_array_iter arr n 0 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (re_arrange_array_helper (vector-copy arr) n (+ i 1))]\n      [else\n       (let ([temp (vector-ref arr i)])\n         (vector-set! arr i (vector-ref arr (+ i 1)))\n         (vector-set! arr (+ i 1) temp)\n         (re_arrange_array_helper (vector-copy arr) n (+ i 1)))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((> (vector-ref arr i) 0)\n           (re_arrange_array_helper (vector-append (vector-append (vector-ref arr i) (vector-slice arr 0 i)) (vector-slice arr (+ i 1) n)) n (+ i 1)))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (re_arrange_array_helper (vector-append (vector (vector-ref arr i)) (vector-subseq arr 0 i) (vector-subseq arr (+ i 1) n)) n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (+ i 1)))\n           (vector-set! arr (+ i 1) (vector-ref arr i))\n           (re_arrange_array_helper arr n (+ i 1))]\n          [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i (lambda (x) (< x 0)))))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0) (vector-set! arr i (vector-ref arr (- n 1))) (vector-set! arr (- n 1) (vector-ref arr i)) (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (re_arrange_array_iter (vector-append (vector (vector-ref arr i)) (vector-subseq arr 0 i) (vector-subseq arr (+ i 1) n)) n (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (vector-swap! arr (- n 1) (vector-ref arr i))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0) (re_arrange_array_helper arr n (+ i 1))]\n      [else (begin\n              (vector-swap! arr i (vector-ref arr n))\n              (re_arrange_array_helper arr n (+ i 1)))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-index-right arr i (lambda (x) (< x 0)))))\n         (re_arrange_array_iter arr n (+ i 1)))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (&lt; (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr n))\n              (vector-swap! arr n (vector-ref arr (+ n 1)))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(> (vector-ref arr i) 0) (helper arr n (+ i 1))]\n      [(< (vector-ref arr i) 0) (vector-swap! arr i (vector-ref arr (+ i 1))) (helper arr n (+ i 1))]))\n  (helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let loop ([arr arr] [n n] [i 0])\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (let ([temp (vector-ref arr i)])\n             (vector-set! arr i (vector-ref arr (- n 1)))\n             (vector-set! arr (- n 1) temp)\n             (loop arr n (- n 1)))]\n          [else (loop arr n (+ i 1))])))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((and (< (array-ref arr i) 0) (> (array-ref arr (+ i 1)) 0))\n           (array-swap! arr i (+ i 1))\n           (re_arrange_array_iter arr n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (begin\n             (vector-swap! arr i (vector-ref arr (vector-index-right arr i (lambda (x) (< x 0)))))\n             (re_arrange_array_helper arr n (+ i 1))))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr (lambda (x) (< x 0)) i)))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (- n 1)))\n         (re_arrange_array_iter arr n (+ i 1)))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond [(= i n) arr]\n          [(> (vector-ref arr i) 0) (re_arrange_array_helper arr n (+ i 1))]\n          [else (vector-set! arr i (vector-ref arr (- n 1)))\n                (vector-set! arr (- n 1) (vector-ref arr i))\n                (re_arrange_array_helper arr (- n 1) i)]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (&lt; i n)\n        (if (negative? (vector-ref arr i))\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))\n        arr))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let ([pos-arr (filter positive? arr)]\n        [neg-arr (filter negative? arr)])\n    (append neg-arr pos-arr)))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr (lambda (x) (< x 0)) i)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i j)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i j)\n              (re_arrange_array_iter arr n (+ i 1) (+ j 1)))\n            (re_arrange_array_iter arr n (+ i 1) j))))\n  (re_arrange_array_iter arr n 0 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (&lt; (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(> (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0) (vector-set! arr i (vector-ref arr (- n 1))) (vector-set! arr (- n 1) (vector-ref arr i)) (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-index-right arr i (lambda (x) (< x 0)))))\n         (re_arrange_array_iter arr n (+ i 1)))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (begin\n             (vector-swap! arr i (vector-ref arr (- n 1)))\n             (re_arrange_array_helper arr n (+ i 1))))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(> (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (+ i 1)))\n       (vector-set! arr (+ i 1) 0)\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (vector-swap! arr (- n 1) (vector-ref arr i))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let ([pos-arr (filter positive? arr)]\n        [neg-arr (filter negative? arr)])\n    (append neg-arr pos-arr)))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (let loop ([i 0] [j n])\n    (cond\n      [(= i j) arr]\n      [(>= (vector-ref arr i) 0)\n       (loop (+ i 1) j)]\n      [(< (vector-ref arr j) 0)\n       (loop i (- j 1))]\n      [else\n       (vector-set! arr i (vector-ref arr j))\n       (vector-set! arr j (vector-ref arr i))\n       (loop (+ i 1) (- j 1))])))\n",
    "  (let loop ([i 0] [j n])\n    (cond [(>= i j) arr]\n          [(>= (array-ref arr i) 0)\n           (let ([temp (array-ref arr i)])\n             (array-set! arr i (array-ref arr j))\n             (array-set! arr j temp)\n             (loop i (- j 1)))]\n          [else (loop (+ i 1) j)])))\n",
    "  (define (re_arrange_array_iter arr n i j)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr j))\n       (vector-set! arr j (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1) (+ j 1))]\n      [else (re_arrange_array_iter arr n (+ i 1) j)]))\n  (re_arrange_array_iter arr n 0 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (re_arrange_array_iter (vector-swap! arr i (vector-ref arr n)) n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (re_arrange_array_helper (vector-swap! arr i (vector-ref arr (- n 1))) (- n 1) i)]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-index-right arr (lambda (x) (< x 0)) i))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (- n 1)))\n         (re_arrange_array_iter arr n (+ i 1)))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (vector-swap! arr (- n 1) (vector-ref arr i))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(> (array-ref arr i) 0) (re_arrange_array_iter (array-swap arr i (array-index-of-first-positive arr n)) n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(> (vector-ref arr i) 0)\n       (let ([temp (vector-ref arr i)])\n         (vector-set! arr i (vector-ref arr (+ i 1)))\n         (vector-set! arr (+ i 1) temp)\n         (re_arrange_array_iter arr n (+ i 1)))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_helper arr n (+ i 1))]\n          [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr n (lambda (x) (< x 0)))))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i j)\n    (if (&gt;= i n)\n        arr\n        (if (&lt; (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i j)\n              (re_arrange_array_helper arr n (+ i 1) (+ j 1)))\n            (re_arrange_array_helper arr n (+ i 1) j))))\n  (re_arrange_array_helper arr n 0 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i n)\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let loop ([i 0] [j n] [arr arr])\n    (if (&lt; i j)\n        (if (&lt; (vector-ref arr i) 0)\n            (loop (+ i 1) j arr)\n            (let ([temp (vector-ref arr i)])\n              (vector-set! arr i (vector-ref arr j))\n              (vector-set! arr j temp)\n              (loop i (- j 1) arr)))\n        arr)))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n         (re_arrange_array_iter arr n (+ i 1)))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (&lt; (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (vector-swap! arr (- n 1) (vector-ref arr i))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(> (vector-ref arr i) 0) (re_arrange_array_helper arr n (+ i 1))]\n      [else (vector-set! arr i (vector-ref arr (- n 1)))\n            (vector-set! arr (- n 1) (vector-ref arr i))\n            (re_arrange_array_helper arr (- n 1) i)]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr (lambda (x) (< x 0)) i)))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (- n 1)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (begin\n             (vector-swap! arr i (vector-ref arr (- n 1)))\n             (re_arrange_array_helper arr n (+ i 1))))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let loop ([i 0] [j n])\n    (if (&lt; i j)\n        (if (&lt; (vector-ref arr i) 0)\n            (loop (+ i 1) j)\n            (if (&gt;= (vector-ref arr j) 0)\n                (loop i (- j 1))\n                (let ([temp (vector-ref arr i)])\n                  (vector-set! arr i (vector-ref arr j))\n                  (vector-set! arr j temp)\n                  (loop (+ i 1) (- j 1))))))))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (- n 1)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (&lt; (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let ([neg-arr (filter (lambda (x) (< x 0)) arr)])\n    (for/fold ([arr-1 (filter (lambda (x) (>= x 0)) arr)])\n              ([i (in-range n)])\n      (if (empty? neg-arr)\n          arr-1\n          (append (list (first neg-arr)) arr-1)))))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((and (< (array-ref arr i) 0) (> (array-ref arr (+ i 1)) 0))\n           (array-swap! arr i (+ i 1))\n           (re_arrange_array_iter arr n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (begin\n             (vector-swap! arr i (vector-ref arr (+ i 1)))\n             (re_arrange_array_iter arr n (+ i 1)))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (- n 1)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr n))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-index-right arr (lambda (x) (< x 0)) i)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (re_arrange_array_helper (vector-swap! arr i (vector-ref arr (- n 1))) (- n 1) (+ i 1))]\n          [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(> (vector-ref arr i) 0) (re_arrange_array_iter arr n (+ i 1))]\n      [(< (vector-ref arr i) 0) (begin\n                                   (vector-swap! arr i (+ n 1))\n                                   (re_arrange_array_iter arr n (+ i 1)))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (let loop ([i 0] [j n])\n    (cond [(= i j) arr]\n          [(< (array-ref arr i) 0) (loop (+ i 1) j)]\n          [(> (array-ref arr j) 0) (loop i (- j 1))]\n          [else (begin (array-swap! arr i j)\n                      (loop (+ i 1) (- j 1)))])))\n",
    "  (define (re_arrange_array_iter arr i n)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (re_arrange_array_iter (vector-append (vector (vector-ref arr i)) (vector-subseq arr 0 i) (vector-subseq arr (+ i 1) n)) (+ i 1) n)\n            (re_arrange_array_iter arr (+ i 1) n))))\n  (re_arrange_array_iter arr 0 n))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr n))\n       (vector-set! arr n (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i j)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr j (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1) (+ j 1))]\n      [else\n       (re_arrange_array_helper arr n (+ i 1) j)]))\n  (re_arrange_array_helper arr n 0 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (begin\n             (vector-swap! arr i (vector-ref arr (- n 1)))\n             (re_arrange_array_helper arr n (+ i 1))))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let ([neg-arr (filter (lambda (x) (< x 0)) arr)]\n        [pos-arr (filter (lambda (x) (>= x 0)) arr)])\n    (append neg-arr pos-arr)))\n",
    "  (let ([neg-arr (filter (lambda (x) (< x 0)) (take arr n))]\n        [pos-arr (filter (lambda (x) (>= x 0)) (take arr n))])\n    (append neg-arr pos-arr)))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0) (re_arrange_array_iter arr n (+ i 1))]\n      [else (begin\n              (vector-swap! arr i n)\n              (re_arrange_array_iter arr n (+ i 1)))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0) (re_arrange_array_helper arr n (+ i 1))]\n      [else (vector-set! arr i (vector-ref arr (- n 1)))\n            (vector-set! arr (- n 1) (vector-ref arr i))\n            (re_arrange_array_helper arr (- n 1) i)]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((< (array-ref arr i) 0)\n           (begin\n             (array-swap! arr i (array-ref arr (- n 1)))\n             (re_arrange_array_helper arr n (+ i 1))))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-length arr)))\n              (vector-swap! arr (vector-length arr) (vector-ref arr i))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(> (vector-ref arr i) 0)\n           (re_arrange_array_iter (vector-append (vector-subseq arr 0 i)\n                                                 (vector-append (vector-subseq arr (+ i 1) n)\n                                                                (vector (vector-ref arr i))))\n                                   n\n                                   (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i j)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr j))\n       (vector-set! arr j (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1) (+ j 1))]\n      [else (re_arrange_array_iter arr n (+ i 1) j)]))\n  (re_arrange_array_iter arr n 0 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n         (re_arrange_array_iter arr n (+ i 1)))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (let loop ([arr arr] [n n] [i 0])\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0) (loop (vector-append (vector (vector-ref arr i)) (vector-subseq arr 0 i) (vector-subseq arr (+ i 1) n)) n (+ i 1))]\n      [else (loop arr n (+ i 1))])))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (&gt;= i n)\n        arr\n        (if (&lt; (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n</code>\nI'm not sure if this is the best way to do it, but it seems to work.\n",
    "  (define (helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (vector-swap! arr (- n 1) (vector-ref arr i))\n              (helper arr n (+ i 1)))\n            (helper arr n (+ i 1)))))\n  (helper arr n 0))\n",
    "  (define (helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (vector-swap! arr (- n 1) (vector-ref arr i))\n              (helper arr n (+ i 1)))\n            (helper arr n (+ i 1)))))\n  (helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(> (vector-ref arr i) 0)\n           (let ([tmp (vector-ref arr i)])\n             (vector-set! arr i (vector-ref arr n))\n             (vector-set! arr n tmp)\n             (re_arrange_array_iter arr n (+ i 1)))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr n))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (&lt; i n)\n        (if (&lt; (array-ref arr i) 0)\n            (begin\n              (array-swap! arr i (array-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))\n        arr))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr n))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((> (vector-ref arr i) 0)\n           (re_arrange_array_iter (vector-append (vector-append (vector-subseq arr 0 i) (vector (vector-ref arr i))) (vector-subseq arr (+ i 1) n)) n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (array-ref arr i) 0)\n            (begin\n              (array-swap! arr i (array-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-length arr)))\n              (vector-swap! arr (vector-length arr) (vector-ref arr i))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (re_arrange_array_helper (vector-append (vector (vector-ref arr i)) (vector-append (vector-subseq arr 0 i) (vector-subseq arr (+ i 1) n))) n (+ i 1)))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr n))\n       (vector-set! arr n (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (re_arrange_array_helper (vector-append (vector (vector-ref arr i)) (vector-append (vector-subvector arr 0 i) (vector-subvector arr (+ i 1) n))) n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let ([pos-arr (filter positive? arr)]\n        [neg-arr (filter negative? arr)])\n    (append neg-arr pos-arr)))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i j)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr j (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1) (+ j 1))]\n      [else\n       (re_arrange_array_iter arr n (+ i 1) j)]))\n  (re_arrange_array_iter arr n 0 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i n)\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n              (re_arrange_array_iter arr n (+ i 1)))\n            (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0) (vector-set! arr i (vector-ref arr (- i 1))) (re_arrange_array_helper arr n (- i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(> (vector-ref arr i) 0) (re_arrange_array_helper arr n (+ i 1))]\n      [(< (vector-ref arr i) 0) (vector-swap! arr i (vector-ref arr (+ i 1))) (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (negative? (vector-ref arr i))\n            (re_arrange_array_helper arr n (+ i 1))\n            (begin\n              (vector-swap! arr i (vector-ref arr (+ i 1)))\n              (re_arrange_array_helper arr n (+ i 2))))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr n))\n       (vector-set! arr n (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0) (begin\n                                  (vector-swap! arr i (vector-ref arr (- n 1)))\n                                  (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-index-right arr (lambda (x) (< x 0)) i)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (begin\n             (vector-swap! arr i (vector-ref arr (- n 1)))\n             (re_arrange_array_iter arr n (+ i 1)))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((and (< (array-ref arr i) 0) (>= (array-ref arr (- i 1)) 0))\n           (array-swap! arr i (- i 1))\n           (re_arrange_array_iter arr n (- i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (begin\n             (vector-swap! arr i (vector-ref arr (- n 1)))\n             (re_arrange_array_helper arr n (+ i 1))))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr n))\n       (vector-set! arr n (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr (vector-length arr)))\n         (vector-swap! arr (vector-length arr) (vector-ref arr i))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let loop ([i 0] [j n])\n    (if (&lt; i j)\n        (if (negative? (vector-ref arr i))\n            (loop (+ i 1) j)\n            (if (positive? (vector-ref arr j))\n                (loop i (- j 1))\n                (vector-swap! arr i j)\n                (loop (+ i 1) (- j 1)))))))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0) (vector-set! arr i (vector-ref arr (- n 1)))\n                                    (vector-set! arr (- n 1) (vector-ref arr i))\n                                    (re_arrange_array_iter arr n (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (let ([neg-arr (filter (lambda (x) (< x 0)) arr)]\n        [pos-arr (filter (lambda (x) (>= x 0)) arr)])\n    (append neg-arr pos-arr)))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_iter arr n (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (let ([neg-arr (filter (lambda (x) (< x 0)) arr)]\n        [pos-arr (filter (lambda (x) (>= x 0)) arr)])\n    (append neg-arr pos-arr)))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(> (vector-ref arr i) 0) (re_arrange_array_helper arr n (+ i 1))]\n      [(< (vector-ref arr i) 0) (vector-set! arr i (vector-ref arr (- n 1)))\n                                 (vector-set! arr (- n 1) (vector-ref arr i))\n                                 (re_arrange_array_helper arr (- n 1) i)]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (- n 1)))\n           (vector-set! arr (- n 1) (vector-ref arr i))\n           (re_arrange_array_helper arr n (+ i 1)))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (let loop ([i 0] [j n])\n    (cond [(>= i j) arr]\n          [(> (vector-ref arr i) 0)\n           (let ([temp (vector-ref arr i)])\n             (vector-set! arr i (vector-ref arr j))\n             (vector-set! arr j temp)\n             (loop i (- j 1)))]\n          [else (loop (+ i 1) j)])))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (re_arrange_array_iter (swap arr i (-1)) n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (if (&lt; i n)\n        (if (negative? (vector-ref arr i))\n            (re_arrange_array_iter arr n (+ i 1))\n            (let ([temp (vector-ref arr i)])\n              (vector-set! arr i (vector-ref arr (+ i 1)))\n              (vector-set! arr (+ i 1) temp)\n              (re_arrange_array_iter arr n (+ i 2))))\n        arr))\n  (re_arrange_array_iter arr n 0))\n"
  ]
}