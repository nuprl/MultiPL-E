{
  "name": "mbpp_229_re_arrange_array",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n(define (re_arrange_array arr n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate re_arrange_array))\n    (check-equal? (candidate (list -1 2 -3 4 5 6 -7 8 9) 9) (list -1 -3 -7 4 5 6 2 8 9))\n    (check-equal? (candidate (list 12 -14 -26 13 15) 5) (list -14 -26 12 13 15))\n    (check-equal? (candidate (list 10 24 36 -42 -39 -78 85) 7) (list -42 -39 -78 10 24 36 85))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (&lt; i n)\n        (if (&lt; (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (- n 1)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))\n        arr))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-ref arr i)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i 0)\n              (vector-swap! arr 0 i)\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (if (= i n)\n        arr\n        (if (< (vector-ref arr i) 0)\n            (begin\n              (vector-swap! arr i (vector-ref arr (vector-index-right arr i n)))\n              (re_arrange_array_helper arr n (+ i 1)))\n            (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond ((= i n) arr)\n          ((and (< (array-ref arr i) 0)\n                (> (array-ref arr (- n 1)) 0))\n           (array-swap! arr i (- n 1))\n           (re_arrange_array_iter arr n (+ i 1)))\n          (else (re_arrange_array_iter arr n (+ i 1)))))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (re_arrange_array_iter (vector-swap! arr i (vector-ref arr (- n 1))) (- n 1) (+ i 1))]\n          [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (begin\n         (vector-swap! arr i (vector-ref arr n))\n         (vector-swap! arr n (vector-ref arr (+ n 1)))\n         (re_arrange_array_helper arr n (+ i 1)))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i j)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr j (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1) (+ j 1))]\n      [else (re_arrange_array_iter arr n (+ i 1) j)]))\n  (re_arrange_array_iter arr n 0 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (re_arrange_array_helper (vector-copy arr) n (+ i 1))]\n      [else\n       (let ([temp (vector-ref arr i)])\n         (vector-set! arr i (vector-ref arr (+ i 1)))\n         (vector-set! arr (+ i 1) temp)\n         (re_arrange_array_helper (vector-copy arr) n (+ i 1)))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_helper arr n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond ((= i n) arr)\n          ((> (vector-ref arr i) 0)\n           (re_arrange_array_helper (vector-append (vector-append (vector-ref arr i) (vector-slice arr 0 i)) (vector-slice arr (+ i 1) n)) n (+ i 1)))\n          (else (re_arrange_array_helper arr n (+ i 1)))))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_iter arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (vector-set! arr i (vector-ref arr (- n 1)))\n       (vector-set! arr (- n 1) (vector-ref arr i))\n       (re_arrange_array_iter arr n (+ i 1))]\n      [else (re_arrange_array_iter arr n (+ i 1))]))\n  (re_arrange_array_iter arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond\n      [(= i n) arr]\n      [(< (vector-ref arr i) 0)\n       (re_arrange_array_helper (vector-append (vector (vector-ref arr i)) (vector-subseq arr 0 i) (vector-subseq arr (+ i 1) n)) n (+ i 1))]\n      [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n",
    "  (define (re_arrange_array_helper arr n i)\n    (cond [(= i n) arr]\n          [(< (vector-ref arr i) 0)\n           (vector-set! arr i (vector-ref arr (+ i 1)))\n           (vector-set! arr (+ i 1) (vector-ref arr i))\n           (re_arrange_array_helper arr n (+ i 1))]\n          [else (re_arrange_array_helper arr n (+ i 1))]))\n  (re_arrange_array_helper arr n 0))\n"
  ]
}