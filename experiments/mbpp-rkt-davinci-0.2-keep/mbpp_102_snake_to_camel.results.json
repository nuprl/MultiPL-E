{
  "name": "mbpp_102_snake_to_camel",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps88hd7fs.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps88hd7fs.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps88hd7fs.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppg3eaf2j.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppg3eaf2j.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppg3eaf2j.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "/tmp/tmphd0rplua.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmphd0rplua.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? #\\_ (string-ref x 0))\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwbe0oq0z.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwbe0oq0z.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwbe0oq0z.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvs0mcmr0.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvs0mcmr0.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvs0mcmr0.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (first (rest word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphs_l6ns2.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphs_l6ns2.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphs_l6ns2.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:15:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:16:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:17:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:15:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:16:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:17:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ytz4m2d.rkt:16:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ytz4m2d.rkt:17:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ytz4m2d.rkt:18:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (eq? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8ccemgu.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8ccemgu.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8ccemgu.rkt:22:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (if (string-empty? word)\n        acc\n        (if (string=? (string-take word 1) \"_\")\n            (snake_to_camel_iter (string-drop word 1)\n                                 (string-append acc (string-upcase (string-take word 2))))\n            (snake_to_camel_iter (string-drop word 1)\n                                 (string-append acc (string-take word 1))))))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "/tmp/tmpamw51oyz.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmpamw51oyz.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char-numeric? (string-ref x 0)) x (string-capitalize x))) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "/tmp/tmp31kba2xo.rkt:5:72: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmp31kba2xo.rkt:5:72\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:15:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:16:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:17:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42auewas.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42auewas.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42auewas.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w) (string-capitalize w))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "/tmp/tmpsmoebu_z.rkt:7:17: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpsmoebu_z.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "/tmp/tmpei73sw3o.rkt:8:7: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpei73sw3o.rkt:8:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiixidlbh.rkt:15:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiixidlbh.rkt:16:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiixidlbh.rkt:17:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond ((null? word) (string-join (reverse acc) \"\"))\n          ((string=? (first word) \"_\")\n           (snake_to_camel_iter (rest word) (cons (string-upcase (second word)) (rest acc))))\n          (else (snake_to_camel_iter (rest word) (cons (first word) acc)))))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek_f6tqp.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek_f6tqp.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek_f6tqp.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpog9htvku.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "/tmp/tmphd0rplua.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmphd0rplua.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxx2hdtq.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxx2hdtq.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxx2hdtq.rkt:22:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk2rtjjn6.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk2rtjjn6.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk2rtjjn6.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_) (string-upcase (substring x 1)) x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpayb4t8ov.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpayb4t8ov.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpayb4t8ov.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (cond [(empty? word) empty]\n          [(char=? (first word) #\\_) (cons (char-upcase (second word)) (helper (rest (rest word))))]\n          [else (cons (first word) (helper (rest word)))]))\n  (string->symbol (list->string (helper (string->list word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q5u0i3v.rkt:16:4\nactual:     'pythonProgram\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q5u0i3v.rkt:17:4\nactual:     'pythonLanguage\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q5u0i3v.rkt:18:4\nactual:     'programmingLanguage\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_)\n           (loop (rest word) (cons (string-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicuyt6wo.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicuyt6wo.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicuyt6wo.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpisuvqghd.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpisuvqghd.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpisuvqghd.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozotkpmm.rkt:15:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozotkpmm.rkt:16:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpozotkpmm.rkt:17:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf_zgvbf.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf_zgvbf.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf_zgvbf.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel-iter word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (snake_to_camel-iter (rest word) (string-append result (string-upcase (string (second word)))))\n      ]\n      [else\n       (snake_to_camel-iter (rest word) (string-append result (string (first word))))\n      ]\n    )\n  )\n  (snake_to_camel-iter word \"\")\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpulxxfq9w.rkt:24:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpulxxfq9w.rkt:25:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpulxxfq9w.rkt:26:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map string-upcase (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbpqzksmg.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbpqzksmg.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbpqzksmg.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_) (loop (rest word) (cons (char-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4pdnlki.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4pdnlki.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi4pdnlki.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:13:4\nactual:     \"Python_program\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:14:4\nactual:     \"Python_language\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk3ohcj5.rkt:15:4\nactual:     \"Programming_language\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (snake_to_camel_helper (rest word)\n                                  (string-append result (string-upcase (string (second word))) (rest (rest word))))]\n          [else (snake_to_camel_helper (rest word) (string-append result (string (first word))))]))\n  (snake_to_camel_helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjij2i51d.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjij2i51d.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjij2i51d.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl7ezsdj.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl7ezsdj.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl7ezsdj.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (s) (string-upcase s))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu3msydon.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu3msydon.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu3msydon.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "/tmp/tmpei73sw3o.rkt:8:7: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpei73sw3o.rkt:8:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                      (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxuzywh_.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxuzywh_.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxuzywh_.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (eq? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp25n1m_st.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp25n1m_st.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp25n1m_st.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                         (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond [(empty? word) (list->string (reverse acc))]\n          [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n          [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpufdg7cln.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpufdg7cln.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpufdg7cln.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                (string-upcase (substring x 1))\n                x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6nokruv5.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6nokruv5.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6nokruv5.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (string-drop x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "/tmp/tmpzs4jf2q3.rkt:7:39: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpzs4jf2q3.rkt:7:39\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp224_vurh.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp224_vurh.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp224_vurh.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (string-contains word #\\_)\n        (string-append (string-upcase (string-take word 1))\n                       (string-drop word 1))\n        word))\n  (string-join (map helper (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "/tmp/tmpsf_ju8u4.rkt:6:9: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmpsf_ju8u4.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-upper-case? (string-ref x 0))\n          x\n          (string-append (string-upcase (string-ref x 0)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcrca2eb6.rkt:19:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcrca2eb6.rkt:20:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcrca2eb6.rkt:21:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (snake_to_camel_iter (rest word) (string-append acc (string-upcase (string (second word)))))\n            (snake_to_camel_iter (rest word) (string-append acc (string (first word)))))))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2nkef_8.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2nkef_8.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2nkef_8.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf_zgvbf.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf_zgvbf.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgf_zgvbf.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                         (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                               (string-upcase (substring x 1))\n                               x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe1fx9tmq.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe1fx9tmq.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe1fx9tmq.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                         (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (s) (string-upcase (substring s 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphgwz8sqg.rkt:15:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphgwz8sqg.rkt:16:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphgwz8sqg.rkt:17:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiixidlbh.rkt:15:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiixidlbh.rkt:16:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiixidlbh.rkt:17:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (word)\n                      (if (char-upper-case? (string-ref word 0))\n                          word\n                          (string-append (string-upcase (string-ref word 0))\n                                         (substring word 1))))\n                    (regexp-split #rx\"_\" word))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8m2eo3z.rkt:18:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8m2eo3z.rkt:19:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8m2eo3z.rkt:20:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond [(empty? word) (list->string (reverse acc))]\n          [(char=? (first word) #\\_)\n           (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n          [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8zxcebx.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8zxcebx.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8zxcebx.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (string-empty? word)\n        \"\"\n        (if (string=? (string-take word 1) \"_\")\n            (string-append (string-upcase (string-take word 2)) (helper (string-drop word 2)))\n            (string-append (string-take word 1) (helper (string-drop word 1))))))\n  (helper (string-downcase word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "/tmp/tmpnfqicqlq.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmpnfqicqlq.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42auewas.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42auewas.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42auewas.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplw115wi5.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplw115wi5.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplw115wi5.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map string-upcase\n        (filter (lambda (x) (not (equal? x \"\")))\n                (regexp-split #rx\"_\" word)))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpndrx1n01.rkt:16:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpndrx1n01.rkt:17:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpndrx1n01.rkt:18:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeb6agfdw.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl7ezsdj.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl7ezsdj.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl7ezsdj.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase (substring x 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvn4blag.rkt:15:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvn4blag.rkt:16:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvvn4blag.rkt:17:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (cons (char-upcase (first (rest word))) (rest acc)))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdfibnzv.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdfibnzv.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdfibnzv.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (empty? word)\n        empty\n        (if (char=? (first word) #\\_)\n            (cons (char-upcase (second word))\n                  (helper (rest (rest word))))\n            (cons (first word)\n                  (helper (rest word))))))\n  (helper word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph1j3n7kv.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph1j3n7kv.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph1j3n7kv.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl11obro.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word)\n                   (string-append result (string-upcase (string (second word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2xvt9cbv.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2xvt9cbv.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2xvt9cbv.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ytz4m2d.rkt:16:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ytz4m2d.rkt:17:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ytz4m2d.rkt:18:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map string-upcase (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbpqzksmg.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbpqzksmg.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbpqzksmg.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (eq? (string-length x) 1)\n          x\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoy3tedf9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoy3tedf9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoy3tedf9.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvs0mcmr0.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvs0mcmr0.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvs0mcmr0.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (\u03bb (x) (if (char=? (string-ref x 0) #\\_)\n                                (string-upcase (substring x 1))\n                                x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwztm5290.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwztm5290.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwztm5290.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (string=? x \"_\") \"\" (string-upcase x)))\n                    (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cdh7us.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cdh7us.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cdh7us.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (\u03bb (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mfzfzrm.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mfzfzrm.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mfzfzrm.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (string=? x \"_\") \"\" (string-upcase x)))\n                    (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cdh7us.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cdh7us.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf6cdh7us.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc48bng8k.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "/tmp/tmphd0rplua.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmphd0rplua.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (second word))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhbjrbnr.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhbjrbnr.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhbjrbnr.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbexcrd2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpge9xzkds.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps88hd7fs.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps88hd7fs.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps88hd7fs.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:17:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:18:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgvmdram9.rkt:19:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (if (char-lower-case? (string-ref w 0))\n              (string-upcase w)\n              w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lsncelg.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lsncelg.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lsncelg.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez4nv34u.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez4nv34u.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpez4nv34u.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3hqp5dz9.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (string-take w 1))\n          (string-drop w 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "/tmp/tmp6tl4sywq.rkt:7:26: string-take: unbound identifier\n  in: string-take\n  location...:\n   /tmp/tmp6tl4sywq.rkt:7:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (string=? (substring x 0 1) \"_\")\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwuznryes.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwuznryes.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwuznryes.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-upcase x)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwmkkn0u.rkt:18:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwmkkn0u.rkt:19:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnwmkkn0u.rkt:20:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ytz4m2d.rkt:16:4\nactual:     \"YTHONROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ytz4m2d.rkt:17:4\nactual:     \"YTHONANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ytz4m2d.rkt:18:4\nactual:     \"ROGRAMMINGANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp46kwglgx.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp46kwglgx.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp46kwglgx.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (cond ((string=? word \"\") result)\n          ((string=? (substring word 0 1) \"_\")\n           (snake_to_camel_iter (substring word 1)\n                                (string-append result (string-upcase (substring word 1 1)))))\n          (else (snake_to_camel_iter (substring word 1)\n                                     (string-append result (substring word 0 1))))))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp614yx0xg.rkt:19:4\nactual:     \"pythonprogram\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp614yx0xg.rkt:20:4\nactual:     \"pythonlanguage\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp614yx0xg.rkt:21:4\nactual:     \"programminglanguage\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_4368f8t.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps88hd7fs.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps88hd7fs.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps88hd7fs.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4vl70k8.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4vl70k8.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4vl70k8.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (string-contains word #\\_)\n        (string-append\n         (string-upcase (substring word 0 (string-index word #\\_)))\n         (substring word (+ 1 (string-index word #\\_))))\n        word))\n  (helper word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmpp38udpw8.rkt:6:9: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmpp38udpw8.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (null? word)\n        '()\n        (if (equal? (first word) #\\_)\n            (cons (char-upcase (second word)) (helper (rest (rest word))))\n            (cons (first word) (helper (rest word))))))\n  (string-append (list->string (helper (string->list word))) \" \"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7egt9pqu.rkt:18:4\nactual:     \"pythonProgram \"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7egt9pqu.rkt:19:4\nactual:     \"pythonLanguage \"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7egt9pqu.rkt:20:4\nactual:     \"programmingLanguage \"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (regexp-split #rx\"_\" word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucj7oxyv.rkt:14:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucj7oxyv.rkt:15:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucj7oxyv.rkt:16:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk87jw6sw.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk87jw6sw.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk87jw6sw.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw0dx4ad8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                        (string-upcase (substring x 1))\n                        x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7s14_nw.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-capitalize x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "/tmp/tmpw5zj5oti.rkt:9:15: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpw5zj5oti.rkt:9:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (empty? word)\n        empty\n        (if (char=? (first word) #\\_)\n            (cons (char-upcase (second word)) (helper (rest (rest word))))\n            (cons (first word) (helper (rest word))))))\n  (string-&gt;symbol (string-&gt;list (symbol-&gt;string (helper (string-&gt;symbol word))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "/tmp/tmpcmoko3bp.rkt:11:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? x \"_\")\n          \"\"\n          (string-upcase x)))\n    (string-split word \"_\"))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdjlc17yu.rkt:19:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdjlc17yu.rkt:20:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdjlc17yu.rkt:21:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map string-upcase\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmy3hexe4.rkt:15:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmy3hexe4.rkt:16:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmy3hexe4.rkt:17:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (cond\n        [(string=? x \"_\") \"\"]\n        [(string=? (substring x 0 1) \"_\") (string-upcase (substring x 1))]\n        [else x]))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvkgh3k0z.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvkgh3k0z.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvkgh3k0z.rkt:22:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:15:4\nactual:     \"PYTHONPROGRAM\"\nexpected:   \"PythonProgram\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:16:4\nactual:     \"PYTHONLANGUAGE\"\nexpected:   \"PythonLanguage\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdjnzl26.rkt:17:4\nactual:     \"PROGRAMMINGLANGUAGE\"\nexpected:   \"ProgrammingLanguage\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsiig4qgj.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsiig4qgj.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsiig4qgj.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkke_6it.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkke_6it.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkke_6it.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-capitalize x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "/tmp/tmp7k_14lt9.rkt:10:11: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmp7k_14lt9.rkt:10:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvs0mcmr0.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvs0mcmr0.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvs0mcmr0.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb8_m5xm.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb8_m5xm.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb8_m5xm.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char-upper-case? (string-ref x 0))\n              x\n              (string-append (string-upcase (string-ref x 0))\n                             (substring x 1))))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi0qi4cqd.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi0qi4cqd.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi0qi4cqd.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          (string-append \"_\" x)\n          x))\n    (map string-upcase\n         (string-split word #\\_)))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjq1x_mt7.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjq1x_mt7.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjq1x_mt7.rkt:22:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-capitalize x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "/tmp/tmpw5zj5oti.rkt:9:15: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpw5zj5oti.rkt:9:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpil3u_h9r.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n      ]\n      [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6h_7qqjw.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6h_7qqjw.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6h_7qqjw.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx2nqkik3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87h42mh2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87h42mh2.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87h42mh2.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4adee1g3.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond [(empty? word) (reverse acc)]\n          [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest (rest word))))]\n          [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwlselbb.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwlselbb.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfwlselbb.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (cond ((empty? word) '())\n          ((char=? (first word) #\\_) (cons (char-upcase (second word)) (helper (rest (rest word)))))\n          (else (cons (first word) (helper (rest word))))))\n  (string-&gt;symbol (string-join (helper (string-&gt;list word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "/tmp/tmpyfouaaml.rkt:9:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58xlw5wh.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (empty? word)\n        empty\n        (if (char=? (first word) #\\_)\n            (cons (char-upcase (second word)) (helper (rest (rest word))))\n            (cons (first word) (helper (rest word))))))\n  (helper word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcb8dkt9e.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcb8dkt9e.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcb8dkt9e.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_)\n           (loop (rest word) (cons (string-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicuyt6wo.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicuyt6wo.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicuyt6wo.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (string-&gt;list (string-join (reverse acc))) ]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (string-upcase (list (second word))) (rest acc)))]\n      [else (snake_to_camel_iter (rest word) (cons (list (first word)) acc))]))\n  (string-&gt;list (string-join (snake_to_camel_iter (string-&gt;list word) '()))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "/tmp/tmpj12ljhfz.rkt:9:78: read-syntax: missing `]` to close preceding `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x)\n                      (if (equal? (string-ref x 0) #\\_)\n                          (string-upcase (substring x 1))\n                          x))\n                    (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6z01x8d.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6z01x8d.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6z01x8d.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegfyg5d8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (string-take w 1)) (string-drop w 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmp19mdhv_0.rkt:6:36: string-take: unbound identifier\n  in: string-take\n  location...:\n   /tmp/tmp19mdhv_0.rkt:6:36\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5he17hs8.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              x\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (second word)) (rest acc)))\n            (helper (rest word) (cons (first word) acc)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmu3xosl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_program\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmu3xosl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python_language\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqmu3xosl.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"programming_language\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 0 1))\n      (substring w 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"python_program\") \"PythonProgram\")\n    (check-equal? (candidate \"python_language\") \"PythonLanguage\")\n    (check-equal? (candidate \"programming_language\") \"ProgrammingLanguage\")\n))\n\n(test-humaneval)",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ytwptgp.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ytwptgp.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6ytwptgp.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}