{
  "name": "mbpp_726_multiply_elements",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n(define (multiply_elements test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply_elements))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 5 35 56 80))\n    (check-equal? (candidate (list 2 4 5 6 7)) (list 8 20 30 42))\n    (check-equal? (candidate (list 12 13 14 9 15)) (list 156 182 126 135))\n    (check-equal? (candidate (list 12)) (list ))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_tup) empty]\n    [else (cons (* (first test_tup) (second test_tup))\n                (multiply_elements (rest (rest test_tup))))]))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup))\n            (multiply_elements (cdr test_tup)))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup))\n            (multiply_elements (cdr test_tup)))))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else\n     (cons (* (first test_tup) (second test_tup))\n           (multiply_elements (rest test_tup)))]))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup))\n            (multiply_elements (cdr test_tup)))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup))\n            (multiply_elements (cdr test_tup)))))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (* (first test_tup) (second test_tup)) (multiply_elements (rest test_tup)))]))\n",
    "  (define (multiply_elements_iter test_tup result_tup)\n    (if (null? test_tup)\n        result_tup\n        (multiply_elements_iter (cdr test_tup) (append result_tup (list (* (car test_tup) (car (cdr test_tup))))))))\n  (multiply_elements_iter test_tup '()))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (* (first test_tup) (second test_tup)) (multiply_elements (rest test_tup)))]))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup)) (multiply_elements (cdr test_tup)))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup)) (multiply_elements (cdr test_tup)))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup)) (multiply_elements (cdr test_tup)))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup))\n            (multiply_elements (cdr test_tup)))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup))\n            (multiply_elements (cdr test_tup)))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (car (cdr test_tup)))\n            (multiply_elements (cdr test_tup)))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup)) (multiply_elements (cdr test_tup)))))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (* (first test_tup) (second test_tup)) (multiply_elements (rest test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (* (first test_tup) (second test_tup)) (multiply_elements (rest test_tup)))]))\n",
    "  (define (multiply_elements_iter test_tup result_tup)\n    (if (null? test_tup)\n        result_tup\n        (multiply_elements_iter (cdr test_tup) (append result_tup (list (* (car test_tup) (cadr test_tup)))))))\n  (multiply_elements_iter test_tup '()))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (* (car test_tup) (cadr test_tup))\n            (multiply_elements (cdr test_tup)))))\n"
  ]
}