{
  "name": "mbpp_796_return_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write function to find the sum of all items in the given dictionary.\n(define (return_sum dict)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-equal? (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600)\n    (check-equal? (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88)\n    (check-equal? (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (apply + (map cdr dict)))\n",
    "  (cond\n    [(empty? dict) 0]\n    [else (+ (dict-ref dict (first (dict-keys dict)))\n             (return_sum (dict-remove dict (first (dict-keys dict)))))]))\n",
    "  (let ([sum 0])\n    (for ([(key val) dict])\n      (set! sum (+ sum val)))\n    sum))\n",
    "  (cond\n    [(empty? dict) 0]\n    [else (+ (cdr (first dict)) (return_sum (rest dict)))]))\n",
    "  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n",
    "  (cond\n    [(empty? dict) 0]\n    [else (+ (first (first dict)) (return_sum (rest dict)))]))\n",
    "  (cond\n    [(empty? dict) 0]\n    [else (+ (dict-ref dict (first (dict-keys dict))) (return_sum (dict-remove dict (first (dict-keys dict)))))]))\n",
    "  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n",
    "  (define (return_sum_iter dict sum)\n    (cond\n      [(empty? dict) sum]\n      [else (return_sum_iter (rest dict) (+ (second dict) sum))]))\n  (return_sum_iter dict 0))\n",
    "  (cond\n    [(empty? dict) 0]\n    [else (+ (dict-ref dict (first (dict-keys dict)))\n             (return_sum (dict-remove dict (first (dict-keys dict)))))]))\n",
    "  (letrec ([sum 0]\n           [iterate (lambda (dict)\n                      (cond [(empty? dict) sum]\n                            [else (begin (set! sum (+ sum (dict-ref dict (first (dict-keys dict)))))\n                                        (iterate (dict-remove dict (first (dict-keys dict)))))]))])\n    (iterate dict)))\n",
    "  (if (null? dict)\n      0\n      (+ (car (cdr (car dict)))\n         (return_sum (cdr dict)))))\n",
    "  (cond\n    [(empty? dict) 0]\n    [else (+ (dict-ref dict (first (dict-keys dict)))\n             (return_sum (dict-remove dict (first (dict-keys dict)))))]))\n",
    "  (cond\n    [(empty? dict) 0]\n    [else (+ (first dict) (return_sum (rest dict)))]))\n",
    "  (cond\n    [(empty? dict) 0]\n    [else (+ (first (first dict)) (return_sum (rest dict)))]))\n",
    "  (cond [(empty? dict) 0]\n        [else (+ (dict-ref dict (first (dict-keys dict)))\n                 (return_sum (dict-remove dict (first (dict-keys dict)))))]))\n",
    "  (define (iter sum key)\n    (if (null? key)\n        sum\n        (iter (+ sum (dict key)) (cdr key))))\n  (iter 0 (dict-keys dict)))\n",
    "  (cond\n    [(empty? dict) 0]\n    [else (+ (cdr (first dict)) (return_sum (rest dict)))]))\n",
    "  (for/fold ([sum 0]) ([key (in-dict dict)] [value (in-dict dict)])\n    (+ sum value)))\n",
    "  (let ([sum 0])\n    (for ([(k v) dict])\n      (set! sum (+ sum v)))\n    sum))\n"
  ]
}