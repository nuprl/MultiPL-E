{
  "name": "mbpp_799_left_rotate",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n(define (left_rotate n d)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate left_rotate))\n    (check-equal? (candidate 16 2) 64)\n    (check-equal? (candidate 10 2) 40)\n    (check-equal? (candidate 99 3) 792)\n    (check-equal? (candidate 99 3) 792)\n    (check-equal? (candidate 1 3) 8)\n    (check-equal? (candidate 5 3) 40)\n    (check-equal? (candidate 29 3) 232)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift -1 d)) (bitwise-arithmetic-shift -1 32))])\n    (bitwise-arithmetic-shift (bitwise-ior (bitwise-arithmetic-shift n d) (bitwise-and n mask)) (- 32 d))))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (logand (lsh n d) #xffffffff))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift -1 d)) (bitwise-arithmetic-shift -1 32))])\n    (bitwise-ior (bitwise-arithmetic-shift n d) (bitwise-and n mask))))\n",
    "  (let ((mask (bitwise-not (bitwise-arithmetic-shift -1 d))))\n    (bitwise-arithmetic-shift (bitwise-arithmetic-shift n d) (- 32 d))))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (logxor (ash n d) (ash n (- 32 d))))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift -1 d))\n                           (bitwise-arithmetic-shift -1 32))])\n    (bitwise-arithmetic-shift (bitwise-ior (bitwise-arithmetic-shift n d)\n                                           (bitwise-arithmetic-shift n (- 32 d)))\n                              (- 32 d))))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift -1 d))\n                           (bitwise-arithmetic-shift -1 31))])\n    (bitwise-arithmetic-shift (bitwise-ior (bitwise-arithmetic-shift n d)\n                                           (bitwise-and n mask))\n                              (- 32 d))))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift -1 d)) (bitwise-arithmetic-shift -1 32))])\n    (bitwise-arithmetic-shift (bitwise-ior (bitwise-arithmetic-shift n d) (bitwise-and n mask)) (- 32 d))))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (logand (lsh n d) #xffffffff))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-arithmetic-shift -1 d))\n                           (bitwise-arithmetic-shift -1 32))])\n    (bitwise-ior (bitwise-arithmetic-shift n d)\n                 (bitwise-arithmetic-shift (bitwise-and n mask) (- 32 d)))))\n",
    "  (logand (lsh n d) (lognot (lsh -1 d))))\n",
    "  (bitwise-arithmetic-shift n (- d)))\n"
  ]
}