{
  "name": "mbpp_273_substract_elements",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n(define (substract_elements test_tup1 test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-equal? (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13))\n    (check-equal? (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13))\n    (check-equal? (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond [(empty? test_tup1) empty]\n        [else (cons (- (first test_tup1) (first test_tup2))\n                    (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (and (pair? test_tup1) (pair? test_tup2))\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))\n      '()))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (null? test_tup1)\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (- (car test_tup1) (car test_tup2))\n            (substract_elements (cdr test_tup1) (cdr test_tup2)))))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (list (- (car test_tup1) (car test_tup2))\n        (- (cadr test_tup1) (cadr test_tup2))\n        (- (caddr test_tup1) (caddr test_tup2))))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (- (first test_tup1) (first test_tup2))\n                (substract_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (- (first test_tup1) (first test_tup2)) (substract_elements (rest test_tup1) (rest test_tup2)))]))\n"
  ]
}